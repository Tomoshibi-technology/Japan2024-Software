
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  080031d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080031d4  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c4a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af1  00000000  00000000  00029c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221bb  00000000  00000000  0002c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fdb  00000000  00000000  0004e77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d8b  00000000  00000000  00058756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d4e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  0011d534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800316c 	.word	0x0800316c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800316c 	.word	0x0800316c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fb9c 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f832 	bl	8000578 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f918 	bl	8000748 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000518:	f000 f8f6 	bl	8000708 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800051c:	f000 f896 	bl	800064c <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000520:	f000 f8c4 	bl	80006ac <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2102      	movs	r1, #2
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <main+0x5c>)
 800052a:	f001 fa39 	bl	80019a0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart3, &receive_value, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	490d      	ldr	r1, [pc, #52]	; (8000568 <main+0x60>)
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <main+0x64>)
 8000534:	f002 f88f 	bl	8002656 <HAL_UART_Receive_DMA>
	  angle_IR = (receive_value - 100) * 5;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <main+0x60>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3b64      	subs	r3, #100	; 0x64
 800053e:	b29b      	uxth	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	4413      	add	r3, r2
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x68>)
 800054a:	801a      	strh	r2, [r3, #0]
	  if(angle_IR <= 360){
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <main+0x68>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000554:	d8eb      	bhi.n	800052e <main+0x26>
		  servo0.exe_servo(angle_IR);
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <main+0x68>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <main+0x6c>)
 800055e:	f000 f9ed 	bl	800093c <_ZN9STS_SERVO9exe_servoEt>
	  HAL_UART_Receive_DMA(&huart3, &receive_value, 1);
 8000562:	e7e4      	b.n	800052e <main+0x26>
 8000564:	40020000 	.word	0x40020000
 8000568:	20000160 	.word	0x20000160
 800056c:	2000006c 	.word	0x2000006c
 8000570:	20000162 	.word	0x20000162
 8000574:	20000110 	.word	0x20000110

08000578 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fde8 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <_Z18SystemClock_Configv+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <_Z18SystemClock_Configv+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <_Z18SystemClock_Configv+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <_Z18SystemClock_Configv+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <_Z18SystemClock_Configv+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <_Z18SystemClock_Configv+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fcb5 	bl	8001f5c <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000602:	f000 f8f1 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f9d7 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000636:	f000 f8d7 	bl	80007e8 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000658:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <_ZL19MX_USART2_UART_Initv+0x5c>)
 800065a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000670:	220c      	movs	r2, #12
 8000672:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000682:	f001 ff09 	bl	8002498 <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8000696:	f000 f8a7 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40004400 	.word	0x40004400
 80006a8:	000f4240 	.word	0x000f4240

080006ac <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <_ZL19MX_USART3_UART_Initv+0x58>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <_ZL19MX_USART3_UART_Initv+0x54>)
 80006e4:	f001 fed8 	bl	8002498 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80006f8:	f000 f876 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000006c 	.word	0x2000006c
 8000704:	40004800 	.word	0x40004800

08000708 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <_ZL11MX_DMA_Initv+0x3c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <_ZL11MX_DMA_Initv+0x3c>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <_ZL11MX_DMA_Initv+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200c      	movs	r0, #12
 8000730:	f000 fbfb 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000734:	200c      	movs	r0, #12
 8000736:	f000 fc14 	bl	8000f62 <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <_ZL12MX_GPIO_Initv+0x98>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <_ZL12MX_GPIO_Initv+0x9c>)
 80007b8:	f001 f8f2 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 80007bc:	2302      	movs	r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <_ZL12MX_GPIO_Initv+0x9c>)
 80007d4:	f000 ff50 	bl	8001678 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d118      	bne.n	8000836 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080a:	4293      	cmp	r3, r2
 800080c:	d113      	bne.n	8000836 <_Z41__static_initialization_and_destruction_0ii+0x42>
STS_SERVO servo0(0, &huart2);
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000810:	2100      	movs	r1, #0
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000814:	f000 f826 	bl	8000864 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
STS_SERVO servo1(1, &huart2);
 8000818:	4a09      	ldr	r2, [pc, #36]	; (8000840 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800081a:	2101      	movs	r1, #1
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800081e:	f000 f821 	bl	8000864 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
STS_SERVO servo2(2, &huart2);
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000824:	2102      	movs	r1, #2
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000828:	f000 f81c 	bl	8000864 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
STS_SERVO servo3(3, &huart2);
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800082e:	2103      	movs	r1, #3
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000832:	f000 f817 	bl	8000864 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000028 	.word	0x20000028
 8000844:	20000110 	.word	0x20000110
 8000848:	20000124 	.word	0x20000124
 800084c:	20000138 	.word	0x20000138
 8000850:	2000014c 	.word	0x2000014c

08000854 <_GLOBAL__sub_I_huart2>:
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
 8000858:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ffc9 	bl	80007f4 <_Z41__static_initialization_and_destruction_0ii>
 8000862:	bd80      	pop	{r7, pc}

08000864 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>:
 *      Author: tomoh
 */

#include "servo.h"

STS_SERVO::STS_SERVO(uint8_t id, UART_HandleTypeDef *uart)
 8000864:	b490      	push	{r4, r7}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	460b      	mov	r3, r1
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	72fb      	strb	r3, [r7, #11]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef+0x34>)
 8000876:	461c      	mov	r4, r3
 8000878:	4613      	mov	r3, r2
 800087a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087c:	c407      	stmia	r4!, {r0, r1, r2}
 800087e:	7023      	strb	r3, [r4, #0]
{
    servo_array[2] = id;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	7afa      	ldrb	r2, [r7, #11]
 8000884:	709a      	strb	r2, [r3, #2]
    UART = uart;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	611a      	str	r2, [r3, #16]
}
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bc90      	pop	{r4, r7}
 8000896:	4770      	bx	lr
 8000898:	08003184 	.word	0x08003184

0800089c <_ZN9STS_SERVO12set_positionEt>:

void STS_SERVO::set_position(uint16_t degree)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
	degree = 360 - degree;
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80008ae:	807b      	strh	r3, [r7, #2]
    uint16_t bit_degree = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	81fb      	strh	r3, [r7, #14]
    if (degree > 360)
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80008ba:	d902      	bls.n	80008c2 <_ZN9STS_SERVO12set_positionEt+0x26>
    {
        degree = 360;
 80008bc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80008c0:	807b      	strh	r3, [r7, #2]
    }
    bit_degree = (degree << 12) / 360;
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	031b      	lsls	r3, r3, #12
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <_ZN9STS_SERVO12set_positionEt+0x5c>)
 80008c8:	fb82 1203 	smull	r1, r2, r2, r3
 80008cc:	441a      	add	r2, r3
 80008ce:	1212      	asrs	r2, r2, #8
 80008d0:	17db      	asrs	r3, r3, #31
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
    servo_array[6] = bit_degree;
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	719a      	strb	r2, [r3, #6]
    servo_array[7] = bit_degree >> 8;
 80008de:	89fb      	ldrh	r3, [r7, #14]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	71da      	strb	r2, [r3, #7]
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	b60b60b7 	.word	0xb60b60b7

080008fc <_ZN9STS_SERVO13calc_checksumEv>:

void STS_SERVO::calc_checksum()
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i <= 11; i++)
 8000908:	2302      	movs	r3, #2
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b0b      	cmp	r3, #11
 8000910:	d809      	bhi.n	8000926 <_ZN9STS_SERVO13calc_checksumEv+0x2a>
    {
        checksum += servo_array[i];
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	5cd2      	ldrb	r2, [r2, r3]
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	4413      	add	r3, r2
 800091c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i <= 11; i++)
 800091e:	7bbb      	ldrb	r3, [r7, #14]
 8000920:	3301      	adds	r3, #1
 8000922:	73bb      	strb	r3, [r7, #14]
 8000924:	e7f2      	b.n	800090c <_ZN9STS_SERVO13calc_checksumEv+0x10>
    }
    servo_array[12] = ~checksum;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	43db      	mvns	r3, r3
 800092a:	b2da      	uxtb	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	731a      	strb	r2, [r3, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_ZN9STS_SERVO9exe_servoEt>:

void STS_SERVO::exe_servo(uint16_t degree)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
    set_position(degree);
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	4619      	mov	r1, r3
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ffa5 	bl	800089c <_ZN9STS_SERVO12set_positionEt>
    calc_checksum();
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffd2 	bl	80008fc <_ZN9STS_SERVO13calc_checksumEv>
    HAL_UART_Transmit(UART, servo_array, 13, 50);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6918      	ldr	r0, [r3, #16]
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	220d      	movs	r2, #13
 8000962:	f001 fde6 	bl	8002532 <HAL_UART_Transmit>
    HAL_Delay(5);
 8000966:	2005      	movs	r0, #5
 8000968:	f000 f9e0 	bl	8000d2c <HAL_Delay>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <HAL_UART_MspInit+0x184>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12c      	bne.n	8000a40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	4b58      	ldr	r3, [pc, #352]	; (8000b4c <HAL_UART_MspInit+0x188>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <HAL_UART_MspInit+0x188>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <HAL_UART_MspInit+0x188>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	4b51      	ldr	r3, [pc, #324]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a50      	ldr	r2, [pc, #320]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b4e      	ldr	r3, [pc, #312]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4845      	ldr	r0, [pc, #276]	; (8000b50 <HAL_UART_MspInit+0x18c>)
 8000a3a:	f000 fe1d 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a3e:	e07f      	b.n	8000b40 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a43      	ldr	r2, [pc, #268]	; (8000b54 <HAL_UART_MspInit+0x190>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d17a      	bne.n	8000b40 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a3e      	ldr	r2, [pc, #248]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_UART_MspInit+0x188>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4827      	ldr	r0, [pc, #156]	; (8000b58 <HAL_UART_MspInit+0x194>)
 8000aba:	f000 fddd 	bl	8001678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4820      	ldr	r0, [pc, #128]	; (8000b5c <HAL_UART_MspInit+0x198>)
 8000adc:	f000 fdcc 	bl	8001678 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000ae2:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_UART_MspInit+0x1a0>)
 8000ae4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000ae8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b26:	f000 fa37 	bl	8000f98 <HAL_DMA_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8000b30:	f7ff fe5a 	bl	80007e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_UART_MspInit+0x19c>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40004800 	.word	0x40004800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	200000b0 	.word	0x200000b0
 8000b64:	40026028 	.word	0x40026028

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f89a 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <DMA1_Stream1_IRQHandler+0x10>)
 8000bc2:	f000 faef 	bl	80011a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000b0 	.word	0x200000b0

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 fa77 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fc6f 	bl	8000508 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c38:	080031c8 	.word	0x080031c8
  ldr r2, =_sbss
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c40:	20000168 	.word	0x20000168

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f94f 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe7a 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f967 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f92f 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000164 	.word	0x20000164

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000164 	.word	0x20000164

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff feb6 	bl	8000d14 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e099      	b.n	80010e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd4:	e00f      	b.n	8000ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd6:	f7ff fe9d 	bl	8000d14 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d908      	bls.n	8000ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e078      	b.n	80010e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e8      	bne.n	8000fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_DMA_Init+0x158>)
 8001010:	4013      	ands	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	2b04      	cmp	r3, #4
 800104e:	d107      	bne.n	8001060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4313      	orrs	r3, r2
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4313      	orrs	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4313      	orrs	r3, r2
 8001080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2b04      	cmp	r3, #4
 8001088:	d117      	bne.n	80010ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4313      	orrs	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00e      	beq.n	80010ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa6f 	bl	8001580 <DMA_CheckFifoParam>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010b6:	2301      	movs	r3, #1
 80010b8:	e016      	b.n	80010e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa26 	bl	8001514 <DMA_CalcBaseAndBitshift>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	223f      	movs	r2, #63	; 0x3f
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	f010803f 	.word	0xf010803f

080010f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_DMA_Start_IT+0x26>
 8001116:	2302      	movs	r3, #2
 8001118:	e040      	b.n	800119c <HAL_DMA_Start_IT+0xa8>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d12f      	bne.n	800118e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2202      	movs	r2, #2
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f9b8 	bl	80014b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	223f      	movs	r2, #63	; 0x3f
 800114e:	409a      	lsls	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0216 	orr.w	r2, r2, #22
 8001162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0208 	orr.w	r2, r2, #8
 800117a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e005      	b.n	800119a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001196:	2302      	movs	r3, #2
 8001198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800119a:	7dfb      	ldrb	r3, [r7, #23]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011b0:	4b8e      	ldr	r3, [pc, #568]	; (80013ec <HAL_DMA_IRQHandler+0x248>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a8e      	ldr	r2, [pc, #568]	; (80013f0 <HAL_DMA_IRQHandler+0x24c>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0a9b      	lsrs	r3, r3, #10
 80011bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ce:	2208      	movs	r2, #8
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01a      	beq.n	8001210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0204 	bic.w	r2, r2, #4
 80011f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2208      	movs	r2, #8
 80011fe:	409a      	lsls	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	f043 0201 	orr.w	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2201      	movs	r2, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d012      	beq.n	8001246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	2201      	movs	r2, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f043 0202 	orr.w	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	2204      	movs	r2, #4
 800124c:	409a      	lsls	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d012      	beq.n	800127c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00b      	beq.n	800127c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	2204      	movs	r2, #4
 800126a:	409a      	lsls	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	f043 0204 	orr.w	r2, r3, #4
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2210      	movs	r2, #16
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d043      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d03c      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	2210      	movs	r2, #16
 80012a0:	409a      	lsls	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d018      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d024      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
 80012d2:	e01f      	b.n	8001314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4798      	blx	r3
 80012e4:	e016      	b.n	8001314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0208 	bic.w	r2, r2, #8
 8001302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2220      	movs	r2, #32
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808f 	beq.w	8001444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8087 	beq.w	8001444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	2220      	movs	r2, #32
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b05      	cmp	r3, #5
 800134c:	d136      	bne.n	80013bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0216 	bic.w	r2, r2, #22
 800135c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <HAL_DMA_IRQHandler+0x1da>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0208 	bic.w	r2, r2, #8
 800138c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	223f      	movs	r2, #63	; 0x3f
 8001394:	409a      	lsls	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d07e      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
        }
        return;
 80013ba:	e079      	b.n	80014b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01d      	beq.n	8001406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10d      	bne.n	80013f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d031      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
 80013e8:	e02c      	b.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000
 80013f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
 8001404:	e01e      	b.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10f      	bne.n	8001434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0210 	bic.w	r2, r2, #16
 8001422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d022      	beq.n	800149e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2205      	movs	r2, #5
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3301      	adds	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	d307      	bcc.n	800148c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f2      	bne.n	8001470 <HAL_DMA_IRQHandler+0x2cc>
 800148a:	e000      	b.n	800148e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800148c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
 80014ae:	e000      	b.n	80014b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80014b0:	bf00      	nop
    }
  }
}
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b40      	cmp	r3, #64	; 0x40
 80014e4:	d108      	bne.n	80014f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014f6:	e007      	b.n	8001508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b10      	subs	r3, #16
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <DMA_CalcBaseAndBitshift+0x64>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <DMA_CalcBaseAndBitshift+0x68>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d909      	bls.n	8001556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	1d1a      	adds	r2, r3, #4
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	659a      	str	r2, [r3, #88]	; 0x58
 8001554:	e007      	b.n	8001566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	aaaaaaab 	.word	0xaaaaaaab
 800157c:	080031ac 	.word	0x080031ac

08001580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11f      	bne.n	80015da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d856      	bhi.n	800164e <DMA_CheckFifoParam+0xce>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <DMA_CheckFifoParam+0x28>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015cb 	.word	0x080015cb
 80015b0:	080015b9 	.word	0x080015b9
 80015b4:	0800164f 	.word	0x0800164f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d046      	beq.n	8001652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c8:	e043      	b.n	8001652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015d2:	d140      	bne.n	8001656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d8:	e03d      	b.n	8001656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e2:	d121      	bne.n	8001628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d837      	bhi.n	800165a <DMA_CheckFifoParam+0xda>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <DMA_CheckFifoParam+0x70>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001601 	.word	0x08001601
 80015f4:	08001607 	.word	0x08001607
 80015f8:	08001601 	.word	0x08001601
 80015fc:	08001619 	.word	0x08001619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
      break;
 8001604:	e030      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d025      	beq.n	800165e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001616:	e022      	b.n	800165e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001620:	d11f      	bne.n	8001662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001626:	e01c      	b.n	8001662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d903      	bls.n	8001636 <DMA_CheckFifoParam+0xb6>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d003      	beq.n	800163c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001634:	e018      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
      break;
 800163a:	e015      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      break;
 800164c:	e00b      	b.n	8001666 <DMA_CheckFifoParam+0xe6>
      break;
 800164e:	bf00      	nop
 8001650:	e00a      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e008      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001656:	bf00      	nop
 8001658:	e006      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
 800165c:	e004      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 800165e:	bf00      	nop
 8001660:	e002      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;   
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001666:	bf00      	nop
    }
  } 
  
  return status; 
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e165      	b.n	8001960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8154 	bne.w	800195a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d005      	beq.n	80016ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d130      	bne.n	800172c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0201 	and.w	r2, r3, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b03      	cmp	r3, #3
 8001736:	d017      	beq.n	8001768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d123      	bne.n	80017bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0203 	and.w	r2, r3, #3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80ae 	beq.w	800195a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_GPIO_Init+0x300>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a5c      	ldr	r2, [pc, #368]	; (8001978 <HAL_GPIO_Init+0x300>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_GPIO_Init+0x300>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_GPIO_Init+0x304>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	; (8001980 <HAL_GPIO_Init+0x308>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x21a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <HAL_GPIO_Init+0x30c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x216>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4d      	ldr	r2, [pc, #308]	; (8001988 <HAL_GPIO_Init+0x310>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x212>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_GPIO_Init+0x314>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x20e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4b      	ldr	r2, [pc, #300]	; (8001990 <HAL_GPIO_Init+0x318>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x20a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_GPIO_Init+0x31c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x206>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a49      	ldr	r2, [pc, #292]	; (8001998 <HAL_GPIO_Init+0x320>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x202>
 8001876:	2306      	movs	r3, #6
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800187a:	2307      	movs	r3, #7
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 8001892:	2300      	movs	r3, #0
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a4:	4935      	ldr	r1, [pc, #212]	; (800197c <HAL_GPIO_Init+0x304>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_GPIO_Init+0x324>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a31      	ldr	r2, [pc, #196]	; (800199c <HAL_GPIO_Init+0x324>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_GPIO_Init+0x324>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a26      	ldr	r2, [pc, #152]	; (800199c <HAL_GPIO_Init+0x324>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_GPIO_Init+0x324>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_GPIO_Init+0x324>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_GPIO_Init+0x324>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_GPIO_Init+0x324>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	f67f ae96 	bls.w	8001694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40013800 	.word	0x40013800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40021400 	.word	0x40021400
 8001998:	40021800 	.word	0x40021800
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0cc      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d90c      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0b8      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	494d      	ldr	r1, [pc, #308]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d044      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e067      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4934      	ldr	r1, [pc, #208]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f926 	bl	8000d14 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f922 	bl	8000d14 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d20c      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e032      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b5a:	f000 f855 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	490a      	ldr	r1, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f886 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08003194 	.word	0x08003194
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	080031a4 	.word	0x080031a4

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be4:	f7ff ffdc 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	080031a4 	.word	0x080031a4

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b0a6      	sub	sp, #152	; 0x98
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2e:	4bc8      	ldr	r3, [pc, #800]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	f200 817e 	bhi.w	8001f38 <HAL_RCC_GetSysClockFreq+0x330>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c79 	.word	0x08001c79
 8001c48:	08001f39 	.word	0x08001f39
 8001c4c:	08001f39 	.word	0x08001f39
 8001c50:	08001f39 	.word	0x08001f39
 8001c54:	08001c81 	.word	0x08001c81
 8001c58:	08001f39 	.word	0x08001f39
 8001c5c:	08001f39 	.word	0x08001f39
 8001c60:	08001f39 	.word	0x08001f39
 8001c64:	08001c89 	.word	0x08001c89
 8001c68:	08001f39 	.word	0x08001f39
 8001c6c:	08001f39 	.word	0x08001f39
 8001c70:	08001f39 	.word	0x08001f39
 8001c74:	08001df3 	.word	0x08001df3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4bb6      	ldr	r3, [pc, #728]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001c7e:	e15f      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c80:	4bb5      	ldr	r3, [pc, #724]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c86:	e15b      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c88:	4bb1      	ldr	r3, [pc, #708]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c94:	4bae      	ldr	r3, [pc, #696]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d031      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001caa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	667b      	str	r3, [r7, #100]	; 0x64
 8001cb8:	4ba7      	ldr	r3, [pc, #668]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cbe:	462a      	mov	r2, r5
 8001cc0:	fb03 f202 	mul.w	r2, r3, r2
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	4aa2      	ldr	r2, [pc, #648]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	fba1 1202 	umull	r1, r2, r1, r2
 8001cd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001cd8:	460a      	mov	r2, r1
 8001cda:	67ba      	str	r2, [r7, #120]	; 0x78
 8001cdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cde:	4413      	add	r3, r2
 8001ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cf0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001cf4:	f7fe fa86 	bl	8000204 <__aeabi_uldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d02:	e064      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d0e:	657a      	str	r2, [r7, #84]	; 0x54
 8001d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d18:	2300      	movs	r3, #0
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001d20:	4622      	mov	r2, r4
 8001d22:	462b      	mov	r3, r5
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0159      	lsls	r1, r3, #5
 8001d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d32:	0150      	lsls	r0, r2, #5
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4621      	mov	r1, r4
 8001d3a:	1a51      	subs	r1, r2, r1
 8001d3c:	6139      	str	r1, [r7, #16]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	eb63 0301 	sbc.w	r3, r3, r1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d52:	4659      	mov	r1, fp
 8001d54:	018b      	lsls	r3, r1, #6
 8001d56:	4651      	mov	r1, sl
 8001d58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	018a      	lsls	r2, r1, #6
 8001d60:	4651      	mov	r1, sl
 8001d62:	ebb2 0801 	subs.w	r8, r2, r1
 8001d66:	4659      	mov	r1, fp
 8001d68:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d80:	4690      	mov	r8, r2
 8001d82:	4699      	mov	r9, r3
 8001d84:	4623      	mov	r3, r4
 8001d86:	eb18 0303 	adds.w	r3, r8, r3
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	eb49 0303 	adc.w	r3, r9, r3
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da0:	4629      	mov	r1, r5
 8001da2:	028b      	lsls	r3, r1, #10
 8001da4:	4621      	mov	r1, r4
 8001da6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001daa:	4621      	mov	r1, r4
 8001dac:	028a      	lsls	r2, r1, #10
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db6:	2200      	movs	r2, #0
 8001db8:	643b      	str	r3, [r7, #64]	; 0x40
 8001dba:	647a      	str	r2, [r7, #68]	; 0x44
 8001dbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dc0:	f7fe fa20 	bl	8000204 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	0c1b      	lsrs	r3, r3, #16
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001de0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001df0:	e0a6      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d02a      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	099b      	lsrs	r3, r3, #6
 8001e10:	2200      	movs	r2, #0
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e20:	fb03 f201 	mul.w	r2, r3, r1
 8001e24:	2300      	movs	r3, #0
 8001e26:	fb00 f303 	mul.w	r3, r0, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e2e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e32:	677a      	str	r2, [r7, #116]	; 0x74
 8001e34:	460a      	mov	r2, r1
 8001e36:	673a      	str	r2, [r7, #112]	; 0x70
 8001e38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e3a:	4413      	add	r3, r2
 8001e3c:	677b      	str	r3, [r7, #116]	; 0x74
 8001e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e42:	2200      	movs	r2, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
 8001e46:	637a      	str	r2, [r7, #52]	; 0x34
 8001e48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e50:	f7fe f9d8 	bl	8000204 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e5e:	e05b      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	2200      	movs	r2, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e72:	623b      	str	r3, [r7, #32]
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	464b      	mov	r3, r9
 8001e80:	f04f 0000 	mov.w	r0, #0
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	0159      	lsls	r1, r3, #5
 8001e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8e:	0150      	lsls	r0, r2, #5
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4641      	mov	r1, r8
 8001e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	00eb      	lsls	r3, r5, #3
 8001ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eca:	00e2      	lsls	r2, r4, #3
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	18e3      	adds	r3, r4, r3
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	eb45 0303 	adc.w	r3, r5, r3
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eea:	4629      	mov	r1, r5
 8001eec:	028b      	lsls	r3, r1, #10
 8001eee:	4621      	mov	r1, r4
 8001ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	028a      	lsls	r2, r1, #10
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f00:	2200      	movs	r2, #0
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	61fa      	str	r2, [r7, #28]
 8001f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0a:	f7fe f97b 	bl	8000204 <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4613      	mov	r3, r2
 8001f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	0f1b      	lsrs	r3, r3, #28
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f36:	e003      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3798      	adds	r7, #152	; 0x98
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	017d7840 	.word	0x017d7840

08001f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e28d      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8083 	beq.w	8002082 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f7c:	4b94      	ldr	r3, [pc, #592]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d019      	beq.n	8001fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f88:	4b91      	ldr	r3, [pc, #580]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f94:	4b8e      	ldr	r3, [pc, #568]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d00c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d112      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	4b84      	ldr	r3, [pc, #528]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05b      	beq.n	8002080 <HAL_RCC_OscConfig+0x124>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d157      	bne.n	8002080 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e25a      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x90>
 8001fde:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7b      	ldr	r2, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xcc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0xb4>
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a72      	ldr	r2, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xcc>
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6b      	ldr	r2, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fe70 	bl	8000d14 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe fe6c 	bl	8000d14 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e21f      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xdc>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fe5c 	bl	8000d14 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe fe58 	bl	8000d14 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e20b      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x104>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d06f      	beq.n	800216e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208e:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d017      	beq.n	80020ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a6:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x186>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1d3      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4937      	ldr	r1, [pc, #220]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x278>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002106:	f7fe fe05 	bl	8000d14 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210e:	f7fe fe01 	bl	8000d14 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1b4      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4925      	ldr	r1, [pc, #148]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x278>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fde4 	bl	8000d14 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7fe fde0 	bl	8000d14 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e193      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d036      	beq.n	80021e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d016      	beq.n	80021b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_RCC_OscConfig+0x27c>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fdc4 	bl	8000d14 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe fdc0 	bl	8000d14 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e173      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80021a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x234>
 80021ae:	e01b      	b.n	80021e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7fe fdad 	bl	8000d14 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	e00e      	b.n	80021dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fda9 	bl	8000d14 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d907      	bls.n	80021dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e15c      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
 80021d0:	40023800 	.word	0x40023800
 80021d4:	42470000 	.word	0x42470000
 80021d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ea      	bne.n	80021be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8097 	beq.w	8002324 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a7e      	ldr	r2, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b79      	ldr	r3, [pc, #484]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a75      	ldr	r2, [pc, #468]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe fd69 	bl	8000d14 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe fd65 	bl	8000d14 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e118      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x31e>
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a65      	ldr	r2, [pc, #404]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x358>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x340>
 8002282:	4b61      	ldr	r3, [pc, #388]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a60      	ldr	r2, [pc, #384]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	4b5e      	ldr	r3, [pc, #376]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5d      	ldr	r2, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x358>
 800229c:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a59      	ldr	r2, [pc, #356]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fd2a 	bl	8000d14 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe fd26 	bl	8000d14 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0d7      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ee      	beq.n	80022c4 <HAL_RCC_OscConfig+0x368>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe fd14 	bl	8000d14 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fd10 	bl	8000d14 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0c1      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002306:	4b40      	ldr	r3, [pc, #256]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ee      	bne.n	80022f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80ad 	beq.w	8002488 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b08      	cmp	r3, #8
 8002338:	d060      	beq.n	80023fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d145      	bne.n	80023ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_RCC_OscConfig+0x4b4>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fce4 	bl	8000d14 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fce0 	bl	8000d14 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e093      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	491b      	ldr	r1, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x4b4>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fcb5 	bl	8000d14 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe fcb1 	bl	8000d14 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e064      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x452>
 80023cc:	e05c      	b.n	8002488 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_OscConfig+0x4b4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc9e 	bl	8000d14 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fc9a 	bl	8000d14 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e04d      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x480>
 80023fa:	e045      	b.n	8002488 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e040      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_RCC_OscConfig+0x538>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d030      	beq.n	8002484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d129      	bne.n	8002484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d122      	bne.n	8002484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244c:	4293      	cmp	r3, r2
 800244e:	d119      	bne.n	8002484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	3b01      	subs	r3, #1
 800245e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d10f      	bne.n	8002484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e03f      	b.n	800252a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fa80 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fba5 	bl	8002c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b08a      	sub	sp, #40	; 0x28
 8002536:	af02      	add	r7, sp, #8
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	d17c      	bne.n	800264c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_UART_Transmit+0x2c>
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e075      	b.n	800264e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_UART_Transmit+0x3e>
 800256c:	2302      	movs	r3, #2
 800256e:	e06e      	b.n	800264e <HAL_UART_Transmit+0x11c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2221      	movs	r2, #33	; 0x21
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002586:	f7fe fbc5 	bl	8000d14 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	88fa      	ldrh	r2, [r7, #6]
 8002590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a0:	d108      	bne.n	80025b4 <HAL_UART_Transmit+0x82>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d104      	bne.n	80025b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	e003      	b.n	80025bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025c4:	e02a      	b.n	800261c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f992 	bl	80028fa <UART_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e036      	b.n	800264e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3302      	adds	r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	e007      	b.n	800260e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	3301      	adds	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1cf      	bne.n	80025c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	2140      	movs	r1, #64	; 0x40
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f962 	bl	80028fa <UART_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e006      	b.n	800264e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	d11d      	bne.n	80026ac <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Receive_DMA+0x26>
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e016      	b.n	80026ae <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_UART_Receive_DMA+0x38>
 800268a:	2302      	movs	r3, #2
 800268c:	e00f      	b.n	80026ae <HAL_UART_Receive_DMA+0x58>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	461a      	mov	r2, r3
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f998 	bl	80029d8 <UART_Start_Receive_DMA>
 80026a8:	4603      	mov	r3, r0
 80026aa:	e000      	b.n	80026ae <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b09c      	sub	sp, #112	; 0x70
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d172      	bne.n	800280c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	2200      	movs	r2, #0
 800272a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	e853 3f00 	ldrex	r3, [r3]
 800273a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800273c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002742:	66bb      	str	r3, [r7, #104]	; 0x68
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800274c:	65ba      	str	r2, [r7, #88]	; 0x58
 800274e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e5      	bne.n	800272c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	667b      	str	r3, [r7, #100]	; 0x64
 8002778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002780:	647a      	str	r2, [r7, #68]	; 0x44
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e5      	bne.n	8002760 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3314      	adds	r3, #20
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	e853 3f00 	ldrex	r3, [r3]
 80027a2:	623b      	str	r3, [r7, #32]
   return(result);
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027aa:	663b      	str	r3, [r7, #96]	; 0x60
 80027ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027b4:	633a      	str	r2, [r7, #48]	; 0x30
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027bc:	e841 2300 	strex	r3, r2, [r1]
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e5      	bne.n	8002794 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d119      	bne.n	800280c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0310 	bic.w	r3, r3, #16
 80027ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027f8:	61fa      	str	r2, [r7, #28]
 80027fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	69b9      	ldr	r1, [r7, #24]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	617b      	str	r3, [r7, #20]
   return(result);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002818:	4619      	mov	r1, r3
 800281a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800281c:	f7ff ff69 	bl	80026f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002820:	e002      	b.n	8002828 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002822:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002824:	f7ff ff47 	bl	80026b6 <HAL_UART_RxCpltCallback>
}
 8002828:	bf00      	nop
 800282a:	3770      	adds	r7, #112	; 0x70
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	2b01      	cmp	r3, #1
 8002844:	d108      	bne.n	8002858 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff4e 	bl	80026f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002856:	e002      	b.n	800285e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff ff36 	bl	80026ca <HAL_UART_RxHalfCpltCallback>
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b80      	cmp	r3, #128	; 0x80
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b21      	cmp	r3, #33	; 0x21
 8002898:	d108      	bne.n	80028ac <UART_DMAError+0x46>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80028a6:	68b8      	ldr	r0, [r7, #8]
 80028a8:	f000 f934 	bl	8002b14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b22      	cmp	r3, #34	; 0x22
 80028cc:	d108      	bne.n	80028e0 <UART_DMAError+0x7a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028da:	68b8      	ldr	r0, [r7, #8]
 80028dc:	f000 f942 	bl	8002b64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	f7ff fef6 	bl	80026de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b090      	sub	sp, #64	; 0x40
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290a:	e050      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d04c      	beq.n	80029ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <UART_WaitOnFlagUntilTimeout+0x30>
 800291a:	f7fe f9fb 	bl	8000d14 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002926:	429a      	cmp	r2, r3
 8002928:	d241      	bcs.n	80029ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800294a:	637a      	str	r2, [r7, #52]	; 0x34
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002952:	e841 2300 	strex	r3, r2, [r1]
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e5      	bne.n	800292a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3314      	adds	r3, #20
 8002964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	613b      	str	r3, [r7, #16]
   return(result);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3314      	adds	r3, #20
 800297c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800297e:	623a      	str	r2, [r7, #32]
 8002980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	69f9      	ldr	r1, [r7, #28]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	61bb      	str	r3, [r7, #24]
   return(result);
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e00f      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d09f      	beq.n	800290c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3740      	adds	r7, #64	; 0x40
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b098      	sub	sp, #96	; 0x60
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2222      	movs	r2, #34	; 0x22
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <UART_Start_Receive_DMA+0x130>)
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <UART_Start_Receive_DMA+0x134>)
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	4a3e      	ldr	r2, [pc, #248]	; (8002b10 <UART_Start_Receive_DMA+0x138>)
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	f7fe fb5c 	bl	80010f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d019      	beq.n	8002a96 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6c:	e853 3f00 	ldrex	r3, [r3]
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e5      	bne.n	8002a62 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	657b      	str	r3, [r7, #84]	; 0x54
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ab6:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e5      	bne.n	8002a96 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002aea:	627a      	str	r2, [r7, #36]	; 0x24
 8002aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	6a39      	ldr	r1, [r7, #32]
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3760      	adds	r7, #96	; 0x60
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	0800270b 	.word	0x0800270b
 8002b0c:	08002831 	.word	0x08002831
 8002b10:	08002867 	.word	0x08002867

08002b14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	61ba      	str	r2, [r7, #24]
 8002b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	6979      	ldr	r1, [r7, #20]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e5      	bne.n	8002b1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002b58:	bf00      	nop
 8002b5a:	3724      	adds	r7, #36	; 0x24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b095      	sub	sp, #84	; 0x54
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b8c:	643a      	str	r2, [r7, #64]	; 0x40
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e5      	bne.n	8002b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d119      	bne.n	8002c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 0310 	bic.w	r3, r3, #16
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bfc:	61ba      	str	r2, [r7, #24]
 8002bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	6979      	ldr	r1, [r7, #20]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	e841 2300 	strex	r3, r2, [r1]
 8002c08:	613b      	str	r3, [r7, #16]
   return(result);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e5      	bne.n	8002bdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c1e:	bf00      	nop
 8002c20:	3754      	adds	r7, #84	; 0x54
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b0c0      	sub	sp, #256	; 0x100
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	68d9      	ldr	r1, [r3, #12]
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	ea40 0301 	orr.w	r3, r0, r1
 8002c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c84:	f021 010c 	bic.w	r1, r1, #12
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c92:	430b      	orrs	r3, r1
 8002c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	6999      	ldr	r1, [r3, #24]
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	ea40 0301 	orr.w	r3, r0, r1
 8002cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b8f      	ldr	r3, [pc, #572]	; (8002ef8 <UART_SetConfig+0x2cc>)
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d005      	beq.n	8002ccc <UART_SetConfig+0xa0>
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <UART_SetConfig+0x2d0>)
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d104      	bne.n	8002cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ccc:	f7fe ff88 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cd4:	e003      	b.n	8002cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cd6:	f7fe ff6f 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8002cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce8:	f040 810c 	bne.w	8002f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	1891      	adds	r1, r2, r2
 8002d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d06:	415b      	adcs	r3, r3
 8002d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d0e:	4621      	mov	r1, r4
 8002d10:	eb12 0801 	adds.w	r8, r2, r1
 8002d14:	4629      	mov	r1, r5
 8002d16:	eb43 0901 	adc.w	r9, r3, r1
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d2e:	4690      	mov	r8, r2
 8002d30:	4699      	mov	r9, r3
 8002d32:	4623      	mov	r3, r4
 8002d34:	eb18 0303 	adds.w	r3, r8, r3
 8002d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	eb49 0303 	adc.w	r3, r9, r3
 8002d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	18db      	adds	r3, r3, r3
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d60:	4613      	mov	r3, r2
 8002d62:	eb42 0303 	adc.w	r3, r2, r3
 8002d66:	657b      	str	r3, [r7, #84]	; 0x54
 8002d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d70:	f7fd fa48 	bl	8000204 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <UART_SetConfig+0x2d4>)
 8002d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	011c      	lsls	r4, r3, #4
 8002d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d94:	4642      	mov	r2, r8
 8002d96:	464b      	mov	r3, r9
 8002d98:	1891      	adds	r1, r2, r2
 8002d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d9c:	415b      	adcs	r3, r3
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002da4:	4641      	mov	r1, r8
 8002da6:	eb12 0a01 	adds.w	sl, r2, r1
 8002daa:	4649      	mov	r1, r9
 8002dac:	eb43 0b01 	adc.w	fp, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc4:	4692      	mov	sl, r2
 8002dc6:	469b      	mov	fp, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	eb1a 0303 	adds.w	r3, sl, r3
 8002dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df0:	460b      	mov	r3, r1
 8002df2:	18db      	adds	r3, r3, r3
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
 8002df6:	4613      	mov	r3, r2
 8002df8:	eb42 0303 	adc.w	r3, r2, r3
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e06:	f7fd f9fd 	bl	8000204 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <UART_SetConfig+0x2d4>)
 8002e12:	fba3 2301 	umull	r2, r3, r3, r1
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2264      	movs	r2, #100	; 0x64
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	1acb      	subs	r3, r1, r3
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <UART_SetConfig+0x2d4>)
 8002e28:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e34:	441c      	add	r4, r3
 8002e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	1891      	adds	r1, r2, r2
 8002e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e50:	415b      	adcs	r3, r3
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e58:	4641      	mov	r1, r8
 8002e5a:	1851      	adds	r1, r2, r1
 8002e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e5e:	4649      	mov	r1, r9
 8002e60:	414b      	adcs	r3, r1
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e70:	4659      	mov	r1, fp
 8002e72:	00cb      	lsls	r3, r1, #3
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	00ca      	lsls	r2, r1, #3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	4642      	mov	r2, r8
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	460a      	mov	r2, r1
 8002e90:	eb42 0303 	adc.w	r3, r2, r3
 8002e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eac:	460b      	mov	r3, r1
 8002eae:	18db      	adds	r3, r3, r3
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ec2:	f7fd f99f 	bl	8000204 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <UART_SetConfig+0x2d4>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <UART_SetConfig+0x2d4>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 0207 	and.w	r2, r3, #7
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4422      	add	r2, r4
 8002ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ef4:	e105      	b.n	8003102 <UART_SetConfig+0x4d6>
 8002ef6:	bf00      	nop
 8002ef8:	40011000 	.word	0x40011000
 8002efc:	40011400 	.word	0x40011400
 8002f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f16:	4642      	mov	r2, r8
 8002f18:	464b      	mov	r3, r9
 8002f1a:	1891      	adds	r1, r2, r2
 8002f1c:	6239      	str	r1, [r7, #32]
 8002f1e:	415b      	adcs	r3, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f26:	4641      	mov	r1, r8
 8002f28:	1854      	adds	r4, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb43 0501 	adc.w	r5, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	00eb      	lsls	r3, r5, #3
 8002f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3e:	00e2      	lsls	r2, r4, #3
 8002f40:	4614      	mov	r4, r2
 8002f42:	461d      	mov	r5, r3
 8002f44:	4643      	mov	r3, r8
 8002f46:	18e3      	adds	r3, r4, r3
 8002f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	eb45 0303 	adc.w	r3, r5, r3
 8002f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f72:	4629      	mov	r1, r5
 8002f74:	008b      	lsls	r3, r1, #2
 8002f76:	4621      	mov	r1, r4
 8002f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	008a      	lsls	r2, r1, #2
 8002f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f84:	f7fd f93e 	bl	8000204 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4b60      	ldr	r3, [pc, #384]	; (8003110 <UART_SetConfig+0x4e4>)
 8002f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	011c      	lsls	r4, r3, #4
 8002f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	61b9      	str	r1, [r7, #24]
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb8:	4641      	mov	r1, r8
 8002fba:	1851      	adds	r1, r2, r1
 8002fbc:	6139      	str	r1, [r7, #16]
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	414b      	adcs	r3, r1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd0:	4659      	mov	r1, fp
 8002fd2:	00cb      	lsls	r3, r1, #3
 8002fd4:	4651      	mov	r1, sl
 8002fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fda:	4651      	mov	r1, sl
 8002fdc:	00ca      	lsls	r2, r1, #3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fec:	464b      	mov	r3, r9
 8002fee:	460a      	mov	r2, r1
 8002ff0:	eb42 0303 	adc.w	r3, r2, r3
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	67bb      	str	r3, [r7, #120]	; 0x78
 8003002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003010:	4649      	mov	r1, r9
 8003012:	008b      	lsls	r3, r1, #2
 8003014:	4641      	mov	r1, r8
 8003016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301a:	4641      	mov	r1, r8
 800301c:	008a      	lsls	r2, r1, #2
 800301e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003022:	f7fd f8ef 	bl	8000204 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4b39      	ldr	r3, [pc, #228]	; (8003110 <UART_SetConfig+0x4e4>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	2164      	movs	r1, #100	; 0x64
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	3332      	adds	r3, #50	; 0x32
 800303e:	4a34      	ldr	r2, [pc, #208]	; (8003110 <UART_SetConfig+0x4e4>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304a:	441c      	add	r4, r3
 800304c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003050:	2200      	movs	r2, #0
 8003052:	673b      	str	r3, [r7, #112]	; 0x70
 8003054:	677a      	str	r2, [r7, #116]	; 0x74
 8003056:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800305a:	4642      	mov	r2, r8
 800305c:	464b      	mov	r3, r9
 800305e:	1891      	adds	r1, r2, r2
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	415b      	adcs	r3, r3
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800306a:	4641      	mov	r1, r8
 800306c:	1851      	adds	r1, r2, r1
 800306e:	6039      	str	r1, [r7, #0]
 8003070:	4649      	mov	r1, r9
 8003072:	414b      	adcs	r3, r1
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003082:	4659      	mov	r1, fp
 8003084:	00cb      	lsls	r3, r1, #3
 8003086:	4651      	mov	r1, sl
 8003088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308c:	4651      	mov	r1, sl
 800308e:	00ca      	lsls	r2, r1, #3
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	4603      	mov	r3, r0
 8003096:	4642      	mov	r2, r8
 8003098:	189b      	adds	r3, r3, r2
 800309a:	66bb      	str	r3, [r7, #104]	; 0x68
 800309c:	464b      	mov	r3, r9
 800309e:	460a      	mov	r2, r1
 80030a0:	eb42 0303 	adc.w	r3, r2, r3
 80030a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	663b      	str	r3, [r7, #96]	; 0x60
 80030b0:	667a      	str	r2, [r7, #100]	; 0x64
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030be:	4649      	mov	r1, r9
 80030c0:	008b      	lsls	r3, r1, #2
 80030c2:	4641      	mov	r1, r8
 80030c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c8:	4641      	mov	r1, r8
 80030ca:	008a      	lsls	r2, r1, #2
 80030cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d0:	f7fd f898 	bl	8000204 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <UART_SetConfig+0x4e4>)
 80030da:	fba3 1302 	umull	r1, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2164      	movs	r1, #100	; 0x64
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <UART_SetConfig+0x4e4>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4422      	add	r2, r4
 8003100:	609a      	str	r2, [r3, #8]
}
 8003102:	bf00      	nop
 8003104:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310e:	bf00      	nop
 8003110:	51eb851f 	.word	0x51eb851f

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4d0d      	ldr	r5, [pc, #52]	; (800314c <__libc_init_array+0x38>)
 8003118:	4c0d      	ldr	r4, [pc, #52]	; (8003150 <__libc_init_array+0x3c>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	2600      	movs	r6, #0
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	4d0b      	ldr	r5, [pc, #44]	; (8003154 <__libc_init_array+0x40>)
 8003126:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x44>)
 8003128:	f000 f820 	bl	800316c <_init>
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	2600      	movs	r6, #0
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	080031bc 	.word	0x080031bc
 8003150:	080031bc 	.word	0x080031bc
 8003154:	080031bc 	.word	0x080031bc
 8003158:	080031c4 	.word	0x080031c4

0800315c <memset>:
 800315c:	4402      	add	r2, r0
 800315e:	4603      	mov	r3, r0
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	f803 1b01 	strb.w	r1, [r3], #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

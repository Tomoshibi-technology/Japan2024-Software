
MAIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006694  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006890  08006890  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800689c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000258c  2000000c  080068a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002598  080068a8  00022598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c28  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d46  00000000  00000000  00037c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0003a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266ae  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016afc  00000000  00000000  000632ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e265b  00000000  00000000  00079daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b3c  00000000  00000000  0015c458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006840 	.word	0x08006840

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08006840 	.word	0x08006840

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000508:	b084      	sub	sp, #16
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af02      	add	r7, sp, #8
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	f107 001c 	add.w	r0, r7, #28
 8000516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	f107 011c 	add.w	r1, r7, #28
 8000522:	2254      	movs	r2, #84	; 0x54
 8000524:	4618      	mov	r0, r3
 8000526:	f006 f975 	bl	8006814 <memcpy>
	device_address_ = device_address;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000530:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000532:	f640 033d 	movw	r3, #2109	; 0x83d
 8000536:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000538:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800053c:	b29b      	uxth	r3, r3
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	b299      	uxth	r1, r3
 8000542:	f107 020c 	add.w	r2, r7, #12
 8000546:	f107 001c 	add.w	r0, r7, #28
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2302      	movs	r3, #2
 8000550:	f002 fecc 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000554:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000558:	f001 fca6 	bl	8001ea8 <HAL_Delay>
}
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000568:	b004      	add	sp, #16
 800056a:	4770      	bx	lr

0800056c <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	Neopixel_board.execute();
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000576:	f001 fb3d 	bl	8001bf4 <_ZN7WS2812C7executeEv>
	Neopixel_tape.execute();
 800057a:	4804      	ldr	r0, [pc, #16]	; (800058c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800057c:	f001 fb3a 	bl	8001bf4 <_ZN7WS2812C7executeEv>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000148c 	.word	0x2000148c
 800058c:	20000434 	.word	0x20000434

08000590 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d101      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x14>
	check_buf();
 80005a0:	f000 f806 	bl	80005b0 <_Z9check_bufv>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000c4 	.word	0x200000c4

080005b0 <_Z9check_bufv>:

void transmit(uint16_t inst_angle, uint8_t inst_speed){
		  send_MD(inst_angle, inst_speed, rotate + 180);
}

void check_buf(){
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
    index = huart5.hdmarx->Instance->NDTR;//バッファー残容????��?��??��?��???��?��??��?��?
 80005b6:	4b36      	ldr	r3, [pc, #216]	; (8000690 <_Z9check_bufv+0xe0>)
 80005b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	4a35      	ldr	r2, [pc, #212]	; (8000694 <_Z9check_bufv+0xe4>)
 80005c0:	6013      	str	r3, [r2, #0]
     index = sizeof(rxBuf) - index;//????��?��??��?��???��?��??��?��?新の受信????��?��??��?��???��?��??��?��?ータ位置
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <_Z9check_bufv+0xe4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <_Z9check_bufv+0xe4>)
 80005cc:	6013      	str	r3, [r2, #0]

     int check_buf_point = index - 10;
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <_Z9check_bufv+0xe4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3b0a      	subs	r3, #10
 80005d4:	60fb      	str	r3, [r7, #12]
     if(check_buf_point < 0){check_buf_point = check_buf_point + sizeof(rxBuf);}
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da02      	bge.n	80005e2 <_Z9check_bufv+0x32>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3380      	adds	r3, #128	; 0x80
 80005e0:	60fb      	str	r3, [r7, #12]
     //読み込み済み????��?��??��?��???��?��??��?��?ータ位置より????��?��??��?��???��?��??��?��?新の受信????��?��??��?��???��?��??��?��?ータ位置が前にある????��?��??��?��???��?��??��?��?(バッファー????��?��??��?��???��?��??��?��?で受信????��?��??��?��???��?��??��?��?ータが�?周してた�?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)値を補正

    while(1){
        readData = rxBuf[check_buf_point];
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <_Z9check_bufv+0xe8>)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <_Z9check_bufv+0xec>)
 80005ee:	601a      	str	r2, [r3, #0]
        if(readData == 250){
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <_Z9check_bufv+0xec>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2bfa      	cmp	r3, #250	; 0xfa
 80005f6:	d11c      	bne.n	8000632 <_Z9check_bufv+0x82>
            for(int i=1; i<5; i++){
 80005f8:	2301      	movs	r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	dc2b      	bgt.n	800065a <_Z9check_bufv+0xaa>
                int read_buf_point = check_buf_point + i;
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4413      	add	r3, r2
 8000608:	607b      	str	r3, [r7, #4]
                if(read_buf_point>sizeof(rxBuf)-1){read_buf_point = read_buf_point - sizeof(rxBuf);}
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b7f      	cmp	r3, #127	; 0x7f
 800060e:	d902      	bls.n	8000616 <_Z9check_bufv+0x66>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b80      	subs	r3, #128	; 0x80
 8000614:	607b      	str	r3, [r7, #4]
                rcvBuf[i-1] = rxBuf[read_buf_point];
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <_Z9check_bufv+0xe8>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	3b01      	subs	r3, #1
 8000622:	4611      	mov	r1, r2
 8000624:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <_Z9check_bufv+0xf0>)
 8000626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for(int i=1; i<5; i++){
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	3301      	adds	r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	e7e4      	b.n	80005fc <_Z9check_bufv+0x4c>
            }
            break;
        }
        check_buf_point++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
        if(check_buf_point>sizeof(rxBuf)-1){check_buf_point = check_buf_point - sizeof(rxBuf);}
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2b7f      	cmp	r3, #127	; 0x7f
 800063c:	d902      	bls.n	8000644 <_Z9check_bufv+0x94>
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3b80      	subs	r3, #128	; 0x80
 8000642:	60fb      	str	r3, [r7, #12]
        if(check_buf_point==index){break;}
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_Z9check_bufv+0xe4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	bf0c      	ite	eq
 800064e:	2301      	moveq	r3, #1
 8000650:	2300      	movne	r3, #0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_Z9check_bufv+0xae>
    }
 8000658:	e7c3      	b.n	80005e2 <_Z9check_bufv+0x32>
            break;
 800065a:	bf00      	nop
 800065c:	e000      	b.n	8000660 <_Z9check_bufv+0xb0>
        if(check_buf_point==index){break;}
 800065e:	bf00      	nop

     mode = rcvBuf[0];
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <_Z9check_bufv+0xf0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <_Z9check_bufv+0xf4>)
 8000666:	6013      	str	r3, [r2, #0]

     clock = rcvBuf[1] + rcvBuf[2] - 5 - 240 * 5;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <_Z9check_bufv+0xf0>)
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_Z9check_bufv+0xf0>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4413      	add	r3, r2
 8000672:	f2a3 43b5 	subw	r3, r3, #1205	; 0x4b5
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <_Z9check_bufv+0xf8>)
 8000678:	6013      	str	r3, [r2, #0]
     hue = rcvBuf[3];
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <_Z9check_bufv+0xf0>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <_Z9check_bufv+0xfc>)
 8000680:	6013      	str	r3, [r2, #0]

}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000214 	.word	0x20000214
 8000694:	200024ec 	.word	0x200024ec
 8000698:	200024f0 	.word	0x200024f0
 800069c:	20002580 	.word	0x20002580
 80006a0:	20002570 	.word	0x20002570
 80006a4:	20002584 	.word	0x20002584
 80006a8:	20002588 	.word	0x20002588
 80006ac:	2000258c 	.word	0x2000258c

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b0ac      	sub	sp, #176	; 0xb0
 80006b4:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 fb85 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f92d 	bl	8000918 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fc23 	bl	8000f08 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80006c2:	f000 fbe9 	bl	8000e98 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80006c6:	f000 fb5b 	bl	8000d80 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80006ca:	f000 fb89 	bl	8000de0 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80006ce:	f000 f9f5 	bl	8000abc <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80006d2:	f000 fa87 	bl	8000be4 <_ZL12MX_TIM3_Initv>
  MX_USART6_UART_Init();
 80006d6:	f000 fbb1 	bl	8000e3c <_ZL19MX_USART6_UART_Initv>
  MX_UART5_Init();
 80006da:	f000 fb23 	bl	8000d24 <_ZL13MX_UART5_Initv>
  MX_TIM1_Init();
 80006de:	f000 fa21 	bl	8000b24 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 80006e2:	f000 f98f 	bl	8000a04 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ea:	f001 fbdd 	bl	8001ea8 <HAL_Delay>
  while (!ready) {
 80006ee:	4b77      	ldr	r3, [pc, #476]	; (80008cc <main+0x21c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d116      	bne.n	8000724 <main+0x74>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	220a      	movs	r2, #10
 80006fc:	2150      	movs	r1, #80	; 0x50
 80006fe:	4874      	ldr	r0, [pc, #464]	; (80008d0 <main+0x220>)
 8000700:	f002 fef2 	bl	80034e8 <HAL_I2C_IsDeviceReady>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf0c      	ite	eq
 800070a:	2301      	moveq	r3, #1
 800070c:	2300      	movne	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <main+0x6c>
      ready = 1;
 8000714:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <main+0x21c>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e7e8      	b.n	80006ee <main+0x3e>
    } else {
      HAL_Delay(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f001 fbc3 	bl	8001ea8 <HAL_Delay>
  while (!ready) {
 8000722:	e7e4      	b.n	80006ee <main+0x3e>
    }
  }
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	486a      	ldr	r0, [pc, #424]	; (80008d4 <main+0x224>)
 800072a:	f002 fc81 	bl	8003030 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart5, rxBuf, sizeof(rxBuf));
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	4969      	ldr	r1, [pc, #420]	; (80008d8 <main+0x228>)
 8000732:	486a      	ldr	r0, [pc, #424]	; (80008dc <main+0x22c>)
 8000734:	f005 faeb 	bl	8005d0e <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000738:	4869      	ldr	r0, [pc, #420]	; (80008e0 <main+0x230>)
 800073a:	f004 f843 	bl	80047c4 <HAL_TIM_Base_Start_IT>
  Neopixel_board.init();
 800073e:	4869      	ldr	r0, [pc, #420]	; (80008e4 <main+0x234>)
 8000740:	f001 fae1 	bl	8001d06 <_ZN7WS2812C4initEv>
  Neopixel_tape.init();
 8000744:	4868      	ldr	r0, [pc, #416]	; (80008e8 <main+0x238>)
 8000746:	f001 fade 	bl	8001d06 <_ZN7WS2812C4initEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BNO055 bno055(hi2c1, 0x28);
 800074a:	4c61      	ldr	r4, [pc, #388]	; (80008d0 <main+0x220>)
 800074c:	1d3d      	adds	r5, r7, #4
 800074e:	2328      	movs	r3, #40	; 0x28
 8000750:	9312      	str	r3, [sp, #72]	; 0x48
 8000752:	4668      	mov	r0, sp
 8000754:	f104 030c 	add.w	r3, r4, #12
 8000758:	2248      	movs	r2, #72	; 0x48
 800075a:	4619      	mov	r1, r3
 800075c:	f006 f85a 	bl	8006814 <memcpy>
 8000760:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000764:	4628      	mov	r0, r5
 8000766:	f7ff fecf 	bl	8000508 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
//		  Neopixel_tape.show();
//		  Neopixel_board.set_hsv(i, hue, 255, 5);
//		  Neopixel_board.show();
//	  }
//	  servo0.exe_servo(angle_IR);
	  if(HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 0 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 0){
 800076a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076e:	485f      	ldr	r0, [pc, #380]	; (80008ec <main+0x23c>)
 8000770:	f002 fc46 	bl	8003000 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <main+0xde>
 800077a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077e:	485b      	ldr	r0, [pc, #364]	; (80008ec <main+0x23c>)
 8000780:	f002 fc3e 	bl	8003000 <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <main+0xde>
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <main+0xe0>
 800078e:	2300      	movs	r3, #0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d01b      	beq.n	80007cc <main+0x11c>
		  for(uint8_t i = 0; i < 32; i++){
 8000794:	2300      	movs	r3, #0
 8000796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800079a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800079e:	2b1f      	cmp	r3, #31
 80007a0:	d814      	bhi.n	80007cc <main+0x11c>
			  Neopixel_tape.set_hsv(i, hue, 255, 255);
 80007a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80007a6:	b299      	uxth	r1, r3
 80007a8:	4b51      	ldr	r3, [pc, #324]	; (80008f0 <main+0x240>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	23ff      	movs	r3, #255	; 0xff
 80007b4:	484c      	ldr	r0, [pc, #304]	; (80008e8 <main+0x238>)
 80007b6:	f001 f943 	bl	8001a40 <_ZN7WS2812C7set_hsvEtsss>
			  Neopixel_tape.show();
 80007ba:	484b      	ldr	r0, [pc, #300]	; (80008e8 <main+0x238>)
 80007bc:	f001 fa0a 	bl	8001bd4 <_ZN7WS2812C4showEv>
		  for(uint8_t i = 0; i < 32; i++){
 80007c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80007c4:	3301      	adds	r3, #1
 80007c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80007ca:	e7e6      	b.n	800079a <main+0xea>
		  }
	  }
	  if(HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 0){
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	4846      	ldr	r0, [pc, #280]	; (80008ec <main+0x23c>)
 80007d2:	f002 fc15 	bl	8003000 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d109      	bne.n	80007f0 <main+0x140>
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	4842      	ldr	r0, [pc, #264]	; (80008ec <main+0x23c>)
 80007e2:	f002 fc0d 	bl	8003000 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <main+0x140>
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <main+0x142>
 80007f0:	2300      	movs	r3, #0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d014      	beq.n	8000820 <main+0x170>
		  HAL_UART_Receive_DMA(&huart3, &receive_value, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	493e      	ldr	r1, [pc, #248]	; (80008f4 <main+0x244>)
 80007fa:	483f      	ldr	r0, [pc, #252]	; (80008f8 <main+0x248>)
 80007fc:	f005 fa87 	bl	8005d0e <HAL_UART_Receive_DMA>
		  angle_IR = (receive_value - 100) * 5;
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <main+0x244>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3b64      	subs	r3, #100	; 0x64
 8000806:	b29b      	uxth	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	4413      	add	r3, r2
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <main+0x24c>)
 8000812:	801a      	strh	r2, [r3, #0]
		  servo0.exe_servo(angle_IR);
 8000814:	4b39      	ldr	r3, [pc, #228]	; (80008fc <main+0x24c>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4839      	ldr	r0, [pc, #228]	; (8000900 <main+0x250>)
 800081c:	f000 fcb0 	bl	8001180 <_ZN9STS_SERVO9exe_servoEt>
	  	  }
	  if(HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 1){
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <main+0x23c>)
 8000826:	f002 fbeb 	bl	8003000 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d109      	bne.n	8000844 <main+0x194>
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	482d      	ldr	r0, [pc, #180]	; (80008ec <main+0x23c>)
 8000836:	f002 fbe3 	bl	8003000 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d101      	bne.n	8000844 <main+0x194>
 8000840:	2301      	movs	r3, #1
 8000842:	e000      	b.n	8000846 <main+0x196>
 8000844:	2300      	movs	r3, #0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d08f      	beq.n	800076a <main+0xba>
		  static uint16_t degree_position = 0;
		  static uint8_t status = 0;
		  if(degree_position <= 0){
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <main+0x254>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d102      	bne.n	8000858 <main+0x1a8>
			  status = 0;
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <main+0x258>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
		  	  }
		  if(degree_position >= 360){
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <main+0x254>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000860:	d302      	bcc.n	8000868 <main+0x1b8>
			  status = 1;
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <main+0x258>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
		  }
		  if(status == 0){
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <main+0x258>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d106      	bne.n	800087e <main+0x1ce>
			  degree_position += 3;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x254>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	3303      	adds	r3, #3
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <main+0x254>)
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	e005      	b.n	800088a <main+0x1da>
		  }else{
			  degree_position -= 3;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <main+0x254>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	3b03      	subs	r3, #3
 8000884:	b29a      	uxth	r2, r3
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <main+0x254>)
 8000888:	801a      	strh	r2, [r3, #0]
		  }
		  servo0.exe_servo(degree_position);
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <main+0x254>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	481b      	ldr	r0, [pc, #108]	; (8000900 <main+0x250>)
 8000892:	f000 fc75 	bl	8001180 <_ZN9STS_SERVO9exe_servoEt>
		  servo1.exe_servo(degree_position / 2 + 90);
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <main+0x254>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	085b      	lsrs	r3, r3, #1
 800089c:	b29b      	uxth	r3, r3
 800089e:	335a      	adds	r3, #90	; 0x5a
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	4819      	ldr	r0, [pc, #100]	; (800090c <main+0x25c>)
 80008a6:	f000 fc6b 	bl	8001180 <_ZN9STS_SERVO9exe_servoEt>
		  servo2.exe_servo(degree_position);
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <main+0x254>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4817      	ldr	r0, [pc, #92]	; (8000910 <main+0x260>)
 80008b2:	f000 fc65 	bl	8001180 <_ZN9STS_SERVO9exe_servoEt>
		  servo3.exe_servo(degree_position);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0x254>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4815      	ldr	r0, [pc, #84]	; (8000914 <main+0x264>)
 80008be:	f000 fc5f 	bl	8001180 <_ZN9STS_SERVO9exe_servoEt>
		  HAL_Delay(20);
 80008c2:	2014      	movs	r0, #20
 80008c4:	f001 faf0 	bl	8001ea8 <HAL_Delay>





  }
 80008c8:	e74f      	b.n	800076a <main+0xba>
 80008ca:	bf00      	nop
 80008cc:	200024e8 	.word	0x200024e8
 80008d0:	20000070 	.word	0x20000070
 80008d4:	40020000 	.word	0x40020000
 80008d8:	200024f0 	.word	0x200024f0
 80008dc:	20000214 	.word	0x20000214
 80008e0:	200000c4 	.word	0x200000c4
 80008e4:	2000148c 	.word	0x2000148c
 80008e8:	20000434 	.word	0x20000434
 80008ec:	40020400 	.word	0x40020400
 80008f0:	2000258c 	.word	0x2000258c
 80008f4:	200024e4 	.word	0x200024e4
 80008f8:	2000029c 	.word	0x2000029c
 80008fc:	200024e6 	.word	0x200024e6
 8000900:	200003e4 	.word	0x200003e4
 8000904:	20002590 	.word	0x20002590
 8000908:	20002592 	.word	0x20002592
 800090c:	200003f8 	.word	0x200003f8
 8000910:	2000040c 	.word	0x2000040c
 8000914:	20000420 	.word	0x20000420

08000918 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f005 ff82 	bl	8006830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <_Z18SystemClock_Configv+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <_Z18SystemClock_Configv+0xe4>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <_Z18SystemClock_Configv+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000958:	2300      	movs	r3, #0
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <_Z18SystemClock_Configv+0xe8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a26      	ldr	r2, [pc, #152]	; (8000a00 <_Z18SystemClock_Configv+0xe8>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <_Z18SystemClock_Configv+0xe8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800098c:	2310      	movs	r3, #16
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000990:	23c0      	movs	r3, #192	; 0xc0
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000994:	2306      	movs	r3, #6
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fc1f 	bl	80041e8 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80009ba:	f000 fb21 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2101      	movs	r1, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 f8bd 	bl	8003b58 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80009ee:	f000 fb07 	bl	8001000 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	; 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a18:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <_ZL12MX_ADC1_Initv+0xb0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a44:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <_ZL12MX_ADC1_Initv+0xb4>)
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a62:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a64:	f001 fa44 	bl	8001ef0 <HAL_ADC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf14      	ite	ne
 8000a6e:	2301      	movne	r3, #1
 8000a70:	2300      	moveq	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8000a78:	f000 fac2 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <_ZL12MX_ADC1_Initv+0xac>)
 8000a8e:	f001 fa73 	bl	8001f78 <HAL_ADC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000aa2:	f000 faad 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	0f000001 	.word	0x0f000001

08000abc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ac2:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <_ZL12MX_I2C1_Initv+0x60>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ac8:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <_ZL12MX_I2C1_Initv+0x64>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <_ZL12MX_I2C1_Initv+0x5c>)
 8000afa:	f002 fab3 	bl	8003064 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf14      	ite	ne
 8000b04:	2301      	movne	r3, #1
 8000b06:	2300      	moveq	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000b0e:	f000 fa77 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000070 	.word	0x20000070
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b42:	4a27      	ldr	r2, [pc, #156]	; (8000be0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3200-1;
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b48:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000b4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b56:	2209      	movs	r2, #9
 8000b58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b6c:	481b      	ldr	r0, [pc, #108]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b6e:	f003 fdd9 	bl	8004724 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000b82:	f000 fa3d 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000b94:	f004 fa72 	bl	800507c <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8000ba8:	f000 fa2a 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <_ZL12MX_TIM1_Initv+0xb8>)
 8000bba:	f004 ff39 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf14      	ite	ne
 8000bc4:	2301      	movne	r3, #1
 8000bc6:	2300      	moveq	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8000bce:	f000 fa17 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000c4 	.word	0x200000c4
 8000be0:	40010000 	.word	0x40010000

08000be4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c16:	4a42      	ldr	r2, [pc, #264]	; (8000d20 <_ZL12MX_TIM3_Initv+0x13c>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000c1a:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c28:	2227      	movs	r2, #39	; 0x27
 8000c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c38:	4838      	ldr	r0, [pc, #224]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c3a:	f003 fd73 	bl	8004724 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8000c4e:	f000 f9d7 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482f      	ldr	r0, [pc, #188]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c60:	f004 fa0c 	bl	800507c <HAL_TIM_ConfigClockSource>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8000c74:	f000 f9c4 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c78:	4828      	ldr	r0, [pc, #160]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000c7a:	f003 fe13 	bl	80048a4 <HAL_TIM_PWM_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	bf14      	ite	ne
 8000c84:	2301      	movne	r3, #1
 8000c86:	2300      	moveq	r3, #0
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8000c8e:	f000 f9b7 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481e      	ldr	r0, [pc, #120]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000ca2:	f004 fec5 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 8000cb6:	f000 f9a3 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000cd2:	f004 f911 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf14      	ite	ne
 8000cdc:	2301      	movne	r3, #1
 8000cde:	2300      	moveq	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 8000ce6:	f000 f98b 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000cf6:	f004 f8ff 	bl	8004ef8 <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bf14      	ite	ne
 8000d00:	2301      	movne	r3, #1
 8000d02:	2300      	moveq	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 8000d0a:	f000 f979 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <_ZL12MX_TIM3_Initv+0x138>)
 8000d10:	f000 fbce 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000010c 	.word	0x2000010c
 8000d20:	40000400 	.word	0x40000400

08000d24 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_ZL13MX_UART5_Initv+0x58>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <_ZL13MX_UART5_Initv+0x54>)
 8000d5c:	f004 fef8 	bl	8005b50 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8000d70:	f000 f946 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000214 	.word	0x20000214
 8000d7c:	40005000 	.word	0x40005000

08000d80 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <_ZL19MX_USART2_UART_Initv+0x5c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000da4:	220c      	movs	r2, #12
 8000da6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000db6:	f004 fecb 	bl	8005b50 <HAL_UART_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	bf14      	ite	ne
 8000dc0:	2301      	movne	r3, #1
 8000dc2:	2300      	moveq	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8000dca:	f000 f919 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000258 	.word	0x20000258
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	000f4240 	.word	0x000f4240

08000de0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000e18:	f004 fe9a 	bl	8005b50 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000e2c:	f000 f8e8 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000029c 	.word	0x2000029c
 8000e38:	40004800 	.word	0x40004800

08000e3c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000e74:	f004 fe6c 	bl	8005b50 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf14      	ite	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	2300      	moveq	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000e88:	f000 f8ba 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200002e0 	.word	0x200002e0
 8000e94:	40011400 	.word	0x40011400

08000e98 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <_ZL11MX_DMA_Initv+0x6c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <_ZL11MX_DMA_Initv+0x6c>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_ZL11MX_DMA_Initv+0x6c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200b      	movs	r0, #11
 8000ec0:	f001 fb63 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f001 fb7c 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	200c      	movs	r0, #12
 8000ed0:	f001 fb5b 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ed4:	200c      	movs	r0, #12
 8000ed6:	f001 fb74 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f001 fb53 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ee4:	200f      	movs	r0, #15
 8000ee6:	f001 fb6c 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f001 fb4b 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f001 fb64 	bl	80025c2 <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a33      	ldr	r2, [pc, #204]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a2c      	ldr	r2, [pc, #176]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_ZL12MX_GPIO_Initv+0xec>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, servosw_Pin|led_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2122      	movs	r1, #34	; 0x22
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <_ZL12MX_GPIO_Initv+0xf0>)
 8000fb0:	f002 f83e 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : servosw_Pin led_Pin */
  GPIO_InitStruct.Pin = servosw_Pin|led_Pin;
 8000fb4:	2322      	movs	r3, #34	; 0x22
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <_ZL12MX_GPIO_Initv+0xf0>)
 8000fcc:	f001 fe84 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : slidesw2_Pin slidesw1_Pin */
  GPIO_InitStruct.Pin = slidesw2_Pin|slidesw1_Pin;
 8000fd0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <_ZL12MX_GPIO_Initv+0xf4>)
 8000fe6:	f001 fe77 	bl	8002cd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d124      	bne.n	8001066 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001022:	4293      	cmp	r3, r2
 8001024:	d11f      	bne.n	8001066 <_Z41__static_initialization_and_destruction_0ii+0x5a>
STS_SERVO servo0(0, &huart2);
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001028:	2100      	movs	r1, #0
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800102c:	f000 f83c 	bl	80010a8 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
STS_SERVO servo1(1, &huart2);
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001032:	2101      	movs	r1, #1
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001036:	f000 f837 	bl	80010a8 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
STS_SERVO servo2(2, &huart2);
 800103a:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800103c:	2102      	movs	r1, #2
 800103e:	480f      	ldr	r0, [pc, #60]	; (800107c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001040:	f000 f832 	bl	80010a8 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
STS_SERVO servo3(3, &huart2);
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001046:	2103      	movs	r1, #3
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800104a:	f000 f82d 	bl	80010a8 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>
WS2812C Neopixel_tape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001050:	2200      	movs	r2, #0
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001056:	f000 fca9 	bl	80019ac <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
WS2812C Neopixel_board(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800105c:	2204      	movs	r2, #4
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001062:	f000 fca3 	bl	80019ac <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000258 	.word	0x20000258
 8001074:	200003e4 	.word	0x200003e4
 8001078:	200003f8 	.word	0x200003f8
 800107c:	2000040c 	.word	0x2000040c
 8001080:	20000420 	.word	0x20000420
 8001084:	20000154 	.word	0x20000154
 8001088:	2000010c 	.word	0x2000010c
 800108c:	20000434 	.word	0x20000434
 8001090:	200001b4 	.word	0x200001b4
 8001094:	2000148c 	.word	0x2000148c

08001098 <_GLOBAL__sub_I_hadc1>:
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
 800109c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff ffb3 	bl	800100c <_Z41__static_initialization_and_destruction_0ii>
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef>:
 *      Author: tomoh
 */

#include "servo.h"

STS_SERVO::STS_SERVO(uint8_t id, UART_HandleTypeDef *uart)
 80010a8:	b490      	push	{r4, r7}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	460b      	mov	r3, r1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	72fb      	strb	r3, [r7, #11]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <_ZN9STS_SERVOC1EhP20__UART_HandleTypeDef+0x34>)
 80010ba:	461c      	mov	r4, r3
 80010bc:	4613      	mov	r3, r2
 80010be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c0:	c407      	stmia	r4!, {r0, r1, r2}
 80010c2:	7023      	strb	r3, [r4, #0]
{
    servo_array[2] = id;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	7afa      	ldrb	r2, [r7, #11]
 80010c8:	709a      	strb	r2, [r3, #2]
    UART = uart;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
}
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc90      	pop	{r4, r7}
 80010da:	4770      	bx	lr
 80010dc:	08006858 	.word	0x08006858

080010e0 <_ZN9STS_SERVO12set_positionEt>:

void STS_SERVO::set_position(uint16_t degree)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
	degree = 360 - degree;
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80010f2:	807b      	strh	r3, [r7, #2]
    uint16_t bit_degree = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	81fb      	strh	r3, [r7, #14]
    if (degree > 360)
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80010fe:	d902      	bls.n	8001106 <_ZN9STS_SERVO12set_positionEt+0x26>
    {
        degree = 360;
 8001100:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001104:	807b      	strh	r3, [r7, #2]
    }
    bit_degree = (degree << 12) / 360;
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	031b      	lsls	r3, r3, #12
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <_ZN9STS_SERVO12set_positionEt+0x5c>)
 800110c:	fb82 1203 	smull	r1, r2, r2, r3
 8001110:	441a      	add	r2, r3
 8001112:	1212      	asrs	r2, r2, #8
 8001114:	17db      	asrs	r3, r3, #31
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	81fb      	strh	r3, [r7, #14]
    servo_array[6] = bit_degree;
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	719a      	strb	r2, [r3, #6]
    servo_array[7] = bit_degree >> 8;
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b29b      	uxth	r3, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	71da      	strb	r2, [r3, #7]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	b60b60b7 	.word	0xb60b60b7

08001140 <_ZN9STS_SERVO13calc_checksumEv>:

void STS_SERVO::calc_checksum()
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i <= 11; i++)
 800114c:	2302      	movs	r3, #2
 800114e:	73bb      	strb	r3, [r7, #14]
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	2b0b      	cmp	r3, #11
 8001154:	d809      	bhi.n	800116a <_ZN9STS_SERVO13calc_checksumEv+0x2a>
    {
        checksum += servo_array[i];
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	5cd2      	ldrb	r2, [r2, r3]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4413      	add	r3, r2
 8001160:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i <= 11; i++)
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	73bb      	strb	r3, [r7, #14]
 8001168:	e7f2      	b.n	8001150 <_ZN9STS_SERVO13calc_checksumEv+0x10>
    }
    servo_array[12] = ~checksum;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	43db      	mvns	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	731a      	strb	r2, [r3, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_ZN9STS_SERVO9exe_servoEt>:

void STS_SERVO::exe_servo(uint16_t degree)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
    set_position(degree);
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffa5 	bl	80010e0 <_ZN9STS_SERVO12set_positionEt>
    calc_checksum();
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffd2 	bl	8001140 <_ZN9STS_SERVO13calc_checksumEv>
    HAL_UART_Transmit(UART, servo_array, 13, 50);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6918      	ldr	r0, [r3, #16]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	2332      	movs	r3, #50	; 0x32
 80011a4:	220d      	movs	r2, #13
 80011a6:	f004 fd20 	bl	8005bea <HAL_UART_Transmit>
    HAL_Delay(5);
 80011aa:	2005      	movs	r0, #5
 80011ac:	f000 fe7c 	bl	8001ea8 <HAL_Delay>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_ADC_MspInit+0x7c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d127      	bne.n	800127a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_ADC_MspInit+0x80>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_ADC_MspInit+0x80>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_ADC_MspInit+0x80>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_ADC_MspInit+0x84>)
 8001276:	f001 fd2f 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012000 	.word	0x40012000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_I2C_MspInit+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12c      	bne.n	800130c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e0:	2304      	movs	r3, #4
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <HAL_I2C_MspInit+0x8c>)
 80012ec:	f001 fcf4 	bl	8002cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_I2C_MspInit+0x88>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_I2C_MspInit+0x88>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a59      	ldr	r2, [pc, #356]	; (8001494 <HAL_TIM_Base_MspInit+0x174>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12e      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b58      	ldr	r3, [pc, #352]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2018      	movs	r0, #24
 8001354:	f001 f919 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001358:	2018      	movs	r0, #24
 800135a:	f001 f932 	bl	80025c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2019      	movs	r0, #25
 8001364:	f001 f911 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001368:	2019      	movs	r0, #25
 800136a:	f001 f92a 	bl	80025c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	201a      	movs	r0, #26
 8001374:	f001 f909 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001378:	201a      	movs	r0, #26
 800137a:	f001 f922 	bl	80025c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	201b      	movs	r0, #27
 8001384:	f001 f901 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001388:	201b      	movs	r0, #27
 800138a:	f001 f91a 	bl	80025c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800138e:	e07c      	b.n	800148a <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <HAL_TIM_Base_MspInit+0x17c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d177      	bne.n	800148a <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a3d      	ldr	r2, [pc, #244]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_TIM_Base_MspInit+0x178>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013b8:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <HAL_TIM_Base_MspInit+0x184>)
 80013ba:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013be:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80013c2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013de:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013f6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80013fe:	4828      	ldr	r0, [pc, #160]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 8001400:	f001 f8fa 	bl	80025f8 <HAL_DMA_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 800140a:	f7ff fdf9 	bl	8001000 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <HAL_TIM_Base_MspInit+0x180>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <HAL_TIM_Base_MspInit+0x18c>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 800142e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001432:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 800144a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 800145a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001462:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001466:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001470:	f001 f8c2 	bl	80025f8 <HAL_DMA_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_TIM_Base_MspInit+0x15e>
      Error_Handler();
 800147a:	f7ff fdc1 	bl	8001000 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_TIM_Base_MspInit+0x188>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6393      	str	r3, [r2, #56]	; 0x38
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40010000 	.word	0x40010000
 8001498:	40023800 	.word	0x40023800
 800149c:	40000400 	.word	0x40000400
 80014a0:	20000154 	.word	0x20000154
 80014a4:	40026070 	.word	0x40026070
 80014a8:	200001b4 	.word	0x200001b4
 80014ac:	40026088 	.word	0x40026088

080014b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a21      	ldr	r2, [pc, #132]	; (8001554 <HAL_TIM_MspPostInit+0xa4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d13b      	bne.n	800154a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_TIM_MspPostInit+0xa8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_TIM_MspPostInit+0xa8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_TIM_MspPostInit+0xa8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_TIM_MspPostInit+0xa8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_TIM_MspPostInit+0xa8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_TIM_MspPostInit+0xa8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151a:	2302      	movs	r3, #2
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_TIM_MspPostInit+0xac>)
 8001526:	f001 fbd7 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800152a:	2320      	movs	r3, #32
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153a:	2302      	movs	r3, #2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <HAL_TIM_MspPostInit+0xb0>)
 8001546:	f001 fbc7 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40000400 	.word	0x40000400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b092      	sub	sp, #72	; 0x48
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a9a      	ldr	r2, [pc, #616]	; (80017ec <HAL_UART_MspInit+0x288>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d17b      	bne.n	800167e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
 800158a:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b96      	ldr	r3, [pc, #600]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a6:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a91      	ldr	r2, [pc, #580]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b8f      	ldr	r3, [pc, #572]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c2:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a8a      	ldr	r2, [pc, #552]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015ec:	2308      	movs	r3, #8
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f4:	4619      	mov	r1, r3
 80015f6:	487f      	ldr	r0, [pc, #508]	; (80017f4 <HAL_UART_MspInit+0x290>)
 80015f8:	f001 fb6e 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015fc:	2304      	movs	r3, #4
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800160c:	2308      	movs	r3, #8
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001614:	4619      	mov	r1, r3
 8001616:	4878      	ldr	r0, [pc, #480]	; (80017f8 <HAL_UART_MspInit+0x294>)
 8001618:	f001 fb5e 	bl	8002cd8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800161c:	4b77      	ldr	r3, [pc, #476]	; (80017fc <HAL_UART_MspInit+0x298>)
 800161e:	4a78      	ldr	r2, [pc, #480]	; (8001800 <HAL_UART_MspInit+0x29c>)
 8001620:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001622:	4b76      	ldr	r3, [pc, #472]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001628:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162a:	4b74      	ldr	r3, [pc, #464]	; (80017fc <HAL_UART_MspInit+0x298>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b71      	ldr	r3, [pc, #452]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800163e:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001644:	4b6d      	ldr	r3, [pc, #436]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800164a:	4b6c      	ldr	r3, [pc, #432]	; (80017fc <HAL_UART_MspInit+0x298>)
 800164c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001650:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001652:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001654:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001658:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165a:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_UART_MspInit+0x298>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001660:	4866      	ldr	r0, [pc, #408]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001662:	f000 ffc9 	bl	80025f8 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800166c:	f7ff fcc8 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a62      	ldr	r2, [pc, #392]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
 8001676:	4a61      	ldr	r2, [pc, #388]	; (80017fc <HAL_UART_MspInit+0x298>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800167c:	e0ff      	b.n	800187e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a60      	ldr	r2, [pc, #384]	; (8001804 <HAL_UART_MspInit+0x2a0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d12c      	bne.n	80016e2 <HAL_UART_MspInit+0x17e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a57      	ldr	r2, [pc, #348]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6313      	str	r3, [r2, #48]	; 0x30
 80016b4:	4b4e      	ldr	r3, [pc, #312]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c0:	230c      	movs	r3, #12
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d0:	2307      	movs	r3, #7
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d8:	4619      	mov	r1, r3
 80016da:	484b      	ldr	r0, [pc, #300]	; (8001808 <HAL_UART_MspInit+0x2a4>)
 80016dc:	f001 fafc 	bl	8002cd8 <HAL_GPIO_Init>
}
 80016e0:	e0cd      	b.n	800187e <HAL_UART_MspInit+0x31a>
  else if(huart->Instance==USART3)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a49      	ldr	r2, [pc, #292]	; (800180c <HAL_UART_MspInit+0x2a8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f040 8097 	bne.w	800181c <HAL_UART_MspInit+0x2b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a3e      	ldr	r2, [pc, #248]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a37      	ldr	r2, [pc, #220]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_UART_MspInit+0x28c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001742:	2320      	movs	r3, #32
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001752:	2307      	movs	r3, #7
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800175a:	4619      	mov	r1, r3
 800175c:	4825      	ldr	r0, [pc, #148]	; (80017f4 <HAL_UART_MspInit+0x290>)
 800175e:	f001 fabb 	bl	8002cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001774:	2307      	movs	r3, #7
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800177c:	4619      	mov	r1, r3
 800177e:	4824      	ldr	r0, [pc, #144]	; (8001810 <HAL_UART_MspInit+0x2ac>)
 8001780:	f001 faaa 	bl	8002cd8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 8001786:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_UART_MspInit+0x2b4>)
 8001788:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 800178c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001790:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017cc:	4811      	ldr	r0, [pc, #68]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017ce:	f000 ff13 	bl	80025f8 <HAL_DMA_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_UART_MspInit+0x278>
      Error_Handler();
 80017d8:	f7ff fc12 	bl	8001000 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
 80017e2:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <HAL_UART_MspInit+0x2b0>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017e8:	e049      	b.n	800187e <HAL_UART_MspInit+0x31a>
 80017ea:	bf00      	nop
 80017ec:	40005000 	.word	0x40005000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	20000324 	.word	0x20000324
 8001800:	40026010 	.word	0x40026010
 8001804:	40004400 	.word	0x40004400
 8001808:	40020000 	.word	0x40020000
 800180c:	40004800 	.word	0x40004800
 8001810:	40020400 	.word	0x40020400
 8001814:	20000384 	.word	0x20000384
 8001818:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x324>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12b      	bne.n	800187e <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_MspInit+0x328>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_UART_MspInit+0x328>)
 8001830:	f043 0320 	orr.w	r3, r3, #32
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_UART_MspInit+0x328>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_MspInit+0x328>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_UART_MspInit+0x328>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_UART_MspInit+0x328>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800185e:	23c0      	movs	r3, #192	; 0xc0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800186e:	2308      	movs	r3, #8
 8001870:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_UART_MspInit+0x32c>)
 800187a:	f001 fa2d 	bl	8002cd8 <HAL_GPIO_Init>
}
 800187e:	bf00      	nop
 8001880:	3748      	adds	r7, #72	; 0x48
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40011400 	.word	0x40011400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020800 	.word	0x40020800

08001894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <NMI_Handler+0x4>

0800189a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <MemManage_Handler+0x4>

080018a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e0:	f000 fac2 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ee:	f000 ff89 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000324 	.word	0x20000324

080018fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <DMA1_Stream1_IRQHandler+0x10>)
 8001902:	f000 ff7f 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000384 	.word	0x20000384

08001910 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA1_Stream4_IRQHandler+0x10>)
 8001916:	f000 ff75 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000154 	.word	0x20000154

08001924 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <DMA1_Stream5_IRQHandler+0x10>)
 800192a:	f000 ff6b 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001b4 	.word	0x200001b4

08001938 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800193e:	f003 f9d3 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200000c4 	.word	0x200000c4

0800194c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001952:	f003 f9c9 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000c4 	.word	0x200000c4

08001960 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001966:	f003 f9bf 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000c4 	.word	0x200000c4

08001974 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TIM1_CC_IRQHandler+0x10>)
 800197a:	f003 f9b5 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200000c4 	.word	0x200000c4

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	609a      	str	r2, [r3, #8]
}
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	460b      	mov	r3, r1
 80019f0:	707b      	strb	r3, [r7, #1]
 80019f2:	4613      	mov	r3, r2
 80019f4:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	2b1f      	cmp	r3, #31
 80019fa:	d81a      	bhi.n	8001a32 <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	330c      	adds	r3, #12
 8001a0a:	783a      	ldrb	r2, [r7, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	330d      	adds	r3, #13
 8001a1c:	787a      	ldrb	r2, [r7, #1]
 8001a1e:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	330e      	adds	r3, #14
 8001a2e:	7c3a      	ldrb	r2, [r7, #16]
 8001a30:	701a      	strb	r2, [r3, #0]
	}
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	817b      	strh	r3, [r7, #10]
 8001a52:	460b      	mov	r3, r1
 8001a54:	813b      	strh	r3, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10b      	bne.n	8001a7a <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 8001a62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001a68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a78:	e09c      	b.n	8001bb4 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 8001a7a:	893b      	ldrh	r3, [r7, #8]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	0052      	lsls	r2, r2, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 8001a88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da00      	bge.n	8001a92 <_ZN7WS2812C7set_hsvEtsss+0x52>
 8001a90:	33ff      	adds	r3, #255	; 0xff
 8001a92:	121b      	asrs	r3, r3, #8
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 8001a98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a9c:	425a      	negs	r2, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	bf58      	it	pl
 8001aa4:	4253      	negpl	r3, r2
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 8001aaa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ab2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da00      	bge.n	8001ac0 <_ZN7WS2812C7set_hsvEtsss+0x80>
 8001abe:	33ff      	adds	r3, #255	; 0xff
 8001ac0:	121b      	asrs	r3, r3, #8
 8001ac2:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8001ac4:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8001ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001acc:	69f9      	ldr	r1, [r7, #28]
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da00      	bge.n	8001ad8 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8001ad6:	33ff      	adds	r3, #255	; 0xff
 8001ad8:	121b      	asrs	r3, r3, #8
 8001ada:	425b      	negs	r3, r3
 8001adc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da00      	bge.n	8001aea <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8001ae8:	33ff      	adds	r3, #255	; 0xff
 8001aea:	121b      	asrs	r3, r3, #8
 8001aec:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8001aee:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8001af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af6:	69f9      	ldr	r1, [r7, #28]
 8001af8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da00      	bge.n	8001b06 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8001b04:	33ff      	adds	r3, #255	; 0xff
 8001b06:	121b      	asrs	r3, r3, #8
 8001b08:	425b      	negs	r3, r3
 8001b0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da00      	bge.n	8001b18 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8001b16:	33ff      	adds	r3, #255	; 0xff
 8001b18:	121b      	asrs	r3, r3, #8
 8001b1a:	613b      	str	r3, [r7, #16]

		switch (i) {
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d83e      	bhi.n	8001ba0 <_ZN7WS2812C7set_hsvEtsss+0x160>
 8001b22:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 8001b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b28:	08001b3d 	.word	0x08001b3d
 8001b2c:	08001b51 	.word	0x08001b51
 8001b30:	08001b65 	.word	0x08001b65
 8001b34:	08001b79 	.word	0x08001b79
 8001b38:	08001b8d 	.word	0x08001b8d
			case 0: r = v; g = t; b = p; break;
 8001b3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b4e:	e031      	b.n	8001bb4 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b62:	e027      	b.n	8001bb4 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b76:	e01d      	b.n	8001bb4 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b8a:	e013      	b.n	8001bb4 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001b9e:	e009      	b.n	8001bb4 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8001ba0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001bb2:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8001bb4:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001bb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff ff08 	bl	80019dc <_ZN7WS2812C7set_rgbEthhh>
}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d179      	bne.n	8001cfe <_ZN7WS2812C7executeEv+0x10a>
//		HAL_Delay((int)(LED_NUM * 32 / 1000) + 1);
//		if(HDMA->State != HAL_DMA_STATE_READY){
//			HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
//		}
		for(int i=0; i<RST; i++){
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2bf9      	cmp	r3, #249	; 0xf9
 8001c12:	dc0a      	bgt.n	8001c2a <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	331a      	adds	r3, #26
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	e7f1      	b.n	8001c0e <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b1f      	cmp	r3, #31
 8001c32:	dc52      	bgt.n	8001cda <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	dc49      	bgt.n	8001cd2 <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 8001c3e:	2307      	movs	r3, #7
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db40      	blt.n	8001cca <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	18ca      	adds	r2, r1, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4413      	add	r3, r2
 8001c58:	330c      	adds	r3, #12
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa42 f303 	asr.w	r3, r2, r3
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d114      	bne.n	8001c9a <_ZN7WS2812C7executeEv+0xa6>
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	441a      	add	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	4413      	add	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	331a      	adds	r3, #26
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	2214      	movs	r2, #20
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	e013      	b.n	8001cc2 <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	441a      	add	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f1c3 0307 	rsb	r3, r3, #7
 8001cb4:	4413      	add	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	331a      	adds	r3, #26
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e7bb      	b.n	8001c42 <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e7b2      	b.n	8001c38 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e7a9      	b.n	8001c2e <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6858      	ldr	r0, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8001cea:	f240 33fa 	movw	r3, #1018	; 0x3fa
 8001cee:	f002 fe33 	bl	8004958 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		// (uint32_t*)

	}else{

	}
}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2bf9      	cmp	r3, #249	; 0xf9
 8001d16:	dc0a      	bgt.n	8001d2e <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	331a      	adds	r3, #26
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e7f1      	b.n	8001d12 <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8001d2e:	23fa      	movs	r3, #250	; 0xfa
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d38:	da0a      	bge.n	8001d50 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	331a      	adds	r3, #26
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	220a      	movs	r2, #10
 8001d46:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	e7f0      	b.n	8001d32 <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6858      	ldr	r0, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8001d60:	f240 33fa 	movw	r3, #1018	; 0x3fa
 8001d64:	f002 fdf8 	bl	8004958 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d76:	490e      	ldr	r1, [pc, #56]	; (8001db0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d8c:	4c0b      	ldr	r4, [pc, #44]	; (8001dbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d9a:	f7ff fdf5 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f004 fd15 	bl	80067cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7fe fc85 	bl	80006b0 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001db4:	0800689c 	.word	0x0800689c
  ldr r2, =_sbss
 8001db8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dbc:	20002598 	.word	0x20002598

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 fbc1 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff f9de 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fbd9 	bl	80025de <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 fba1 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20002594 	.word	0x20002594

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20002594 	.word	0x20002594

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008

08001ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e033      	b.n	8001f6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff f97a 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f94a 	bl	80021dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f5e:	e001      	b.n	8001f64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x1c>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e113      	b.n	80021bc <HAL_ADC_ConfigChannel+0x244>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b09      	cmp	r3, #9
 8001fa2:	d925      	bls.n	8001ff0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68d9      	ldr	r1, [r3, #12]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b1e      	subs	r3, #30
 8001fba:	2207      	movs	r2, #7
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68d9      	ldr	r1, [r3, #12]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4403      	add	r3, r0
 8001fe2:	3b1e      	subs	r3, #30
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	e022      	b.n	8002036 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6919      	ldr	r1, [r3, #16]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	2207      	movs	r2, #7
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	400a      	ands	r2, r1
 8002012:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6919      	ldr	r1, [r3, #16]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	4603      	mov	r3, r0
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4403      	add	r3, r0
 800202c:	409a      	lsls	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d824      	bhi.n	8002088 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b05      	subs	r3, #5
 8002050:	221f      	movs	r2, #31
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b05      	subs	r3, #5
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	635a      	str	r2, [r3, #52]	; 0x34
 8002086:	e04c      	b.n	8002122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d824      	bhi.n	80020da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b23      	subs	r3, #35	; 0x23
 80020a2:	221f      	movs	r2, #31
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43da      	mvns	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	400a      	ands	r2, r1
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b23      	subs	r3, #35	; 0x23
 80020cc:	fa00 f203 	lsl.w	r2, r0, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
 80020d8:	e023      	b.n	8002122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b41      	subs	r3, #65	; 0x41
 80020ec:	221f      	movs	r2, #31
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	400a      	ands	r2, r1
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b41      	subs	r3, #65	; 0x41
 8002116:	fa00 f203 	lsl.w	r2, r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_ADC_ConfigChannel+0x250>)
 8002124:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_ADC_ConfigChannel+0x254>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d10f      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1d8>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b12      	cmp	r3, #18
 8002136:	d10b      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_ADC_ConfigChannel+0x254>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12b      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x23a>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_ADC_ConfigChannel+0x258>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <HAL_ADC_ConfigChannel+0x1f4>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b11      	cmp	r3, #17
 800216a:	d122      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_ADC_ConfigChannel+0x258>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d111      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <HAL_ADC_ConfigChannel+0x260>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	0c9a      	lsrs	r2, r3, #18
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a4:	e002      	b.n	80021ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f9      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40012300 	.word	0x40012300
 80021cc:	40012000 	.word	0x40012000
 80021d0:	10000012 	.word	0x10000012
 80021d4:	20000000 	.word	0x20000000
 80021d8:	431bde83 	.word	0x431bde83

080021dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e4:	4b79      	ldr	r3, [pc, #484]	; (80023cc <ADC_Init+0x1f0>)
 80021e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	021a      	lsls	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <ADC_Init+0x1f4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d022      	beq.n	80022ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6899      	ldr	r1, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	e00f      	b.n	80022da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0202 	bic.w	r2, r2, #2
 80022e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e1b      	ldrb	r3, [r3, #24]
 80022f4:	005a      	lsls	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	3b01      	subs	r3, #1
 8002334:	035a      	lsls	r2, r3, #13
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	e007      	b.n	8002350 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	3b01      	subs	r3, #1
 800236c:	051a      	lsls	r2, r3, #20
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002392:	025a      	lsls	r2, r3, #9
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	029a      	lsls	r2, r3, #10
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012300 	.word	0x40012300
 80023d0:	0f000001 	.word	0x0f000001

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff3e 	bl	800241c <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5d 	bl	8002474 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff31 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffa2 	bl	8002530 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fc44 	bl	8001e90 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e099      	b.n	8002748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	e00f      	b.n	8002656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002636:	f7ff fc2b 	bl	8001e90 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b05      	cmp	r3, #5
 8002642:	d908      	bls.n	8002656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e078      	b.n	8002748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e8      	bne.n	8002636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_DMA_Init+0x158>)
 8002670:	4013      	ands	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	4313      	orrs	r3, r2
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f023 0307 	bic.w	r3, r3, #7
 80026d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d117      	bne.n	800271a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fa6f 	bl	8002be0 <DMA_CheckFifoParam>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2240      	movs	r2, #64	; 0x40
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002716:	2301      	movs	r3, #1
 8002718:	e016      	b.n	8002748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fa26 	bl	8002b74 <DMA_CalcBaseAndBitshift>
 8002728:	4603      	mov	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	223f      	movs	r2, #63	; 0x3f
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	f010803f 	.word	0xf010803f

08002754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_DMA_Start_IT+0x26>
 8002776:	2302      	movs	r3, #2
 8002778:	e040      	b.n	80027fc <HAL_DMA_Start_IT+0xa8>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d12f      	bne.n	80027ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f9b8 	bl	8002b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	223f      	movs	r2, #63	; 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0216 	orr.w	r2, r2, #22
 80027c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0208 	orr.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e005      	b.n	80027fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002810:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <HAL_DMA_IRQHandler+0x248>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a8e      	ldr	r2, [pc, #568]	; (8002a50 <HAL_DMA_IRQHandler+0x24c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2208      	movs	r2, #8
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2204      	movs	r2, #4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2210      	movs	r2, #16
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d043      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2210      	movs	r2, #16
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e01f      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
 8002944:	e016      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0208 	bic.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	2220      	movs	r2, #32
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808f 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8087 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2220      	movs	r2, #32
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d136      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0216 	bic.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_DMA_IRQHandler+0x1da>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	223f      	movs	r2, #63	; 0x3f
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07e      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
        }
        return;
 8002a1a:	e079      	b.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01d      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d031      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
 8002a48:	e02c      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
 8002a64:	e01e      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0210 	bic.w	r2, r2, #16
 8002a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d032      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d022      	beq.n	8002afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2205      	movs	r2, #5
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d307      	bcc.n	8002aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f2      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x2cc>
 8002aea:	e000      	b.n	8002aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
 8002b0e:	e000      	b.n	8002b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b10:	bf00      	nop
    }
  }
}
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d108      	bne.n	8002b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b56:	e007      	b.n	8002b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b10      	subs	r3, #16
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d909      	bls.n	8002bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	1d1a      	adds	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb4:	e007      	b.n	8002bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	aaaaaaab 	.word	0xaaaaaaab
 8002bdc:	08006880 	.word	0x08006880

08002be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d856      	bhi.n	8002cae <DMA_CheckFifoParam+0xce>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <DMA_CheckFifoParam+0x28>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c2b 	.word	0x08002c2b
 8002c10:	08002c19 	.word	0x08002c19
 8002c14:	08002caf 	.word	0x08002caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d046      	beq.n	8002cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e043      	b.n	8002cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c32:	d140      	bne.n	8002cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e03d      	b.n	8002cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	d121      	bne.n	8002c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d837      	bhi.n	8002cba <DMA_CheckFifoParam+0xda>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <DMA_CheckFifoParam+0x70>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c67 	.word	0x08002c67
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002c79 	.word	0x08002c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e030      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d025      	beq.n	8002cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e022      	b.n	8002cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c80:	d11f      	bne.n	8002cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c86:	e01c      	b.n	8002cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d903      	bls.n	8002c96 <DMA_CheckFifoParam+0xb6>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d003      	beq.n	8002c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c94:	e018      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9a:	e015      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00e      	beq.n	8002cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e00b      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e00a      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e008      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e006      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e165      	b.n	8002fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f040 8154 	bne.w	8002fba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d005      	beq.n	8002d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d130      	bne.n	8002d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0201 	and.w	r2, r3, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d017      	beq.n	8002dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d123      	bne.n	8002e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	08da      	lsrs	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3208      	adds	r2, #8
 8002e16:	69b9      	ldr	r1, [r7, #24]
 8002e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0203 	and.w	r2, r3, #3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80ae 	beq.w	8002fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b5d      	ldr	r3, [pc, #372]	; (8002fd8 <HAL_GPIO_Init+0x300>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a5c      	ldr	r2, [pc, #368]	; (8002fd8 <HAL_GPIO_Init+0x300>)
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <HAL_GPIO_Init+0x300>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7a:	4a58      	ldr	r2, [pc, #352]	; (8002fdc <HAL_GPIO_Init+0x304>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <HAL_GPIO_Init+0x308>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d025      	beq.n	8002ef2 <HAL_GPIO_Init+0x21a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4e      	ldr	r2, [pc, #312]	; (8002fe4 <HAL_GPIO_Init+0x30c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01f      	beq.n	8002eee <HAL_GPIO_Init+0x216>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_GPIO_Init+0x310>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_GPIO_Init+0x212>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4c      	ldr	r2, [pc, #304]	; (8002fec <HAL_GPIO_Init+0x314>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0x20e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <HAL_GPIO_Init+0x318>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0x20a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <HAL_GPIO_Init+0x31c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x206>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a49      	ldr	r2, [pc, #292]	; (8002ff8 <HAL_GPIO_Init+0x320>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_GPIO_Init+0x202>
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	e00c      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002eda:	2307      	movs	r3, #7
 8002edc:	e00a      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002ede:	2305      	movs	r3, #5
 8002ee0:	e008      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e006      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e004      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e002      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x21c>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	f002 0203 	and.w	r2, r2, #3
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	4093      	lsls	r3, r2
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f04:	4935      	ldr	r1, [pc, #212]	; (8002fdc <HAL_GPIO_Init+0x304>)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f12:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f36:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f66:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f8a:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb4:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	f67f ae96 	bls.w	8002cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	40020800 	.word	0x40020800
 8002fec:	40020c00 	.word	0x40020c00
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40021400 	.word	0x40021400
 8002ff8:	40021800 	.word	0x40021800
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e12b      	b.n	80032ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe f900 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	; 0x24
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c8:	f000 fe38 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80030cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a81      	ldr	r2, [pc, #516]	; (80032d8 <HAL_I2C_Init+0x274>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d807      	bhi.n	80030e8 <HAL_I2C_Init+0x84>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a80      	ldr	r2, [pc, #512]	; (80032dc <HAL_I2C_Init+0x278>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e006      	b.n	80030f6 <HAL_I2C_Init+0x92>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a7d      	ldr	r2, [pc, #500]	; (80032e0 <HAL_I2C_Init+0x27c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0e7      	b.n	80032ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a78      	ldr	r2, [pc, #480]	; (80032e4 <HAL_I2C_Init+0x280>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a6a      	ldr	r2, [pc, #424]	; (80032d8 <HAL_I2C_Init+0x274>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d802      	bhi.n	8003138 <HAL_I2C_Init+0xd4>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	e009      	b.n	800314c <HAL_I2C_Init+0xe8>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a69      	ldr	r2, [pc, #420]	; (80032e8 <HAL_I2C_Init+0x284>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	3301      	adds	r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	430b      	orrs	r3, r1
 8003152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800315e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	495c      	ldr	r1, [pc, #368]	; (80032d8 <HAL_I2C_Init+0x274>)
 8003168:	428b      	cmp	r3, r1
 800316a:	d819      	bhi.n	80031a0 <HAL_I2C_Init+0x13c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e59      	subs	r1, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fbb1 f3f3 	udiv	r3, r1, r3
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003180:	400b      	ands	r3, r1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_I2C_Init+0x138>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e59      	subs	r1, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb1 f3f3 	udiv	r3, r1, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	e051      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 800319c:	2304      	movs	r3, #4
 800319e:	e04f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_I2C_Init+0x168>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e012      	b.n	80031f2 <HAL_I2C_Init+0x18e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	0099      	lsls	r1, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Init+0x196>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e022      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <HAL_I2C_Init+0x1bc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e58      	subs	r0, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	440b      	add	r3, r1
 8003210:	fbb0 f3f3 	udiv	r3, r0, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	0099      	lsls	r1, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	6809      	ldr	r1, [r1, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800326e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6911      	ldr	r1, [r2, #16]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	000186a0 	.word	0x000186a0
 80032dc:	001e847f 	.word	0x001e847f
 80032e0:	003d08ff 	.word	0x003d08ff
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	10624dd3 	.word	0x10624dd3

080032ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	817b      	strh	r3, [r7, #10]
 80032fc:	4613      	mov	r3, r2
 80032fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7fe fdc6 	bl	8001e90 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	f040 80e0 	bne.w	80034d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2319      	movs	r3, #25
 800331a:	2201      	movs	r2, #1
 800331c:	4970      	ldr	r1, [pc, #448]	; (80034e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa92 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	e0d3      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2C_Master_Transmit+0x50>
 8003338:	2302      	movs	r3, #2
 800333a:	e0cc      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d007      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	; 0x21
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2210      	movs	r2, #16
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	893a      	ldrh	r2, [r7, #8]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f9ca 	bl	8003744 <I2C_MasterRequestWrite>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08d      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033d0:	e066      	b.n	80034a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fb0c 	bl	80039f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x188>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d017      	beq.n	8003474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	6a39      	ldr	r1, [r7, #32]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fafc 	bl	8003a76 <I2C_WaitOnBTFFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e01a      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d194      	bne.n	80033d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e000      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	00100002 	.word	0x00100002
 80034e4:	ffff0000 	.word	0xffff0000

080034e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	460b      	mov	r3, r1
 80034f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7fe fcca 	bl	8001e90 <HAL_GetTick>
 80034fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	f040 8111 	bne.w	8003732 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2319      	movs	r3, #25
 8003516:	2201      	movs	r2, #1
 8003518:	4988      	ldr	r1, [pc, #544]	; (800373c <HAL_I2C_IsDeviceReady+0x254>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f994 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	e104      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_I2C_IsDeviceReady+0x50>
 8003534:	2302      	movs	r3, #2
 8003536:	e0fd      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d007      	beq.n	800355e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2224      	movs	r2, #36	; 0x24
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a70      	ldr	r2, [pc, #448]	; (8003740 <HAL_I2C_IsDeviceReady+0x258>)
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003590:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f952 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d103      	bne.n	80035c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0b6      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fc5b 	bl	8001e90 <HAL_GetTick>
 80035da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800360a:	e025      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe fc40 	bl	8001e90 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <HAL_I2C_IsDeviceReady+0x13a>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	22a0      	movs	r2, #160	; 0xa0
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2ba0      	cmp	r3, #160	; 0xa0
 8003662:	d005      	beq.n	8003670 <HAL_I2C_IsDeviceReady+0x188>
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_I2C_IsDeviceReady+0x188>
 800366a:	7dbb      	ldrb	r3, [r7, #22]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0cd      	beq.n	800360c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d129      	bne.n	80036da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	4921      	ldr	r1, [pc, #132]	; (800373c <HAL_I2C_IsDeviceReady+0x254>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f8c6 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e036      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e02c      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2319      	movs	r3, #25
 80036fa:	2201      	movs	r2, #1
 80036fc:	490f      	ldr	r1, [pc, #60]	; (800373c <HAL_I2C_IsDeviceReady+0x254>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8a2 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e012      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3301      	adds	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	f4ff af32 	bcc.w	8003582 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d006      	beq.n	800376e <I2C_MasterRequestWrite+0x2a>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d003      	beq.n	800376e <I2C_MasterRequestWrite+0x2a>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800376c:	d108      	bne.n	8003780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e00b      	b.n	8003798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	2b12      	cmp	r3, #18
 8003786:	d107      	bne.n	8003798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f84f 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037be:	d103      	bne.n	80037c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e035      	b.n	8003838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d4:	d108      	bne.n	80037e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037e4:	611a      	str	r2, [r3, #16]
 80037e6:	e01b      	b.n	8003820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	11db      	asrs	r3, r3, #7
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 030f 	orn	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <I2C_MasterRequestWrite+0xfc>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f875 	bl	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e010      	b.n	8003838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <I2C_MasterRequestWrite+0x100>)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f865 	bl	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	00010008 	.word	0x00010008
 8003844:	00010002 	.word	0x00010002

08003848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003858:	e025      	b.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d021      	beq.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fe fb15 	bl	8001e90 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d116      	bne.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e023      	b.n	80038ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10d      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	e00c      	b.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d0b6      	beq.n	800385a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003904:	e051      	b.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d123      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800392e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f043 0204 	orr.w	r2, r3, #4
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e046      	b.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d021      	beq.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe fa93 	bl	8001e90 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d116      	bne.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e020      	b.n	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10c      	bne.n	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e00b      	b.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf14      	ite	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	2300      	moveq	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d18d      	bne.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a00:	e02d      	b.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f878 	bl	8003af8 <I2C_IsAcknowledgeFailed>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e02d      	b.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d021      	beq.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe fa39 	bl	8001e90 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d116      	bne.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e007      	b.n	8003a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d1ca      	bne.n	8003a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a82:	e02d      	b.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f837 	bl	8003af8 <I2C_IsAcknowledgeFailed>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e02d      	b.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d021      	beq.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fe f9f8 	bl	8001e90 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d116      	bne.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e007      	b.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d1ca      	bne.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	d11b      	bne.n	8003b48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0cc      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d90c      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b63      	ldr	r3, [pc, #396]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b8      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bac:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	494d      	ldr	r1, [pc, #308]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d044      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d119      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e07f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e06f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e067      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c36:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 0203 	bic.w	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4934      	ldr	r1, [pc, #208]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c48:	f7fe f922 	bl	8001e90 <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c50:	f7fe f91e 	bl	8001e90 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e04f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 020c 	and.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1eb      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d20c      	bcs.n	8003ca0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e032      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4916      	ldr	r1, [pc, #88]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	490e      	ldr	r1, [pc, #56]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cde:	f000 f855 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	490a      	ldr	r1, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	5ccb      	ldrb	r3, [r1, r3]
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe f882 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023c00 	.word	0x40023c00
 8003d14:	40023800 	.word	0x40023800
 8003d18:	08006868 	.word	0x08006868
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000004 	.word	0x20000004

08003d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08006878 	.word	0x08006878

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d68:	f7ff ffdc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08006878 	.word	0x08006878

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d90:	b0ae      	sub	sp, #184	; 0xb8
 8003d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db2:	4bcb      	ldr	r3, [pc, #812]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	f200 8204 	bhi.w	80041c8 <HAL_RCC_GetSysClockFreq+0x43c>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dfd 	.word	0x08003dfd
 8003dcc:	080041c9 	.word	0x080041c9
 8003dd0:	080041c9 	.word	0x080041c9
 8003dd4:	080041c9 	.word	0x080041c9
 8003dd8:	08003e05 	.word	0x08003e05
 8003ddc:	080041c9 	.word	0x080041c9
 8003de0:	080041c9 	.word	0x080041c9
 8003de4:	080041c9 	.word	0x080041c9
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	080041c9 	.word	0x080041c9
 8003df0:	080041c9 	.word	0x080041c9
 8003df4:	080041c9 	.word	0x080041c9
 8003df8:	08003ffd 	.word	0x08003ffd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4bb9      	ldr	r3, [pc, #740]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e02:	e1e5      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e04:	4bb7      	ldr	r3, [pc, #732]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e0a:	e1e1      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e0c:	4bb4      	ldr	r3, [pc, #720]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e18:	4bb1      	ldr	r3, [pc, #708]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d071      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e24:	4bae      	ldr	r3, [pc, #696]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	f04f 0000 	mov.w	r0, #0
 8003e52:	f04f 0100 	mov.w	r1, #0
 8003e56:	0159      	lsls	r1, r3, #5
 8003e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5c:	0150      	lsls	r0, r2, #5
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4621      	mov	r1, r4
 8003e64:	1a51      	subs	r1, r2, r1
 8003e66:	6439      	str	r1, [r7, #64]	; 0x40
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e7c:	4649      	mov	r1, r9
 8003e7e:	018b      	lsls	r3, r1, #6
 8003e80:	4641      	mov	r1, r8
 8003e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e86:	4641      	mov	r1, r8
 8003e88:	018a      	lsls	r2, r1, #6
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	1a51      	subs	r1, r2, r1
 8003e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e90:	4649      	mov	r1, r9
 8003e92:	eb63 0301 	sbc.w	r3, r3, r1
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	00cb      	lsls	r3, r1, #3
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eae:	4641      	mov	r1, r8
 8003eb0:	00ca      	lsls	r2, r1, #3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4622      	mov	r2, r4
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	eb42 0303 	adc.w	r3, r2, r3
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	028b      	lsls	r3, r1, #10
 8003ed8:	4621      	mov	r1, r4
 8003eda:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ede:	4621      	mov	r1, r4
 8003ee0:	028a      	lsls	r2, r1, #10
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ef4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ef8:	f7fc f984 	bl	8000204 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f06:	e067      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f08:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f22:	2300      	movs	r3, #0
 8003f24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3c:	0150      	lsls	r0, r2, #5
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4621      	mov	r1, r4
 8003f44:	1a51      	subs	r1, r2, r1
 8003f46:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f48:	4629      	mov	r1, r5
 8003f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f5c:	4649      	mov	r1, r9
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	4641      	mov	r1, r8
 8003f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f66:	4641      	mov	r1, r8
 8003f68:	018a      	lsls	r2, r1, #6
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f70:	4649      	mov	r1, r9
 8003f72:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f8a:	4692      	mov	sl, r2
 8003f8c:	469b      	mov	fp, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	eb1a 0303 	adds.w	r3, sl, r3
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	462b      	mov	r3, r5
 8003f98:	eb4b 0303 	adc.w	r3, fp, r3
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003faa:	4629      	mov	r1, r5
 8003fac:	028b      	lsls	r3, r1, #10
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	028a      	lsls	r2, r1, #10
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fc4:	677a      	str	r2, [r7, #116]	; 0x74
 8003fc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003fca:	f7fc f91b 	bl	8000204 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ffa:	e0e9      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004008:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d069      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004014:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	2200      	movs	r2, #0
 800401c:	66bb      	str	r3, [r7, #104]	; 0x68
 800401e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004026:	663b      	str	r3, [r7, #96]	; 0x60
 8004028:	2300      	movs	r3, #0
 800402a:	667b      	str	r3, [r7, #100]	; 0x64
 800402c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004030:	4622      	mov	r2, r4
 8004032:	462b      	mov	r3, r5
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	0159      	lsls	r1, r3, #5
 800403e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004042:	0150      	lsls	r0, r2, #5
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4621      	mov	r1, r4
 800404a:	1a51      	subs	r1, r2, r1
 800404c:	61b9      	str	r1, [r7, #24]
 800404e:	4629      	mov	r1, r5
 8004050:	eb63 0301 	sbc.w	r3, r3, r1
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004062:	4659      	mov	r1, fp
 8004064:	018b      	lsls	r3, r1, #6
 8004066:	4651      	mov	r1, sl
 8004068:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406c:	4651      	mov	r1, sl
 800406e:	018a      	lsls	r2, r1, #6
 8004070:	4651      	mov	r1, sl
 8004072:	ebb2 0801 	subs.w	r8, r2, r1
 8004076:	4659      	mov	r1, fp
 8004078:	eb63 0901 	sbc.w	r9, r3, r1
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004088:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004090:	4690      	mov	r8, r2
 8004092:	4699      	mov	r9, r3
 8004094:	4623      	mov	r3, r4
 8004096:	eb18 0303 	adds.w	r3, r8, r3
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	462b      	mov	r3, r5
 800409e:	eb49 0303 	adc.w	r3, r9, r3
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80040b0:	4629      	mov	r1, r5
 80040b2:	028b      	lsls	r3, r1, #10
 80040b4:	4621      	mov	r1, r4
 80040b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ba:	4621      	mov	r1, r4
 80040bc:	028a      	lsls	r2, r1, #10
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c6:	2200      	movs	r2, #0
 80040c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80040cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040d0:	f7fc f898 	bl	8000204 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4613      	mov	r3, r2
 80040da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040de:	e063      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x41c>
 80040e0:	40023800 	.word	0x40023800
 80040e4:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e8:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x454>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	2200      	movs	r2, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	4611      	mov	r1, r2
 80040f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040f8:	653b      	str	r3, [r7, #80]	; 0x50
 80040fa:	2300      	movs	r3, #0
 80040fc:	657b      	str	r3, [r7, #84]	; 0x54
 80040fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004102:	4642      	mov	r2, r8
 8004104:	464b      	mov	r3, r9
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004114:	0150      	lsls	r0, r2, #5
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4641      	mov	r1, r8
 800411c:	1a51      	subs	r1, r2, r1
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	4649      	mov	r1, r9
 8004122:	eb63 0301 	sbc.w	r3, r3, r1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004134:	4659      	mov	r1, fp
 8004136:	018b      	lsls	r3, r1, #6
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800413e:	4651      	mov	r1, sl
 8004140:	018a      	lsls	r2, r1, #6
 8004142:	4651      	mov	r1, sl
 8004144:	1a54      	subs	r4, r2, r1
 8004146:	4659      	mov	r1, fp
 8004148:	eb63 0501 	sbc.w	r5, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	00eb      	lsls	r3, r5, #3
 8004156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800415a:	00e2      	lsls	r2, r4, #3
 800415c:	4614      	mov	r4, r2
 800415e:	461d      	mov	r5, r3
 8004160:	4643      	mov	r3, r8
 8004162:	18e3      	adds	r3, r4, r3
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	464b      	mov	r3, r9
 8004168:	eb45 0303 	adc.w	r3, r5, r3
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800417a:	4629      	mov	r1, r5
 800417c:	028b      	lsls	r3, r1, #10
 800417e:	4621      	mov	r1, r4
 8004180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004184:	4621      	mov	r1, r4
 8004186:	028a      	lsls	r2, r1, #10
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004190:	2200      	movs	r2, #0
 8004192:	64bb      	str	r3, [r7, #72]	; 0x48
 8004194:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004196:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800419a:	f7fc f833 	bl	8000204 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4613      	mov	r3, r2
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x454>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0f1b      	lsrs	r3, r3, #28
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80041b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041c6:	e003      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80041ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	37b8      	adds	r7, #184	; 0xb8
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00f42400 	.word	0x00f42400

080041e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e28d      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8083 	beq.w	800430e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004208:	4b94      	ldr	r3, [pc, #592]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b04      	cmp	r3, #4
 8004212:	d019      	beq.n	8004248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800421c:	2b08      	cmp	r3, #8
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004220:	4b8e      	ldr	r3, [pc, #568]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422c:	d00c      	beq.n	8004248 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422e:	4b8b      	ldr	r3, [pc, #556]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d112      	bne.n	8004260 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423a:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004246:	d10b      	bne.n	8004260 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	4b84      	ldr	r3, [pc, #528]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05b      	beq.n	800430c <HAL_RCC_OscConfig+0x124>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d157      	bne.n	800430c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e25a      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d106      	bne.n	8004278 <HAL_RCC_OscConfig+0x90>
 800426a:	4b7c      	ldr	r3, [pc, #496]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7b      	ldr	r2, [pc, #492]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xcc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0xb4>
 8004282:	4b76      	ldr	r3, [pc, #472]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a75      	ldr	r2, [pc, #468]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b73      	ldr	r3, [pc, #460]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a72      	ldr	r2, [pc, #456]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xcc>
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a6e      	ldr	r2, [pc, #440]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6b      	ldr	r2, [pc, #428]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd fde8 	bl	8001e90 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fd fde4 	bl	8001e90 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e21f      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b61      	ldr	r3, [pc, #388]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xdc>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd fdd4 	bl	8001e90 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fd fdd0 	bl	8001e90 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e20b      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	4b57      	ldr	r3, [pc, #348]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x104>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d06f      	beq.n	80043fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800431a:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004326:	4b4d      	ldr	r3, [pc, #308]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800432e:	2b08      	cmp	r3, #8
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d11c      	bne.n	8004384 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x186>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e1d3      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4937      	ldr	r1, [pc, #220]	; (800445c <HAL_RCC_OscConfig+0x274>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	e03a      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCC_OscConfig+0x278>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fd7d 	bl	8001e90 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439a:	f7fd fd79 	bl	8001e90 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1b4      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4925      	ldr	r1, [pc, #148]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCC_OscConfig+0x278>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd fd5c 	bl	8001e90 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043dc:	f7fd fd58 	bl	8001e90 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e193      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d036      	beq.n	8004474 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_RCC_OscConfig+0x27c>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fd fd3c 	bl	8001e90 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441c:	f7fd fd38 	bl	8001e90 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e173      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_OscConfig+0x274>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x234>
 800443a:	e01b      	b.n	8004474 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_OscConfig+0x27c>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fd fd25 	bl	8001e90 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004448:	e00e      	b.n	8004468 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444a:	f7fd fd21 	bl	8001e90 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d907      	bls.n	8004468 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e15c      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
 800445c:	40023800 	.word	0x40023800
 8004460:	42470000 	.word	0x42470000
 8004464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	4b8a      	ldr	r3, [pc, #552]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ea      	bne.n	800444a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8097 	beq.w	80045b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004486:	4b83      	ldr	r3, [pc, #524]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b7f      	ldr	r3, [pc, #508]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a7e      	ldr	r2, [pc, #504]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b7c      	ldr	r3, [pc, #496]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b79      	ldr	r3, [pc, #484]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d118      	bne.n	80044f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b76      	ldr	r3, [pc, #472]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a75      	ldr	r2, [pc, #468]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ca:	f7fd fce1 	bl	8001e90 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7fd fcdd 	bl	8001e90 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e118      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_RCC_OscConfig+0x4b0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x31e>
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a65      	ldr	r2, [pc, #404]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x358>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x340>
 800450e:	4b61      	ldr	r3, [pc, #388]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a60      	ldr	r2, [pc, #384]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x358>
 8004528:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a59      	ldr	r2, [pc, #356]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b57      	ldr	r3, [pc, #348]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a56      	ldr	r2, [pc, #344]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	f023 0304 	bic.w	r3, r3, #4
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fca2 	bl	8001e90 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fd fc9e 	bl	8001e90 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0d7      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ee      	beq.n	8004550 <HAL_RCC_OscConfig+0x368>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fd fc8c 	bl	8001e90 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fd fc88 	bl	8001e90 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0c1      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ee      	bne.n	800457c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	4a3a      	ldr	r2, [pc, #232]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80ad 	beq.w	8004714 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ba:	4b36      	ldr	r3, [pc, #216]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d060      	beq.n	8004688 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d145      	bne.n	800465a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b33      	ldr	r3, [pc, #204]	; (800469c <HAL_RCC_OscConfig+0x4b4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fc5c 	bl	8001e90 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd fc58 	bl	8001e90 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e093      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	491b      	ldr	r1, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x4b4>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fc2d 	bl	8001e90 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd fc29 	bl	8001e90 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e064      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x452>
 8004658:	e05c      	b.n	8004714 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_OscConfig+0x4b4>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fd fc16 	bl	8001e90 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fd fc12 	bl	8001e90 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e04d      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_OscConfig+0x4ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x480>
 8004686:	e045      	b.n	8004714 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e040      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
 8004694:	40023800 	.word	0x40023800
 8004698:	40007000 	.word	0x40007000
 800469c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a0:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCC_OscConfig+0x538>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d030      	beq.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d129      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d122      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d8:	4293      	cmp	r3, r2
 80046da:	d119      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	3b01      	subs	r3, #1
 80046ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d10f      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e041      	b.n	80047ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fde8 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fe54 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d001      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04e      	b.n	800487a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <HAL_TIM_Base_Start_IT+0xc4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d022      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d01d      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_TIM_Base_Start_IT+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_TIM_Base_Start_IT+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIM_Base_Start_IT+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <HAL_TIM_Base_Start_IT+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <HAL_TIM_Base_Start_IT+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0x80>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b06      	cmp	r3, #6
 8004854:	d010      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	e007      	b.n	8004878 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40010400 	.word	0x40010400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40001800 	.word	0x40001800

080048a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e041      	b.n	800493a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f839 	bl	8004942 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fd94 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e022      	b.n	80049ca <HAL_TIM_PWM_Start_DMA+0x72>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b04      	cmp	r3, #4
 8004988:	d109      	bne.n	800499e <HAL_TIM_PWM_Start_DMA+0x46>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e015      	b.n	80049ca <HAL_TIM_PWM_Start_DMA+0x72>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d109      	bne.n	80049b8 <HAL_TIM_PWM_Start_DMA+0x60>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e008      	b.n	80049ca <HAL_TIM_PWM_Start_DMA+0x72>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	e171      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <HAL_TIM_PWM_Start_DMA+0x94>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e022      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0xda>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d109      	bne.n	8004a06 <HAL_TIM_PWM_Start_DMA+0xae>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	e015      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d109      	bne.n	8004a20 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e008      	b.n	8004a32 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d024      	beq.n	8004a80 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start_DMA+0xee>
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e137      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	e016      	b.n	8004a84 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a64:	e00e      	b.n	8004a84 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	e006      	b.n	8004a84 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7e:	e001      	b.n	8004a84 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e118      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	f200 80ae 	bhi.w	8004be8 <HAL_TIM_PWM_Start_DMA+0x290>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004be9 	.word	0x08004be9
 8004a9c:	08004be9 	.word	0x08004be9
 8004aa0:	08004be9 	.word	0x08004be9
 8004aa4:	08004b11 	.word	0x08004b11
 8004aa8:	08004be9 	.word	0x08004be9
 8004aac:	08004be9 	.word	0x08004be9
 8004ab0:	08004be9 	.word	0x08004be9
 8004ab4:	08004b59 	.word	0x08004b59
 8004ab8:	08004be9 	.word	0x08004be9
 8004abc:	08004be9 	.word	0x08004be9
 8004ac0:	08004be9 	.word	0x08004be9
 8004ac4:	08004ba1 	.word	0x08004ba1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	4a7c      	ldr	r2, [pc, #496]	; (8004cc0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004ace:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	4a7b      	ldr	r2, [pc, #492]	; (8004cc4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4a7a      	ldr	r2, [pc, #488]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004ade:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3334      	adds	r3, #52	; 0x34
 8004aec:	461a      	mov	r2, r3
 8004aee:	887b      	ldrh	r3, [r7, #2]
 8004af0:	f7fd fe30 	bl	8002754 <HAL_DMA_Start_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0db      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0c:	60da      	str	r2, [r3, #12]
      break;
 8004b0e:	e06e      	b.n	8004bee <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	4a69      	ldr	r2, [pc, #420]	; (8004cc4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	4a68      	ldr	r2, [pc, #416]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004b26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3338      	adds	r3, #56	; 0x38
 8004b34:	461a      	mov	r2, r3
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	f7fd fe0c 	bl	8002754 <HAL_DMA_Start_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0b7      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b54:	60da      	str	r2, [r3, #12]
      break;
 8004b56:	e04a      	b.n	8004bee <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a56      	ldr	r2, [pc, #344]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004b6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	333c      	adds	r3, #60	; 0x3c
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	887b      	ldrh	r3, [r7, #2]
 8004b80:	f7fd fde8 	bl	8002754 <HAL_DMA_Start_IT>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e093      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9c:	60da      	str	r2, [r3, #12]
      break;
 8004b9e:	e026      	b.n	8004bee <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	4a46      	ldr	r2, [pc, #280]	; (8004cc0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4a45      	ldr	r2, [pc, #276]	; (8004cc4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4a44      	ldr	r2, [pc, #272]	; (8004cc8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004bb6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3340      	adds	r3, #64	; 0x40
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	f7fd fdc4 	bl	8002754 <HAL_DMA_Start_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e06f      	b.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004be4:	60da      	str	r2, [r3, #12]
      break;
 8004be6:	e002      	b.n	8004bee <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	75fb      	strb	r3, [r7, #23]
      break;
 8004bec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d15f      	bne.n	8004cb4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fef1 	bl	80059e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a31      	ldr	r2, [pc, #196]	; (8004ccc <HAL_TIM_PWM_Start_DMA+0x374>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <HAL_TIM_PWM_Start_DMA+0x374>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d01d      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_TIM_PWM_Start_DMA+0x384>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x328>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d111      	bne.n	8004ca4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d010      	beq.n	8004cb4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	e007      	b.n	8004cb4 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	08005301 	.word	0x08005301
 8004cc4:	080053a9 	.word	0x080053a9
 8004cc8:	0800526f 	.word	0x0800526f
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40010400 	.word	0x40010400
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40001800 	.word	0x40001800

08004ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d122      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d11b      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0202 	mvn.w	r2, #2
 8004d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa77 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa69 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fb fc17 	bl	800056c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d122      	bne.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0204 	mvn.w	r2, #4
 8004d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa4d 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fa3f 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fb fbed 	bl	800056c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d122      	bne.n	8004dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d11b      	bne.n	8004dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0208 	mvn.w	r2, #8
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa23 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa15 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7fb fbc3 	bl	800056c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0210 	mvn.w	r2, #16
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2208      	movs	r2, #8
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9f9 	bl	800521e <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9eb 	bl	800520a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fb fb99 	bl	800056c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d10e      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d107      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0201 	mvn.w	r2, #1
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fb92 	bl	8000590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d107      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fe52 	bl	8005b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b40      	cmp	r3, #64	; 0x40
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9c1 	bl	8005246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d107      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0220 	mvn.w	r2, #32
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fe1c 	bl	8005b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0ae      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	f200 809f 	bhi.w	8005064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08005065 	.word	0x08005065
 8004f34:	08005065 	.word	0x08005065
 8004f38:	08005065 	.word	0x08005065
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08005065 	.word	0x08005065
 8004f44:	08005065 	.word	0x08005065
 8004f48:	08005065 	.word	0x08005065
 8004f4c:	08004fe3 	.word	0x08004fe3
 8004f50:	08005065 	.word	0x08005065
 8004f54:	08005065 	.word	0x08005065
 8004f58:	08005065 	.word	0x08005065
 8004f5c:	08005023 	.word	0x08005023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 faf2 	bl	8005550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0204 	bic.w	r2, r2, #4
 8004f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	619a      	str	r2, [r3, #24]
      break;
 8004f9e:	e064      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb42 	bl	8005630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6999      	ldr	r1, [r3, #24]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	021a      	lsls	r2, r3, #8
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	619a      	str	r2, [r3, #24]
      break;
 8004fe0:	e043      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fb97 	bl	800571c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0208 	orr.w	r2, r2, #8
 8004ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0204 	bic.w	r2, r2, #4
 800500c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69d9      	ldr	r1, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	61da      	str	r2, [r3, #28]
      break;
 8005020:	e023      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fbeb 	bl	8005804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69d9      	ldr	r1, [r3, #28]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	021a      	lsls	r2, r3, #8
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	61da      	str	r2, [r3, #28]
      break;
 8005062:	e002      	b.n	800506a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	75fb      	strb	r3, [r7, #23]
      break;
 8005068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIM_ConfigClockSource+0x1c>
 8005094:	2302      	movs	r3, #2
 8005096:	e0b4      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x186>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d0:	d03e      	beq.n	8005150 <HAL_TIM_ConfigClockSource+0xd4>
 80050d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d6:	f200 8087 	bhi.w	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050de:	f000 8086 	beq.w	80051ee <HAL_TIM_ConfigClockSource+0x172>
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d87f      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d01a      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0xa6>
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d87b      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d050      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x11a>
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d877      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 80050f8:	2b50      	cmp	r3, #80	; 0x50
 80050fa:	d03c      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0xfa>
 80050fc:	2b50      	cmp	r3, #80	; 0x50
 80050fe:	d873      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d058      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d86f      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d064      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x15a>
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d86b      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d060      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d867      	bhi.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05c      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x15a>
 800511c:	2b10      	cmp	r3, #16
 800511e:	d05a      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	e062      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f000 fc37 	bl	80059a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	609a      	str	r2, [r3, #8]
      break;
 800514e:	e04f      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6899      	ldr	r1, [r3, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f000 fc20 	bl	80059a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005172:	609a      	str	r2, [r3, #8]
      break;
 8005174:	e03c      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	461a      	mov	r2, r3
 8005184:	f000 fb94 	bl	80058b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2150      	movs	r1, #80	; 0x50
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fbed 	bl	800596e <TIM_ITRx_SetConfig>
      break;
 8005194:	e02c      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f000 fbb3 	bl	800590e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2160      	movs	r1, #96	; 0x60
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fbdd 	bl	800596e <TIM_ITRx_SetConfig>
      break;
 80051b4:	e01c      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f000 fb74 	bl	80058b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fbcd 	bl	800596e <TIM_ITRx_SetConfig>
      break;
 80051d4:	e00c      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f000 fbc4 	bl	800596e <TIM_ITRx_SetConfig>
      break;
 80051e6:	e003      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	e000      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d107      	bne.n	8005296 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	e02a      	b.n	80052ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d107      	bne.n	80052b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2202      	movs	r2, #2
 80052a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ae:	e01d      	b.n	80052ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d107      	bne.n	80052ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2204      	movs	r2, #4
 80052be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	e010      	b.n	80052ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2208      	movs	r2, #8
 80052d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e2:	e003      	b.n	80052ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff ffb4 	bl	800525a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d10b      	bne.n	8005330 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d136      	bne.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800532e:	e031      	b.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d10b      	bne.n	8005352 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2202      	movs	r2, #2
 800533e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d125      	bne.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005350:	e020      	b.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d10b      	bne.n	8005374 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2204      	movs	r2, #4
 8005360:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d114      	bne.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005372:	e00f      	b.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d10a      	bne.n	8005394 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2208      	movs	r2, #8
 8005382:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7fb f8e9 	bl	800056c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d103      	bne.n	80053c8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	771a      	strb	r2, [r3, #28]
 80053c6:	e019      	b.n	80053fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d103      	bne.n	80053da <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2202      	movs	r2, #2
 80053d6:	771a      	strb	r2, [r3, #28]
 80053d8:	e010      	b.n	80053fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d103      	bne.n	80053ec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2204      	movs	r2, #4
 80053e8:	771a      	strb	r2, [r3, #28]
 80053ea:	e007      	b.n	80053fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d102      	bne.n	80053fc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2208      	movs	r2, #8
 80053fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff ff18 	bl	8005232 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a40      	ldr	r2, [pc, #256]	; (8005524 <TIM_Base_SetConfig+0x114>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d00f      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <TIM_Base_SetConfig+0x118>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3c      	ldr	r2, [pc, #240]	; (800552c <TIM_Base_SetConfig+0x11c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a3b      	ldr	r2, [pc, #236]	; (8005530 <TIM_Base_SetConfig+0x120>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a3a      	ldr	r2, [pc, #232]	; (8005534 <TIM_Base_SetConfig+0x124>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <TIM_Base_SetConfig+0x114>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d027      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <TIM_Base_SetConfig+0x118>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d023      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2b      	ldr	r2, [pc, #172]	; (800552c <TIM_Base_SetConfig+0x11c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01f      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <TIM_Base_SetConfig+0x120>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01b      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a29      	ldr	r2, [pc, #164]	; (8005534 <TIM_Base_SetConfig+0x124>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d017      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a28      	ldr	r2, [pc, #160]	; (8005538 <TIM_Base_SetConfig+0x128>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <TIM_Base_SetConfig+0x12c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00f      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a26      	ldr	r2, [pc, #152]	; (8005540 <TIM_Base_SetConfig+0x130>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00b      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a25      	ldr	r2, [pc, #148]	; (8005544 <TIM_Base_SetConfig+0x134>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a24      	ldr	r2, [pc, #144]	; (8005548 <TIM_Base_SetConfig+0x138>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <TIM_Base_SetConfig+0x13c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d108      	bne.n	80054d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <TIM_Base_SetConfig+0x114>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a0c      	ldr	r2, [pc, #48]	; (8005534 <TIM_Base_SetConfig+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	615a      	str	r2, [r3, #20]
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	40001800 	.word	0x40001800
 8005548:	40001c00 	.word	0x40001c00
 800554c:	40002000 	.word	0x40002000

08005550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 0302 	bic.w	r3, r3, #2
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a20      	ldr	r2, [pc, #128]	; (8005628 <TIM_OC1_SetConfig+0xd8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_OC1_SetConfig+0x64>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <TIM_OC1_SetConfig+0xdc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10c      	bne.n	80055ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0308 	bic.w	r3, r3, #8
 80055ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <TIM_OC1_SetConfig+0xd8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_OC1_SetConfig+0x8e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <TIM_OC1_SetConfig+0xdc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d111      	bne.n	8005602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	621a      	str	r2, [r3, #32]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40010000 	.word	0x40010000
 800562c:	40010400 	.word	0x40010400

08005630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f023 0210 	bic.w	r2, r3, #16
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a22      	ldr	r2, [pc, #136]	; (8005714 <TIM_OC2_SetConfig+0xe4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC2_SetConfig+0x68>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a21      	ldr	r2, [pc, #132]	; (8005718 <TIM_OC2_SetConfig+0xe8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10d      	bne.n	80056b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a17      	ldr	r2, [pc, #92]	; (8005714 <TIM_OC2_SetConfig+0xe4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_OC2_SetConfig+0x94>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a16      	ldr	r2, [pc, #88]	; (8005718 <TIM_OC2_SetConfig+0xe8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d113      	bne.n	80056ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400

0800571c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a21      	ldr	r2, [pc, #132]	; (80057fc <TIM_OC3_SetConfig+0xe0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC3_SetConfig+0x66>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a20      	ldr	r2, [pc, #128]	; (8005800 <TIM_OC3_SetConfig+0xe4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10d      	bne.n	800579e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a16      	ldr	r2, [pc, #88]	; (80057fc <TIM_OC3_SetConfig+0xe0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_OC3_SetConfig+0x92>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a15      	ldr	r2, [pc, #84]	; (8005800 <TIM_OC3_SetConfig+0xe4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d113      	bne.n	80057d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010400 	.word	0x40010400

08005804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800584e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <TIM_OC4_SetConfig+0xa4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC4_SetConfig+0x68>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a11      	ldr	r2, [pc, #68]	; (80058ac <TIM_OC4_SetConfig+0xa8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d109      	bne.n	8005880 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40010400 	.word	0x40010400

080058b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 030a 	bic.w	r3, r3, #10
 80058ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800590e:	b480      	push	{r7}
 8005910:	b087      	sub	sp, #28
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f023 0210 	bic.w	r2, r3, #16
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	031b      	lsls	r3, r3, #12
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800594a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	f043 0307 	orr.w	r3, r3, #7
 8005990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	609a      	str	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2201      	movs	r2, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	401a      	ands	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e05a      	b.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a21      	ldr	r2, [pc, #132]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d01d      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d10c      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40010400 	.word	0x40010400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40001800 	.word	0x40001800

08005b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e03f      	b.n	8005be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fcf4 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fba5 	bl	80062e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08a      	sub	sp, #40	; 0x28
 8005bee:	af02      	add	r7, sp, #8
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d17c      	bne.n	8005d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_UART_Transmit+0x2c>
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e075      	b.n	8005d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_UART_Transmit+0x3e>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e06e      	b.n	8005d06 <HAL_UART_Transmit+0x11c>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2221      	movs	r2, #33	; 0x21
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c3e:	f7fc f927 	bl	8001e90 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	88fa      	ldrh	r2, [r7, #6]
 8005c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c58:	d108      	bne.n	8005c6c <HAL_UART_Transmit+0x82>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e003      	b.n	8005c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c7c:	e02a      	b.n	8005cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2180      	movs	r1, #128	; 0x80
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f992 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e036      	b.n	8005d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e007      	b.n	8005cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1cf      	bne.n	8005c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2140      	movs	r1, #64	; 0x40
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f962 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e006      	b.n	8005d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d11d      	bne.n	8005d64 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Receive_DMA+0x26>
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e016      	b.n	8005d66 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Receive_DMA+0x38>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e00f      	b.n	8005d66 <HAL_UART_Receive_DMA+0x58>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f998 	bl	8006090 <UART_Start_Receive_DMA>
 8005d60:	4603      	mov	r3, r0
 8005d62:	e000      	b.n	8005d66 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b09c      	sub	sp, #112	; 0x70
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d172      	bne.n	8005ec4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	2200      	movs	r2, #0
 8005de2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e04:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e06:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2a:	f023 0301 	bic.w	r3, r3, #1
 8005e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8005e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e38:	647a      	str	r2, [r7, #68]	; 0x44
 8005e3a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e5      	bne.n	8005e18 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e62:	663b      	str	r3, [r7, #96]	; 0x60
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e6c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d119      	bne.n	8005ec4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0310 	bic.w	r3, r3, #16
 8005ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eb0:	61fa      	str	r2, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e5      	bne.n	8005e90 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d106      	bne.n	8005eda <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ed4:	f7ff ff69 	bl	8005daa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ed8:	e002      	b.n	8005ee0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005eda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005edc:	f7ff ff47 	bl	8005d6e <HAL_UART_RxCpltCallback>
}
 8005ee0:	bf00      	nop
 8005ee2:	3770      	adds	r7, #112	; 0x70
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d108      	bne.n	8005f10 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff ff4e 	bl	8005daa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f0e:	e002      	b.n	8005f16 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff ff36 	bl	8005d82 <HAL_UART_RxHalfCpltCallback>
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b80      	cmp	r3, #128	; 0x80
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b21      	cmp	r3, #33	; 0x21
 8005f50:	d108      	bne.n	8005f64 <UART_DMAError+0x46>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f5e:	68b8      	ldr	r0, [r7, #8]
 8005f60:	f000 f934 	bl	80061cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b22      	cmp	r3, #34	; 0x22
 8005f84:	d108      	bne.n	8005f98 <UART_DMAError+0x7a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f000 f942 	bl	800621c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	f043 0210 	orr.w	r2, r3, #16
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa4:	68b8      	ldr	r0, [r7, #8]
 8005fa6:	f7ff fef6 	bl	8005d96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b090      	sub	sp, #64	; 0x40
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	e050      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d04c      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd2:	f7fb ff5d 	bl	8001e90 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d241      	bcs.n	8006066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006002:	637a      	str	r2, [r7, #52]	; 0x34
 8006004:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	613b      	str	r3, [r7, #16]
   return(result);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006036:	623a      	str	r2, [r7, #32]
 8006038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	61bb      	str	r3, [r7, #24]
   return(result);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e00f      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	429a      	cmp	r2, r3
 8006082:	d09f      	beq.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3740      	adds	r7, #64	; 0x40
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b098      	sub	sp, #96	; 0x60
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2222      	movs	r2, #34	; 0x22
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	4a40      	ldr	r2, [pc, #256]	; (80061c0 <UART_Start_Receive_DMA+0x130>)
 80060be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	4a3f      	ldr	r2, [pc, #252]	; (80061c4 <UART_Start_Receive_DMA+0x134>)
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4a3e      	ldr	r2, [pc, #248]	; (80061c8 <UART_Start_Receive_DMA+0x138>)
 80060ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	2200      	movs	r2, #0
 80060d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f7fc fb30 	bl	8002754 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d019      	beq.n	800614e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	65bb      	str	r3, [r7, #88]	; 0x58
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800613a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800613c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	657b      	str	r3, [r7, #84]	; 0x54
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800616e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	617b      	str	r3, [r7, #20]
   return(result);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006198:	653b      	str	r3, [r7, #80]	; 0x50
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061a2:	627a      	str	r2, [r7, #36]	; 0x24
 80061a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e5      	bne.n	8006182 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3760      	adds	r7, #96	; 0x60
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	08005dc3 	.word	0x08005dc3
 80061c4:	08005ee9 	.word	0x08005ee9
 80061c8:	08005f1f 	.word	0x08005f1f

080061cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	61ba      	str	r2, [r7, #24]
 80061f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6979      	ldr	r1, [r7, #20]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	613b      	str	r3, [r7, #16]
   return(result);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e5      	bne.n	80061d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006210:	bf00      	nop
 8006212:	3724      	adds	r7, #36	; 0x24
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b095      	sub	sp, #84	; 0x54
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006244:	643a      	str	r2, [r7, #64]	; 0x40
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800624a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e5      	bne.n	8006224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3314      	adds	r3, #20
 800625e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	61fb      	str	r3, [r7, #28]
   return(result);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3314      	adds	r3, #20
 8006276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800627e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e5      	bne.n	8006258 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	2b01      	cmp	r3, #1
 8006292:	d119      	bne.n	80062c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f023 0310 	bic.w	r3, r3, #16
 80062aa:	647b      	str	r3, [r7, #68]	; 0x44
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b4:	61ba      	str	r2, [r7, #24]
 80062b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6979      	ldr	r1, [r7, #20]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	613b      	str	r3, [r7, #16]
   return(result);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062d6:	bf00      	nop
 80062d8:	3754      	adds	r7, #84	; 0x54
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e8:	b0c0      	sub	sp, #256	; 0x100
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	68d9      	ldr	r1, [r3, #12]
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	ea40 0301 	orr.w	r3, r0, r1
 800630c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	431a      	orrs	r2, r3
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	431a      	orrs	r2, r3
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800633c:	f021 010c 	bic.w	r1, r1, #12
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800634a:	430b      	orrs	r3, r1
 800634c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635e:	6999      	ldr	r1, [r3, #24]
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	ea40 0301 	orr.w	r3, r0, r1
 800636a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b8f      	ldr	r3, [pc, #572]	; (80065b0 <UART_SetConfig+0x2cc>)
 8006374:	429a      	cmp	r2, r3
 8006376:	d005      	beq.n	8006384 <UART_SetConfig+0xa0>
 8006378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b8d      	ldr	r3, [pc, #564]	; (80065b4 <UART_SetConfig+0x2d0>)
 8006380:	429a      	cmp	r2, r3
 8006382:	d104      	bne.n	800638e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fd fcee 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8006388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800638c:	e003      	b.n	8006396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800638e:	f7fd fcd5 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8006392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a0:	f040 810c 	bne.w	80065bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063b6:	4622      	mov	r2, r4
 80063b8:	462b      	mov	r3, r5
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80063be:	415b      	adcs	r3, r3
 80063c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063c6:	4621      	mov	r1, r4
 80063c8:	eb12 0801 	adds.w	r8, r2, r1
 80063cc:	4629      	mov	r1, r5
 80063ce:	eb43 0901 	adc.w	r9, r3, r1
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063e6:	4690      	mov	r8, r2
 80063e8:	4699      	mov	r9, r3
 80063ea:	4623      	mov	r3, r4
 80063ec:	eb18 0303 	adds.w	r3, r8, r3
 80063f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063f4:	462b      	mov	r3, r5
 80063f6:	eb49 0303 	adc.w	r3, r9, r3
 80063fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800640a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800640e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006412:	460b      	mov	r3, r1
 8006414:	18db      	adds	r3, r3, r3
 8006416:	653b      	str	r3, [r7, #80]	; 0x50
 8006418:	4613      	mov	r3, r2
 800641a:	eb42 0303 	adc.w	r3, r2, r3
 800641e:	657b      	str	r3, [r7, #84]	; 0x54
 8006420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006428:	f7f9 feec 	bl	8000204 <__aeabi_uldivmod>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4b61      	ldr	r3, [pc, #388]	; (80065b8 <UART_SetConfig+0x2d4>)
 8006432:	fba3 2302 	umull	r2, r3, r3, r2
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	011c      	lsls	r4, r3, #4
 800643a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643e:	2200      	movs	r2, #0
 8006440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	1891      	adds	r1, r2, r2
 8006452:	64b9      	str	r1, [r7, #72]	; 0x48
 8006454:	415b      	adcs	r3, r3
 8006456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800645c:	4641      	mov	r1, r8
 800645e:	eb12 0a01 	adds.w	sl, r2, r1
 8006462:	4649      	mov	r1, r9
 8006464:	eb43 0b01 	adc.w	fp, r3, r1
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800647c:	4692      	mov	sl, r2
 800647e:	469b      	mov	fp, r3
 8006480:	4643      	mov	r3, r8
 8006482:	eb1a 0303 	adds.w	r3, sl, r3
 8006486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800648a:	464b      	mov	r3, r9
 800648c:	eb4b 0303 	adc.w	r3, fp, r3
 8006490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a8:	460b      	mov	r3, r1
 80064aa:	18db      	adds	r3, r3, r3
 80064ac:	643b      	str	r3, [r7, #64]	; 0x40
 80064ae:	4613      	mov	r3, r2
 80064b0:	eb42 0303 	adc.w	r3, r2, r3
 80064b4:	647b      	str	r3, [r7, #68]	; 0x44
 80064b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064be:	f7f9 fea1 	bl	8000204 <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <UART_SetConfig+0x2d4>)
 80064ca:	fba3 2301 	umull	r2, r3, r3, r1
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	2264      	movs	r2, #100	; 0x64
 80064d2:	fb02 f303 	mul.w	r3, r2, r3
 80064d6:	1acb      	subs	r3, r1, r3
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064de:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <UART_SetConfig+0x2d4>)
 80064e0:	fba3 2302 	umull	r2, r3, r3, r2
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064ec:	441c      	add	r4, r3
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	63b9      	str	r1, [r7, #56]	; 0x38
 8006508:	415b      	adcs	r3, r3
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800650c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006510:	4641      	mov	r1, r8
 8006512:	1851      	adds	r1, r2, r1
 8006514:	6339      	str	r1, [r7, #48]	; 0x30
 8006516:	4649      	mov	r1, r9
 8006518:	414b      	adcs	r3, r1
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006528:	4659      	mov	r1, fp
 800652a:	00cb      	lsls	r3, r1, #3
 800652c:	4651      	mov	r1, sl
 800652e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006532:	4651      	mov	r1, sl
 8006534:	00ca      	lsls	r2, r1, #3
 8006536:	4610      	mov	r0, r2
 8006538:	4619      	mov	r1, r3
 800653a:	4603      	mov	r3, r0
 800653c:	4642      	mov	r2, r8
 800653e:	189b      	adds	r3, r3, r2
 8006540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006544:	464b      	mov	r3, r9
 8006546:	460a      	mov	r2, r1
 8006548:	eb42 0303 	adc.w	r3, r2, r3
 800654c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800655c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006564:	460b      	mov	r3, r1
 8006566:	18db      	adds	r3, r3, r3
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
 800656a:	4613      	mov	r3, r2
 800656c:	eb42 0303 	adc.w	r3, r2, r3
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800657a:	f7f9 fe43 	bl	8000204 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <UART_SetConfig+0x2d4>)
 8006584:	fba3 1302 	umull	r1, r3, r3, r2
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	3332      	adds	r3, #50	; 0x32
 8006596:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <UART_SetConfig+0x2d4>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	f003 0207 	and.w	r2, r3, #7
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4422      	add	r2, r4
 80065aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065ac:	e105      	b.n	80067ba <UART_SetConfig+0x4d6>
 80065ae:	bf00      	nop
 80065b0:	40011000 	.word	0x40011000
 80065b4:	40011400 	.word	0x40011400
 80065b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065ce:	4642      	mov	r2, r8
 80065d0:	464b      	mov	r3, r9
 80065d2:	1891      	adds	r1, r2, r2
 80065d4:	6239      	str	r1, [r7, #32]
 80065d6:	415b      	adcs	r3, r3
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065de:	4641      	mov	r1, r8
 80065e0:	1854      	adds	r4, r2, r1
 80065e2:	4649      	mov	r1, r9
 80065e4:	eb43 0501 	adc.w	r5, r3, r1
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	00eb      	lsls	r3, r5, #3
 80065f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f6:	00e2      	lsls	r2, r4, #3
 80065f8:	4614      	mov	r4, r2
 80065fa:	461d      	mov	r5, r3
 80065fc:	4643      	mov	r3, r8
 80065fe:	18e3      	adds	r3, r4, r3
 8006600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006604:	464b      	mov	r3, r9
 8006606:	eb45 0303 	adc.w	r3, r5, r3
 800660a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800661a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800662a:	4629      	mov	r1, r5
 800662c:	008b      	lsls	r3, r1, #2
 800662e:	4621      	mov	r1, r4
 8006630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006634:	4621      	mov	r1, r4
 8006636:	008a      	lsls	r2, r1, #2
 8006638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800663c:	f7f9 fde2 	bl	8000204 <__aeabi_uldivmod>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4b60      	ldr	r3, [pc, #384]	; (80067c8 <UART_SetConfig+0x4e4>)
 8006646:	fba3 2302 	umull	r2, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	011c      	lsls	r4, r3, #4
 800664e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800665c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	1891      	adds	r1, r2, r2
 8006666:	61b9      	str	r1, [r7, #24]
 8006668:	415b      	adcs	r3, r3
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006670:	4641      	mov	r1, r8
 8006672:	1851      	adds	r1, r2, r1
 8006674:	6139      	str	r1, [r7, #16]
 8006676:	4649      	mov	r1, r9
 8006678:	414b      	adcs	r3, r1
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006688:	4659      	mov	r1, fp
 800668a:	00cb      	lsls	r3, r1, #3
 800668c:	4651      	mov	r1, sl
 800668e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006692:	4651      	mov	r1, sl
 8006694:	00ca      	lsls	r2, r1, #3
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	4603      	mov	r3, r0
 800669c:	4642      	mov	r2, r8
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066a4:	464b      	mov	r3, r9
 80066a6:	460a      	mov	r2, r1
 80066a8:	eb42 0303 	adc.w	r3, r2, r3
 80066ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c8:	4649      	mov	r1, r9
 80066ca:	008b      	lsls	r3, r1, #2
 80066cc:	4641      	mov	r1, r8
 80066ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066d2:	4641      	mov	r1, r8
 80066d4:	008a      	lsls	r2, r1, #2
 80066d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066da:	f7f9 fd93 	bl	8000204 <__aeabi_uldivmod>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <UART_SetConfig+0x4e4>)
 80066e4:	fba3 1302 	umull	r1, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	2164      	movs	r1, #100	; 0x64
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	3332      	adds	r3, #50	; 0x32
 80066f6:	4a34      	ldr	r2, [pc, #208]	; (80067c8 <UART_SetConfig+0x4e4>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006702:	441c      	add	r4, r3
 8006704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006708:	2200      	movs	r2, #0
 800670a:	673b      	str	r3, [r7, #112]	; 0x70
 800670c:	677a      	str	r2, [r7, #116]	; 0x74
 800670e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006712:	4642      	mov	r2, r8
 8006714:	464b      	mov	r3, r9
 8006716:	1891      	adds	r1, r2, r2
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	415b      	adcs	r3, r3
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006722:	4641      	mov	r1, r8
 8006724:	1851      	adds	r1, r2, r1
 8006726:	6039      	str	r1, [r7, #0]
 8006728:	4649      	mov	r1, r9
 800672a:	414b      	adcs	r3, r1
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800673a:	4659      	mov	r1, fp
 800673c:	00cb      	lsls	r3, r1, #3
 800673e:	4651      	mov	r1, sl
 8006740:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006744:	4651      	mov	r1, sl
 8006746:	00ca      	lsls	r2, r1, #3
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	4603      	mov	r3, r0
 800674e:	4642      	mov	r2, r8
 8006750:	189b      	adds	r3, r3, r2
 8006752:	66bb      	str	r3, [r7, #104]	; 0x68
 8006754:	464b      	mov	r3, r9
 8006756:	460a      	mov	r2, r1
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800675e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	663b      	str	r3, [r7, #96]	; 0x60
 8006768:	667a      	str	r2, [r7, #100]	; 0x64
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006776:	4649      	mov	r1, r9
 8006778:	008b      	lsls	r3, r1, #2
 800677a:	4641      	mov	r1, r8
 800677c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006780:	4641      	mov	r1, r8
 8006782:	008a      	lsls	r2, r1, #2
 8006784:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006788:	f7f9 fd3c 	bl	8000204 <__aeabi_uldivmod>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <UART_SetConfig+0x4e4>)
 8006792:	fba3 1302 	umull	r1, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2164      	movs	r1, #100	; 0x64
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	3332      	adds	r3, #50	; 0x32
 80067a4:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <UART_SetConfig+0x4e4>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4422      	add	r2, r4
 80067b8:	609a      	str	r2, [r3, #8]
}
 80067ba:	bf00      	nop
 80067bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067c0:	46bd      	mov	sp, r7
 80067c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c6:	bf00      	nop
 80067c8:	51eb851f 	.word	0x51eb851f

080067cc <__libc_init_array>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4d0d      	ldr	r5, [pc, #52]	; (8006804 <__libc_init_array+0x38>)
 80067d0:	4c0d      	ldr	r4, [pc, #52]	; (8006808 <__libc_init_array+0x3c>)
 80067d2:	1b64      	subs	r4, r4, r5
 80067d4:	10a4      	asrs	r4, r4, #2
 80067d6:	2600      	movs	r6, #0
 80067d8:	42a6      	cmp	r6, r4
 80067da:	d109      	bne.n	80067f0 <__libc_init_array+0x24>
 80067dc:	4d0b      	ldr	r5, [pc, #44]	; (800680c <__libc_init_array+0x40>)
 80067de:	4c0c      	ldr	r4, [pc, #48]	; (8006810 <__libc_init_array+0x44>)
 80067e0:	f000 f82e 	bl	8006840 <_init>
 80067e4:	1b64      	subs	r4, r4, r5
 80067e6:	10a4      	asrs	r4, r4, #2
 80067e8:	2600      	movs	r6, #0
 80067ea:	42a6      	cmp	r6, r4
 80067ec:	d105      	bne.n	80067fa <__libc_init_array+0x2e>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f4:	4798      	blx	r3
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7ee      	b.n	80067d8 <__libc_init_array+0xc>
 80067fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fe:	4798      	blx	r3
 8006800:	3601      	adds	r6, #1
 8006802:	e7f2      	b.n	80067ea <__libc_init_array+0x1e>
 8006804:	08006890 	.word	0x08006890
 8006808:	08006890 	.word	0x08006890
 800680c:	08006890 	.word	0x08006890
 8006810:	08006898 	.word	0x08006898

08006814 <memcpy>:
 8006814:	440a      	add	r2, r1
 8006816:	4291      	cmp	r1, r2
 8006818:	f100 33ff 	add.w	r3, r0, #4294967295
 800681c:	d100      	bne.n	8006820 <memcpy+0xc>
 800681e:	4770      	bx	lr
 8006820:	b510      	push	{r4, lr}
 8006822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800682a:	4291      	cmp	r1, r2
 800682c:	d1f9      	bne.n	8006822 <memcpy+0xe>
 800682e:	bd10      	pop	{r4, pc}

08006830 <memset>:
 8006830:	4402      	add	r2, r0
 8006832:	4603      	mov	r3, r0
 8006834:	4293      	cmp	r3, r2
 8006836:	d100      	bne.n	800683a <memset+0xa>
 8006838:	4770      	bx	lr
 800683a:	f803 1b01 	strb.w	r1, [r3], #1
 800683e:	e7f9      	b.n	8006834 <memset+0x4>

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr

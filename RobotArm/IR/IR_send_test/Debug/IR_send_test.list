
IR_send_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd0  08002bd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd0  08002bd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd0  08002bd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002be4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002be4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009910  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017eb  00000000  00000000  00029944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d2e  00000000  00000000  0002c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad5f  00000000  00000000  000401e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080637  00000000  00000000  0004af45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb57c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002438  00000000  00000000  000cb5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002b24 	.word	0x08002b24

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002b24 	.word	0x08002b24

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <time_counter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t time_counter(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
   return (overflow_counter << 8) + TIM1->CNT;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <time_counter+0x18>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	021a      	lsls	r2, r3, #8
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <time_counter+0x1c>)
 8000224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000226:	18d3      	adds	r3, r2, r3
 }
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	200000c4 	.word	0x200000c4
 8000234:	40012c00 	.word	0x40012c00

08000238 <HAL_TIM_PeriodElapsedCallback>:

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
     if (htim == &htim1){
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000244:	429a      	cmp	r2, r3
 8000246:	d104      	bne.n	8000252 <HAL_TIM_PeriodElapsedCallback+0x1a>
         overflow_counter++;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	1c5a      	adds	r2, r3, #1
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
     }
 }
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000028 	.word	0x20000028
 8000260:	200000c4 	.word	0x200000c4

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fb44 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f8a2 	bl	80003b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f9e2 	bl	8000638 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000274:	f000 f8e6 	bl	8000444 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000278:	f000 f940 	bl	80004fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800027c:	4b4a      	ldr	r3, [pc, #296]	; (80003a8 <main+0x144>)
 800027e:	0018      	movs	r0, r3
 8000280:	f001 fb50 	bl	8001924 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000284:	4b49      	ldr	r3, [pc, #292]	; (80003ac <main+0x148>)
 8000286:	2100      	movs	r1, #0
 8000288:	0018      	movs	r0, r3
 800028a:	f001 fbf9 	bl	8001a80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800028e:	4b47      	ldr	r3, [pc, #284]	; (80003ac <main+0x148>)
 8000290:	2104      	movs	r1, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fbf4 	bl	8001a80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000298:	4b44      	ldr	r3, [pc, #272]	; (80003ac <main+0x148>)
 800029a:	2108      	movs	r1, #8
 800029c:	0018      	movs	r0, r3
 800029e:	f001 fbef 	bl	8001a80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002a2:	4b42      	ldr	r3, [pc, #264]	; (80003ac <main+0x148>)
 80002a4:	210c      	movs	r1, #12
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 fbea 	bl	8001a80 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tenth_of_a_millisecond = time_counter();
 80002ac:	f7ff ffb4 	bl	8000218 <time_counter>
 80002b0:	0002      	movs	r2, r0
 80002b2:	4b3f      	ldr	r3, [pc, #252]	; (80003b0 <main+0x14c>)
 80002b4:	601a      	str	r2, [r3, #0]
	  if(tenth_of_a_millisecond % 10 < 2){
 80002b6:	4b3e      	ldr	r3, [pc, #248]	; (80003b0 <main+0x14c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	210a      	movs	r1, #10
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ffa5 	bl	800020c <__aeabi_uidivmod>
 80002c2:	000b      	movs	r3, r1
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d810      	bhi.n	80002ea <main+0x86>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);
 80002c8:	4b38      	ldr	r3, [pc, #224]	; (80003ac <main+0x148>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2232      	movs	r2, #50	; 0x32
 80002ce:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80002d0:	4b36      	ldr	r3, [pc, #216]	; (80003ac <main+0x148>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2200      	movs	r2, #0
 80002d6:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <main+0x148>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2200      	movs	r2, #0
 80002de:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <main+0x148>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2200      	movs	r2, #0
 80002e6:	641a      	str	r2, [r3, #64]	; 0x40
 80002e8:	e7e0      	b.n	80002ac <main+0x48>
	  }else if(tenth_of_a_millisecond % 10 < 4){
 80002ea:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <main+0x14c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	210a      	movs	r1, #10
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ff8b 	bl	800020c <__aeabi_uidivmod>
 80002f6:	000b      	movs	r3, r1
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d810      	bhi.n	800031e <main+0xba>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80002fc:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <main+0x148>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2200      	movs	r2, #0
 8000302:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 50);
 8000304:	4b29      	ldr	r3, [pc, #164]	; (80003ac <main+0x148>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2232      	movs	r2, #50	; 0x32
 800030a:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800030c:	4b27      	ldr	r3, [pc, #156]	; (80003ac <main+0x148>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2200      	movs	r2, #0
 8000312:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000314:	4b25      	ldr	r3, [pc, #148]	; (80003ac <main+0x148>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2200      	movs	r2, #0
 800031a:	641a      	str	r2, [r3, #64]	; 0x40
 800031c:	e7c6      	b.n	80002ac <main+0x48>
	  }else if(tenth_of_a_millisecond % 10 < 6){
 800031e:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <main+0x14c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	210a      	movs	r1, #10
 8000324:	0018      	movs	r0, r3
 8000326:	f7ff ff71 	bl	800020c <__aeabi_uidivmod>
 800032a:	000b      	movs	r3, r1
 800032c:	2b05      	cmp	r3, #5
 800032e:	d810      	bhi.n	8000352 <main+0xee>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000330:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <main+0x148>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2200      	movs	r2, #0
 8000336:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <main+0x148>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2200      	movs	r2, #0
 800033e:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 50);
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <main+0x148>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2232      	movs	r2, #50	; 0x32
 8000346:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <main+0x148>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	641a      	str	r2, [r3, #64]	; 0x40
 8000350:	e7ac      	b.n	80002ac <main+0x48>
	  }else if(tenth_of_a_millisecond % 10 < 8){
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <main+0x14c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	210a      	movs	r1, #10
 8000358:	0018      	movs	r0, r3
 800035a:	f7ff ff57 	bl	800020c <__aeabi_uidivmod>
 800035e:	000b      	movs	r3, r1
 8000360:	2b07      	cmp	r3, #7
 8000362:	d810      	bhi.n	8000386 <main+0x122>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <main+0x148>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2200      	movs	r2, #0
 800036a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <main+0x148>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2200      	movs	r2, #0
 8000372:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <main+0x148>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2200      	movs	r2, #0
 800037a:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 50);
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0x148>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2232      	movs	r2, #50	; 0x32
 8000382:	641a      	str	r2, [r3, #64]	; 0x40
 8000384:	e792      	b.n	80002ac <main+0x48>
	  }else{
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0x148>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2200      	movs	r2, #0
 800038c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x148>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2200      	movs	r2, #0
 8000394:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <main+0x148>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2200      	movs	r2, #0
 800039c:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800039e:	4b03      	ldr	r3, [pc, #12]	; (80003ac <main+0x148>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2200      	movs	r2, #0
 80003a4:	641a      	str	r2, [r3, #64]	; 0x40
	  tenth_of_a_millisecond = time_counter();
 80003a6:	e781      	b.n	80002ac <main+0x48>
 80003a8:	20000028 	.word	0x20000028
 80003ac:	20000074 	.word	0x20000074
 80003b0:	200000c0 	.word	0x200000c0

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b093      	sub	sp, #76	; 0x4c
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	2414      	movs	r4, #20
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	0018      	movs	r0, r3
 80003c0:	2334      	movs	r3, #52	; 0x34
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f002 fba5 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	2310      	movs	r3, #16
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f002 fb9e 	bl	8002b14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fd6f 	bl	8000ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	0052      	lsls	r2, r2, #1
 80003ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	2240      	movs	r2, #64	; 0x40
 80003fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	193b      	adds	r3, r7, r4
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fd9b 	bl	8000f40 <HAL_RCC_OscConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800040e:	f000 f957 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2207      	movs	r2, #7
 8000416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2100      	movs	r1, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f001 f896 	bl	8001560 <HAL_RCC_ClockConfig>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000438:	f000 f942 	bl	80006c0 <Error_Handler>
  }
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b013      	add	sp, #76	; 0x4c
 8000442:	bd90      	pop	{r4, r7, pc}

08000444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	2310      	movs	r3, #16
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	0018      	movs	r0, r3
 8000450:	2310      	movs	r3, #16
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 fb5d 	bl	8002b14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	0018      	movs	r0, r3
 800045e:	230c      	movs	r3, #12
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f002 fb56 	bl	8002b14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <MX_TIM1_Init+0xac>)
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <MX_TIM1_Init+0xb0>)
 800046c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 800046e:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <MX_TIM1_Init+0xac>)
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <MX_TIM1_Init+0xb4>)
 8000472:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_TIM1_Init+0xac>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <MX_TIM1_Init+0xac>)
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_TIM1_Init+0xac>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_TIM1_Init+0xac>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_TIM1_Init+0xac>)
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_TIM1_Init+0xac>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f9ed 	bl	8001874 <HAL_TIM_Base_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800049e:	f000 f90f 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	2110      	movs	r1, #16
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0152      	lsls	r2, r2, #5
 80004aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ac:	187a      	adds	r2, r7, r1
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_TIM1_Init+0xac>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fdc4 	bl	8002040 <HAL_TIM_ConfigClockSource>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004bc:	f000 f900 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d2:	1d3a      	adds	r2, r7, #4
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_TIM1_Init+0xac>)
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 fa7d 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80004e2:	f000 f8ed 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b008      	add	sp, #32
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	20000028 	.word	0x20000028
 80004f4:	40012c00 	.word	0x40012c00
 80004f8:	0000063f 	.word	0x0000063f

080004fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	2328      	movs	r3, #40	; 0x28
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fb01 	bl	8002b14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	231c      	movs	r3, #28
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	230c      	movs	r3, #12
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 faf9 	bl	8002b14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	231c      	movs	r3, #28
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 faf2 	bl	8002b14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000530:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <MX_TIM3_Init+0x134>)
 8000532:	4a40      	ldr	r2, [pc, #256]	; (8000634 <MX_TIM3_Init+0x138>)
 8000534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000536:	4b3e      	ldr	r3, [pc, #248]	; (8000630 <MX_TIM3_Init+0x134>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <MX_TIM3_Init+0x134>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8000542:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <MX_TIM3_Init+0x134>)
 8000544:	2290      	movs	r2, #144	; 0x90
 8000546:	32ff      	adds	r2, #255	; 0xff
 8000548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b39      	ldr	r3, [pc, #228]	; (8000630 <MX_TIM3_Init+0x134>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b37      	ldr	r3, [pc, #220]	; (8000630 <MX_TIM3_Init+0x134>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000556:	4b36      	ldr	r3, [pc, #216]	; (8000630 <MX_TIM3_Init+0x134>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 f98b 	bl	8001874 <HAL_TIM_Base_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000562:	f000 f8ad 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	2128      	movs	r1, #40	; 0x28
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0152      	lsls	r2, r2, #5
 800056e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000570:	187a      	adds	r2, r7, r1
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <MX_TIM3_Init+0x134>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fd62 	bl	8002040 <HAL_TIM_ConfigClockSource>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000580:	f000 f89e 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_TIM3_Init+0x134>)
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fa1a 	bl	80019c0 <HAL_TIM_PWM_Init>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000590:	f000 f896 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000594:	211c      	movs	r1, #28
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_TIM3_Init+0x134>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fa15 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80005b2:	f000 f885 	bl	80006c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2260      	movs	r2, #96	; 0x60
 80005ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ce:	0039      	movs	r1, r7
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_TIM3_Init+0x134>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fc33 	bl	8001e40 <HAL_TIM_PWM_ConfigChannel>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80005de:	f000 f86f 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005e2:	0039      	movs	r1, r7
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_TIM3_Init+0x134>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fc29 	bl	8001e40 <HAL_TIM_PWM_ConfigChannel>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80005f2:	f000 f865 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005f6:	0039      	movs	r1, r7
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_TIM3_Init+0x134>)
 80005fa:	2208      	movs	r2, #8
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fc1f 	bl	8001e40 <HAL_TIM_PWM_ConfigChannel>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000606:	f000 f85b 	bl	80006c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800060a:	0039      	movs	r1, r7
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_TIM3_Init+0x134>)
 800060e:	220c      	movs	r2, #12
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fc15 	bl	8001e40 <HAL_TIM_PWM_ConfigChannel>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 800061a:	f000 f851 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <MX_TIM3_Init+0x134>)
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f8b3 	bl	800078c <HAL_TIM_MspPostInit>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00e      	add	sp, #56	; 0x38
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000074 	.word	0x20000074
 8000634:	40000400 	.word	0x40000400

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	240c      	movs	r4, #12
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f002 fa63 	bl	8002b14 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_GPIO_Init+0x80>)
 800065c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_GPIO_Init+0x80>)
 800066c:	2102      	movs	r1, #2
 800066e:	430a      	orrs	r2, r1
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_GPIO_Init+0x80>)
 8000674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000676:	2202      	movs	r2, #2
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_GPIO_Init+0x84>)
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fbfd 	bl	8000e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <MX_GPIO_Init+0x84>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f000 fa86 	bl	8000bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b009      	add	sp, #36	; 0x24
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	50000400 	.word	0x50000400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x44>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_MspInit+0x44>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x44>)
 80006ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x44>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0549      	lsls	r1, r1, #21
 80006f4:	430a      	orrs	r2, r1
 80006f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_MspInit+0x44>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	055b      	lsls	r3, r3, #21
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <HAL_TIM_Base_MspInit+0x6c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d116      	bne.n	8000754 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_TIM_Base_MspInit+0x70>)
 8000728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_TIM_Base_MspInit+0x70>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0109      	lsls	r1, r1, #4
 8000730:	430a      	orrs	r2, r1
 8000732:	641a      	str	r2, [r3, #64]	; 0x40
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <HAL_TIM_Base_MspInit+0x70>)
 8000736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	200d      	movs	r0, #13
 8000748:	f000 fa06 	bl	8000b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800074c:	200d      	movs	r0, #13
 800074e:	f000 fa18 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000752:	e010      	b.n	8000776 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <HAL_TIM_Base_MspInit+0x74>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10b      	bne.n	8000776 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_TIM_Base_MspInit+0x70>)
 8000760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_TIM_Base_MspInit+0x70>)
 8000764:	2102      	movs	r1, #2
 8000766:	430a      	orrs	r2, r1
 8000768:	63da      	str	r2, [r3, #60]	; 0x3c
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_TIM_Base_MspInit+0x70>)
 800076c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076e:	2202      	movs	r2, #2
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40012c00 	.word	0x40012c00
 8000784:	40021000 	.word	0x40021000
 8000788:	40000400 	.word	0x40000400

0800078c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08b      	sub	sp, #44	; 0x2c
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2414      	movs	r4, #20
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f002 f9b8 	bl	8002b14 <memset>
  if(htim->Instance==TIM3)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <HAL_TIM_MspPostInit+0xb4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d143      	bne.n	8000836 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_TIM_MspPostInit+0xb8>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	22c0      	movs	r2, #192	; 0xc0
 80007e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	193a      	adds	r2, r7, r4
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f000 f9d9 	bl	8000bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2203      	movs	r2, #3
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2202      	movs	r2, #2
 8000816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2201      	movs	r2, #1
 8000828:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	187b      	adds	r3, r7, r1
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_TIM_MspPostInit+0xbc>)
 800082e:	0019      	movs	r1, r3
 8000830:	0010      	movs	r0, r2
 8000832:	f000 f9c3 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b00b      	add	sp, #44	; 0x2c
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40000400 	.word	0x40000400
 8000844:	40021000 	.word	0x40021000
 8000848:	50000400 	.word	0x50000400

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f8aa 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f9d4 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000028 	.word	0x20000028

08000894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f7ff fff6 	bl	8000894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f002 f8fd 	bl	8002acc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008d2:	f7ff fcc7 	bl	8000264 <main>

080008d6 <LoopForever>:

LoopForever:
  b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e4:	08002bd8 	.word	0x08002bd8
  ldr r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ec:	200000cc 	.word	0x200000cc

080008f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x3c>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_Init+0x3c>)
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	0049      	lsls	r1, r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090e:	2003      	movs	r0, #3
 8000910:	f000 f810 	bl	8000934 <HAL_InitTick>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d003      	beq.n	8000920 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e001      	b.n	8000924 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fed4 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_InitTick+0x88>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d02b      	beq.n	80009a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0x8c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_InitTick+0x88>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	; 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbd1 	bl	8000100 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbcc 	bl	8000100 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f919 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d112      	bne.n	800099a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d80a      	bhi.n	8000990 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2200      	movs	r2, #0
 8000982:	0018      	movs	r0, r3
 8000984:	f000 f8e8 	bl	8000b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_InitTick+0x90>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e00d      	b.n	80009ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e008      	b.n	80009ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	230f      	movs	r3, #15
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e003      	b.n	80009ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a4:	230f      	movs	r3, #15
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009ac:	230f      	movs	r3, #15
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	781b      	ldrb	r3, [r3, #0]
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b005      	add	sp, #20
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	18d2      	adds	r2, r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000008 	.word	0x20000008
 80009e8:	200000c8 	.word	0x200000c8

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	200000c8 	.word	0x200000c8

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b7f      	cmp	r3, #127	; 0x7f
 8000a12:	d809      	bhi.n	8000a28 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_EnableIRQ+0x30>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	4091      	lsls	r1, r2
 8000a24:	000a      	movs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b7f      	cmp	r3, #127	; 0x7f
 8000a48:	d828      	bhi.n	8000a9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <__NVIC_SetPriority+0xd4>)
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	33c0      	adds	r3, #192	; 0xc0
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	589b      	ldr	r3, [r3, r2]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	2203      	movs	r2, #3
 8000a62:	400a      	ands	r2, r1
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	21ff      	movs	r1, #255	; 0xff
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	401a      	ands	r2, r3
 8000a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	401a      	ands	r2, r3
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2303      	movs	r3, #3
 8000a82:	4003      	ands	r3, r0
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <__NVIC_SetPriority+0xd4>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	430a      	orrs	r2, r1
 8000a94:	33c0      	adds	r3, #192	; 0xc0
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9a:	e031      	b.n	8000b00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <__NVIC_SetPriority+0xd8>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	3b08      	subs	r3, #8
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	3306      	adds	r3, #6
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1dfa      	adds	r2, r7, #7
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	0011      	movs	r1, r2
 8000abc:	2203      	movs	r2, #3
 8000abe:	400a      	ands	r2, r1
 8000ac0:	00d2      	lsls	r2, r2, #3
 8000ac2:	21ff      	movs	r1, #255	; 0xff
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	43d2      	mvns	r2, r2
 8000aca:	401a      	ands	r2, r3
 8000acc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0018      	movs	r0, r3
 8000adc:	2303      	movs	r3, #3
 8000ade:	4003      	ands	r3, r0
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	001c      	movs	r4, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	4023      	ands	r3, r4
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	430a      	orrs	r2, r1
 8000af6:	3306      	adds	r3, #6
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	18c3      	adds	r3, r0, r3
 8000afc:	3304      	adds	r3, #4
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	045b      	lsls	r3, r3, #17
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d301      	bcc.n	8000b28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b24:	2301      	movs	r3, #1
 8000b26:	e010      	b.n	8000b4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <SysTick_Config+0x44>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	2103      	movs	r1, #3
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ff7c 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x44>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x44>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	210f      	movs	r1, #15
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	1c02      	adds	r2, r0, #0
 8000b68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	0002      	movs	r2, r0
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff33 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ffaf 	bl	8000b10 <SysTick_Config>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e147      	b.n	8000e5c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <HAL_GPIO_Init+0x28>
 8000be2:	e138      	b.n	8000e56 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	58d3      	ldr	r3, [r2, r3]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	4013      	ands	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2107      	movs	r1, #7
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	23c0      	movs	r3, #192	; 0xc0
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x174>
 8000d2e:	e092      	b.n	8000e56 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d30:	4a50      	ldr	r2, [pc, #320]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3318      	adds	r3, #24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	589b      	ldr	r3, [r3, r2]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	220f      	movs	r2, #15
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	23a0      	movs	r3, #160	; 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0x1ca>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_GPIO_Init+0x2bc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00d      	beq.n	8000d82 <HAL_GPIO_Init+0x1c6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <HAL_GPIO_Init+0x2c0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x1c2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <HAL_GPIO_Init+0x2c4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_GPIO_Init+0x1be>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e004      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x1cc>
 8000d86:	2300      	movs	r3, #0
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	4093      	lsls	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d98:	4936      	ldr	r1, [pc, #216]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3318      	adds	r3, #24
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	035b      	lsls	r3, r3, #13
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	039b      	lsls	r3, r3, #14
 8000de8:	4013      	ands	r3, r2
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000dfc:	2384      	movs	r3, #132	; 0x84
 8000dfe:	58d3      	ldr	r3, [r2, r3]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	4013      	ands	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e20:	4914      	ldr	r1, [pc, #80]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000e22:	2284      	movs	r2, #132	; 0x84
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	58d3      	ldr	r3, [r2, r3]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	4013      	ands	r3, r2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e4e:	4909      	ldr	r1, [pc, #36]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	1e13      	subs	r3, r2, #0
 8000e66:	d000      	beq.n	8000e6a <HAL_GPIO_Init+0x2ae>
 8000e68:	e6b0      	b.n	8000bcc <HAL_GPIO_Init+0x10>
  }
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021800 	.word	0x40021800
 8000e78:	50000400 	.word	0x50000400
 8000e7c:	50000800 	.word	0x50000800
 8000e80:	50000c00 	.word	0x50000c00

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	0008      	movs	r0, r1
 8000e8e:	0011      	movs	r1, r2
 8000e90:	1cbb      	adds	r3, r7, #2
 8000e92:	1c02      	adds	r2, r0, #0
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	1c7b      	adds	r3, r7, #1
 8000e98:	1c0a      	adds	r2, r1, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e9c:	1c7b      	adds	r3, r7, #1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea4:	1cbb      	adds	r3, r7, #2
 8000ea6:	881a      	ldrh	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	1cbb      	adds	r3, r7, #2
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d11f      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	0013      	movs	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4912      	ldr	r1, [pc, #72]	; (8000f3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff f904 	bl	8000100 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000efe:	e008      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e001      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e009      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d0ed      	beq.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40007000 	.word	0x40007000
 8000f34:	fffff9ff 	.word	0xfffff9ff
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	000f4240 	.word	0x000f4240

08000f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e2f3      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <HAL_RCC_OscConfig+0x1e>
 8000f5c:	e07c      	b.n	8001058 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5e:	4bc3      	ldr	r3, [pc, #780]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2238      	movs	r2, #56	; 0x38
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f68:	4bc0      	ldr	r3, [pc, #768]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b10      	cmp	r3, #16
 8000f76:	d102      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3e>
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d002      	beq.n	8000f84 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d10b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4bb9      	ldr	r3, [pc, #740]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d062      	beq.n	8001056 <HAL_RCC_OscConfig+0x116>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d15e      	bne.n	8001056 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e2ce      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d107      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x78>
 8000fa8:	4bb0      	ldr	r3, [pc, #704]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4baf      	ldr	r3, [pc, #700]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0249      	lsls	r1, r1, #9
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e020      	b.n	8000ffa <HAL_RCC_OscConfig+0xba>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	23a0      	movs	r3, #160	; 0xa0
 8000fbe:	02db      	lsls	r3, r3, #11
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d10e      	bne.n	8000fe2 <HAL_RCC_OscConfig+0xa2>
 8000fc4:	4ba9      	ldr	r3, [pc, #676]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4ba8      	ldr	r3, [pc, #672]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	02c9      	lsls	r1, r1, #11
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	4ba6      	ldr	r3, [pc, #664]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4ba5      	ldr	r3, [pc, #660]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0249      	lsls	r1, r1, #9
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e00b      	b.n	8000ffa <HAL_RCC_OscConfig+0xba>
 8000fe2:	4ba2      	ldr	r3, [pc, #648]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4ba1      	ldr	r3, [pc, #644]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	49a1      	ldr	r1, [pc, #644]	; (8001270 <HAL_RCC_OscConfig+0x330>)
 8000fea:	400a      	ands	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	4b9f      	ldr	r3, [pc, #636]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b9e      	ldr	r3, [pc, #632]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	499f      	ldr	r1, [pc, #636]	; (8001274 <HAL_RCC_OscConfig+0x334>)
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d014      	beq.n	800102c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001002:	f7ff fcf3 	bl	80009ec <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fcee 	bl	80009ec <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e28d      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101e:	4b93      	ldr	r3, [pc, #588]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xcc>
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fcde 	bl	80009ec <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001036:	f7ff fcd9 	bl	80009ec <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e278      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001048:	4b88      	ldr	r3, [pc, #544]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0xf6>
 8001054:	e000      	b.n	8001058 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2202      	movs	r2, #2
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_RCC_OscConfig+0x124>
 8001062:	e099      	b.n	8001198 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001064:	4b81      	ldr	r3, [pc, #516]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2238      	movs	r2, #56	; 0x38
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b10      	cmp	r3, #16
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x144>
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d002      	beq.n	800108a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d135      	bne.n	80010f6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800108a:	4b78      	ldr	r3, [pc, #480]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4013      	ands	r3, r2
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x162>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e24b      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b72      	ldr	r3, [pc, #456]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a74      	ldr	r2, [pc, #464]	; (8001278 <HAL_RCC_OscConfig+0x338>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	021a      	lsls	r2, r3, #8
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80010b4:	430a      	orrs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d112      	bne.n	80010e4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a6e      	ldr	r2, [pc, #440]	; (800127c <HAL_RCC_OscConfig+0x33c>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010d2:	4b66      	ldr	r3, [pc, #408]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0adb      	lsrs	r3, r3, #11
 80010d8:	2207      	movs	r2, #7
 80010da:	4013      	ands	r3, r2
 80010dc:	4a68      	ldr	r2, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x340>)
 80010de:	40da      	lsrs	r2, r3
 80010e0:	4b68      	ldr	r3, [pc, #416]	; (8001284 <HAL_RCC_OscConfig+0x344>)
 80010e2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010e4:	4b68      	ldr	r3, [pc, #416]	; (8001288 <HAL_RCC_OscConfig+0x348>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fc23 	bl	8000934 <HAL_InitTick>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d051      	beq.n	8001196 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e221      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d030      	beq.n	8001160 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010fe:	4b5b      	ldr	r3, [pc, #364]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a5e      	ldr	r2, [pc, #376]	; (800127c <HAL_RCC_OscConfig+0x33c>)
 8001104:	4013      	ands	r3, r2
 8001106:	0019      	movs	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	4b57      	ldr	r3, [pc, #348]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001112:	4b56      	ldr	r3, [pc, #344]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b55      	ldr	r3, [pc, #340]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0049      	lsls	r1, r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fc64 	bl	80009ec <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc5f 	bl	80009ec <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1fe      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4013      	ands	r3, r2
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b48      	ldr	r3, [pc, #288]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a4a      	ldr	r2, [pc, #296]	; (8001278 <HAL_RCC_OscConfig+0x338>)
 800114e:	4013      	ands	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	021a      	lsls	r2, r3, #8
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	e01b      	b.n	8001198 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001160:	4b42      	ldr	r3, [pc, #264]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001166:	4949      	ldr	r1, [pc, #292]	; (800128c <HAL_RCC_OscConfig+0x34c>)
 8001168:	400a      	ands	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fc3e 	bl	80009ec <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fc39 	bl	80009ec <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e1d8      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4013      	ands	r3, r2
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0x236>
 8001194:	e000      	b.n	8001198 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001196:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2208      	movs	r2, #8
 800119e:	4013      	ands	r3, r2
 80011a0:	d047      	beq.n	8001232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2238      	movs	r2, #56	; 0x38
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b18      	cmp	r3, #24
 80011ac:	d10a      	bne.n	80011c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d03c      	beq.n	8001232 <HAL_RCC_OscConfig+0x2f2>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d138      	bne.n	8001232 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e1ba      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d019      	beq.n	8001200 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80011ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc08 	bl	80009ec <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc03 	bl	80009ec <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e1a2      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 80011f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0f1      	beq.n	80011e2 <HAL_RCC_OscConfig+0x2a2>
 80011fe:	e018      	b.n	8001232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001202:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001206:	2101      	movs	r1, #1
 8001208:	438a      	bics	r2, r1
 800120a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fbee 	bl	80009ec <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001216:	f7ff fbe9 	bl	80009ec <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e188      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	2202      	movs	r2, #2
 800122e:	4013      	ands	r3, r2
 8001230:	d1f1      	bne.n	8001216 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2204      	movs	r2, #4
 8001238:	4013      	ands	r3, r2
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0x2fe>
 800123c:	e0c6      	b.n	80013cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123e:	231f      	movs	r3, #31
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2238      	movs	r2, #56	; 0x38
 800124c:	4013      	ands	r3, r2
 800124e:	2b20      	cmp	r3, #32
 8001250:	d11e      	bne.n	8001290 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_RCC_OscConfig+0x32c>)
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x31e>
 800125c:	e0b6      	b.n	80013cc <HAL_RCC_OscConfig+0x48c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d000      	beq.n	8001268 <HAL_RCC_OscConfig+0x328>
 8001266:	e0b1      	b.n	80013cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e166      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
 800126c:	40021000 	.word	0x40021000
 8001270:	fffeffff 	.word	0xfffeffff
 8001274:	fffbffff 	.word	0xfffbffff
 8001278:	ffff80ff 	.word	0xffff80ff
 800127c:	ffffc7ff 	.word	0xffffc7ff
 8001280:	00f42400 	.word	0x00f42400
 8001284:	20000000 	.word	0x20000000
 8001288:	20000004 	.word	0x20000004
 800128c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001290:	4bac      	ldr	r3, [pc, #688]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	055b      	lsls	r3, r3, #21
 8001298:	4013      	ands	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_RCC_OscConfig+0x360>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x362>
 80012a0:	2300      	movs	r3, #0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d011      	beq.n	80012ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4ba7      	ldr	r3, [pc, #668]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80012a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012aa:	4ba6      	ldr	r3, [pc, #664]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0549      	lsls	r1, r1, #21
 80012b0:	430a      	orrs	r2, r1
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012b4:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80012b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	055b      	lsls	r3, r3, #21
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012c2:	231f      	movs	r3, #31
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ca:	4b9f      	ldr	r3, [pc, #636]	; (8001548 <HAL_RCC_OscConfig+0x608>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	d11a      	bne.n	800130c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012d6:	4b9c      	ldr	r3, [pc, #624]	; (8001548 <HAL_RCC_OscConfig+0x608>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b9b      	ldr	r3, [pc, #620]	; (8001548 <HAL_RCC_OscConfig+0x608>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0049      	lsls	r1, r1, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb82 	bl	80009ec <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fb7d 	bl	80009ec <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e11c      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001300:	4b91      	ldr	r3, [pc, #580]	; (8001548 <HAL_RCC_OscConfig+0x608>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4013      	ands	r3, r2
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x3e2>
 8001314:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001316:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800131a:	2101      	movs	r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x41c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x404>
 800132a:	4b86      	ldr	r3, [pc, #536]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800132c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800132e:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001330:	2104      	movs	r1, #4
 8001332:	430a      	orrs	r2, r1
 8001334:	65da      	str	r2, [r3, #92]	; 0x5c
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800133a:	4b82      	ldr	r3, [pc, #520]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800133c:	2101      	movs	r1, #1
 800133e:	430a      	orrs	r2, r1
 8001340:	65da      	str	r2, [r3, #92]	; 0x5c
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0x41c>
 8001344:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001346:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001348:	4b7e      	ldr	r3, [pc, #504]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800134a:	2101      	movs	r1, #1
 800134c:	438a      	bics	r2, r1
 800134e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001350:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001356:	2104      	movs	r1, #4
 8001358:	438a      	bics	r2, r1
 800135a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d014      	beq.n	800138e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fb42 	bl	80009ec <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136c:	e009      	b.n	8001382 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fb3d 	bl	80009ec <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4a74      	ldr	r2, [pc, #464]	; (800154c <HAL_RCC_OscConfig+0x60c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0db      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x42e>
 800138c:	e013      	b.n	80013b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fb2d 	bl	80009ec <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001396:	e009      	b.n	80013ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fb28 	bl	80009ec <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x60c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0c6      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ac:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013b6:	231f      	movs	r3, #31
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80013c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c4:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80013c6:	4962      	ldr	r1, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x610>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d100      	bne.n	80013d6 <HAL_RCC_OscConfig+0x496>
 80013d4:	e0b0      	b.n	8001538 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d6:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2238      	movs	r2, #56	; 0x38
 80013dc:	4013      	ands	r3, r2
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d100      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4a4>
 80013e2:	e078      	b.n	80014d6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d153      	bne.n	8001494 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b55      	ldr	r3, [pc, #340]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80013f2:	4958      	ldr	r1, [pc, #352]	; (8001554 <HAL_RCC_OscConfig+0x614>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff faf8 	bl	80009ec <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff faf3 	bl	80009ec <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e092      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001414:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	049b      	lsls	r3, r3, #18
 800141c:	4013      	ands	r3, r2
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001420:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x618>)
 8001426:	4013      	ands	r3, r2
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	431a      	orrs	r2, r3
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800144a:	430a      	orrs	r2, r1
 800144c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0449      	lsls	r1, r1, #17
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	0549      	lsls	r1, r1, #21
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fabf 	bl	80009ec <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff faba 	bl	80009ec <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e059      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	049b      	lsls	r3, r3, #18
 800148e:	4013      	ands	r3, r2
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x534>
 8001492:	e051      	b.n	8001538 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 800149a:	492e      	ldr	r1, [pc, #184]	; (8001554 <HAL_RCC_OscConfig+0x614>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff faa4 	bl	80009ec <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fa9f 	bl	80009ec <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e03e      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	049b      	lsls	r3, r3, #18
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80014ce:	4923      	ldr	r1, [pc, #140]	; (800155c <HAL_RCC_OscConfig+0x61c>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	e030      	b.n	8001538 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e02b      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x604>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2203      	movs	r2, #3
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d11e      	bne.n	8001534 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2270      	movs	r2, #112	; 0x70
 80014fa:	401a      	ands	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d117      	bne.n	8001534 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	23fe      	movs	r3, #254	; 0xfe
 8001508:	01db      	lsls	r3, r3, #7
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d10e      	bne.n	8001534 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	23f8      	movs	r3, #248	; 0xf8
 800151a:	039b      	lsls	r3, r3, #14
 800151c:	401a      	ands	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	0f5b      	lsrs	r3, r3, #29
 800152a:	075a      	lsls	r2, r3, #29
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b008      	add	sp, #32
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	00001388 	.word	0x00001388
 8001550:	efffffff 	.word	0xefffffff
 8001554:	feffffff 	.word	0xfeffffff
 8001558:	1fc1808c 	.word	0x1fc1808c
 800155c:	effefffc 	.word	0xeffefffc

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0e9      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2207      	movs	r2, #7
 800157a:	4013      	ands	r3, r2
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d91e      	bls.n	80015c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b73      	ldr	r3, [pc, #460]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2207      	movs	r2, #7
 8001588:	4393      	bics	r3, r2
 800158a:	0019      	movs	r1, r3
 800158c:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001594:	f7ff fa2a 	bl	80009ec <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800159c:	e009      	b.n	80015b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159e:	f7ff fa25 	bl	80009ec <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a6a      	ldr	r2, [pc, #424]	; (8001754 <HAL_RCC_ClockConfig+0x1f4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0ca      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4013      	ands	r3, r2
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1ee      	bne.n	800159e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d015      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2204      	movs	r2, #4
 80015d0:	4013      	ands	r3, r2
 80015d2:	d006      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015d4:	4b60      	ldr	r3, [pc, #384]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 80015da:	21e0      	movs	r1, #224	; 0xe0
 80015dc:	01c9      	lsls	r1, r1, #7
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e2:	4b5d      	ldr	r3, [pc, #372]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4a5d      	ldr	r2, [pc, #372]	; (800175c <HAL_RCC_ClockConfig+0x1fc>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	d057      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	029b      	lsls	r3, r3, #10
 8001610:	4013      	ands	r3, r2
 8001612:	d12b      	bne.n	800166c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e097      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d107      	bne.n	8001630 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001620:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	049b      	lsls	r3, r3, #18
 8001628:	4013      	ands	r3, r2
 800162a:	d11f      	bne.n	800166c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e08b      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4013      	ands	r3, r2
 8001642:	d113      	bne.n	800166c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e07f      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d106      	bne.n	800165e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d108      	bne.n	800166c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e074      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e06d      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2207      	movs	r2, #7
 8001672:	4393      	bics	r3, r2
 8001674:	0019      	movs	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 800167c:	430a      	orrs	r2, r1
 800167e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001680:	f7ff f9b4 	bl	80009ec <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001688:	e009      	b.n	800169e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168a:	f7ff f9af 	bl	80009ec <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_RCC_ClockConfig+0x1f4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e054      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2238      	movs	r2, #56	; 0x38
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1ec      	bne.n	800168a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2207      	movs	r2, #7
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d21e      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2207      	movs	r2, #7
 80016c4:	4393      	bics	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016d0:	f7ff f98c 	bl	80009ec <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d8:	e009      	b.n	80016ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	f7ff f987 	bl	80009ec <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <HAL_RCC_ClockConfig+0x1f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e02c      	b.n	8001748 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2207      	movs	r2, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1ee      	bne.n	80016da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2204      	movs	r2, #4
 8001702:	4013      	ands	r3, r2
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_RCC_ClockConfig+0x200>)
 800170c:	4013      	ands	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800171a:	f000 f829 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800171e:	0001      	movs	r1, r0
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_RCC_ClockConfig+0x1f8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	220f      	movs	r2, #15
 8001728:	401a      	ands	r2, r3
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_ClockConfig+0x204>)
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	58d3      	ldr	r3, [r2, r3]
 8001730:	221f      	movs	r2, #31
 8001732:	4013      	ands	r3, r2
 8001734:	000a      	movs	r2, r1
 8001736:	40da      	lsrs	r2, r3
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_ClockConfig+0x208>)
 800173a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x20c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff f8f7 	bl	8000934 <HAL_InitTick>
 8001746:	0003      	movs	r3, r0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b004      	add	sp, #16
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40022000 	.word	0x40022000
 8001754:	00001388 	.word	0x00001388
 8001758:	40021000 	.word	0x40021000
 800175c:	fffff0ff 	.word	0xfffff0ff
 8001760:	ffff8fff 	.word	0xffff8fff
 8001764:	08002b3c 	.word	0x08002b3c
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001776:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2238      	movs	r2, #56	; 0x38
 800177c:	4013      	ands	r3, r2
 800177e:	d10f      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0adb      	lsrs	r3, r3, #11
 8001786:	2207      	movs	r2, #7
 8001788:	4013      	ands	r3, r2
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	0013      	movs	r3, r2
 8001790:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	4835      	ldr	r0, [pc, #212]	; (800186c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001796:	f7fe fcb3 	bl	8000100 <__udivsi3>
 800179a:	0003      	movs	r3, r0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e05d      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a0:	4b31      	ldr	r3, [pc, #196]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2238      	movs	r2, #56	; 0x38
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_GetSysClockFreq+0x100>)
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	e054      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2238      	movs	r2, #56	; 0x38
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d138      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2203      	movs	r2, #3
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	2207      	movs	r2, #7
 80017d0:	4013      	ands	r3, r2
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	4824      	ldr	r0, [pc, #144]	; (8001870 <HAL_RCC_GetSysClockFreq+0x100>)
 80017e0:	f7fe fc8e 	bl	8000100 <__udivsi3>
 80017e4:	0003      	movs	r3, r0
 80017e6:	0019      	movs	r1, r3
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	227f      	movs	r2, #127	; 0x7f
 80017f0:	4013      	ands	r3, r2
 80017f2:	434b      	muls	r3, r1
 80017f4:	617b      	str	r3, [r7, #20]
        break;
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <HAL_RCC_GetSysClockFreq+0xfc>)
 80017fc:	f7fe fc80 	bl	8000100 <__udivsi3>
 8001800:	0003      	movs	r3, r0
 8001802:	0019      	movs	r1, r3
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	227f      	movs	r2, #127	; 0x7f
 800180c:	4013      	ands	r3, r2
 800180e:	434b      	muls	r3, r1
 8001810:	617b      	str	r3, [r7, #20]
        break;
 8001812:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0f5b      	lsrs	r3, r3, #29
 800181a:	2207      	movs	r2, #7
 800181c:	4013      	ands	r3, r2
 800181e:	3301      	adds	r3, #1
 8001820:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	6978      	ldr	r0, [r7, #20]
 8001826:	f7fe fc6b 	bl	8000100 <__udivsi3>
 800182a:	0003      	movs	r3, r0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e015      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2238      	movs	r2, #56	; 0x38
 8001836:	4013      	ands	r3, r2
 8001838:	2b20      	cmp	r3, #32
 800183a:	d103      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e00b      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2238      	movs	r2, #56	; 0x38
 800184a:	4013      	ands	r3, r2
 800184c:	2b18      	cmp	r3, #24
 800184e:	d103      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001850:	23fa      	movs	r3, #250	; 0xfa
 8001852:	01db      	lsls	r3, r3, #7
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e001      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800185c:	693b      	ldr	r3, [r7, #16]
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b006      	add	sp, #24
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40021000 	.word	0x40021000
 800186c:	00f42400 	.word	0x00f42400
 8001870:	007a1200 	.word	0x007a1200

08001874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e04a      	b.n	800191c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223d      	movs	r2, #61	; 0x3d
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d107      	bne.n	80018a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	223c      	movs	r2, #60	; 0x3c
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe ff39 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	223d      	movs	r2, #61	; 0x3d
 80018a6:	2102      	movs	r1, #2
 80018a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	0019      	movs	r1, r3
 80018b4:	0010      	movs	r0, r2
 80018b6:	f000 fcb9 	bl	800222c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2248      	movs	r2, #72	; 0x48
 80018be:	2101      	movs	r1, #1
 80018c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	223e      	movs	r2, #62	; 0x3e
 80018c6:	2101      	movs	r1, #1
 80018c8:	5499      	strb	r1, [r3, r2]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	223f      	movs	r2, #63	; 0x3f
 80018ce:	2101      	movs	r1, #1
 80018d0:	5499      	strb	r1, [r3, r2]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	2101      	movs	r1, #1
 80018d8:	5499      	strb	r1, [r3, r2]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2241      	movs	r2, #65	; 0x41
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2242      	movs	r2, #66	; 0x42
 80018e6:	2101      	movs	r1, #1
 80018e8:	5499      	strb	r1, [r3, r2]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2243      	movs	r2, #67	; 0x43
 80018ee:	2101      	movs	r1, #1
 80018f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2244      	movs	r2, #68	; 0x44
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2245      	movs	r2, #69	; 0x45
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2246      	movs	r2, #70	; 0x46
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2247      	movs	r2, #71	; 0x47
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	223d      	movs	r2, #61	; 0x3d
 8001916:	2101      	movs	r1, #1
 8001918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	223d      	movs	r2, #61	; 0x3d
 8001930:	5c9b      	ldrb	r3, [r3, r2]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d001      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e037      	b.n	80019ac <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	223d      	movs	r2, #61	; 0x3d
 8001940:	2102      	movs	r1, #2
 8001942:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_TIM_Base_Start_IT+0x90>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d004      	beq.n	8001968 <HAL_TIM_Base_Start_IT+0x44>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <HAL_TIM_Base_Start_IT+0x94>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d116      	bne.n	8001996 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <HAL_TIM_Base_Start_IT+0x98>)
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d016      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x84>
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	429a      	cmp	r2, r3
 8001982:	d011      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001994:	e008      	b.n	80019a8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e000      	b.n	80019aa <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40000400 	.word	0x40000400
 80019bc:	00010007 	.word	0x00010007

080019c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e04a      	b.n	8001a68 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	223d      	movs	r2, #61	; 0x3d
 80019d6:	5c9b      	ldrb	r3, [r3, r2]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d107      	bne.n	80019ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	223c      	movs	r2, #60	; 0x3c
 80019e2:	2100      	movs	r1, #0
 80019e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f841 	bl	8001a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	223d      	movs	r2, #61	; 0x3d
 80019f2:	2102      	movs	r1, #2
 80019f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	0019      	movs	r1, r3
 8001a00:	0010      	movs	r0, r2
 8001a02:	f000 fc13 	bl	800222c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2248      	movs	r2, #72	; 0x48
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	223e      	movs	r2, #62	; 0x3e
 8001a12:	2101      	movs	r1, #1
 8001a14:	5499      	strb	r1, [r3, r2]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223f      	movs	r2, #63	; 0x3f
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2241      	movs	r2, #65	; 0x41
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2242      	movs	r2, #66	; 0x42
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2243      	movs	r2, #67	; 0x43
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2244      	movs	r2, #68	; 0x44
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2245      	movs	r2, #69	; 0x45
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2246      	movs	r2, #70	; 0x46
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2247      	movs	r2, #71	; 0x47
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	223d      	movs	r2, #61	; 0x3d
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d108      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x22>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	223e      	movs	r2, #62	; 0x3e
 8001a94:	5c9b      	ldrb	r3, [r3, r2]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	4193      	sbcs	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e037      	b.n	8001b12 <HAL_TIM_PWM_Start+0x92>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d108      	bne.n	8001aba <HAL_TIM_PWM_Start+0x3a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	223f      	movs	r2, #63	; 0x3f
 8001aac:	5c9b      	ldrb	r3, [r3, r2]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	1e5a      	subs	r2, r3, #1
 8001ab4:	4193      	sbcs	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	e02b      	b.n	8001b12 <HAL_TIM_PWM_Start+0x92>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d108      	bne.n	8001ad2 <HAL_TIM_PWM_Start+0x52>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	4193      	sbcs	r3, r2
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	e01f      	b.n	8001b12 <HAL_TIM_PWM_Start+0x92>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d108      	bne.n	8001aea <HAL_TIM_PWM_Start+0x6a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2241      	movs	r2, #65	; 0x41
 8001adc:	5c9b      	ldrb	r3, [r3, r2]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	4193      	sbcs	r3, r2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e013      	b.n	8001b12 <HAL_TIM_PWM_Start+0x92>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d108      	bne.n	8001b02 <HAL_TIM_PWM_Start+0x82>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2242      	movs	r2, #66	; 0x42
 8001af4:	5c9b      	ldrb	r3, [r3, r2]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	1e5a      	subs	r2, r3, #1
 8001afc:	4193      	sbcs	r3, r2
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	e007      	b.n	8001b12 <HAL_TIM_PWM_Start+0x92>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2243      	movs	r2, #67	; 0x43
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	1e5a      	subs	r2, r3, #1
 8001b0e:	4193      	sbcs	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07b      	b.n	8001c12 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_PWM_Start+0xaa>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	223e      	movs	r2, #62	; 0x3e
 8001b24:	2102      	movs	r1, #2
 8001b26:	5499      	strb	r1, [r3, r2]
 8001b28:	e023      	b.n	8001b72 <HAL_TIM_PWM_Start+0xf2>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d104      	bne.n	8001b3a <HAL_TIM_PWM_Start+0xba>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	223f      	movs	r2, #63	; 0x3f
 8001b34:	2102      	movs	r1, #2
 8001b36:	5499      	strb	r1, [r3, r2]
 8001b38:	e01b      	b.n	8001b72 <HAL_TIM_PWM_Start+0xf2>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d104      	bne.n	8001b4a <HAL_TIM_PWM_Start+0xca>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2240      	movs	r2, #64	; 0x40
 8001b44:	2102      	movs	r1, #2
 8001b46:	5499      	strb	r1, [r3, r2]
 8001b48:	e013      	b.n	8001b72 <HAL_TIM_PWM_Start+0xf2>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d104      	bne.n	8001b5a <HAL_TIM_PWM_Start+0xda>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2241      	movs	r2, #65	; 0x41
 8001b54:	2102      	movs	r1, #2
 8001b56:	5499      	strb	r1, [r3, r2]
 8001b58:	e00b      	b.n	8001b72 <HAL_TIM_PWM_Start+0xf2>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIM_PWM_Start+0xea>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2242      	movs	r2, #66	; 0x42
 8001b64:	2102      	movs	r1, #2
 8001b66:	5499      	strb	r1, [r3, r2]
 8001b68:	e003      	b.n	8001b72 <HAL_TIM_PWM_Start+0xf2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2243      	movs	r2, #67	; 0x43
 8001b6e:	2102      	movs	r1, #2
 8001b70:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 ff08 	bl	8002990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <HAL_TIM_PWM_Start+0x19c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x11e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <HAL_TIM_PWM_Start+0x1a0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d004      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x11e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_TIM_PWM_Start+0x1a4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_PWM_Start+0x122>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_TIM_PWM_Start+0x124>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	0209      	lsls	r1, r1, #8
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_TIM_PWM_Start+0x19c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_TIM_PWM_Start+0x14e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_TIM_PWM_Start+0x1a8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d116      	bne.n	8001bfc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <HAL_TIM_PWM_Start+0x1ac>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d016      	beq.n	8001c0e <HAL_TIM_PWM_Start+0x18e>
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	025b      	lsls	r3, r3, #9
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d011      	beq.n	8001c0e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfa:	e008      	b.n	8001c0e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e000      	b.n	8001c10 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40014400 	.word	0x40014400
 8001c24:	40014800 	.word	0x40014800
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	00010007 	.word	0x00010007

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d021      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d01d      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4252      	negs	r2, r2
 8001c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	d004      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 fac0 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e007      	b.n	8001c8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 fab3 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 fabf 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2204      	movs	r2, #4
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d01e      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2205      	movs	r2, #5
 8001caa:	4252      	negs	r2, r2
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 fa99 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001cca:	e007      	b.n	8001cdc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fa8c 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 fa98 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d021      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2208      	movs	r2, #8
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d01d      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2209      	movs	r2, #9
 8001cf8:	4252      	negs	r2, r2
 8001cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 fa73 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 fa66 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fa72 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2210      	movs	r2, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d022      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d01e      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2211      	movs	r2, #17
 8001d44:	4252      	negs	r2, r2
 8001d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	23c0      	movs	r3, #192	; 0xc0
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d004      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 fa4c 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8001d64:	e007      	b.n	8001d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f000 fa3f 	bl	80021ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fa4b 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d00c      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d008      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2202      	movs	r2, #2
 8001d92:	4252      	negs	r2, r2
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7fe fa4d 	bl	8000238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	4013      	ands	r3, r2
 8001da4:	d104      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	019b      	lsls	r3, r3, #6
 8001dac:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001dae:	d00b      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4013      	ands	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <HAL_TIM_IRQHandler+0x208>)
 8001dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 fe72 	bl	8002aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d00b      	beq.n	8001dea <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_TIM_IRQHandler+0x20c>)
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 fe69 	bl	8002abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2240      	movs	r2, #64	; 0x40
 8001dee:	4013      	ands	r3, r2
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	4013      	ands	r3, r2
 8001df8:	d008      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2241      	movs	r2, #65	; 0x41
 8001e00:	4252      	negs	r2, r2
 8001e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 fa08 	bl	800221c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	4013      	ands	r3, r2
 8001e12:	d00c      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d008      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2221      	movs	r2, #33	; 0x21
 8001e22:	4252      	negs	r2, r2
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fe37 	bl	8002a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	ffffdf7f 	.word	0xffffdf7f
 8001e3c:	fffffeff 	.word	0xfffffeff

08001e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4c:	2317      	movs	r3, #23
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	223c      	movs	r2, #60	; 0x3c
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0e5      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	223c      	movs	r2, #60	; 0x3c
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b14      	cmp	r3, #20
 8001e6e:	d900      	bls.n	8001e72 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e70:	e0d1      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	009a      	lsls	r2, r3, #2
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	0011      	movs	r1, r2
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 fa4a 	bl	8002320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2108      	movs	r1, #8
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6999      	ldr	r1, [r3, #24]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	619a      	str	r2, [r3, #24]
      break;
 8001ebe:	e0af      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 faa9 	bl	8002420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0109      	lsls	r1, r1, #4
 8001edc:	430a      	orrs	r2, r1
 8001ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4954      	ldr	r1, [pc, #336]	; (800203c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6999      	ldr	r1, [r3, #24]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	021a      	lsls	r2, r3, #8
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	619a      	str	r2, [r3, #24]
      break;
 8001f04:	e08c      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	0011      	movs	r1, r2
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 fb04 	bl	800251c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2108      	movs	r1, #8
 8001f20:	430a      	orrs	r2, r1
 8001f22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2104      	movs	r1, #4
 8001f30:	438a      	bics	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69d9      	ldr	r1, [r3, #28]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	61da      	str	r2, [r3, #28]
      break;
 8001f46:	e06b      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 fb65 	bl	8002620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0109      	lsls	r1, r1, #4
 8001f64:	430a      	orrs	r2, r1
 8001f66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4932      	ldr	r1, [pc, #200]	; (800203c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69d9      	ldr	r1, [r3, #28]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	021a      	lsls	r2, r3, #8
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	61da      	str	r2, [r3, #28]
      break;
 8001f8c:	e048      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	0011      	movs	r1, r2
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fba6 	bl	80026e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	438a      	bics	r2, r1
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001fce:	e027      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 fbdf 	bl	800279c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0109      	lsls	r1, r1, #4
 8001fec:	430a      	orrs	r2, r1
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4910      	ldr	r1, [pc, #64]	; (800203c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002014:	e004      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002016:	2317      	movs	r3, #23
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      break;
 800201e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	223c      	movs	r2, #60	; 0x3c
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]

  return status;
 8002028:	2317      	movs	r3, #23
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	781b      	ldrb	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b006      	add	sp, #24
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	08002b7c 	.word	0x08002b7c
 800203c:	fffffbff 	.word	0xfffffbff

08002040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	230f      	movs	r3, #15
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223c      	movs	r2, #60	; 0x3c
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_TIM_ConfigClockSource+0x20>
 800205c:	2302      	movs	r3, #2
 800205e:	e0bc      	b.n	80021da <HAL_TIM_ConfigClockSource+0x19a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	223c      	movs	r2, #60	; 0x3c
 8002064:	2101      	movs	r1, #1
 8002066:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	223d      	movs	r2, #61	; 0x3d
 800206c:	2102      	movs	r1, #2
 800206e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4a5a      	ldr	r2, [pc, #360]	; (80021e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	0192      	lsls	r2, r2, #6
 8002098:	4293      	cmp	r3, r2
 800209a:	d040      	beq.n	800211e <HAL_TIM_ConfigClockSource+0xde>
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0192      	lsls	r2, r2, #6
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d900      	bls.n	80020a6 <HAL_TIM_ConfigClockSource+0x66>
 80020a4:	e088      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	0152      	lsls	r2, r2, #5
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d100      	bne.n	80020b0 <HAL_TIM_ConfigClockSource+0x70>
 80020ae:	e088      	b.n	80021c2 <HAL_TIM_ConfigClockSource+0x182>
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	0152      	lsls	r2, r2, #5
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d900      	bls.n	80020ba <HAL_TIM_ConfigClockSource+0x7a>
 80020b8:	e07e      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020ba:	2b70      	cmp	r3, #112	; 0x70
 80020bc:	d018      	beq.n	80020f0 <HAL_TIM_ConfigClockSource+0xb0>
 80020be:	d900      	bls.n	80020c2 <HAL_TIM_ConfigClockSource+0x82>
 80020c0:	e07a      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020c2:	2b60      	cmp	r3, #96	; 0x60
 80020c4:	d04f      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x126>
 80020c6:	d900      	bls.n	80020ca <HAL_TIM_ConfigClockSource+0x8a>
 80020c8:	e076      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020ca:	2b50      	cmp	r3, #80	; 0x50
 80020cc:	d03b      	beq.n	8002146 <HAL_TIM_ConfigClockSource+0x106>
 80020ce:	d900      	bls.n	80020d2 <HAL_TIM_ConfigClockSource+0x92>
 80020d0:	e072      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d057      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x146>
 80020d6:	d900      	bls.n	80020da <HAL_TIM_ConfigClockSource+0x9a>
 80020d8:	e06e      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020da:	2b30      	cmp	r3, #48	; 0x30
 80020dc:	d063      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x166>
 80020de:	d86b      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d060      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x166>
 80020e4:	d868      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d05d      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x166>
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d05b      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x166>
 80020ee:	e063      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f000 fc26 	bl	8002950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2277      	movs	r2, #119	; 0x77
 8002110:	4313      	orrs	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	609a      	str	r2, [r3, #8]
      break;
 800211c:	e052      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f000 fc0f 	bl	8002950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	01c9      	lsls	r1, r1, #7
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
      break;
 8002144:	e03e      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	001a      	movs	r2, r3
 8002154:	f000 fb80 	bl	8002858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2150      	movs	r1, #80	; 0x50
 800215e:	0018      	movs	r0, r3
 8002160:	f000 fbda 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 8002164:	e02e      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	001a      	movs	r2, r3
 8002174:	f000 fb9e 	bl	80028b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2160      	movs	r1, #96	; 0x60
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fbca 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 8002184:	e01e      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	001a      	movs	r2, r3
 8002194:	f000 fb60 	bl	8002858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2140      	movs	r1, #64	; 0x40
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fbba 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 80021a4:	e00e      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0019      	movs	r1, r3
 80021b0:	0010      	movs	r0, r2
 80021b2:	f000 fbb1 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 80021b6:	e005      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021b8:	230f      	movs	r3, #15
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
      break;
 80021c0:	e000      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021c2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223d      	movs	r2, #61	; 0x3d
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	223c      	movs	r2, #60	; 0x3c
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]

  return status;
 80021d4:	230f      	movs	r3, #15
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	ffceff88 	.word	0xffceff88
 80021e8:	ffff00ff 	.word	0xffff00ff

080021ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <TIM_Base_SetConfig+0xdc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0x20>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a31      	ldr	r2, [pc, #196]	; (800230c <TIM_Base_SetConfig+0xe0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d108      	bne.n	800225e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2270      	movs	r2, #112	; 0x70
 8002250:	4393      	bics	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a29      	ldr	r2, [pc, #164]	; (8002308 <TIM_Base_SetConfig+0xdc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00f      	beq.n	8002286 <TIM_Base_SetConfig+0x5a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <TIM_Base_SetConfig+0xe0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x5a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <TIM_Base_SetConfig+0xe4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x5a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <TIM_Base_SetConfig+0xe8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x5a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <TIM_Base_SetConfig+0xec>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <TIM_Base_SetConfig+0xf0>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	4393      	bics	r3, r2
 800229e:	001a      	movs	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <TIM_Base_SetConfig+0xdc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <TIM_Base_SetConfig+0xaa>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <TIM_Base_SetConfig+0xe8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d003      	beq.n	80022d6 <TIM_Base_SetConfig+0xaa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <TIM_Base_SetConfig+0xec>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d103      	bne.n	80022de <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d106      	bne.n	80022fe <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4393      	bics	r3, r2
 80022f8:	001a      	movs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]
  }
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40000400 	.word	0x40000400
 8002310:	40002000 	.word	0x40002000
 8002314:	40014400 	.word	0x40014400
 8002318:	40014800 	.word	0x40014800
 800231c:	fffffcff 	.word	0xfffffcff

08002320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	2201      	movs	r2, #1
 8002336:	4393      	bics	r3, r2
 8002338:	001a      	movs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <TIM_OC1_SetConfig+0xe8>)
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2203      	movs	r2, #3
 8002356:	4393      	bics	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2202      	movs	r2, #2
 8002368:	4393      	bics	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a24      	ldr	r2, [pc, #144]	; (800240c <TIM_OC1_SetConfig+0xec>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <TIM_OC1_SetConfig+0x6e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a23      	ldr	r2, [pc, #140]	; (8002410 <TIM_OC1_SetConfig+0xf0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_OC1_SetConfig+0x6e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a22      	ldr	r2, [pc, #136]	; (8002414 <TIM_OC1_SetConfig+0xf4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10c      	bne.n	80023a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2208      	movs	r2, #8
 8002392:	4393      	bics	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2204      	movs	r2, #4
 80023a4:	4393      	bics	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a18      	ldr	r2, [pc, #96]	; (800240c <TIM_OC1_SetConfig+0xec>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <TIM_OC1_SetConfig+0xa0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <TIM_OC1_SetConfig+0xf0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d003      	beq.n	80023c0 <TIM_OC1_SetConfig+0xa0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <TIM_OC1_SetConfig+0xf4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4a15      	ldr	r2, [pc, #84]	; (8002418 <TIM_OC1_SetConfig+0xf8>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4a14      	ldr	r2, [pc, #80]	; (800241c <TIM_OC1_SetConfig+0xfc>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b006      	add	sp, #24
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	fffeff8f 	.word	0xfffeff8f
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800
 8002418:	fffffeff 	.word	0xfffffeff
 800241c:	fffffdff 	.word	0xfffffdff

08002420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	2210      	movs	r2, #16
 8002436:	4393      	bics	r3, r2
 8002438:	001a      	movs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <TIM_OC2_SetConfig+0xe0>)
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <TIM_OC2_SetConfig+0xe4>)
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2220      	movs	r2, #32
 800246a:	4393      	bics	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a22      	ldr	r2, [pc, #136]	; (8002508 <TIM_OC2_SetConfig+0xe8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10d      	bne.n	800249e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	4393      	bics	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	4393      	bics	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <TIM_OC2_SetConfig+0xe8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <TIM_OC2_SetConfig+0x96>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <TIM_OC2_SetConfig+0xec>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_OC2_SetConfig+0x96>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <TIM_OC2_SetConfig+0xf0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d113      	bne.n	80024de <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4a16      	ldr	r2, [pc, #88]	; (8002514 <TIM_OC2_SetConfig+0xf4>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4a15      	ldr	r2, [pc, #84]	; (8002518 <TIM_OC2_SetConfig+0xf8>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	621a      	str	r2, [r3, #32]
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b006      	add	sp, #24
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	feff8fff 	.word	0xfeff8fff
 8002504:	fffffcff 	.word	0xfffffcff
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40014400 	.word	0x40014400
 8002510:	40014800 	.word	0x40014800
 8002514:	fffffbff 	.word	0xfffffbff
 8002518:	fffff7ff 	.word	0xfffff7ff

0800251c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <TIM_OC3_SetConfig+0xdc>)
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <TIM_OC3_SetConfig+0xe0>)
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2203      	movs	r2, #3
 8002550:	4393      	bics	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	4a27      	ldr	r2, [pc, #156]	; (8002600 <TIM_OC3_SetConfig+0xe4>)
 8002562:	4013      	ands	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <TIM_OC3_SetConfig+0xe8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4a22      	ldr	r2, [pc, #136]	; (8002608 <TIM_OC3_SetConfig+0xec>)
 800257e:	4013      	ands	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <TIM_OC3_SetConfig+0xf0>)
 8002592:	4013      	ands	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <TIM_OC3_SetConfig+0xe8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <TIM_OC3_SetConfig+0x92>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <TIM_OC3_SetConfig+0xf4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_OC3_SetConfig+0x92>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <TIM_OC3_SetConfig+0xf8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d113      	bne.n	80025d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <TIM_OC3_SetConfig+0xfc>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a18      	ldr	r2, [pc, #96]	; (800261c <TIM_OC3_SetConfig+0x100>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	621a      	str	r2, [r3, #32]
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b006      	add	sp, #24
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fffffeff 	.word	0xfffffeff
 80025fc:	fffeff8f 	.word	0xfffeff8f
 8002600:	fffffdff 	.word	0xfffffdff
 8002604:	40012c00 	.word	0x40012c00
 8002608:	fffff7ff 	.word	0xfffff7ff
 800260c:	fffffbff 	.word	0xfffffbff
 8002610:	40014400 	.word	0x40014400
 8002614:	40014800 	.word	0x40014800
 8002618:	ffffefff 	.word	0xffffefff
 800261c:	ffffdfff 	.word	0xffffdfff

08002620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <TIM_OC4_SetConfig+0xa8>)
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a20      	ldr	r2, [pc, #128]	; (80026cc <TIM_OC4_SetConfig+0xac>)
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <TIM_OC4_SetConfig+0xb0>)
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <TIM_OC4_SetConfig+0xb4>)
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	031b      	lsls	r3, r3, #12
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <TIM_OC4_SetConfig+0xb8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <TIM_OC4_SetConfig+0x70>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a16      	ldr	r2, [pc, #88]	; (80026dc <TIM_OC4_SetConfig+0xbc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_OC4_SetConfig+0x70>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <TIM_OC4_SetConfig+0xc0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <TIM_OC4_SetConfig+0xc4>)
 8002694:	4013      	ands	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	ffffefff 	.word	0xffffefff
 80026cc:	feff8fff 	.word	0xfeff8fff
 80026d0:	fffffcff 	.word	0xfffffcff
 80026d4:	ffffdfff 	.word	0xffffdfff
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800
 80026e4:	ffffbfff 	.word	0xffffbfff

080026e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a21      	ldr	r2, [pc, #132]	; (8002784 <TIM_OC5_SetConfig+0x9c>)
 80026fe:	401a      	ands	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <TIM_OC5_SetConfig+0xa0>)
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <TIM_OC5_SetConfig+0xa4>)
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <TIM_OC5_SetConfig+0xa8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <TIM_OC5_SetConfig+0x66>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <TIM_OC5_SetConfig+0xac>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_OC5_SetConfig+0x66>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a13      	ldr	r2, [pc, #76]	; (8002798 <TIM_OC5_SetConfig+0xb0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d109      	bne.n	8002762 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <TIM_OC5_SetConfig+0x9c>)
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}
 8002784:	fffeffff 	.word	0xfffeffff
 8002788:	fffeff8f 	.word	0xfffeff8f
 800278c:	fffdffff 	.word	0xfffdffff
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40014400 	.word	0x40014400
 8002798:	40014800 	.word	0x40014800

0800279c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <TIM_OC6_SetConfig+0xa0>)
 80027b2:	401a      	ands	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <TIM_OC6_SetConfig+0xa4>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <TIM_OC6_SetConfig+0xa8>)
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <TIM_OC6_SetConfig+0xac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <TIM_OC6_SetConfig+0x68>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <TIM_OC6_SetConfig+0xb0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_OC6_SetConfig+0x68>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <TIM_OC6_SetConfig+0xb4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d109      	bne.n	8002818 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <TIM_OC6_SetConfig+0xb8>)
 8002808:	4013      	ands	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	029b      	lsls	r3, r3, #10
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b006      	add	sp, #24
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	ffefffff 	.word	0xffefffff
 8002840:	feff8fff 	.word	0xfeff8fff
 8002844:	ffdfffff 	.word	0xffdfffff
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800
 8002854:	fffbffff 	.word	0xfffbffff

08002858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	2201      	movs	r2, #1
 8002870:	4393      	bics	r3, r2
 8002872:	001a      	movs	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	22f0      	movs	r2, #240	; 0xf0
 8002882:	4393      	bics	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	220a      	movs	r2, #10
 8002894:	4393      	bics	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b006      	add	sp, #24
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4393      	bics	r3, r2
 80028ce:	001a      	movs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <TIM_TI2_ConfigInputStage+0x60>)
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	031b      	lsls	r3, r3, #12
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	22a0      	movs	r2, #160	; 0xa0
 80028f0:	4393      	bics	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b006      	add	sp, #24
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	ffff0fff 	.word	0xffff0fff

08002918 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a08      	ldr	r2, [pc, #32]	; (800294c <TIM_ITRx_SetConfig+0x34>)
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	2207      	movs	r2, #7
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b004      	add	sp, #16
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	ffcfff8f 	.word	0xffcfff8f

08002950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <TIM_ETR_SetConfig+0x3c>)
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	021a      	lsls	r2, r3, #8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	431a      	orrs	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b006      	add	sp, #24
 800298a:	bd80      	pop	{r7, pc}
 800298c:	ffff00ff 	.word	0xffff00ff

08002990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	221f      	movs	r2, #31
 80029a0:	4013      	ands	r3, r2
 80029a2:	2201      	movs	r2, #1
 80029a4:	409a      	lsls	r2, r3
 80029a6:	0013      	movs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	43d2      	mvns	r2, r2
 80029b2:	401a      	ands	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	211f      	movs	r1, #31
 80029c0:	400b      	ands	r3, r1
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4099      	lsls	r1, r3
 80029c6:	000b      	movs	r3, r1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b006      	add	sp, #24
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	223c      	movs	r2, #60	; 0x3c
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e04a      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	223c      	movs	r2, #60	; 0x3c
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	223d      	movs	r2, #61	; 0x3d
 80029fc:	2102      	movs	r1, #2
 80029fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d108      	bne.n	8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2270      	movs	r2, #112	; 0x70
 8002a30:	4393      	bics	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	4393      	bics	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	223d      	movs	r2, #61	; 0x3d
 8002a78:	2101      	movs	r1, #1
 8002a7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	223c      	movs	r2, #60	; 0x3c
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	ff0fffff 	.word	0xff0fffff
 8002a98:	40000400 	.word	0x40000400

08002a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	2600      	movs	r6, #0
 8002ad0:	4d0c      	ldr	r5, [pc, #48]	; (8002b04 <__libc_init_array+0x38>)
 8002ad2:	4c0d      	ldr	r4, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	2600      	movs	r6, #0
 8002ade:	f000 f821 	bl	8002b24 <_init>
 8002ae2:	4d0a      	ldr	r5, [pc, #40]	; (8002b0c <__libc_init_array+0x40>)
 8002ae4:	4c0a      	ldr	r4, [pc, #40]	; (8002b10 <__libc_init_array+0x44>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	00b3      	lsls	r3, r6, #2
 8002af2:	58eb      	ldr	r3, [r5, r3]
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	00b3      	lsls	r3, r6, #2
 8002afc:	58eb      	ldr	r3, [r5, r3]
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08002bd0 	.word	0x08002bd0
 8002b08:	08002bd0 	.word	0x08002bd0
 8002b0c:	08002bd0 	.word	0x08002bd0
 8002b10:	08002bd4 	.word	0x08002bd4

08002b14 <memset>:
 8002b14:	0003      	movs	r3, r0
 8002b16:	1882      	adds	r2, r0, r2
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	7019      	strb	r1, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <_init>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr

08002b30 <_fini>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr


IR_receive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08002d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002d74  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebcc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0a  00000000  00000000  0002ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00030710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014783  00000000  00000000  00031f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e582  00000000  00000000  000466db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f8e  00000000  00000000  00054c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dabeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d2c  00000000  00000000  000dac3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002cd0 	.word	0x08002cd0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002cd0 	.word	0x08002cd0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <time_counter>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t time_counter(){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
   return (overflow_counter << 8) + TIM1->CNT;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <time_counter+0x18>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	021a      	lsls	r2, r3, #8
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <time_counter+0x1c>)
 8000224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000226:	18d3      	adds	r3, r2, r3
 }
 8000228:	0018      	movs	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	20000108 	.word	0x20000108
 8000234:	40012c00 	.word	0x40012c00

08000238 <HAL_TIM_PeriodElapsedCallback>:

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
     if (htim == &htim1){
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000244:	429a      	cmp	r2, r3
 8000246:	d104      	bne.n	8000252 <HAL_TIM_PeriodElapsedCallback+0x1a>
         overflow_counter++;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	1c5a      	adds	r2, r3, #1
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
     }
 }
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000028 	.word	0x20000028
 8000260:	20000108 	.word	0x20000108

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fc31 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 fa0d 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 fae3 	bl	800083c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000276:	f000 fa51 	bl	800071c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800027a:	f000 faab 	bl	80007d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800027e:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <main+0x64>)
 8000280:	0018      	movs	r0, r3
 8000282:	f001 fc85 	bl	8001b90 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  now = time_counter();
 8000286:	f7ff ffc7 	bl	8000218 <time_counter>
 800028a:	0002      	movs	r2, r0
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0x68>)
 800028e:	601a      	str	r2, [r3, #0]
	  pre = time_counter();
 8000290:	f7ff ffc2 	bl	8000218 <time_counter>
 8000294:	0002      	movs	r2, r0
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0x6c>)
 8000298:	601a      	str	r2, [r3, #0]
	  while(now - pre < 10){
 800029a:	e183      	b.n	80005a4 <main+0x340>
		  now = time_counter();
 800029c:	f7ff ffbc 	bl	8000218 <time_counter>
 80002a0:	0002      	movs	r2, r0
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <main+0x68>)
 80002a4:	601a      	str	r2, [r3, #0]
		  IR_count[16]++;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <main+0x70>)
 80002a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002aa:	1c5a      	adds	r2, r3, #1
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <main+0x70>)
 80002ae:	641a      	str	r2, [r3, #64]	; 0x40
		  for(uint8_t i = 0; i < 2; i++){
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
 80002b6:	e170      	b.n	800059a <main+0x336>
			  for(uint8_t j = 0; j < 2; j++){
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e162      	b.n	8000586 <main+0x322>
				  for(uint8_t k = 0; k < 2; k++){
 80002c0:	1d7b      	adds	r3, r7, #5
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	e154      	b.n	8000572 <main+0x30e>
 80002c8:	20000028 	.word	0x20000028
 80002cc:	2000010c 	.word	0x2000010c
 80002d0:	20000110 	.word	0x20000110
 80002d4:	20000114 	.word	0x20000114
					  HAL_GPIO_WritePin(mux_ctrl0_GPIO_Port, mux_ctrl0_Pin, k);
 80002d8:	1d7b      	adds	r3, r7, #5
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	23a0      	movs	r3, #160	; 0xa0
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2120      	movs	r1, #32
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fed9 	bl	800109a <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(mux_ctrl1_GPIO_Port, mux_ctrl1_Pin, j);
 80002e8:	1dbb      	adds	r3, r7, #6
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	23a0      	movs	r3, #160	; 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2110      	movs	r1, #16
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fed1 	bl	800109a <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(mux_ctrl2_GPIO_Port, mux_ctrl2_Pin, i);
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	781a      	ldrb	r2, [r3, #0]
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	2108      	movs	r1, #8
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fec9 	bl	800109a <HAL_GPIO_WritePin>
					  if(i == 0 && j == 0 && k == 0){
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d121      	bne.n	8000354 <main+0xf0>
 8000310:	1dbb      	adds	r3, r7, #6
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d11d      	bne.n	8000354 <main+0xf0>
 8000318:	1d7b      	adds	r3, r7, #5
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d119      	bne.n	8000354 <main+0xf0>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 8000320:	23a0      	movs	r3, #160	; 0xa0
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2102      	movs	r1, #2
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fe9a 	bl	8001060 <HAL_GPIO_ReadPin>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d104      	bne.n	800033a <main+0xd6>
							  IR_count[0]++;
 8000330:	4bbd      	ldr	r3, [pc, #756]	; (8000628 <main+0x3c4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	4bbc      	ldr	r3, [pc, #752]	; (8000628 <main+0x3c4>)
 8000338:	601a      	str	r2, [r3, #0]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 800033a:	23a0      	movs	r3, #160	; 0xa0
 800033c:	05db      	lsls	r3, r3, #23
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fe8d 	bl	8001060 <HAL_GPIO_ReadPin>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d104      	bne.n	8000354 <main+0xf0>
							  IR_count[8]++;
 800034a:	4bb7      	ldr	r3, [pc, #732]	; (8000628 <main+0x3c4>)
 800034c:	6a1b      	ldr	r3, [r3, #32]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	4bb5      	ldr	r3, [pc, #724]	; (8000628 <main+0x3c4>)
 8000352:	621a      	str	r2, [r3, #32]
						  }
					  }
					  if(i == 0 && j == 0 && k == 1){
 8000354:	1dfb      	adds	r3, r7, #7
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d121      	bne.n	80003a0 <main+0x13c>
 800035c:	1dbb      	adds	r3, r7, #6
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d11d      	bne.n	80003a0 <main+0x13c>
 8000364:	1d7b      	adds	r3, r7, #5
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d119      	bne.n	80003a0 <main+0x13c>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 800036c:	23a0      	movs	r3, #160	; 0xa0
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2102      	movs	r1, #2
 8000372:	0018      	movs	r0, r3
 8000374:	f000 fe74 	bl	8001060 <HAL_GPIO_ReadPin>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d104      	bne.n	8000386 <main+0x122>
							  IR_count[1]++;
 800037c:	4baa      	ldr	r3, [pc, #680]	; (8000628 <main+0x3c4>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	4ba9      	ldr	r3, [pc, #676]	; (8000628 <main+0x3c4>)
 8000384:	605a      	str	r2, [r3, #4]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 8000386:	23a0      	movs	r3, #160	; 0xa0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	2101      	movs	r1, #1
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fe67 	bl	8001060 <HAL_GPIO_ReadPin>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d104      	bne.n	80003a0 <main+0x13c>
							  IR_count[9]++;
 8000396:	4ba4      	ldr	r3, [pc, #656]	; (8000628 <main+0x3c4>)
 8000398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	4ba2      	ldr	r3, [pc, #648]	; (8000628 <main+0x3c4>)
 800039e:	625a      	str	r2, [r3, #36]	; 0x24
						  }
					  }
					  if(i == 0 && j == 1 && k == 0){
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d121      	bne.n	80003ec <main+0x188>
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d11d      	bne.n	80003ec <main+0x188>
 80003b0:	1d7b      	adds	r3, r7, #5
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d119      	bne.n	80003ec <main+0x188>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 80003b8:	23a0      	movs	r3, #160	; 0xa0
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	2102      	movs	r1, #2
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 fe4e 	bl	8001060 <HAL_GPIO_ReadPin>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d104      	bne.n	80003d2 <main+0x16e>
							  IR_count[2]++;
 80003c8:	4b97      	ldr	r3, [pc, #604]	; (8000628 <main+0x3c4>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	4b96      	ldr	r3, [pc, #600]	; (8000628 <main+0x3c4>)
 80003d0:	609a      	str	r2, [r3, #8]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 80003d2:	23a0      	movs	r3, #160	; 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	2101      	movs	r1, #1
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fe41 	bl	8001060 <HAL_GPIO_ReadPin>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d104      	bne.n	80003ec <main+0x188>
							  IR_count[10]++;
 80003e2:	4b91      	ldr	r3, [pc, #580]	; (8000628 <main+0x3c4>)
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	4b8f      	ldr	r3, [pc, #572]	; (8000628 <main+0x3c4>)
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
						  }
					  }
					  if(i == 0 && j == 1 && k == 1){
 80003ec:	1dfb      	adds	r3, r7, #7
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d121      	bne.n	8000438 <main+0x1d4>
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d11d      	bne.n	8000438 <main+0x1d4>
 80003fc:	1d7b      	adds	r3, r7, #5
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d119      	bne.n	8000438 <main+0x1d4>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	2102      	movs	r1, #2
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fe28 	bl	8001060 <HAL_GPIO_ReadPin>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d104      	bne.n	800041e <main+0x1ba>
							  IR_count[3]++;
 8000414:	4b84      	ldr	r3, [pc, #528]	; (8000628 <main+0x3c4>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	4b83      	ldr	r3, [pc, #524]	; (8000628 <main+0x3c4>)
 800041c:	60da      	str	r2, [r3, #12]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2101      	movs	r1, #1
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fe1b 	bl	8001060 <HAL_GPIO_ReadPin>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d104      	bne.n	8000438 <main+0x1d4>
							  IR_count[11]++;
 800042e:	4b7e      	ldr	r3, [pc, #504]	; (8000628 <main+0x3c4>)
 8000430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	4b7c      	ldr	r3, [pc, #496]	; (8000628 <main+0x3c4>)
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
						  }
					  }
					  if(i == 1 && j == 0 && k == 0){
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d121      	bne.n	8000484 <main+0x220>
 8000440:	1dbb      	adds	r3, r7, #6
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d11d      	bne.n	8000484 <main+0x220>
 8000448:	1d7b      	adds	r3, r7, #5
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d119      	bne.n	8000484 <main+0x220>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 8000450:	23a0      	movs	r3, #160	; 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2102      	movs	r1, #2
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fe02 	bl	8001060 <HAL_GPIO_ReadPin>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d104      	bne.n	800046a <main+0x206>
							  IR_count[4]++;
 8000460:	4b71      	ldr	r3, [pc, #452]	; (8000628 <main+0x3c4>)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	4b70      	ldr	r3, [pc, #448]	; (8000628 <main+0x3c4>)
 8000468:	611a      	str	r2, [r3, #16]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 800046a:	23a0      	movs	r3, #160	; 0xa0
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2101      	movs	r1, #1
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fdf5 	bl	8001060 <HAL_GPIO_ReadPin>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d104      	bne.n	8000484 <main+0x220>
							  IR_count[12]++;
 800047a:	4b6b      	ldr	r3, [pc, #428]	; (8000628 <main+0x3c4>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	4b69      	ldr	r3, [pc, #420]	; (8000628 <main+0x3c4>)
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
						  }
					  }
					  if(i == 1 && j == 0 && k == 1){
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d121      	bne.n	80004d0 <main+0x26c>
 800048c:	1dbb      	adds	r3, r7, #6
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d11d      	bne.n	80004d0 <main+0x26c>
 8000494:	1d7b      	adds	r3, r7, #5
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d119      	bne.n	80004d0 <main+0x26c>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 800049c:	23a0      	movs	r3, #160	; 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2102      	movs	r1, #2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fddc 	bl	8001060 <HAL_GPIO_ReadPin>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d104      	bne.n	80004b6 <main+0x252>
							  IR_count[5]++;
 80004ac:	4b5e      	ldr	r3, [pc, #376]	; (8000628 <main+0x3c4>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	1c5a      	adds	r2, r3, #1
 80004b2:	4b5d      	ldr	r3, [pc, #372]	; (8000628 <main+0x3c4>)
 80004b4:	615a      	str	r2, [r3, #20]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 80004b6:	23a0      	movs	r3, #160	; 0xa0
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	2101      	movs	r1, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fdcf 	bl	8001060 <HAL_GPIO_ReadPin>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d104      	bne.n	80004d0 <main+0x26c>
							  IR_count[13]++;
 80004c6:	4b58      	ldr	r3, [pc, #352]	; (8000628 <main+0x3c4>)
 80004c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	4b56      	ldr	r3, [pc, #344]	; (8000628 <main+0x3c4>)
 80004ce:	635a      	str	r2, [r3, #52]	; 0x34
						  }
					  }
					  if(i == 1 && j == 1 && k == 0){
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d121      	bne.n	800051c <main+0x2b8>
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d11d      	bne.n	800051c <main+0x2b8>
 80004e0:	1d7b      	adds	r3, r7, #5
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d119      	bne.n	800051c <main+0x2b8>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fdb6 	bl	8001060 <HAL_GPIO_ReadPin>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d104      	bne.n	8000502 <main+0x29e>
							  IR_count[6]++;
 80004f8:	4b4b      	ldr	r3, [pc, #300]	; (8000628 <main+0x3c4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <main+0x3c4>)
 8000500:	619a      	str	r2, [r3, #24]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2101      	movs	r1, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fda9 	bl	8001060 <HAL_GPIO_ReadPin>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d104      	bne.n	800051c <main+0x2b8>
							  IR_count[14]++;
 8000512:	4b45      	ldr	r3, [pc, #276]	; (8000628 <main+0x3c4>)
 8000514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	4b43      	ldr	r3, [pc, #268]	; (8000628 <main+0x3c4>)
 800051a:	639a      	str	r2, [r3, #56]	; 0x38
						  }
					  }
					  if(i == 1 && j == 1 && k == 1){
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d121      	bne.n	8000568 <main+0x304>
 8000524:	1dbb      	adds	r3, r7, #6
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d11d      	bne.n	8000568 <main+0x304>
 800052c:	1d7b      	adds	r3, r7, #5
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d119      	bne.n	8000568 <main+0x304>
						  if(HAL_GPIO_ReadPin(mux_sig0_GPIO_Port, mux_sig0_Pin) == 0){
 8000534:	23a0      	movs	r3, #160	; 0xa0
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	2102      	movs	r1, #2
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fd90 	bl	8001060 <HAL_GPIO_ReadPin>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d104      	bne.n	800054e <main+0x2ea>
							  IR_count[7]++;
 8000544:	4b38      	ldr	r3, [pc, #224]	; (8000628 <main+0x3c4>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <main+0x3c4>)
 800054c:	61da      	str	r2, [r3, #28]
						  }
						  if(HAL_GPIO_ReadPin(mux_sig1_GPIO_Port, mux_sig1_Pin) == 0){
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2101      	movs	r1, #1
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fd83 	bl	8001060 <HAL_GPIO_ReadPin>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d104      	bne.n	8000568 <main+0x304>
							  IR_count[15]++;
 800055e:	4b32      	ldr	r3, [pc, #200]	; (8000628 <main+0x3c4>)
 8000560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	4b30      	ldr	r3, [pc, #192]	; (8000628 <main+0x3c4>)
 8000566:	63da      	str	r2, [r3, #60]	; 0x3c
				  for(uint8_t k = 0; k < 2; k++){
 8000568:	1d7b      	adds	r3, r7, #5
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	1d7b      	adds	r3, r7, #5
 800056e:	3201      	adds	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	1d7b      	adds	r3, r7, #5
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d800      	bhi.n	800057c <main+0x318>
 800057a:	e6ad      	b.n	80002d8 <main+0x74>
			  for(uint8_t j = 0; j < 2; j++){
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	3201      	adds	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d800      	bhi.n	8000590 <main+0x32c>
 800058e:	e697      	b.n	80002c0 <main+0x5c>
		  for(uint8_t i = 0; i < 2; i++){
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	3201      	adds	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d800      	bhi.n	80005a4 <main+0x340>
 80005a2:	e689      	b.n	80002b8 <main+0x54>
	  while(now - pre < 10){
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <main+0x3c8>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <main+0x3cc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	2b09      	cmp	r3, #9
 80005b0:	d800      	bhi.n	80005b4 <main+0x350>
 80005b2:	e673      	b.n	800029c <main+0x38>
					  }
				  }
			  }
		  }
	  }
	  for(uint8_t l = 0; l < 16; l++){
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	e016      	b.n	80005ea <main+0x386>
		  IR_intensity[l] = IR_count[l] * 256 / IR_count[16];
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x3c4>)
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	58d3      	ldr	r3, [r2, r3]
 80005c6:	021a      	lsls	r2, r3, #8
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <main+0x3c4>)
 80005ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	781c      	ldrb	r4, [r3, #0]
 80005d0:	0010      	movs	r0, r2
 80005d2:	f7ff fd95 	bl	8000100 <__udivsi3>
 80005d6:	0003      	movs	r3, r0
 80005d8:	0019      	movs	r1, r3
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <main+0x3d0>)
 80005dc:	00a2      	lsls	r2, r4, #2
 80005de:	50d1      	str	r1, [r2, r3]
	  for(uint8_t l = 0; l < 16; l++){
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	3201      	adds	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d9e4      	bls.n	80005bc <main+0x358>
	  }
	  for(uint8_t m = 0; m < 17; m++){
 80005f2:	1cfb      	adds	r3, r7, #3
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e00a      	b.n	8000610 <main+0x3ac>
		  IR_count[m] = 0;
 80005fa:	1cfb      	adds	r3, r7, #3
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <main+0x3c4>)
 8000600:	0092      	lsls	r2, r2, #2
 8000602:	2100      	movs	r1, #0
 8000604:	50d1      	str	r1, [r2, r3]
	  for(uint8_t m = 0; m < 17; m++){
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	1cfb      	adds	r3, r7, #3
 800060c:	3201      	adds	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	1cfb      	adds	r3, r7, #3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b10      	cmp	r3, #16
 8000616:	d9f0      	bls.n	80005fa <main+0x396>
	  }

	  max = 0;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <main+0x3d4>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	  for(uint8_t n = 0; n < 16; n++){
 800061e:	1cbb      	adds	r3, r7, #2
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e020      	b.n	8000668 <main+0x404>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000114 	.word	0x20000114
 800062c:	2000010c 	.word	0x2000010c
 8000630:	20000110 	.word	0x20000110
 8000634:	20000158 	.word	0x20000158
 8000638:	20000198 	.word	0x20000198
		  if(IR_intensity[max] < IR_intensity[n]){
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0x41c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	001a      	movs	r2, r3
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <main+0x420>)
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	58d2      	ldr	r2, [r2, r3]
 8000648:	1cbb      	adds	r3, r7, #2
 800064a:	7819      	ldrb	r1, [r3, #0]
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <main+0x420>)
 800064e:	0089      	lsls	r1, r1, #2
 8000650:	58cb      	ldr	r3, [r1, r3]
 8000652:	429a      	cmp	r2, r3
 8000654:	d203      	bcs.n	800065e <main+0x3fa>
			  max = n;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <main+0x41c>)
 8000658:	1cba      	adds	r2, r7, #2
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	701a      	strb	r2, [r3, #0]
	  for(uint8_t n = 0; n < 16; n++){
 800065e:	1cbb      	adds	r3, r7, #2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	1cbb      	adds	r3, r7, #2
 8000664:	3201      	adds	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1cbb      	adds	r3, r7, #2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d9e5      	bls.n	800063c <main+0x3d8>
		  }
	  }
	  HAL_UART_Transmit(&huart2, &max, 1, 100);
 8000670:	4903      	ldr	r1, [pc, #12]	; (8000680 <main+0x41c>)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <main+0x424>)
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	2201      	movs	r2, #1
 8000678:	f001 febc 	bl	80023f4 <HAL_UART_Transmit>
	  now = time_counter();
 800067c:	e603      	b.n	8000286 <main+0x22>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000198 	.word	0x20000198
 8000684:	20000158 	.word	0x20000158
 8000688:	20000074 	.word	0x20000074

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b093      	sub	sp, #76	; 0x4c
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	2414      	movs	r4, #20
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2334      	movs	r3, #52	; 0x34
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fb0f 	bl	8002cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fb08 	bl	8002cc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fd0d 	bl	80010d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2240      	movs	r2, #64	; 0x40
 80006d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fd45 	bl	800116c <HAL_RCC_OscConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006e6:	f000 f901 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f840 	bl	800178c <HAL_RCC_ClockConfig>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000710:	f000 f8ec 	bl	80008ec <Error_Handler>
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b013      	add	sp, #76	; 0x4c
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	2310      	movs	r3, #16
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	0018      	movs	r0, r3
 8000728:	2310      	movs	r3, #16
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f002 fac7 	bl	8002cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	0018      	movs	r0, r3
 8000736:	230c      	movs	r3, #12
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f002 fac0 	bl	8002cc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_TIM1_Init+0xac>)
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <MX_TIM1_Init+0xb0>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_TIM1_Init+0xac>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_TIM1_Init+0xb4>)
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_TIM1_Init+0xac>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_TIM1_Init+0xac>)
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_TIM1_Init+0xac>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_TIM1_Init+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_TIM1_Init+0xac>)
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_TIM1_Init+0xac>)
 800076c:	0018      	movs	r0, r3
 800076e:	f001 f9b7 	bl	8001ae0 <HAL_TIM_Base_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000776:	f000 f8b9 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	2110      	movs	r1, #16
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	0152      	lsls	r2, r2, #5
 8000782:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000784:	187a      	adds	r2, r7, r1
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_TIM1_Init+0xac>)
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fb56 	bl	8001e3c <HAL_TIM_ConfigClockSource>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000794:	f000 f8aa 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007aa:	1d3a      	adds	r2, r7, #4
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_TIM1_Init+0xac>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fd4f 	bl	8002254 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80007ba:	f000 f897 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b008      	add	sp, #32
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000028 	.word	0x20000028
 80007cc:	40012c00 	.word	0x40012c00
 80007d0:	0000063f 	.word	0x0000063f

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_USART2_UART_Init+0x60>)
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_USART2_UART_Init+0x64>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x60>)
 80007e0:	22e1      	movs	r2, #225	; 0xe1
 80007e2:	0252      	lsls	r2, r2, #9
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART2_UART_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x60>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_USART2_UART_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_USART2_UART_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_USART2_UART_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x60>)
 800081e:	0018      	movs	r0, r3
 8000820:	f001 fd92 	bl	8002348 <HAL_UART_Init>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000828:	f000 f860 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	20000074 	.word	0x20000074
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 fa38 	bl	8002cc0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_GPIO_Init+0xac>)
 8000852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_GPIO_Init+0xac>)
 8000856:	2101      	movs	r1, #1
 8000858:	430a      	orrs	r2, r1
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xac>)
 800085e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000860:	2201      	movs	r2, #1
 8000862:	4013      	ands	r3, r2
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, mux_ctrl2_Pin|mux_ctrl1_Pin|mux_ctrl0_Pin, GPIO_PIN_RESET);
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2200      	movs	r2, #0
 800086e:	2138      	movs	r1, #56	; 0x38
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fc12 	bl	800109a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : mux_sig1_Pin */
  GPIO_InitStruct.Pin = mux_sig1_Pin;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(mux_sig1_GPIO_Port, &GPIO_InitStruct);
 8000888:	1d3a      	adds	r2, r7, #4
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fa81 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : mux_sig0_Pin */
  GPIO_InitStruct.Pin = mux_sig0_Pin;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2202      	movs	r2, #2
 800089a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2288      	movs	r2, #136	; 0x88
 80008a0:	0352      	lsls	r2, r2, #13
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(mux_sig0_GPIO_Port, &GPIO_InitStruct);
 80008aa:	1d3a      	adds	r2, r7, #4
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fa70 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : mux_ctrl2_Pin mux_ctrl1_Pin mux_ctrl0_Pin */
  GPIO_InitStruct.Pin = mux_ctrl2_Pin|mux_ctrl1_Pin|mux_ctrl0_Pin;
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2238      	movs	r2, #56	; 0x38
 80008bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fa5d 	bl	8000d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x44>)
 8000900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x44>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	641a      	str	r2, [r3, #64]	; 0x40
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_MspInit+0x44>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x44>)
 8000918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x44>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0549      	lsls	r1, r1, #21
 8000920:	430a      	orrs	r2, r1
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_MspInit+0x44>)
 8000926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	055b      	lsls	r3, r3, #21
 800092c:	4013      	ands	r3, r2
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_TIM_Base_MspInit+0x48>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d115      	bne.n	800097e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_TIM_Base_MspInit+0x4c>)
 8000954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_TIM_Base_MspInit+0x4c>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0109      	lsls	r1, r1, #4
 800095c:	430a      	orrs	r2, r1
 800095e:	641a      	str	r2, [r3, #64]	; 0x40
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_TIM_Base_MspInit+0x4c>)
 8000962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200d      	movs	r0, #13
 8000974:	f000 f9de 	bl	8000d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000978:	200d      	movs	r0, #13
 800097a:	f000 f9f0 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40012c00 	.word	0x40012c00
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b08b      	sub	sp, #44	; 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	2414      	movs	r4, #20
 800099a:	193b      	adds	r3, r7, r4
 800099c:	0018      	movs	r0, r3
 800099e:	2314      	movs	r3, #20
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f002 f98c 	bl	8002cc0 <memset>
  if(huart->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <HAL_UART_MspInit+0x8c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d130      	bne.n	8000a14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_UART_MspInit+0x90>)
 80009b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <HAL_UART_MspInit+0x90>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0289      	lsls	r1, r1, #10
 80009bc:	430a      	orrs	r2, r1
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x90>)
 80009c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	029b      	lsls	r3, r3, #10
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0x90>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_UART_MspInit+0x90>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x90>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80009e6:	0021      	movs	r1, r4
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2202      	movs	r2, #2
 80009f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2201      	movs	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	187a      	adds	r2, r7, r1
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f9c2 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b00b      	add	sp, #44	; 0x2c
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000
 8000a24:	00008004 	.word	0x00008004

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f8aa 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 f8e4 	bl	8001c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000028 	.word	0x20000028

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f7ff fff6 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aaa:	f002 f8e5 	bl	8002c78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aae:	f7ff fbd9 	bl	8000264 <main>

08000ab2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   r0, =_estack
 8000ab4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	08002d68 	.word	0x08002d68
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	200001a0 	.word	0x200001a0

08000acc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_Init+0x3c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_Init+0x3c>)
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	0049      	lsls	r1, r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f810 	bl	8000b10 <HAL_InitTick>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d003      	beq.n	8000afc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e001      	b.n	8000b00 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fefc 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_InitTick+0x88>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d02b      	beq.n	8000b80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0x8c>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_InitTick+0x88>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	0019      	movs	r1, r3
 8000b32:	23fa      	movs	r3, #250	; 0xfa
 8000b34:	0098      	lsls	r0, r3, #2
 8000b36:	f7ff fae3 	bl	8000100 <__udivsi3>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f7ff fade 	bl	8000100 <__udivsi3>
 8000b44:	0003      	movs	r3, r0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f919 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d112      	bne.n	8000b76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d80a      	bhi.n	8000b6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f8e8 	bl	8000d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_InitTick+0x90>)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e00d      	b.n	8000b88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e008      	b.n	8000b88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e003      	b.n	8000b88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b80:	230f      	movs	r3, #15
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b005      	add	sp, #20
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	2000019c 	.word	0x2000019c

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	2000019c 	.word	0x2000019c

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b7f      	cmp	r3, #127	; 0x7f
 8000bee:	d809      	bhi.n	8000c04 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	231f      	movs	r3, #31
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_EnableIRQ+0x30>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4091      	lsls	r1, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b7f      	cmp	r3, #127	; 0x7f
 8000c24:	d828      	bhi.n	8000c78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c26:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <__NVIC_SetPriority+0xd4>)
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	589b      	ldr	r3, [r3, r2]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <__NVIC_SetPriority+0xd4>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	33c0      	adds	r3, #192	; 0xc0
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c76:	e031      	b.n	8000cdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <__NVIC_SetPriority+0xd8>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0019      	movs	r1, r3
 8000c80:	230f      	movs	r3, #15
 8000c82:	400b      	ands	r3, r1
 8000c84:	3b08      	subs	r3, #8
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3306      	adds	r3, #6
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	3304      	adds	r3, #4
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	; 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <__NVIC_SetPriority+0xd8>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	001c      	movs	r4, r3
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	3306      	adds	r3, #6
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	18c3      	adds	r3, r0, r3
 8000cd8:	3304      	adds	r3, #4
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b003      	add	sp, #12
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	045b      	lsls	r3, r3, #17
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d301      	bcc.n	8000d04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d00:	2301      	movs	r3, #1
 8000d02:	e010      	b.n	8000d26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <SysTick_Config+0x44>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	425b      	negs	r3, r3
 8000d10:	2103      	movs	r1, #3
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff ff7c 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x44>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	210f      	movs	r1, #15
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	1c02      	adds	r2, r0, #0
 8000d44:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b004      	add	sp, #16
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	0002      	movs	r2, r0
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff33 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ffaf 	bl	8000cec <SysTick_Config>
 8000d8e:	0003      	movs	r3, r0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e147      	b.n	8001038 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4091      	lsls	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <HAL_GPIO_Init+0x28>
 8000dbe:	e138      	b.n	8001032 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d005      	beq.n	8000dd8 <HAL_GPIO_Init+0x40>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	2201      	movs	r2, #1
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d017      	beq.n	8000e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d123      	bne.n	8000eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	58d3      	ldr	r3, [r2, r3]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2207      	movs	r2, #7
 8000e94:	4013      	ands	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2107      	movs	r1, #7
 8000eae:	400b      	ands	r3, r1
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	6939      	ldr	r1, [r7, #16]
 8000ec8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	23c0      	movs	r3, #192	; 0xc0
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	d100      	bne.n	8000f0c <HAL_GPIO_Init+0x174>
 8000f0a:	e092      	b.n	8001032 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f0c:	4a50      	ldr	r2, [pc, #320]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3318      	adds	r3, #24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	589b      	ldr	r3, [r3, r2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	220f      	movs	r2, #15
 8000f24:	409a      	lsls	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	23a0      	movs	r3, #160	; 0xa0
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x1ca>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a45      	ldr	r2, [pc, #276]	; (8001054 <HAL_GPIO_Init+0x2bc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x1c6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a44      	ldr	r2, [pc, #272]	; (8001058 <HAL_GPIO_Init+0x2c0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x1c2>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a43      	ldr	r2, [pc, #268]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x1be>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x1cc>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x1cc>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x1cc>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x1cc>
 8000f62:	2300      	movs	r3, #0
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	2103      	movs	r1, #3
 8000f68:	400a      	ands	r2, r1
 8000f6a:	00d2      	lsls	r2, r2, #3
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f74:	4936      	ldr	r1, [pc, #216]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	035b      	lsls	r3, r3, #13
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	039b      	lsls	r3, r3, #14
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000fd8:	2384      	movs	r3, #132	; 0x84
 8000fda:	58d3      	ldr	r3, [r2, r3]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	029b      	lsls	r3, r3, #10
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffc:	4914      	ldr	r1, [pc, #80]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8000ffe:	2284      	movs	r2, #132	; 0x84
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	58d3      	ldr	r3, [r2, r3]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	4013      	ands	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800102a:	4909      	ldr	r1, [pc, #36]	; (8001050 <HAL_GPIO_Init+0x2b8>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	40da      	lsrs	r2, r3
 8001040:	1e13      	subs	r3, r2, #0
 8001042:	d000      	beq.n	8001046 <HAL_GPIO_Init+0x2ae>
 8001044:	e6b0      	b.n	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021800 	.word	0x40021800
 8001054:	50000400 	.word	0x50000400
 8001058:	50000800 	.word	0x50000800
 800105c:	50000c00 	.word	0x50000c00

08001060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	000a      	movs	r2, r1
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	1cba      	adds	r2, r7, #2
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	4013      	ands	r3, r2
 8001078:	d004      	beq.n	8001084 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800107a:	230f      	movs	r3, #15
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e003      	b.n	800108c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	781b      	ldrb	r3, [r3, #0]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	0008      	movs	r0, r1
 80010a4:	0011      	movs	r1, r2
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	1c02      	adds	r2, r0, #0
 80010aa:	801a      	strh	r2, [r3, #0]
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	1c0a      	adds	r2, r1, #0
 80010b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b2:	1c7b      	adds	r3, r7, #1
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ba:	1cbb      	adds	r3, r7, #2
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c2:	e003      	b.n	80010cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c4:	1cbb      	adds	r3, r7, #2
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d11f      	bne.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	0013      	movs	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	189b      	adds	r3, r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4912      	ldr	r1, [pc, #72]	; (8001150 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001106:	0018      	movs	r0, r3
 8001108:	f7fe fffa 	bl	8000100 <__udivsi3>
 800110c:	0003      	movs	r3, r0
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001112:	e008      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e001      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e009      	b.n	800113a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	401a      	ands	r2, r3
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	429a      	cmp	r2, r3
 8001136:	d0ed      	beq.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40007000 	.word	0x40007000
 8001148:	fffff9ff 	.word	0xfffff9ff
 800114c:	20000000 	.word	0x20000000
 8001150:	000f4240 	.word	0x000f4240

08001154 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <LL_RCC_GetAPB1Prescaler+0x14>)
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	23e0      	movs	r3, #224	; 0xe0
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	4013      	ands	r3, r2
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e2f3      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x1e>
 8001188:	e07c      	b.n	8001284 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118a:	4bc3      	ldr	r3, [pc, #780]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2238      	movs	r2, #56	; 0x38
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001194:	4bc0      	ldr	r3, [pc, #768]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2203      	movs	r2, #3
 800119a:	4013      	ands	r3, r2
 800119c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x3e>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d10b      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	4bb9      	ldr	r3, [pc, #740]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d062      	beq.n	8001282 <HAL_RCC_OscConfig+0x116>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d15e      	bne.n	8001282 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e2ce      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	025b      	lsls	r3, r3, #9
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x78>
 80011d4:	4bb0      	ldr	r3, [pc, #704]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4baf      	ldr	r3, [pc, #700]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	0249      	lsls	r1, r1, #9
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e020      	b.n	8001226 <HAL_RCC_OscConfig+0xba>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	23a0      	movs	r3, #160	; 0xa0
 80011ea:	02db      	lsls	r3, r3, #11
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10e      	bne.n	800120e <HAL_RCC_OscConfig+0xa2>
 80011f0:	4ba9      	ldr	r3, [pc, #676]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4ba8      	ldr	r3, [pc, #672]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	02c9      	lsls	r1, r1, #11
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4ba6      	ldr	r3, [pc, #664]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4ba5      	ldr	r3, [pc, #660]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0249      	lsls	r1, r1, #9
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e00b      	b.n	8001226 <HAL_RCC_OscConfig+0xba>
 800120e:	4ba2      	ldr	r3, [pc, #648]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001214:	49a1      	ldr	r1, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x330>)
 8001216:	400a      	ands	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	4b9f      	ldr	r3, [pc, #636]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b9e      	ldr	r3, [pc, #632]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001220:	499f      	ldr	r1, [pc, #636]	; (80014a0 <HAL_RCC_OscConfig+0x334>)
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d014      	beq.n	8001258 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fccb 	bl	8000bc8 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcc6 	bl	8000bc8 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e28d      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800124a:	4b93      	ldr	r3, [pc, #588]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	029b      	lsls	r3, r3, #10
 8001252:	4013      	ands	r3, r2
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0xcc>
 8001256:	e015      	b.n	8001284 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fcb6 	bl	8000bc8 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001262:	f7ff fcb1 	bl	8000bc8 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e278      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	4013      	ands	r3, r2
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0xf6>
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2202      	movs	r2, #2
 800128a:	4013      	ands	r3, r2
 800128c:	d100      	bne.n	8001290 <HAL_RCC_OscConfig+0x124>
 800128e:	e099      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001290:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2238      	movs	r2, #56	; 0x38
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129a:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x144>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d002      	beq.n	80012b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d135      	bne.n	8001322 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b6:	4b78      	ldr	r3, [pc, #480]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x162>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e24b      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a74      	ldr	r2, [pc, #464]	; (80014a4 <HAL_RCC_OscConfig+0x338>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	021a      	lsls	r2, r3, #8
 80012de:	4b6e      	ldr	r3, [pc, #440]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d112      	bne.n	8001310 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x33c>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012fe:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0adb      	lsrs	r3, r3, #11
 8001304:	2207      	movs	r2, #7
 8001306:	4013      	ands	r3, r2
 8001308:	4a68      	ldr	r2, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x340>)
 800130a:	40da      	lsrs	r2, r3
 800130c:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x344>)
 800130e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x348>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff fbfb 	bl	8000b10 <HAL_InitTick>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d051      	beq.n	80013c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e221      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800132a:	4b5b      	ldr	r3, [pc, #364]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x33c>)
 8001330:	4013      	ands	r3, r2
 8001332:	0019      	movs	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	0049      	lsls	r1, r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc3c 	bl	8000bc8 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc37 	bl	8000bc8 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1fe      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4013      	ands	r3, r2
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a4a      	ldr	r2, [pc, #296]	; (80014a4 <HAL_RCC_OscConfig+0x338>)
 800137a:	4013      	ands	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	021a      	lsls	r2, r3, #8
 8001384:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	e01b      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001392:	4949      	ldr	r1, [pc, #292]	; (80014b8 <HAL_RCC_OscConfig+0x34c>)
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fc16 	bl	8000bc8 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc11 	bl	8000bc8 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1d8      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4013      	ands	r3, r2
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x236>
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2208      	movs	r2, #8
 80013ca:	4013      	ands	r3, r2
 80013cc:	d047      	beq.n	800145e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2238      	movs	r2, #56	; 0x38
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	d10a      	bne.n	80013f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013da:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d03c      	beq.n	800145e <HAL_RCC_OscConfig+0x2f2>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d138      	bne.n	800145e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e1ba      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d019      	beq.n	800142c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	2101      	movs	r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbe0 	bl	8000bc8 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fbdb 	bl	8000bc8 <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1a2      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d0f1      	beq.n	800140e <HAL_RCC_OscConfig+0x2a2>
 800142a:	e018      	b.n	800145e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 800142e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fbc6 	bl	8000bc8 <HAL_GetTick>
 800143c:	0003      	movs	r3, r0
 800143e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fbc1 	bl	8000bc8 <HAL_GetTick>
 8001446:	0002      	movs	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e188      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001458:	2202      	movs	r2, #2
 800145a:	4013      	ands	r3, r2
 800145c:	d1f1      	bne.n	8001442 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2204      	movs	r2, #4
 8001464:	4013      	ands	r3, r2
 8001466:	d100      	bne.n	800146a <HAL_RCC_OscConfig+0x2fe>
 8001468:	e0c6      	b.n	80015f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	231f      	movs	r3, #31
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2238      	movs	r2, #56	; 0x38
 8001478:	4013      	ands	r3, r2
 800147a:	2b20      	cmp	r3, #32
 800147c:	d11e      	bne.n	80014bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_RCC_OscConfig+0x32c>)
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d100      	bne.n	800148a <HAL_RCC_OscConfig+0x31e>
 8001488:	e0b6      	b.n	80015f8 <HAL_RCC_OscConfig+0x48c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d000      	beq.n	8001494 <HAL_RCC_OscConfig+0x328>
 8001492:	e0b1      	b.n	80015f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e166      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
 8001498:	40021000 	.word	0x40021000
 800149c:	fffeffff 	.word	0xfffeffff
 80014a0:	fffbffff 	.word	0xfffbffff
 80014a4:	ffff80ff 	.word	0xffff80ff
 80014a8:	ffffc7ff 	.word	0xffffc7ff
 80014ac:	00f42400 	.word	0x00f42400
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004
 80014b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014bc:	4bac      	ldr	r3, [pc, #688]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80014be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	055b      	lsls	r3, r3, #21
 80014c4:	4013      	ands	r3, r2
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x360>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x362>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d011      	beq.n	80014f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4ba7      	ldr	r3, [pc, #668]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80014d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d6:	4ba6      	ldr	r3, [pc, #664]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0549      	lsls	r1, r1, #21
 80014dc:	430a      	orrs	r2, r1
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e0:	4ba3      	ldr	r3, [pc, #652]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80014e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	055b      	lsls	r3, r3, #21
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014ee:	231f      	movs	r3, #31
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f6:	4b9f      	ldr	r3, [pc, #636]	; (8001774 <HAL_RCC_OscConfig+0x608>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	d11a      	bne.n	8001538 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001502:	4b9c      	ldr	r3, [pc, #624]	; (8001774 <HAL_RCC_OscConfig+0x608>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b9b      	ldr	r3, [pc, #620]	; (8001774 <HAL_RCC_OscConfig+0x608>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0049      	lsls	r1, r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb5a 	bl	8000bc8 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff fb55 	bl	8000bc8 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e11c      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152c:	4b91      	ldr	r3, [pc, #580]	; (8001774 <HAL_RCC_OscConfig+0x608>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x3e2>
 8001540:	4b8b      	ldr	r3, [pc, #556]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001542:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001544:	4b8a      	ldr	r3, [pc, #552]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	65da      	str	r2, [r3, #92]	; 0x5c
 800154c:	e01c      	b.n	8001588 <HAL_RCC_OscConfig+0x41c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x404>
 8001556:	4b86      	ldr	r3, [pc, #536]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800155a:	4b85      	ldr	r3, [pc, #532]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800155c:	2104      	movs	r1, #4
 800155e:	430a      	orrs	r2, r1
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c
 8001562:	4b83      	ldr	r3, [pc, #524]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001564:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001568:	2101      	movs	r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	65da      	str	r2, [r3, #92]	; 0x5c
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0x41c>
 8001570:	4b7f      	ldr	r3, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001574:	4b7e      	ldr	r3, [pc, #504]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	65da      	str	r2, [r3, #92]	; 0x5c
 800157c:	4b7c      	ldr	r3, [pc, #496]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800157e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001580:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001582:	2104      	movs	r1, #4
 8001584:	438a      	bics	r2, r1
 8001586:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb1a 	bl	8000bc8 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001598:	e009      	b.n	80015ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fb15 	bl	8000bc8 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a74      	ldr	r2, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x60c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0db      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ae:	4b70      	ldr	r3, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x42e>
 80015b8:	e013      	b.n	80015e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb05 	bl	8000bc8 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb00 	bl	8000bc8 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x60c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0c6      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d8:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015e2:	231f      	movs	r3, #31
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015ec:	4b60      	ldr	r3, [pc, #384]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80015ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80015f2:	4962      	ldr	r1, [pc, #392]	; (800177c <HAL_RCC_OscConfig+0x610>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x496>
 8001600:	e0b0      	b.n	8001764 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001602:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2238      	movs	r2, #56	; 0x38
 8001608:	4013      	ands	r3, r2
 800160a:	2b10      	cmp	r3, #16
 800160c:	d100      	bne.n	8001610 <HAL_RCC_OscConfig+0x4a4>
 800160e:	e078      	b.n	8001702 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d153      	bne.n	80016c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b55      	ldr	r3, [pc, #340]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b54      	ldr	r3, [pc, #336]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800161e:	4958      	ldr	r1, [pc, #352]	; (8001780 <HAL_RCC_OscConfig+0x614>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fad0 	bl	8000bc8 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff facb 	bl	8000bc8 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e092      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001640:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	049b      	lsls	r3, r3, #18
 8001648:	4013      	ands	r3, r2
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164c:	4b48      	ldr	r3, [pc, #288]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x618>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	431a      	orrs	r2, r3
 8001674:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001676:	430a      	orrs	r2, r1
 8001678:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	0449      	lsls	r1, r1, #17
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	0549      	lsls	r1, r1, #21
 8001692:	430a      	orrs	r2, r1
 8001694:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fa97 	bl	8000bc8 <HAL_GetTick>
 800169a:	0003      	movs	r3, r0
 800169c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fa92 	bl	8000bc8 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e059      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	049b      	lsls	r3, r3, #18
 80016ba:	4013      	ands	r3, r2
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x534>
 80016be:	e051      	b.n	8001764 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80016c6:	492e      	ldr	r1, [pc, #184]	; (8001780 <HAL_RCC_OscConfig+0x614>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fa7c 	bl	8000bc8 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fa77 	bl	8000bc8 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e03e      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	049b      	lsls	r3, r3, #18
 80016f0:	4013      	ands	r3, r2
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 80016fa:	4923      	ldr	r1, [pc, #140]	; (8001788 <HAL_RCC_OscConfig+0x61c>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	e030      	b.n	8001764 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e02b      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_RCC_OscConfig+0x604>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2203      	movs	r2, #3
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	429a      	cmp	r2, r3
 8001720:	d11e      	bne.n	8001760 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2270      	movs	r2, #112	; 0x70
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d117      	bne.n	8001760 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	23fe      	movs	r3, #254	; 0xfe
 8001734:	01db      	lsls	r3, r3, #7
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d10e      	bne.n	8001760 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	23f8      	movs	r3, #248	; 0xf8
 8001746:	039b      	lsls	r3, r3, #14
 8001748:	401a      	ands	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d106      	bne.n	8001760 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	0f5b      	lsrs	r3, r3, #29
 8001756:	075a      	lsls	r2, r3, #29
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b008      	add	sp, #32
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	40021000 	.word	0x40021000
 8001774:	40007000 	.word	0x40007000
 8001778:	00001388 	.word	0x00001388
 800177c:	efffffff 	.word	0xefffffff
 8001780:	feffffff 	.word	0xfeffffff
 8001784:	1fc1808c 	.word	0x1fc1808c
 8001788:	effefffc 	.word	0xeffefffc

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0e9      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2207      	movs	r2, #7
 80017a6:	4013      	ands	r3, r2
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d91e      	bls.n	80017ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2207      	movs	r2, #7
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017c0:	f7ff fa02 	bl	8000bc8 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c8:	e009      	b.n	80017de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f9fd 	bl	8000bc8 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4a6a      	ldr	r2, [pc, #424]	; (8001980 <HAL_RCC_ClockConfig+0x1f4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0ca      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017de:	4b67      	ldr	r3, [pc, #412]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2207      	movs	r2, #7
 80017e4:	4013      	ands	r3, r2
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d015      	beq.n	8001822 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2204      	movs	r2, #4
 80017fc:	4013      	ands	r3, r2
 80017fe:	d006      	beq.n	800180e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001800:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	21e0      	movs	r1, #224	; 0xe0
 8001808:	01c9      	lsls	r1, r1, #7
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4a5d      	ldr	r2, [pc, #372]	; (8001988 <HAL_RCC_ClockConfig+0x1fc>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d057      	beq.n	80018dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	4013      	ands	r3, r2
 800183e:	d12b      	bne.n	8001898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e097      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d107      	bne.n	800185c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	049b      	lsls	r3, r3, #18
 8001854:	4013      	ands	r3, r2
 8001856:	d11f      	bne.n	8001898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e08b      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4013      	ands	r3, r2
 800186e:	d113      	bne.n	8001898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e07f      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d106      	bne.n	800188a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187c:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 800187e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001880:	2202      	movs	r2, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d108      	bne.n	8001898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e074      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e06d      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2207      	movs	r2, #7
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ac:	f7ff f98c 	bl	8000bc8 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b4:	e009      	b.n	80018ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b6:	f7ff f987 	bl	8000bc8 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <HAL_RCC_ClockConfig+0x1f4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e054      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2238      	movs	r2, #56	; 0x38
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1ec      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2207      	movs	r2, #7
 80018e2:	4013      	ands	r3, r2
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d21e      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2207      	movs	r2, #7
 80018f0:	4393      	bics	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018fc:	f7ff f964 	bl	8000bc8 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001904:	e009      	b.n	800191a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001906:	f7ff f95f 	bl	8000bc8 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_RCC_ClockConfig+0x1f4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e02c      	b.n	8001974 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2207      	movs	r2, #7
 8001920:	4013      	ands	r3, r2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d1ee      	bne.n	8001906 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2204      	movs	r2, #4
 800192e:	4013      	ands	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_RCC_ClockConfig+0x200>)
 8001938:	4013      	ands	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001946:	f000 f829 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800194a:	0001      	movs	r1, r0
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	220f      	movs	r2, #15
 8001954:	401a      	ands	r2, r3
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_RCC_ClockConfig+0x204>)
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	58d3      	ldr	r3, [r2, r3]
 800195c:	221f      	movs	r2, #31
 800195e:	4013      	ands	r3, r2
 8001960:	000a      	movs	r2, r1
 8001962:	40da      	lsrs	r2, r3
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x208>)
 8001966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x20c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff f8cf 	bl	8000b10 <HAL_InitTick>
 8001972:	0003      	movs	r3, r0
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b004      	add	sp, #16
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40022000 	.word	0x40022000
 8001980:	00001388 	.word	0x00001388
 8001984:	40021000 	.word	0x40021000
 8001988:	fffff0ff 	.word	0xfffff0ff
 800198c:	ffff8fff 	.word	0xffff8fff
 8001990:	08002ce8 	.word	0x08002ce8
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2238      	movs	r2, #56	; 0x38
 80019a8:	4013      	ands	r3, r2
 80019aa:	d10f      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0adb      	lsrs	r3, r3, #11
 80019b2:	2207      	movs	r2, #7
 80019b4:	4013      	ands	r3, r2
 80019b6:	2201      	movs	r2, #1
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4835      	ldr	r0, [pc, #212]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019c2:	f7fe fb9d 	bl	8000100 <__udivsi3>
 80019c6:	0003      	movs	r3, r0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e05d      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2238      	movs	r2, #56	; 0x38
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d102      	bne.n	80019de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x100>)
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e054      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2238      	movs	r2, #56	; 0x38
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d138      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2203      	movs	r2, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	2207      	movs	r2, #7
 80019fc:	4013      	ands	r3, r2
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d10d      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	4824      	ldr	r0, [pc, #144]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a0c:	f7fe fb78 	bl	8000100 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	0019      	movs	r1, r3
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	227f      	movs	r2, #127	; 0x7f
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	434b      	muls	r3, r1
 8001a20:	617b      	str	r3, [r7, #20]
        break;
 8001a22:	e00d      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	481c      	ldr	r0, [pc, #112]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a28:	f7fe fb6a 	bl	8000100 <__udivsi3>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	0019      	movs	r1, r3
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	227f      	movs	r2, #127	; 0x7f
 8001a38:	4013      	ands	r3, r2
 8001a3a:	434b      	muls	r3, r1
 8001a3c:	617b      	str	r3, [r7, #20]
        break;
 8001a3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0f5b      	lsrs	r3, r3, #29
 8001a46:	2207      	movs	r2, #7
 8001a48:	4013      	ands	r3, r2
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7fe fb55 	bl	8000100 <__udivsi3>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e015      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2238      	movs	r2, #56	; 0x38
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d103      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2238      	movs	r2, #56	; 0x38
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b18      	cmp	r3, #24
 8001a7a:	d103      	bne.n	8001a84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a7c:	23fa      	movs	r3, #250	; 0xfa
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e001      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a88:	693b      	ldr	r3, [r7, #16]
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	007a1200 	.word	0x007a1200

08001aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ab8:	f7ff fff2 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001abc:	0004      	movs	r4, r0
 8001abe:	f7ff fb49 	bl	8001154 <LL_RCC_GetAPB1Prescaler>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	0b1a      	lsrs	r2, r3, #12
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ac8:	0092      	lsls	r2, r2, #2
 8001aca:	58d3      	ldr	r3, [r2, r3]
 8001acc:	221f      	movs	r2, #31
 8001ace:	4013      	ands	r3, r2
 8001ad0:	40dc      	lsrs	r4, r3
 8001ad2:	0023      	movs	r3, r4
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	08002d28 	.word	0x08002d28

08001ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e04a      	b.n	8001b88 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	223d      	movs	r2, #61	; 0x3d
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	223c      	movs	r2, #60	; 0x3c
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe ff19 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	223d      	movs	r2, #61	; 0x3d
 8001b12:	2102      	movs	r1, #2
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f000 fa81 	bl	8002028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2248      	movs	r2, #72	; 0x48
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	223e      	movs	r2, #62	; 0x3e
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223f      	movs	r2, #63	; 0x3f
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	2101      	movs	r1, #1
 8001b44:	5499      	strb	r1, [r3, r2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2241      	movs	r2, #65	; 0x41
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2242      	movs	r2, #66	; 0x42
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2243      	movs	r2, #67	; 0x43
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2244      	movs	r2, #68	; 0x44
 8001b62:	2101      	movs	r1, #1
 8001b64:	5499      	strb	r1, [r3, r2]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2245      	movs	r2, #69	; 0x45
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2246      	movs	r2, #70	; 0x46
 8001b72:	2101      	movs	r1, #1
 8001b74:	5499      	strb	r1, [r3, r2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2247      	movs	r2, #71	; 0x47
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223d      	movs	r2, #61	; 0x3d
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	223d      	movs	r2, #61	; 0x3d
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d001      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e037      	b.n	8001c18 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	223d      	movs	r2, #61	; 0x3d
 8001bac:	2102      	movs	r1, #2
 8001bae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_TIM_Base_Start_IT+0x90>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0x44>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <HAL_TIM_Base_Start_IT+0x94>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d116      	bne.n	8001c02 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_TIM_Base_Start_IT+0x98>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d016      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x84>
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d011      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c00:	e008      	b.n	8001c14 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e000      	b.n	8001c16 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40000400 	.word	0x40000400
 8001c28:	00010007 	.word	0x00010007

08001c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d021      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d01d      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	4252      	negs	r2, r2
 8001c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f9c0 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e007      	b.n	8001c8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f9b3 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 f9bf 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d022      	beq.n	8001cde <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d01e      	beq.n	8001cde <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	4252      	negs	r2, r2
 8001ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f000 f999 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001cc6:	e007      	b.n	8001cd8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 f98c 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 f998 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d021      	beq.n	8001d2a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	4013      	ands	r3, r2
 8001cec:	d01d      	beq.n	8001d2a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2209      	movs	r2, #9
 8001cf4:	4252      	negs	r2, r2
 8001cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f973 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f966 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f972 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d022      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2210      	movs	r2, #16
 8001d36:	4013      	ands	r3, r2
 8001d38:	d01e      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2211      	movs	r2, #17
 8001d40:	4252      	negs	r2, r2
 8001d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2208      	movs	r2, #8
 8001d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d004      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f94c 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e007      	b.n	8001d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 f93f 	bl	8001fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 f94b 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d00c      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	d008      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4252      	negs	r2, r2
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7fe fa4f 	bl	8000238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d104      	bne.n	8001dac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	019b      	lsls	r3, r3, #6
 8001da8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001daa:	d00b      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	4013      	ands	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_TIM_IRQHandler+0x208>)
 8001dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fab2 	bl	8002328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d00b      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_TIM_IRQHandler+0x20c>)
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 faa9 	bl	8002338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	4013      	ands	r3, r2
 8001dec:	d00c      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	4013      	ands	r3, r2
 8001df4:	d008      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2241      	movs	r2, #65	; 0x41
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f908 	bl	8002018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d00c      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	4013      	ands	r3, r2
 8001e16:	d008      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2221      	movs	r2, #33	; 0x21
 8001e1e:	4252      	negs	r2, r2
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 fa77 	bl	8002318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	ffffdf7f 	.word	0xffffdf7f
 8001e38:	fffffeff 	.word	0xfffffeff

08001e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	223c      	movs	r2, #60	; 0x3c
 8001e52:	5c9b      	ldrb	r3, [r3, r2]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_TIM_ConfigClockSource+0x20>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0bc      	b.n	8001fd6 <HAL_TIM_ConfigClockSource+0x19a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	223c      	movs	r2, #60	; 0x3c
 8001e60:	2101      	movs	r1, #1
 8001e62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	223d      	movs	r2, #61	; 0x3d
 8001e68:	2102      	movs	r1, #2
 8001e6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4a59      	ldr	r2, [pc, #356]	; (8001fe4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	0192      	lsls	r2, r2, #6
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d040      	beq.n	8001f1a <HAL_TIM_ConfigClockSource+0xde>
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0192      	lsls	r2, r2, #6
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d900      	bls.n	8001ea2 <HAL_TIM_ConfigClockSource+0x66>
 8001ea0:	e088      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	0152      	lsls	r2, r2, #5
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d100      	bne.n	8001eac <HAL_TIM_ConfigClockSource+0x70>
 8001eaa:	e088      	b.n	8001fbe <HAL_TIM_ConfigClockSource+0x182>
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	0152      	lsls	r2, r2, #5
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d900      	bls.n	8001eb6 <HAL_TIM_ConfigClockSource+0x7a>
 8001eb4:	e07e      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001eb6:	2b70      	cmp	r3, #112	; 0x70
 8001eb8:	d018      	beq.n	8001eec <HAL_TIM_ConfigClockSource+0xb0>
 8001eba:	d900      	bls.n	8001ebe <HAL_TIM_ConfigClockSource+0x82>
 8001ebc:	e07a      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001ebe:	2b60      	cmp	r3, #96	; 0x60
 8001ec0:	d04f      	beq.n	8001f62 <HAL_TIM_ConfigClockSource+0x126>
 8001ec2:	d900      	bls.n	8001ec6 <HAL_TIM_ConfigClockSource+0x8a>
 8001ec4:	e076      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001ec6:	2b50      	cmp	r3, #80	; 0x50
 8001ec8:	d03b      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x106>
 8001eca:	d900      	bls.n	8001ece <HAL_TIM_ConfigClockSource+0x92>
 8001ecc:	e072      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d057      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0x146>
 8001ed2:	d900      	bls.n	8001ed6 <HAL_TIM_ConfigClockSource+0x9a>
 8001ed4:	e06e      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001ed6:	2b30      	cmp	r3, #48	; 0x30
 8001ed8:	d063      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x166>
 8001eda:	d86b      	bhi.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d060      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x166>
 8001ee0:	d868      	bhi.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d05d      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x166>
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d05b      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x166>
 8001eea:	e063      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f000 f98a 	bl	8002214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2277      	movs	r2, #119	; 0x77
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]
      break;
 8001f18:	e052      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f000 f973 	bl	8002214 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
      break;
 8001f40:	e03e      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	f000 f8e4 	bl	800211c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2150      	movs	r1, #80	; 0x50
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f93e 	bl	80021dc <TIM_ITRx_SetConfig>
      break;
 8001f60:	e02e      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	001a      	movs	r2, r3
 8001f70:	f000 f902 	bl	8002178 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2160      	movs	r1, #96	; 0x60
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 f92e 	bl	80021dc <TIM_ITRx_SetConfig>
      break;
 8001f80:	e01e      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	001a      	movs	r2, r3
 8001f90:	f000 f8c4 	bl	800211c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2140      	movs	r1, #64	; 0x40
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 f91e 	bl	80021dc <TIM_ITRx_SetConfig>
      break;
 8001fa0:	e00e      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f000 f915 	bl	80021dc <TIM_ITRx_SetConfig>
      break;
 8001fb2:	e005      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
      break;
 8001fbc:	e000      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001fbe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	223d      	movs	r2, #61	; 0x3d
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	223c      	movs	r2, #60	; 0x3c
 8001fcc:	2100      	movs	r1, #0
 8001fce:	5499      	strb	r1, [r3, r2]

  return status;
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	ffceff88 	.word	0xffceff88
 8001fe4:	ffff00ff 	.word	0xffff00ff

08001fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}

08002028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a32      	ldr	r2, [pc, #200]	; (8002104 <TIM_Base_SetConfig+0xdc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d003      	beq.n	8002048 <TIM_Base_SetConfig+0x20>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a31      	ldr	r2, [pc, #196]	; (8002108 <TIM_Base_SetConfig+0xe0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d108      	bne.n	800205a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2270      	movs	r2, #112	; 0x70
 800204c:	4393      	bics	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a29      	ldr	r2, [pc, #164]	; (8002104 <TIM_Base_SetConfig+0xdc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00f      	beq.n	8002082 <TIM_Base_SetConfig+0x5a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a28      	ldr	r2, [pc, #160]	; (8002108 <TIM_Base_SetConfig+0xe0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00b      	beq.n	8002082 <TIM_Base_SetConfig+0x5a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a27      	ldr	r2, [pc, #156]	; (800210c <TIM_Base_SetConfig+0xe4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <TIM_Base_SetConfig+0x5a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <TIM_Base_SetConfig+0xe8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <TIM_Base_SetConfig+0x5a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <TIM_Base_SetConfig+0xec>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d108      	bne.n	8002094 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <TIM_Base_SetConfig+0xf0>)
 8002086:	4013      	ands	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	4393      	bics	r3, r2
 800209a:	001a      	movs	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <TIM_Base_SetConfig+0xdc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <TIM_Base_SetConfig+0xaa>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <TIM_Base_SetConfig+0xe8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_Base_SetConfig+0xaa>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <TIM_Base_SetConfig+0xec>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d103      	bne.n	80020da <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4393      	bics	r3, r2
 80020f4:	001a      	movs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]
  }
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40000400 	.word	0x40000400
 800210c:	40002000 	.word	0x40002000
 8002110:	40014400 	.word	0x40014400
 8002114:	40014800 	.word	0x40014800
 8002118:	fffffcff 	.word	0xfffffcff

0800211c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2201      	movs	r2, #1
 8002134:	4393      	bics	r3, r2
 8002136:	001a      	movs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	22f0      	movs	r2, #240	; 0xf0
 8002146:	4393      	bics	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	220a      	movs	r2, #10
 8002158:	4393      	bics	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	621a      	str	r2, [r3, #32]
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b006      	add	sp, #24
 8002176:	bd80      	pop	{r7, pc}

08002178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	2210      	movs	r2, #16
 8002190:	4393      	bics	r3, r2
 8002192:	001a      	movs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <TIM_TI2_ConfigInputStage+0x60>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	031b      	lsls	r3, r3, #12
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	22a0      	movs	r2, #160	; 0xa0
 80021b4:	4393      	bics	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	621a      	str	r2, [r3, #32]
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b006      	add	sp, #24
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	ffff0fff 	.word	0xffff0fff

080021dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <TIM_ITRx_SetConfig+0x34>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	2207      	movs	r2, #7
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	ffcfff8f 	.word	0xffcfff8f

08002214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <TIM_ETR_SetConfig+0x3c>)
 800222c:	4013      	ands	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	021a      	lsls	r2, r3, #8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	431a      	orrs	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b006      	add	sp, #24
 800224e:	bd80      	pop	{r7, pc}
 8002250:	ffff00ff 	.word	0xffff00ff

08002254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	223c      	movs	r2, #60	; 0x3c
 8002262:	5c9b      	ldrb	r3, [r3, r2]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002268:	2302      	movs	r3, #2
 800226a:	e04a      	b.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	223c      	movs	r2, #60	; 0x3c
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	223d      	movs	r2, #61	; 0x3d
 8002278:	2102      	movs	r1, #2
 800227a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d108      	bne.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800229a:	4013      	ands	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2270      	movs	r2, #112	; 0x70
 80022ac:	4393      	bics	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	4393      	bics	r3, r2
 80022dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	223d      	movs	r2, #61	; 0x3d
 80022f4:	2101      	movs	r1, #1
 80022f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	223c      	movs	r2, #60	; 0x3c
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40012c00 	.word	0x40012c00
 8002310:	ff0fffff 	.word	0xff0fffff
 8002314:	40000400 	.word	0x40000400

08002318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e046      	b.n	80023e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2288      	movs	r2, #136	; 0x88
 800235e:	589b      	ldr	r3, [r3, r2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2284      	movs	r2, #132	; 0x84
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f7fe fb0e 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2288      	movs	r2, #136	; 0x88
 8002378:	2124      	movs	r1, #36	; 0x24
 800237a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	438a      	bics	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	0018      	movs	r0, r3
 8002398:	f000 fa3a 	bl	8002810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 f8cc 	bl	800253c <UART_SetConfig>
 80023a4:	0003      	movs	r3, r0
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e01c      	b.n	80023e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	490d      	ldr	r1, [pc, #52]	; (80023f0 <HAL_UART_Init+0xa8>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	212a      	movs	r1, #42	; 0x2a
 80023ca:	438a      	bics	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fac9 	bl	8002978 <UART_CheckIdleState>
 80023e6:	0003      	movs	r3, r0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	ffffb7ff 	.word	0xffffb7ff

080023f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2288      	movs	r2, #136	; 0x88
 8002408:	589b      	ldr	r3, [r3, r2]
 800240a:	2b20      	cmp	r3, #32
 800240c:	d000      	beq.n	8002410 <HAL_UART_Transmit+0x1c>
 800240e:	e090      	b.n	8002532 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_UART_Transmit+0x2a>
 8002416:	1dbb      	adds	r3, r7, #6
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e088      	b.n	8002534 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	015b      	lsls	r3, r3, #5
 800242a:	429a      	cmp	r2, r3
 800242c:	d109      	bne.n	8002442 <HAL_UART_Transmit+0x4e>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2201      	movs	r2, #1
 800243a:	4013      	ands	r3, r2
 800243c:	d001      	beq.n	8002442 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e078      	b.n	8002534 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2290      	movs	r2, #144	; 0x90
 8002446:	2100      	movs	r1, #0
 8002448:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2288      	movs	r2, #136	; 0x88
 800244e:	2121      	movs	r1, #33	; 0x21
 8002450:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002452:	f7fe fbb9 	bl	8000bc8 <HAL_GetTick>
 8002456:	0003      	movs	r3, r0
 8002458:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1dba      	adds	r2, r7, #6
 800245e:	2154      	movs	r1, #84	; 0x54
 8002460:	8812      	ldrh	r2, [r2, #0]
 8002462:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1dba      	adds	r2, r7, #6
 8002468:	2156      	movs	r1, #86	; 0x56
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	015b      	lsls	r3, r3, #5
 8002476:	429a      	cmp	r2, r3
 8002478:	d108      	bne.n	800248c <HAL_UART_Transmit+0x98>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e003      	b.n	8002494 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002494:	e030      	b.n	80024f8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	0013      	movs	r3, r2
 80024a0:	2200      	movs	r2, #0
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	f000 fb12 	bl	8002acc <UART_WaitOnFlagUntilTimeout>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2288      	movs	r2, #136	; 0x88
 80024b0:	2120      	movs	r1, #32
 80024b2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e03d      	b.n	8002534 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	001a      	movs	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	05d2      	lsls	r2, r2, #23
 80024ca:	0dd2      	lsrs	r2, r2, #23
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	3302      	adds	r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e007      	b.n	80024e6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3301      	adds	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2256      	movs	r2, #86	; 0x56
 80024ea:	5a9b      	ldrh	r3, [r3, r2]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b299      	uxth	r1, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2256      	movs	r2, #86	; 0x56
 80024f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2256      	movs	r2, #86	; 0x56
 80024fc:	5a9b      	ldrh	r3, [r3, r2]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1c8      	bne.n	8002496 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	0013      	movs	r3, r2
 800250e:	2200      	movs	r2, #0
 8002510:	2140      	movs	r1, #64	; 0x40
 8002512:	f000 fadb 	bl	8002acc <UART_WaitOnFlagUntilTimeout>
 8002516:	1e03      	subs	r3, r0, #0
 8002518:	d005      	beq.n	8002526 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2288      	movs	r2, #136	; 0x88
 800251e:	2120      	movs	r1, #32
 8002520:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e006      	b.n	8002534 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2288      	movs	r2, #136	; 0x88
 800252a:	2120      	movs	r1, #32
 800252c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
  }
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b008      	add	sp, #32
 800253a:	bd80      	pop	{r7, pc}

0800253c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002544:	231a      	movs	r3, #26
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4313      	orrs	r3, r2
 8002562:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4aa1      	ldr	r2, [pc, #644]	; (80027f0 <UART_SetConfig+0x2b4>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a9c      	ldr	r2, [pc, #624]	; (80027f4 <UART_SetConfig+0x2b8>)
 8002582:	4013      	ands	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a93      	ldr	r2, [pc, #588]	; (80027f8 <UART_SetConfig+0x2bc>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	220f      	movs	r2, #15
 80025c0:	4393      	bics	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a89      	ldr	r2, [pc, #548]	; (80027fc <UART_SetConfig+0x2c0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d127      	bne.n	800262a <UART_SetConfig+0xee>
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <UART_SetConfig+0x2c4>)
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	2203      	movs	r2, #3
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d017      	beq.n	8002616 <UART_SetConfig+0xda>
 80025e6:	d81b      	bhi.n	8002620 <UART_SetConfig+0xe4>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d00a      	beq.n	8002602 <UART_SetConfig+0xc6>
 80025ec:	d818      	bhi.n	8002620 <UART_SetConfig+0xe4>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <UART_SetConfig+0xbc>
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d00a      	beq.n	800260c <UART_SetConfig+0xd0>
 80025f6:	e013      	b.n	8002620 <UART_SetConfig+0xe4>
 80025f8:	231b      	movs	r3, #27
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e021      	b.n	8002646 <UART_SetConfig+0x10a>
 8002602:	231b      	movs	r3, #27
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e01c      	b.n	8002646 <UART_SetConfig+0x10a>
 800260c:	231b      	movs	r3, #27
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2204      	movs	r2, #4
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e017      	b.n	8002646 <UART_SetConfig+0x10a>
 8002616:	231b      	movs	r3, #27
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2208      	movs	r2, #8
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e012      	b.n	8002646 <UART_SetConfig+0x10a>
 8002620:	231b      	movs	r3, #27
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2210      	movs	r2, #16
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e00d      	b.n	8002646 <UART_SetConfig+0x10a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <UART_SetConfig+0x2c8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d104      	bne.n	800263e <UART_SetConfig+0x102>
 8002634:	231b      	movs	r3, #27
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e003      	b.n	8002646 <UART_SetConfig+0x10a>
 800263e:	231b      	movs	r3, #27
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2210      	movs	r2, #16
 8002644:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	429a      	cmp	r2, r3
 8002650:	d000      	beq.n	8002654 <UART_SetConfig+0x118>
 8002652:	e065      	b.n	8002720 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002654:	231b      	movs	r3, #27
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d015      	beq.n	800268a <UART_SetConfig+0x14e>
 800265e:	dc18      	bgt.n	8002692 <UART_SetConfig+0x156>
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00d      	beq.n	8002680 <UART_SetConfig+0x144>
 8002664:	dc15      	bgt.n	8002692 <UART_SetConfig+0x156>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <UART_SetConfig+0x134>
 800266a:	2b02      	cmp	r3, #2
 800266c:	d005      	beq.n	800267a <UART_SetConfig+0x13e>
 800266e:	e010      	b.n	8002692 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002670:	f7ff fa20 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002674:	0003      	movs	r3, r0
 8002676:	617b      	str	r3, [r7, #20]
        break;
 8002678:	e012      	b.n	80026a0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <UART_SetConfig+0x2cc>)
 800267c:	617b      	str	r3, [r7, #20]
        break;
 800267e:	e00f      	b.n	80026a0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002680:	f7ff f98c 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8002684:	0003      	movs	r3, r0
 8002686:	617b      	str	r3, [r7, #20]
        break;
 8002688:	e00a      	b.n	80026a0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	617b      	str	r3, [r7, #20]
        break;
 8002690:	e006      	b.n	80026a0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002696:	231a      	movs	r3, #26
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
        break;
 800269e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d100      	bne.n	80026a8 <UART_SetConfig+0x16c>
 80026a6:	e08d      	b.n	80027c4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ac:	4b57      	ldr	r3, [pc, #348]	; (800280c <UART_SetConfig+0x2d0>)
 80026ae:	0052      	lsls	r2, r2, #1
 80026b0:	5ad3      	ldrh	r3, [r2, r3]
 80026b2:	0019      	movs	r1, r3
 80026b4:	6978      	ldr	r0, [r7, #20]
 80026b6:	f7fd fd23 	bl	8000100 <__udivsi3>
 80026ba:	0003      	movs	r3, r0
 80026bc:	005a      	lsls	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	18d2      	adds	r2, r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0019      	movs	r1, r3
 80026cc:	0010      	movs	r0, r2
 80026ce:	f7fd fd17 	bl	8000100 <__udivsi3>
 80026d2:	0003      	movs	r3, r0
 80026d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d91c      	bls.n	8002716 <UART_SetConfig+0x1da>
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d217      	bcs.n	8002716 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	200e      	movs	r0, #14
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	210f      	movs	r1, #15
 80026f0:	438a      	bics	r2, r1
 80026f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2207      	movs	r2, #7
 80026fc:	4013      	ands	r3, r2
 80026fe:	b299      	uxth	r1, r3
 8002700:	183b      	adds	r3, r7, r0
 8002702:	183a      	adds	r2, r7, r0
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	183a      	adds	r2, r7, r0
 8002710:	8812      	ldrh	r2, [r2, #0]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	e056      	b.n	80027c4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002716:	231a      	movs	r3, #26
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e051      	b.n	80027c4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002720:	231b      	movs	r3, #27
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d015      	beq.n	8002756 <UART_SetConfig+0x21a>
 800272a:	dc18      	bgt.n	800275e <UART_SetConfig+0x222>
 800272c:	2b04      	cmp	r3, #4
 800272e:	d00d      	beq.n	800274c <UART_SetConfig+0x210>
 8002730:	dc15      	bgt.n	800275e <UART_SetConfig+0x222>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <UART_SetConfig+0x200>
 8002736:	2b02      	cmp	r3, #2
 8002738:	d005      	beq.n	8002746 <UART_SetConfig+0x20a>
 800273a:	e010      	b.n	800275e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273c:	f7ff f9ba 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002740:	0003      	movs	r3, r0
 8002742:	617b      	str	r3, [r7, #20]
        break;
 8002744:	e012      	b.n	800276c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <UART_SetConfig+0x2cc>)
 8002748:	617b      	str	r3, [r7, #20]
        break;
 800274a:	e00f      	b.n	800276c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800274c:	f7ff f926 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8002750:	0003      	movs	r3, r0
 8002752:	617b      	str	r3, [r7, #20]
        break;
 8002754:	e00a      	b.n	800276c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	617b      	str	r3, [r7, #20]
        break;
 800275c:	e006      	b.n	800276c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002762:	231a      	movs	r3, #26
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
        break;
 800276a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d028      	beq.n	80027c4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <UART_SetConfig+0x2d0>)
 8002778:	0052      	lsls	r2, r2, #1
 800277a:	5ad3      	ldrh	r3, [r2, r3]
 800277c:	0019      	movs	r1, r3
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7fd fcbe 	bl	8000100 <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	18d2      	adds	r2, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0019      	movs	r1, r3
 8002796:	0010      	movs	r0, r2
 8002798:	f7fd fcb2 	bl	8000100 <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	d90a      	bls.n	80027bc <UART_SetConfig+0x280>
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d205      	bcs.n	80027bc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e003      	b.n	80027c4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80027bc:	231a      	movs	r3, #26
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	226a      	movs	r2, #106	; 0x6a
 80027c8:	2101      	movs	r1, #1
 80027ca:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2268      	movs	r2, #104	; 0x68
 80027d0:	2101      	movs	r1, #1
 80027d2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80027e0:	231a      	movs	r3, #26
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b008      	add	sp, #32
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	cfff69f3 	.word	0xcfff69f3
 80027f4:	ffffcfff 	.word	0xffffcfff
 80027f8:	11fff4ff 	.word	0x11fff4ff
 80027fc:	40013800 	.word	0x40013800
 8002800:	40021000 	.word	0x40021000
 8002804:	40004400 	.word	0x40004400
 8002808:	00f42400 	.word	0x00f42400
 800280c:	08002d48 	.word	0x08002d48

08002810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	2208      	movs	r2, #8
 800281e:	4013      	ands	r3, r2
 8002820:	d00b      	beq.n	800283a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a4a      	ldr	r2, [pc, #296]	; (8002954 <UART_AdvFeatureConfig+0x144>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	2201      	movs	r2, #1
 8002840:	4013      	ands	r3, r2
 8002842:	d00b      	beq.n	800285c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a43      	ldr	r2, [pc, #268]	; (8002958 <UART_AdvFeatureConfig+0x148>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d00b      	beq.n	800287e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a3b      	ldr	r2, [pc, #236]	; (800295c <UART_AdvFeatureConfig+0x14c>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	2204      	movs	r2, #4
 8002884:	4013      	ands	r3, r2
 8002886:	d00b      	beq.n	80028a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4a34      	ldr	r2, [pc, #208]	; (8002960 <UART_AdvFeatureConfig+0x150>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2210      	movs	r2, #16
 80028a6:	4013      	ands	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <UART_AdvFeatureConfig+0x154>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	2220      	movs	r2, #32
 80028c8:	4013      	ands	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	4a25      	ldr	r2, [pc, #148]	; (8002968 <UART_AdvFeatureConfig+0x158>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	4013      	ands	r3, r2
 80028ec:	d01d      	beq.n	800292a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <UART_AdvFeatureConfig+0x15c>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	035b      	lsls	r3, r3, #13
 800290e:	429a      	cmp	r2, r3
 8002910:	d10b      	bne.n	800292a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <UART_AdvFeatureConfig+0x160>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <UART_AdvFeatureConfig+0x164>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}
 8002954:	ffff7fff 	.word	0xffff7fff
 8002958:	fffdffff 	.word	0xfffdffff
 800295c:	fffeffff 	.word	0xfffeffff
 8002960:	fffbffff 	.word	0xfffbffff
 8002964:	ffffefff 	.word	0xffffefff
 8002968:	ffffdfff 	.word	0xffffdfff
 800296c:	ffefffff 	.word	0xffefffff
 8002970:	ff9fffff 	.word	0xff9fffff
 8002974:	fff7ffff 	.word	0xfff7ffff

08002978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b092      	sub	sp, #72	; 0x48
 800297c:	af02      	add	r7, sp, #8
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2290      	movs	r2, #144	; 0x90
 8002984:	2100      	movs	r1, #0
 8002986:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002988:	f7fe f91e 	bl	8000bc8 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2208      	movs	r2, #8
 8002998:	4013      	ands	r3, r2
 800299a:	2b08      	cmp	r3, #8
 800299c:	d12d      	bne.n	80029fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	0391      	lsls	r1, r2, #14
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <UART_CheckIdleState+0x14c>)
 80029a8:	9200      	str	r2, [sp, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f000 f88e 	bl	8002acc <UART_WaitOnFlagUntilTimeout>
 80029b0:	1e03      	subs	r3, r0, #0
 80029b2:	d022      	beq.n	80029fa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8310 	mrs	r3, PRIMASK
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80029be:	2301      	movs	r3, #1
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	438a      	bics	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	f383 8810 	msr	PRIMASK, r3
}
 80029e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2288      	movs	r2, #136	; 0x88
 80029ea:	2120      	movs	r1, #32
 80029ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2284      	movs	r2, #132	; 0x84
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e060      	b.n	8002abc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d146      	bne.n	8002a96 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	03d1      	lsls	r1, r2, #15
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4a2c      	ldr	r2, [pc, #176]	; (8002ac4 <UART_CheckIdleState+0x14c>)
 8002a12:	9200      	str	r2, [sp, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f000 f859 	bl	8002acc <UART_WaitOnFlagUntilTimeout>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d03b      	beq.n	8002a96 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a24:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
 8002a28:	2301      	movs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f383 8810 	msr	PRIMASK, r3
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <UART_CheckIdleState+0x150>)
 8002a40:	400a      	ands	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f383 8810 	msr	PRIMASK, r3
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a50:	f3ef 8310 	mrs	r3, PRIMASK
 8002a54:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a56:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	438a      	bics	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f383 8810 	msr	PRIMASK, r3
}
 8002a80:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	228c      	movs	r2, #140	; 0x8c
 8002a86:	2120      	movs	r1, #32
 8002a88:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2284      	movs	r2, #132	; 0x84
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e012      	b.n	8002abc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2288      	movs	r2, #136	; 0x88
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	228c      	movs	r2, #140	; 0x8c
 8002aa2:	2120      	movs	r1, #32
 8002aa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2284      	movs	r2, #132	; 0x84
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b010      	add	sp, #64	; 0x40
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	01ffffff 	.word	0x01ffffff
 8002ac8:	fffffedf 	.word	0xfffffedf

08002acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002adc:	e051      	b.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	d04e      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7fe f870 	bl	8000bc8 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <UART_WaitOnFlagUntilTimeout+0x2e>
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e051      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d038      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d035      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d111      	bne.n	8002b48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f83c 	bl	8002bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2290      	movs	r2, #144	; 0x90
 8002b38:	2108      	movs	r1, #8
 8002b3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2284      	movs	r2, #132	; 0x84
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e02c      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	401a      	ands	r2, r3
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d112      	bne.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 f81f 	bl	8002bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2290      	movs	r2, #144	; 0x90
 8002b72:	2120      	movs	r1, #32
 8002b74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2284      	movs	r2, #132	; 0x84
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e00f      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	425a      	negs	r2, r3
 8002b92:	4153      	adcs	r3, r2
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	001a      	movs	r2, r3
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d09e      	beq.n	8002ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b004      	add	sp, #16
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4926      	ldr	r1, [pc, #152]	; (8002c70 <UART_EndRxTransfer+0xc4>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f383 8810 	msr	PRIMASK, r3
}
 8002be4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bea:	623b      	str	r3, [r7, #32]
  return(result);
 8002bec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	f383 8810 	msr	PRIMASK, r3
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	491b      	ldr	r1, [pc, #108]	; (8002c74 <UART_EndRxTransfer+0xc8>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	f383 8810 	msr	PRIMASK, r3
}
 8002c16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d118      	bne.n	8002c52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
 8002c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f383 8810 	msr	PRIMASK, r3
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2110      	movs	r1, #16
 8002c42:	438a      	bics	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	228c      	movs	r2, #140	; 0x8c
 8002c56:	2120      	movs	r1, #32
 8002c58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b00e      	add	sp, #56	; 0x38
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	fffffedf 	.word	0xfffffedf
 8002c74:	effffffe 	.word	0xeffffffe

08002c78 <__libc_init_array>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	4d0c      	ldr	r5, [pc, #48]	; (8002cb0 <__libc_init_array+0x38>)
 8002c7e:	4c0d      	ldr	r4, [pc, #52]	; (8002cb4 <__libc_init_array+0x3c>)
 8002c80:	1b64      	subs	r4, r4, r5
 8002c82:	10a4      	asrs	r4, r4, #2
 8002c84:	42a6      	cmp	r6, r4
 8002c86:	d109      	bne.n	8002c9c <__libc_init_array+0x24>
 8002c88:	2600      	movs	r6, #0
 8002c8a:	f000 f821 	bl	8002cd0 <_init>
 8002c8e:	4d0a      	ldr	r5, [pc, #40]	; (8002cb8 <__libc_init_array+0x40>)
 8002c90:	4c0a      	ldr	r4, [pc, #40]	; (8002cbc <__libc_init_array+0x44>)
 8002c92:	1b64      	subs	r4, r4, r5
 8002c94:	10a4      	asrs	r4, r4, #2
 8002c96:	42a6      	cmp	r6, r4
 8002c98:	d105      	bne.n	8002ca6 <__libc_init_array+0x2e>
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	00b3      	lsls	r3, r6, #2
 8002c9e:	58eb      	ldr	r3, [r5, r3]
 8002ca0:	4798      	blx	r3
 8002ca2:	3601      	adds	r6, #1
 8002ca4:	e7ee      	b.n	8002c84 <__libc_init_array+0xc>
 8002ca6:	00b3      	lsls	r3, r6, #2
 8002ca8:	58eb      	ldr	r3, [r5, r3]
 8002caa:	4798      	blx	r3
 8002cac:	3601      	adds	r6, #1
 8002cae:	e7f2      	b.n	8002c96 <__libc_init_array+0x1e>
 8002cb0:	08002d60 	.word	0x08002d60
 8002cb4:	08002d60 	.word	0x08002d60
 8002cb8:	08002d60 	.word	0x08002d60
 8002cbc:	08002d64 	.word	0x08002d64

08002cc0 <memset>:
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	1882      	adds	r2, r0, r2
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d100      	bne.n	8002cca <memset+0xa>
 8002cc8:	4770      	bx	lr
 8002cca:	7019      	strb	r1, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	e7f9      	b.n	8002cc4 <memset+0x4>

08002cd0 <_init>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr

08002cdc <_fini>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

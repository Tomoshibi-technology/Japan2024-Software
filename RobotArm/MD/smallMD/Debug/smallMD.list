
smallMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080072b0  080072b0  000172b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d8  080075d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080075d8  080075d8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075d8  080075d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080075e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000010  080075f0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080075f0  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa75  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd0  00000000  00000000  0002faad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001526f  00000000  00000000  00033288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f53f  00000000  00000000  000484f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008983a  00000000  00000000  00057a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  000e12c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007294 	.word	0x08007294

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08007294 	.word	0x08007294

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 ff3b 	bl	8001278 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fe8b 	bl	8001128 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 ff2d 	bl	8001278 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff23 	bl	8001278 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 feb3 	bl	80011ac <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fea9 	bl	80011ac <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_lmul>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	46ce      	mov	lr, r9
 800046c:	4647      	mov	r7, r8
 800046e:	b580      	push	{r7, lr}
 8000470:	0007      	movs	r7, r0
 8000472:	4699      	mov	r9, r3
 8000474:	0c3b      	lsrs	r3, r7, #16
 8000476:	469c      	mov	ip, r3
 8000478:	0413      	lsls	r3, r2, #16
 800047a:	0c1b      	lsrs	r3, r3, #16
 800047c:	001d      	movs	r5, r3
 800047e:	000e      	movs	r6, r1
 8000480:	4661      	mov	r1, ip
 8000482:	0400      	lsls	r0, r0, #16
 8000484:	0c14      	lsrs	r4, r2, #16
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	4345      	muls	r5, r0
 800048a:	434b      	muls	r3, r1
 800048c:	4360      	muls	r0, r4
 800048e:	4361      	muls	r1, r4
 8000490:	18c0      	adds	r0, r0, r3
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	1820      	adds	r0, r4, r0
 8000496:	468c      	mov	ip, r1
 8000498:	4283      	cmp	r3, r0
 800049a:	d903      	bls.n	80004a4 <__aeabi_lmul+0x3c>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	025b      	lsls	r3, r3, #9
 80004a0:	4698      	mov	r8, r3
 80004a2:	44c4      	add	ip, r8
 80004a4:	4649      	mov	r1, r9
 80004a6:	4379      	muls	r1, r7
 80004a8:	4372      	muls	r2, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	4463      	add	r3, ip
 80004ae:	042d      	lsls	r5, r5, #16
 80004b0:	0c2d      	lsrs	r5, r5, #16
 80004b2:	18c9      	adds	r1, r1, r3
 80004b4:	0400      	lsls	r0, r0, #16
 80004b6:	1940      	adds	r0, r0, r5
 80004b8:	1889      	adds	r1, r1, r2
 80004ba:	bcc0      	pop	{r6, r7}
 80004bc:	46b9      	mov	r9, r7
 80004be:	46b0      	mov	r8, r6
 80004c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_dadd>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	464f      	mov	r7, r9
 80004c8:	4646      	mov	r6, r8
 80004ca:	46d6      	mov	lr, sl
 80004cc:	000d      	movs	r5, r1
 80004ce:	0004      	movs	r4, r0
 80004d0:	b5c0      	push	{r6, r7, lr}
 80004d2:	001f      	movs	r7, r3
 80004d4:	0011      	movs	r1, r2
 80004d6:	0328      	lsls	r0, r5, #12
 80004d8:	0f62      	lsrs	r2, r4, #29
 80004da:	0a40      	lsrs	r0, r0, #9
 80004dc:	4310      	orrs	r0, r2
 80004de:	007a      	lsls	r2, r7, #1
 80004e0:	0d52      	lsrs	r2, r2, #21
 80004e2:	00e3      	lsls	r3, r4, #3
 80004e4:	033c      	lsls	r4, r7, #12
 80004e6:	4691      	mov	r9, r2
 80004e8:	0a64      	lsrs	r4, r4, #9
 80004ea:	0ffa      	lsrs	r2, r7, #31
 80004ec:	0f4f      	lsrs	r7, r1, #29
 80004ee:	006e      	lsls	r6, r5, #1
 80004f0:	4327      	orrs	r7, r4
 80004f2:	4692      	mov	sl, r2
 80004f4:	46b8      	mov	r8, r7
 80004f6:	0d76      	lsrs	r6, r6, #21
 80004f8:	0fed      	lsrs	r5, r5, #31
 80004fa:	00c9      	lsls	r1, r1, #3
 80004fc:	4295      	cmp	r5, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x3e>
 8000500:	e099      	b.n	8000636 <__aeabi_dadd+0x172>
 8000502:	464c      	mov	r4, r9
 8000504:	1b34      	subs	r4, r6, r4
 8000506:	46a4      	mov	ip, r4
 8000508:	2c00      	cmp	r4, #0
 800050a:	dc00      	bgt.n	800050e <__aeabi_dadd+0x4a>
 800050c:	e07c      	b.n	8000608 <__aeabi_dadd+0x144>
 800050e:	464a      	mov	r2, r9
 8000510:	2a00      	cmp	r2, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x52>
 8000514:	e0b8      	b.n	8000688 <__aeabi_dadd+0x1c4>
 8000516:	4ac5      	ldr	r2, [pc, #788]	; (800082c <__aeabi_dadd+0x368>)
 8000518:	4296      	cmp	r6, r2
 800051a:	d100      	bne.n	800051e <__aeabi_dadd+0x5a>
 800051c:	e11c      	b.n	8000758 <__aeabi_dadd+0x294>
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	003c      	movs	r4, r7
 8000522:	0412      	lsls	r2, r2, #16
 8000524:	4314      	orrs	r4, r2
 8000526:	46a0      	mov	r8, r4
 8000528:	4662      	mov	r2, ip
 800052a:	2a38      	cmp	r2, #56	; 0x38
 800052c:	dd00      	ble.n	8000530 <__aeabi_dadd+0x6c>
 800052e:	e161      	b.n	80007f4 <__aeabi_dadd+0x330>
 8000530:	2a1f      	cmp	r2, #31
 8000532:	dd00      	ble.n	8000536 <__aeabi_dadd+0x72>
 8000534:	e1cc      	b.n	80008d0 <__aeabi_dadd+0x40c>
 8000536:	4664      	mov	r4, ip
 8000538:	2220      	movs	r2, #32
 800053a:	1b12      	subs	r2, r2, r4
 800053c:	4644      	mov	r4, r8
 800053e:	4094      	lsls	r4, r2
 8000540:	000f      	movs	r7, r1
 8000542:	46a1      	mov	r9, r4
 8000544:	4664      	mov	r4, ip
 8000546:	4091      	lsls	r1, r2
 8000548:	40e7      	lsrs	r7, r4
 800054a:	464c      	mov	r4, r9
 800054c:	1e4a      	subs	r2, r1, #1
 800054e:	4191      	sbcs	r1, r2
 8000550:	433c      	orrs	r4, r7
 8000552:	4642      	mov	r2, r8
 8000554:	4321      	orrs	r1, r4
 8000556:	4664      	mov	r4, ip
 8000558:	40e2      	lsrs	r2, r4
 800055a:	1a80      	subs	r0, r0, r2
 800055c:	1a5c      	subs	r4, r3, r1
 800055e:	42a3      	cmp	r3, r4
 8000560:	419b      	sbcs	r3, r3
 8000562:	425f      	negs	r7, r3
 8000564:	1bc7      	subs	r7, r0, r7
 8000566:	023b      	lsls	r3, r7, #8
 8000568:	d400      	bmi.n	800056c <__aeabi_dadd+0xa8>
 800056a:	e0d0      	b.n	800070e <__aeabi_dadd+0x24a>
 800056c:	027f      	lsls	r7, r7, #9
 800056e:	0a7f      	lsrs	r7, r7, #9
 8000570:	2f00      	cmp	r7, #0
 8000572:	d100      	bne.n	8000576 <__aeabi_dadd+0xb2>
 8000574:	e0ff      	b.n	8000776 <__aeabi_dadd+0x2b2>
 8000576:	0038      	movs	r0, r7
 8000578:	f001 fd46 	bl	8002008 <__clzsi2>
 800057c:	0001      	movs	r1, r0
 800057e:	3908      	subs	r1, #8
 8000580:	2320      	movs	r3, #32
 8000582:	0022      	movs	r2, r4
 8000584:	1a5b      	subs	r3, r3, r1
 8000586:	408f      	lsls	r7, r1
 8000588:	40da      	lsrs	r2, r3
 800058a:	408c      	lsls	r4, r1
 800058c:	4317      	orrs	r7, r2
 800058e:	42b1      	cmp	r1, r6
 8000590:	da00      	bge.n	8000594 <__aeabi_dadd+0xd0>
 8000592:	e0ff      	b.n	8000794 <__aeabi_dadd+0x2d0>
 8000594:	1b89      	subs	r1, r1, r6
 8000596:	1c4b      	adds	r3, r1, #1
 8000598:	2b1f      	cmp	r3, #31
 800059a:	dd00      	ble.n	800059e <__aeabi_dadd+0xda>
 800059c:	e0a8      	b.n	80006f0 <__aeabi_dadd+0x22c>
 800059e:	2220      	movs	r2, #32
 80005a0:	0039      	movs	r1, r7
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	0020      	movs	r0, r4
 80005a6:	4094      	lsls	r4, r2
 80005a8:	4091      	lsls	r1, r2
 80005aa:	40d8      	lsrs	r0, r3
 80005ac:	1e62      	subs	r2, r4, #1
 80005ae:	4194      	sbcs	r4, r2
 80005b0:	40df      	lsrs	r7, r3
 80005b2:	2600      	movs	r6, #0
 80005b4:	4301      	orrs	r1, r0
 80005b6:	430c      	orrs	r4, r1
 80005b8:	0763      	lsls	r3, r4, #29
 80005ba:	d009      	beq.n	80005d0 <__aeabi_dadd+0x10c>
 80005bc:	230f      	movs	r3, #15
 80005be:	4023      	ands	r3, r4
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d005      	beq.n	80005d0 <__aeabi_dadd+0x10c>
 80005c4:	1d23      	adds	r3, r4, #4
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	41a4      	sbcs	r4, r4
 80005ca:	4264      	negs	r4, r4
 80005cc:	193f      	adds	r7, r7, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	023b      	lsls	r3, r7, #8
 80005d2:	d400      	bmi.n	80005d6 <__aeabi_dadd+0x112>
 80005d4:	e09e      	b.n	8000714 <__aeabi_dadd+0x250>
 80005d6:	4b95      	ldr	r3, [pc, #596]	; (800082c <__aeabi_dadd+0x368>)
 80005d8:	3601      	adds	r6, #1
 80005da:	429e      	cmp	r6, r3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dadd+0x11c>
 80005de:	e0b7      	b.n	8000750 <__aeabi_dadd+0x28c>
 80005e0:	4a93      	ldr	r2, [pc, #588]	; (8000830 <__aeabi_dadd+0x36c>)
 80005e2:	08e4      	lsrs	r4, r4, #3
 80005e4:	4017      	ands	r7, r2
 80005e6:	077b      	lsls	r3, r7, #29
 80005e8:	0571      	lsls	r1, r6, #21
 80005ea:	027f      	lsls	r7, r7, #9
 80005ec:	4323      	orrs	r3, r4
 80005ee:	0b3f      	lsrs	r7, r7, #12
 80005f0:	0d4a      	lsrs	r2, r1, #21
 80005f2:	0512      	lsls	r2, r2, #20
 80005f4:	433a      	orrs	r2, r7
 80005f6:	07ed      	lsls	r5, r5, #31
 80005f8:	432a      	orrs	r2, r5
 80005fa:	0018      	movs	r0, r3
 80005fc:	0011      	movs	r1, r2
 80005fe:	bce0      	pop	{r5, r6, r7}
 8000600:	46ba      	mov	sl, r7
 8000602:	46b1      	mov	r9, r6
 8000604:	46a8      	mov	r8, r5
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000608:	2c00      	cmp	r4, #0
 800060a:	d04b      	beq.n	80006a4 <__aeabi_dadd+0x1e0>
 800060c:	464c      	mov	r4, r9
 800060e:	1ba4      	subs	r4, r4, r6
 8000610:	46a4      	mov	ip, r4
 8000612:	2e00      	cmp	r6, #0
 8000614:	d000      	beq.n	8000618 <__aeabi_dadd+0x154>
 8000616:	e123      	b.n	8000860 <__aeabi_dadd+0x39c>
 8000618:	0004      	movs	r4, r0
 800061a:	431c      	orrs	r4, r3
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x15c>
 800061e:	e1af      	b.n	8000980 <__aeabi_dadd+0x4bc>
 8000620:	4662      	mov	r2, ip
 8000622:	1e54      	subs	r4, r2, #1
 8000624:	2a01      	cmp	r2, #1
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x166>
 8000628:	e215      	b.n	8000a56 <__aeabi_dadd+0x592>
 800062a:	4d80      	ldr	r5, [pc, #512]	; (800082c <__aeabi_dadd+0x368>)
 800062c:	45ac      	cmp	ip, r5
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x16e>
 8000630:	e1c8      	b.n	80009c4 <__aeabi_dadd+0x500>
 8000632:	46a4      	mov	ip, r4
 8000634:	e11b      	b.n	800086e <__aeabi_dadd+0x3aa>
 8000636:	464a      	mov	r2, r9
 8000638:	1ab2      	subs	r2, r6, r2
 800063a:	4694      	mov	ip, r2
 800063c:	2a00      	cmp	r2, #0
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x17e>
 8000640:	e0ac      	b.n	800079c <__aeabi_dadd+0x2d8>
 8000642:	464a      	mov	r2, r9
 8000644:	2a00      	cmp	r2, #0
 8000646:	d043      	beq.n	80006d0 <__aeabi_dadd+0x20c>
 8000648:	4a78      	ldr	r2, [pc, #480]	; (800082c <__aeabi_dadd+0x368>)
 800064a:	4296      	cmp	r6, r2
 800064c:	d100      	bne.n	8000650 <__aeabi_dadd+0x18c>
 800064e:	e1af      	b.n	80009b0 <__aeabi_dadd+0x4ec>
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	003c      	movs	r4, r7
 8000654:	0412      	lsls	r2, r2, #16
 8000656:	4314      	orrs	r4, r2
 8000658:	46a0      	mov	r8, r4
 800065a:	4662      	mov	r2, ip
 800065c:	2a38      	cmp	r2, #56	; 0x38
 800065e:	dc67      	bgt.n	8000730 <__aeabi_dadd+0x26c>
 8000660:	2a1f      	cmp	r2, #31
 8000662:	dc00      	bgt.n	8000666 <__aeabi_dadd+0x1a2>
 8000664:	e15f      	b.n	8000926 <__aeabi_dadd+0x462>
 8000666:	4647      	mov	r7, r8
 8000668:	3a20      	subs	r2, #32
 800066a:	40d7      	lsrs	r7, r2
 800066c:	4662      	mov	r2, ip
 800066e:	2a20      	cmp	r2, #32
 8000670:	d005      	beq.n	800067e <__aeabi_dadd+0x1ba>
 8000672:	4664      	mov	r4, ip
 8000674:	2240      	movs	r2, #64	; 0x40
 8000676:	1b12      	subs	r2, r2, r4
 8000678:	4644      	mov	r4, r8
 800067a:	4094      	lsls	r4, r2
 800067c:	4321      	orrs	r1, r4
 800067e:	1e4a      	subs	r2, r1, #1
 8000680:	4191      	sbcs	r1, r2
 8000682:	000c      	movs	r4, r1
 8000684:	433c      	orrs	r4, r7
 8000686:	e057      	b.n	8000738 <__aeabi_dadd+0x274>
 8000688:	003a      	movs	r2, r7
 800068a:	430a      	orrs	r2, r1
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x1cc>
 800068e:	e105      	b.n	800089c <__aeabi_dadd+0x3d8>
 8000690:	0022      	movs	r2, r4
 8000692:	3a01      	subs	r2, #1
 8000694:	2c01      	cmp	r4, #1
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x1d6>
 8000698:	e182      	b.n	80009a0 <__aeabi_dadd+0x4dc>
 800069a:	4c64      	ldr	r4, [pc, #400]	; (800082c <__aeabi_dadd+0x368>)
 800069c:	45a4      	cmp	ip, r4
 800069e:	d05b      	beq.n	8000758 <__aeabi_dadd+0x294>
 80006a0:	4694      	mov	ip, r2
 80006a2:	e741      	b.n	8000528 <__aeabi_dadd+0x64>
 80006a4:	4c63      	ldr	r4, [pc, #396]	; (8000834 <__aeabi_dadd+0x370>)
 80006a6:	1c77      	adds	r7, r6, #1
 80006a8:	4227      	tst	r7, r4
 80006aa:	d000      	beq.n	80006ae <__aeabi_dadd+0x1ea>
 80006ac:	e0c4      	b.n	8000838 <__aeabi_dadd+0x374>
 80006ae:	0004      	movs	r4, r0
 80006b0:	431c      	orrs	r4, r3
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_dadd+0x1f4>
 80006b6:	e169      	b.n	800098c <__aeabi_dadd+0x4c8>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x1fa>
 80006bc:	e1bf      	b.n	8000a3e <__aeabi_dadd+0x57a>
 80006be:	4644      	mov	r4, r8
 80006c0:	430c      	orrs	r4, r1
 80006c2:	d000      	beq.n	80006c6 <__aeabi_dadd+0x202>
 80006c4:	e1d0      	b.n	8000a68 <__aeabi_dadd+0x5a4>
 80006c6:	0742      	lsls	r2, r0, #29
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	08c0      	lsrs	r0, r0, #3
 80006ce:	e029      	b.n	8000724 <__aeabi_dadd+0x260>
 80006d0:	003a      	movs	r2, r7
 80006d2:	430a      	orrs	r2, r1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x214>
 80006d6:	e170      	b.n	80009ba <__aeabi_dadd+0x4f6>
 80006d8:	4662      	mov	r2, ip
 80006da:	4664      	mov	r4, ip
 80006dc:	3a01      	subs	r2, #1
 80006de:	2c01      	cmp	r4, #1
 80006e0:	d100      	bne.n	80006e4 <__aeabi_dadd+0x220>
 80006e2:	e0e0      	b.n	80008a6 <__aeabi_dadd+0x3e2>
 80006e4:	4c51      	ldr	r4, [pc, #324]	; (800082c <__aeabi_dadd+0x368>)
 80006e6:	45a4      	cmp	ip, r4
 80006e8:	d100      	bne.n	80006ec <__aeabi_dadd+0x228>
 80006ea:	e161      	b.n	80009b0 <__aeabi_dadd+0x4ec>
 80006ec:	4694      	mov	ip, r2
 80006ee:	e7b4      	b.n	800065a <__aeabi_dadd+0x196>
 80006f0:	003a      	movs	r2, r7
 80006f2:	391f      	subs	r1, #31
 80006f4:	40ca      	lsrs	r2, r1
 80006f6:	0011      	movs	r1, r2
 80006f8:	2b20      	cmp	r3, #32
 80006fa:	d003      	beq.n	8000704 <__aeabi_dadd+0x240>
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	409f      	lsls	r7, r3
 8000702:	433c      	orrs	r4, r7
 8000704:	1e63      	subs	r3, r4, #1
 8000706:	419c      	sbcs	r4, r3
 8000708:	2700      	movs	r7, #0
 800070a:	2600      	movs	r6, #0
 800070c:	430c      	orrs	r4, r1
 800070e:	0763      	lsls	r3, r4, #29
 8000710:	d000      	beq.n	8000714 <__aeabi_dadd+0x250>
 8000712:	e753      	b.n	80005bc <__aeabi_dadd+0xf8>
 8000714:	46b4      	mov	ip, r6
 8000716:	08e4      	lsrs	r4, r4, #3
 8000718:	077b      	lsls	r3, r7, #29
 800071a:	4323      	orrs	r3, r4
 800071c:	08f8      	lsrs	r0, r7, #3
 800071e:	4a43      	ldr	r2, [pc, #268]	; (800082c <__aeabi_dadd+0x368>)
 8000720:	4594      	cmp	ip, r2
 8000722:	d01d      	beq.n	8000760 <__aeabi_dadd+0x29c>
 8000724:	4662      	mov	r2, ip
 8000726:	0307      	lsls	r7, r0, #12
 8000728:	0552      	lsls	r2, r2, #21
 800072a:	0b3f      	lsrs	r7, r7, #12
 800072c:	0d52      	lsrs	r2, r2, #21
 800072e:	e760      	b.n	80005f2 <__aeabi_dadd+0x12e>
 8000730:	4644      	mov	r4, r8
 8000732:	430c      	orrs	r4, r1
 8000734:	1e62      	subs	r2, r4, #1
 8000736:	4194      	sbcs	r4, r2
 8000738:	18e4      	adds	r4, r4, r3
 800073a:	429c      	cmp	r4, r3
 800073c:	419b      	sbcs	r3, r3
 800073e:	425f      	negs	r7, r3
 8000740:	183f      	adds	r7, r7, r0
 8000742:	023b      	lsls	r3, r7, #8
 8000744:	d5e3      	bpl.n	800070e <__aeabi_dadd+0x24a>
 8000746:	4b39      	ldr	r3, [pc, #228]	; (800082c <__aeabi_dadd+0x368>)
 8000748:	3601      	adds	r6, #1
 800074a:	429e      	cmp	r6, r3
 800074c:	d000      	beq.n	8000750 <__aeabi_dadd+0x28c>
 800074e:	e0b5      	b.n	80008bc <__aeabi_dadd+0x3f8>
 8000750:	0032      	movs	r2, r6
 8000752:	2700      	movs	r7, #0
 8000754:	2300      	movs	r3, #0
 8000756:	e74c      	b.n	80005f2 <__aeabi_dadd+0x12e>
 8000758:	0742      	lsls	r2, r0, #29
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	4313      	orrs	r3, r2
 800075e:	08c0      	lsrs	r0, r0, #3
 8000760:	001a      	movs	r2, r3
 8000762:	4302      	orrs	r2, r0
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x2a4>
 8000766:	e1e1      	b.n	8000b2c <__aeabi_dadd+0x668>
 8000768:	2780      	movs	r7, #128	; 0x80
 800076a:	033f      	lsls	r7, r7, #12
 800076c:	4307      	orrs	r7, r0
 800076e:	033f      	lsls	r7, r7, #12
 8000770:	4a2e      	ldr	r2, [pc, #184]	; (800082c <__aeabi_dadd+0x368>)
 8000772:	0b3f      	lsrs	r7, r7, #12
 8000774:	e73d      	b.n	80005f2 <__aeabi_dadd+0x12e>
 8000776:	0020      	movs	r0, r4
 8000778:	f001 fc46 	bl	8002008 <__clzsi2>
 800077c:	0001      	movs	r1, r0
 800077e:	3118      	adds	r1, #24
 8000780:	291f      	cmp	r1, #31
 8000782:	dc00      	bgt.n	8000786 <__aeabi_dadd+0x2c2>
 8000784:	e6fc      	b.n	8000580 <__aeabi_dadd+0xbc>
 8000786:	3808      	subs	r0, #8
 8000788:	4084      	lsls	r4, r0
 800078a:	0027      	movs	r7, r4
 800078c:	2400      	movs	r4, #0
 800078e:	42b1      	cmp	r1, r6
 8000790:	db00      	blt.n	8000794 <__aeabi_dadd+0x2d0>
 8000792:	e6ff      	b.n	8000594 <__aeabi_dadd+0xd0>
 8000794:	4a26      	ldr	r2, [pc, #152]	; (8000830 <__aeabi_dadd+0x36c>)
 8000796:	1a76      	subs	r6, r6, r1
 8000798:	4017      	ands	r7, r2
 800079a:	e70d      	b.n	80005b8 <__aeabi_dadd+0xf4>
 800079c:	2a00      	cmp	r2, #0
 800079e:	d02f      	beq.n	8000800 <__aeabi_dadd+0x33c>
 80007a0:	464a      	mov	r2, r9
 80007a2:	1b92      	subs	r2, r2, r6
 80007a4:	4694      	mov	ip, r2
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x2e8>
 80007aa:	e0ad      	b.n	8000908 <__aeabi_dadd+0x444>
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <__aeabi_dadd+0x368>)
 80007ae:	4591      	cmp	r9, r2
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x2f0>
 80007b2:	e10f      	b.n	80009d4 <__aeabi_dadd+0x510>
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	0412      	lsls	r2, r2, #16
 80007b8:	4310      	orrs	r0, r2
 80007ba:	4662      	mov	r2, ip
 80007bc:	2a38      	cmp	r2, #56	; 0x38
 80007be:	dd00      	ble.n	80007c2 <__aeabi_dadd+0x2fe>
 80007c0:	e10f      	b.n	80009e2 <__aeabi_dadd+0x51e>
 80007c2:	2a1f      	cmp	r2, #31
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x304>
 80007c6:	e180      	b.n	8000aca <__aeabi_dadd+0x606>
 80007c8:	4664      	mov	r4, ip
 80007ca:	2220      	movs	r2, #32
 80007cc:	001e      	movs	r6, r3
 80007ce:	1b12      	subs	r2, r2, r4
 80007d0:	4667      	mov	r7, ip
 80007d2:	0004      	movs	r4, r0
 80007d4:	4093      	lsls	r3, r2
 80007d6:	4094      	lsls	r4, r2
 80007d8:	40fe      	lsrs	r6, r7
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	40f8      	lsrs	r0, r7
 80007e0:	4334      	orrs	r4, r6
 80007e2:	431c      	orrs	r4, r3
 80007e4:	4480      	add	r8, r0
 80007e6:	1864      	adds	r4, r4, r1
 80007e8:	428c      	cmp	r4, r1
 80007ea:	41bf      	sbcs	r7, r7
 80007ec:	427f      	negs	r7, r7
 80007ee:	464e      	mov	r6, r9
 80007f0:	4447      	add	r7, r8
 80007f2:	e7a6      	b.n	8000742 <__aeabi_dadd+0x27e>
 80007f4:	4642      	mov	r2, r8
 80007f6:	430a      	orrs	r2, r1
 80007f8:	0011      	movs	r1, r2
 80007fa:	1e4a      	subs	r2, r1, #1
 80007fc:	4191      	sbcs	r1, r2
 80007fe:	e6ad      	b.n	800055c <__aeabi_dadd+0x98>
 8000800:	4c0c      	ldr	r4, [pc, #48]	; (8000834 <__aeabi_dadd+0x370>)
 8000802:	1c72      	adds	r2, r6, #1
 8000804:	4222      	tst	r2, r4
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x346>
 8000808:	e0a1      	b.n	800094e <__aeabi_dadd+0x48a>
 800080a:	0002      	movs	r2, r0
 800080c:	431a      	orrs	r2, r3
 800080e:	2e00      	cmp	r6, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_dadd+0x350>
 8000812:	e0fa      	b.n	8000a0a <__aeabi_dadd+0x546>
 8000814:	2a00      	cmp	r2, #0
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x356>
 8000818:	e145      	b.n	8000aa6 <__aeabi_dadd+0x5e2>
 800081a:	003a      	movs	r2, r7
 800081c:	430a      	orrs	r2, r1
 800081e:	d000      	beq.n	8000822 <__aeabi_dadd+0x35e>
 8000820:	e146      	b.n	8000ab0 <__aeabi_dadd+0x5ec>
 8000822:	0742      	lsls	r2, r0, #29
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	4313      	orrs	r3, r2
 8000828:	08c0      	lsrs	r0, r0, #3
 800082a:	e77b      	b.n	8000724 <__aeabi_dadd+0x260>
 800082c:	000007ff 	.word	0x000007ff
 8000830:	ff7fffff 	.word	0xff7fffff
 8000834:	000007fe 	.word	0x000007fe
 8000838:	4647      	mov	r7, r8
 800083a:	1a5c      	subs	r4, r3, r1
 800083c:	1bc2      	subs	r2, r0, r7
 800083e:	42a3      	cmp	r3, r4
 8000840:	41bf      	sbcs	r7, r7
 8000842:	427f      	negs	r7, r7
 8000844:	46b9      	mov	r9, r7
 8000846:	0017      	movs	r7, r2
 8000848:	464a      	mov	r2, r9
 800084a:	1abf      	subs	r7, r7, r2
 800084c:	023a      	lsls	r2, r7, #8
 800084e:	d500      	bpl.n	8000852 <__aeabi_dadd+0x38e>
 8000850:	e08d      	b.n	800096e <__aeabi_dadd+0x4aa>
 8000852:	0023      	movs	r3, r4
 8000854:	433b      	orrs	r3, r7
 8000856:	d000      	beq.n	800085a <__aeabi_dadd+0x396>
 8000858:	e68a      	b.n	8000570 <__aeabi_dadd+0xac>
 800085a:	2000      	movs	r0, #0
 800085c:	2500      	movs	r5, #0
 800085e:	e761      	b.n	8000724 <__aeabi_dadd+0x260>
 8000860:	4cb4      	ldr	r4, [pc, #720]	; (8000b34 <__aeabi_dadd+0x670>)
 8000862:	45a1      	cmp	r9, r4
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x3a4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x500>
 8000868:	2480      	movs	r4, #128	; 0x80
 800086a:	0424      	lsls	r4, r4, #16
 800086c:	4320      	orrs	r0, r4
 800086e:	4664      	mov	r4, ip
 8000870:	2c38      	cmp	r4, #56	; 0x38
 8000872:	dc3d      	bgt.n	80008f0 <__aeabi_dadd+0x42c>
 8000874:	4662      	mov	r2, ip
 8000876:	2c1f      	cmp	r4, #31
 8000878:	dd00      	ble.n	800087c <__aeabi_dadd+0x3b8>
 800087a:	e0b7      	b.n	80009ec <__aeabi_dadd+0x528>
 800087c:	2520      	movs	r5, #32
 800087e:	001e      	movs	r6, r3
 8000880:	1b2d      	subs	r5, r5, r4
 8000882:	0004      	movs	r4, r0
 8000884:	40ab      	lsls	r3, r5
 8000886:	40ac      	lsls	r4, r5
 8000888:	40d6      	lsrs	r6, r2
 800088a:	40d0      	lsrs	r0, r2
 800088c:	4642      	mov	r2, r8
 800088e:	1e5d      	subs	r5, r3, #1
 8000890:	41ab      	sbcs	r3, r5
 8000892:	4334      	orrs	r4, r6
 8000894:	1a12      	subs	r2, r2, r0
 8000896:	4690      	mov	r8, r2
 8000898:	4323      	orrs	r3, r4
 800089a:	e02c      	b.n	80008f6 <__aeabi_dadd+0x432>
 800089c:	0742      	lsls	r2, r0, #29
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	08c0      	lsrs	r0, r0, #3
 80008a4:	e73b      	b.n	800071e <__aeabi_dadd+0x25a>
 80008a6:	185c      	adds	r4, r3, r1
 80008a8:	429c      	cmp	r4, r3
 80008aa:	419b      	sbcs	r3, r3
 80008ac:	4440      	add	r0, r8
 80008ae:	425b      	negs	r3, r3
 80008b0:	18c7      	adds	r7, r0, r3
 80008b2:	2601      	movs	r6, #1
 80008b4:	023b      	lsls	r3, r7, #8
 80008b6:	d400      	bmi.n	80008ba <__aeabi_dadd+0x3f6>
 80008b8:	e729      	b.n	800070e <__aeabi_dadd+0x24a>
 80008ba:	2602      	movs	r6, #2
 80008bc:	4a9e      	ldr	r2, [pc, #632]	; (8000b38 <__aeabi_dadd+0x674>)
 80008be:	0863      	lsrs	r3, r4, #1
 80008c0:	4017      	ands	r7, r2
 80008c2:	2201      	movs	r2, #1
 80008c4:	4014      	ands	r4, r2
 80008c6:	431c      	orrs	r4, r3
 80008c8:	07fb      	lsls	r3, r7, #31
 80008ca:	431c      	orrs	r4, r3
 80008cc:	087f      	lsrs	r7, r7, #1
 80008ce:	e673      	b.n	80005b8 <__aeabi_dadd+0xf4>
 80008d0:	4644      	mov	r4, r8
 80008d2:	3a20      	subs	r2, #32
 80008d4:	40d4      	lsrs	r4, r2
 80008d6:	4662      	mov	r2, ip
 80008d8:	2a20      	cmp	r2, #32
 80008da:	d005      	beq.n	80008e8 <__aeabi_dadd+0x424>
 80008dc:	4667      	mov	r7, ip
 80008de:	2240      	movs	r2, #64	; 0x40
 80008e0:	1bd2      	subs	r2, r2, r7
 80008e2:	4647      	mov	r7, r8
 80008e4:	4097      	lsls	r7, r2
 80008e6:	4339      	orrs	r1, r7
 80008e8:	1e4a      	subs	r2, r1, #1
 80008ea:	4191      	sbcs	r1, r2
 80008ec:	4321      	orrs	r1, r4
 80008ee:	e635      	b.n	800055c <__aeabi_dadd+0x98>
 80008f0:	4303      	orrs	r3, r0
 80008f2:	1e58      	subs	r0, r3, #1
 80008f4:	4183      	sbcs	r3, r0
 80008f6:	1acc      	subs	r4, r1, r3
 80008f8:	42a1      	cmp	r1, r4
 80008fa:	41bf      	sbcs	r7, r7
 80008fc:	4643      	mov	r3, r8
 80008fe:	427f      	negs	r7, r7
 8000900:	4655      	mov	r5, sl
 8000902:	464e      	mov	r6, r9
 8000904:	1bdf      	subs	r7, r3, r7
 8000906:	e62e      	b.n	8000566 <__aeabi_dadd+0xa2>
 8000908:	0002      	movs	r2, r0
 800090a:	431a      	orrs	r2, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x44c>
 800090e:	e0bd      	b.n	8000a8c <__aeabi_dadd+0x5c8>
 8000910:	4662      	mov	r2, ip
 8000912:	4664      	mov	r4, ip
 8000914:	3a01      	subs	r2, #1
 8000916:	2c01      	cmp	r4, #1
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x458>
 800091a:	e0e5      	b.n	8000ae8 <__aeabi_dadd+0x624>
 800091c:	4c85      	ldr	r4, [pc, #532]	; (8000b34 <__aeabi_dadd+0x670>)
 800091e:	45a4      	cmp	ip, r4
 8000920:	d058      	beq.n	80009d4 <__aeabi_dadd+0x510>
 8000922:	4694      	mov	ip, r2
 8000924:	e749      	b.n	80007ba <__aeabi_dadd+0x2f6>
 8000926:	4664      	mov	r4, ip
 8000928:	2220      	movs	r2, #32
 800092a:	1b12      	subs	r2, r2, r4
 800092c:	4644      	mov	r4, r8
 800092e:	4094      	lsls	r4, r2
 8000930:	000f      	movs	r7, r1
 8000932:	46a1      	mov	r9, r4
 8000934:	4664      	mov	r4, ip
 8000936:	4091      	lsls	r1, r2
 8000938:	40e7      	lsrs	r7, r4
 800093a:	464c      	mov	r4, r9
 800093c:	1e4a      	subs	r2, r1, #1
 800093e:	4191      	sbcs	r1, r2
 8000940:	433c      	orrs	r4, r7
 8000942:	4642      	mov	r2, r8
 8000944:	430c      	orrs	r4, r1
 8000946:	4661      	mov	r1, ip
 8000948:	40ca      	lsrs	r2, r1
 800094a:	1880      	adds	r0, r0, r2
 800094c:	e6f4      	b.n	8000738 <__aeabi_dadd+0x274>
 800094e:	4c79      	ldr	r4, [pc, #484]	; (8000b34 <__aeabi_dadd+0x670>)
 8000950:	42a2      	cmp	r2, r4
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x492>
 8000954:	e6fd      	b.n	8000752 <__aeabi_dadd+0x28e>
 8000956:	1859      	adds	r1, r3, r1
 8000958:	4299      	cmp	r1, r3
 800095a:	419b      	sbcs	r3, r3
 800095c:	4440      	add	r0, r8
 800095e:	425f      	negs	r7, r3
 8000960:	19c7      	adds	r7, r0, r7
 8000962:	07fc      	lsls	r4, r7, #31
 8000964:	0849      	lsrs	r1, r1, #1
 8000966:	0016      	movs	r6, r2
 8000968:	430c      	orrs	r4, r1
 800096a:	087f      	lsrs	r7, r7, #1
 800096c:	e6cf      	b.n	800070e <__aeabi_dadd+0x24a>
 800096e:	1acc      	subs	r4, r1, r3
 8000970:	42a1      	cmp	r1, r4
 8000972:	41bf      	sbcs	r7, r7
 8000974:	4643      	mov	r3, r8
 8000976:	427f      	negs	r7, r7
 8000978:	1a18      	subs	r0, r3, r0
 800097a:	4655      	mov	r5, sl
 800097c:	1bc7      	subs	r7, r0, r7
 800097e:	e5f7      	b.n	8000570 <__aeabi_dadd+0xac>
 8000980:	08c9      	lsrs	r1, r1, #3
 8000982:	077b      	lsls	r3, r7, #29
 8000984:	4655      	mov	r5, sl
 8000986:	430b      	orrs	r3, r1
 8000988:	08f8      	lsrs	r0, r7, #3
 800098a:	e6c8      	b.n	800071e <__aeabi_dadd+0x25a>
 800098c:	2c00      	cmp	r4, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ce>
 8000990:	e081      	b.n	8000a96 <__aeabi_dadd+0x5d2>
 8000992:	4643      	mov	r3, r8
 8000994:	430b      	orrs	r3, r1
 8000996:	d115      	bne.n	80009c4 <__aeabi_dadd+0x500>
 8000998:	2080      	movs	r0, #128	; 0x80
 800099a:	2500      	movs	r5, #0
 800099c:	0300      	lsls	r0, r0, #12
 800099e:	e6e3      	b.n	8000768 <__aeabi_dadd+0x2a4>
 80009a0:	1a5c      	subs	r4, r3, r1
 80009a2:	42a3      	cmp	r3, r4
 80009a4:	419b      	sbcs	r3, r3
 80009a6:	1bc7      	subs	r7, r0, r7
 80009a8:	425b      	negs	r3, r3
 80009aa:	2601      	movs	r6, #1
 80009ac:	1aff      	subs	r7, r7, r3
 80009ae:	e5da      	b.n	8000566 <__aeabi_dadd+0xa2>
 80009b0:	0742      	lsls	r2, r0, #29
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	08c0      	lsrs	r0, r0, #3
 80009b8:	e6d2      	b.n	8000760 <__aeabi_dadd+0x29c>
 80009ba:	0742      	lsls	r2, r0, #29
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	4313      	orrs	r3, r2
 80009c0:	08c0      	lsrs	r0, r0, #3
 80009c2:	e6ac      	b.n	800071e <__aeabi_dadd+0x25a>
 80009c4:	4643      	mov	r3, r8
 80009c6:	4642      	mov	r2, r8
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	075b      	lsls	r3, r3, #29
 80009cc:	4655      	mov	r5, sl
 80009ce:	430b      	orrs	r3, r1
 80009d0:	08d0      	lsrs	r0, r2, #3
 80009d2:	e6c5      	b.n	8000760 <__aeabi_dadd+0x29c>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4642      	mov	r2, r8
 80009d8:	075b      	lsls	r3, r3, #29
 80009da:	08c9      	lsrs	r1, r1, #3
 80009dc:	430b      	orrs	r3, r1
 80009de:	08d0      	lsrs	r0, r2, #3
 80009e0:	e6be      	b.n	8000760 <__aeabi_dadd+0x29c>
 80009e2:	4303      	orrs	r3, r0
 80009e4:	001c      	movs	r4, r3
 80009e6:	1e63      	subs	r3, r4, #1
 80009e8:	419c      	sbcs	r4, r3
 80009ea:	e6fc      	b.n	80007e6 <__aeabi_dadd+0x322>
 80009ec:	0002      	movs	r2, r0
 80009ee:	3c20      	subs	r4, #32
 80009f0:	40e2      	lsrs	r2, r4
 80009f2:	0014      	movs	r4, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	2a20      	cmp	r2, #32
 80009f8:	d003      	beq.n	8000a02 <__aeabi_dadd+0x53e>
 80009fa:	2540      	movs	r5, #64	; 0x40
 80009fc:	1aad      	subs	r5, r5, r2
 80009fe:	40a8      	lsls	r0, r5
 8000a00:	4303      	orrs	r3, r0
 8000a02:	1e58      	subs	r0, r3, #1
 8000a04:	4183      	sbcs	r3, r0
 8000a06:	4323      	orrs	r3, r4
 8000a08:	e775      	b.n	80008f6 <__aeabi_dadd+0x432>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d0e2      	beq.n	80009d4 <__aeabi_dadd+0x510>
 8000a0e:	003a      	movs	r2, r7
 8000a10:	430a      	orrs	r2, r1
 8000a12:	d0cd      	beq.n	80009b0 <__aeabi_dadd+0x4ec>
 8000a14:	0742      	lsls	r2, r0, #29
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	08c0      	lsrs	r0, r0, #3
 8000a1e:	0312      	lsls	r2, r2, #12
 8000a20:	4210      	tst	r0, r2
 8000a22:	d006      	beq.n	8000a32 <__aeabi_dadd+0x56e>
 8000a24:	08fc      	lsrs	r4, r7, #3
 8000a26:	4214      	tst	r4, r2
 8000a28:	d103      	bne.n	8000a32 <__aeabi_dadd+0x56e>
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	08cb      	lsrs	r3, r1, #3
 8000a2e:	077a      	lsls	r2, r7, #29
 8000a30:	4313      	orrs	r3, r2
 8000a32:	0f5a      	lsrs	r2, r3, #29
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	0752      	lsls	r2, r2, #29
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	e690      	b.n	8000760 <__aeabi_dadd+0x29c>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	430b      	orrs	r3, r1
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x582>
 8000a44:	e709      	b.n	800085a <__aeabi_dadd+0x396>
 8000a46:	4643      	mov	r3, r8
 8000a48:	4642      	mov	r2, r8
 8000a4a:	08c9      	lsrs	r1, r1, #3
 8000a4c:	075b      	lsls	r3, r3, #29
 8000a4e:	4655      	mov	r5, sl
 8000a50:	430b      	orrs	r3, r1
 8000a52:	08d0      	lsrs	r0, r2, #3
 8000a54:	e666      	b.n	8000724 <__aeabi_dadd+0x260>
 8000a56:	1acc      	subs	r4, r1, r3
 8000a58:	42a1      	cmp	r1, r4
 8000a5a:	4189      	sbcs	r1, r1
 8000a5c:	1a3f      	subs	r7, r7, r0
 8000a5e:	4249      	negs	r1, r1
 8000a60:	4655      	mov	r5, sl
 8000a62:	2601      	movs	r6, #1
 8000a64:	1a7f      	subs	r7, r7, r1
 8000a66:	e57e      	b.n	8000566 <__aeabi_dadd+0xa2>
 8000a68:	4642      	mov	r2, r8
 8000a6a:	1a5c      	subs	r4, r3, r1
 8000a6c:	1a87      	subs	r7, r0, r2
 8000a6e:	42a3      	cmp	r3, r4
 8000a70:	4192      	sbcs	r2, r2
 8000a72:	4252      	negs	r2, r2
 8000a74:	1abf      	subs	r7, r7, r2
 8000a76:	023a      	lsls	r2, r7, #8
 8000a78:	d53d      	bpl.n	8000af6 <__aeabi_dadd+0x632>
 8000a7a:	1acc      	subs	r4, r1, r3
 8000a7c:	42a1      	cmp	r1, r4
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	4643      	mov	r3, r8
 8000a82:	4249      	negs	r1, r1
 8000a84:	1a1f      	subs	r7, r3, r0
 8000a86:	4655      	mov	r5, sl
 8000a88:	1a7f      	subs	r7, r7, r1
 8000a8a:	e595      	b.n	80005b8 <__aeabi_dadd+0xf4>
 8000a8c:	077b      	lsls	r3, r7, #29
 8000a8e:	08c9      	lsrs	r1, r1, #3
 8000a90:	430b      	orrs	r3, r1
 8000a92:	08f8      	lsrs	r0, r7, #3
 8000a94:	e643      	b.n	800071e <__aeabi_dadd+0x25a>
 8000a96:	4644      	mov	r4, r8
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	430c      	orrs	r4, r1
 8000a9c:	d130      	bne.n	8000b00 <__aeabi_dadd+0x63c>
 8000a9e:	0742      	lsls	r2, r0, #29
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	08c0      	lsrs	r0, r0, #3
 8000aa4:	e65c      	b.n	8000760 <__aeabi_dadd+0x29c>
 8000aa6:	077b      	lsls	r3, r7, #29
 8000aa8:	08c9      	lsrs	r1, r1, #3
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	08f8      	lsrs	r0, r7, #3
 8000aae:	e639      	b.n	8000724 <__aeabi_dadd+0x260>
 8000ab0:	185c      	adds	r4, r3, r1
 8000ab2:	429c      	cmp	r4, r3
 8000ab4:	419b      	sbcs	r3, r3
 8000ab6:	4440      	add	r0, r8
 8000ab8:	425b      	negs	r3, r3
 8000aba:	18c7      	adds	r7, r0, r3
 8000abc:	023b      	lsls	r3, r7, #8
 8000abe:	d400      	bmi.n	8000ac2 <__aeabi_dadd+0x5fe>
 8000ac0:	e625      	b.n	800070e <__aeabi_dadd+0x24a>
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <__aeabi_dadd+0x674>)
 8000ac4:	2601      	movs	r6, #1
 8000ac6:	401f      	ands	r7, r3
 8000ac8:	e621      	b.n	800070e <__aeabi_dadd+0x24a>
 8000aca:	0004      	movs	r4, r0
 8000acc:	3a20      	subs	r2, #32
 8000ace:	40d4      	lsrs	r4, r2
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	2a20      	cmp	r2, #32
 8000ad4:	d004      	beq.n	8000ae0 <__aeabi_dadd+0x61c>
 8000ad6:	2240      	movs	r2, #64	; 0x40
 8000ad8:	4666      	mov	r6, ip
 8000ada:	1b92      	subs	r2, r2, r6
 8000adc:	4090      	lsls	r0, r2
 8000ade:	4303      	orrs	r3, r0
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	4193      	sbcs	r3, r2
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	e67e      	b.n	80007e6 <__aeabi_dadd+0x322>
 8000ae8:	185c      	adds	r4, r3, r1
 8000aea:	428c      	cmp	r4, r1
 8000aec:	4189      	sbcs	r1, r1
 8000aee:	4440      	add	r0, r8
 8000af0:	4249      	negs	r1, r1
 8000af2:	1847      	adds	r7, r0, r1
 8000af4:	e6dd      	b.n	80008b2 <__aeabi_dadd+0x3ee>
 8000af6:	0023      	movs	r3, r4
 8000af8:	433b      	orrs	r3, r7
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x63a>
 8000afc:	e6ad      	b.n	800085a <__aeabi_dadd+0x396>
 8000afe:	e606      	b.n	800070e <__aeabi_dadd+0x24a>
 8000b00:	0744      	lsls	r4, r0, #29
 8000b02:	4323      	orrs	r3, r4
 8000b04:	2480      	movs	r4, #128	; 0x80
 8000b06:	08c0      	lsrs	r0, r0, #3
 8000b08:	0324      	lsls	r4, r4, #12
 8000b0a:	4220      	tst	r0, r4
 8000b0c:	d008      	beq.n	8000b20 <__aeabi_dadd+0x65c>
 8000b0e:	4642      	mov	r2, r8
 8000b10:	08d6      	lsrs	r6, r2, #3
 8000b12:	4226      	tst	r6, r4
 8000b14:	d104      	bne.n	8000b20 <__aeabi_dadd+0x65c>
 8000b16:	4655      	mov	r5, sl
 8000b18:	0030      	movs	r0, r6
 8000b1a:	08cb      	lsrs	r3, r1, #3
 8000b1c:	0751      	lsls	r1, r2, #29
 8000b1e:	430b      	orrs	r3, r1
 8000b20:	0f5a      	lsrs	r2, r3, #29
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	0752      	lsls	r2, r2, #29
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	e619      	b.n	8000760 <__aeabi_dadd+0x29c>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4a01      	ldr	r2, [pc, #4]	; (8000b34 <__aeabi_dadd+0x670>)
 8000b30:	001f      	movs	r7, r3
 8000b32:	e55e      	b.n	80005f2 <__aeabi_dadd+0x12e>
 8000b34:	000007ff 	.word	0x000007ff
 8000b38:	ff7fffff 	.word	0xff7fffff

08000b3c <__aeabi_ddiv>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	4657      	mov	r7, sl
 8000b40:	464e      	mov	r6, r9
 8000b42:	4645      	mov	r5, r8
 8000b44:	46de      	mov	lr, fp
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	4681      	mov	r9, r0
 8000b4a:	0005      	movs	r5, r0
 8000b4c:	030c      	lsls	r4, r1, #12
 8000b4e:	0048      	lsls	r0, r1, #1
 8000b50:	4692      	mov	sl, r2
 8000b52:	001f      	movs	r7, r3
 8000b54:	b085      	sub	sp, #20
 8000b56:	0b24      	lsrs	r4, r4, #12
 8000b58:	0d40      	lsrs	r0, r0, #21
 8000b5a:	0fce      	lsrs	r6, r1, #31
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_ddiv+0x26>
 8000b60:	e156      	b.n	8000e10 <__aeabi_ddiv+0x2d4>
 8000b62:	4bd4      	ldr	r3, [pc, #848]	; (8000eb4 <__aeabi_ddiv+0x378>)
 8000b64:	4298      	cmp	r0, r3
 8000b66:	d100      	bne.n	8000b6a <__aeabi_ddiv+0x2e>
 8000b68:	e172      	b.n	8000e50 <__aeabi_ddiv+0x314>
 8000b6a:	0f6b      	lsrs	r3, r5, #29
 8000b6c:	00e4      	lsls	r4, r4, #3
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	041b      	lsls	r3, r3, #16
 8000b74:	4323      	orrs	r3, r4
 8000b76:	4698      	mov	r8, r3
 8000b78:	4bcf      	ldr	r3, [pc, #828]	; (8000eb8 <__aeabi_ddiv+0x37c>)
 8000b7a:	00ed      	lsls	r5, r5, #3
 8000b7c:	469b      	mov	fp, r3
 8000b7e:	2300      	movs	r3, #0
 8000b80:	4699      	mov	r9, r3
 8000b82:	4483      	add	fp, r0
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	033c      	lsls	r4, r7, #12
 8000b88:	007b      	lsls	r3, r7, #1
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	0b24      	lsrs	r4, r4, #12
 8000b8e:	0d5b      	lsrs	r3, r3, #21
 8000b90:	0fff      	lsrs	r7, r7, #31
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x5c>
 8000b96:	e11f      	b.n	8000dd8 <__aeabi_ddiv+0x29c>
 8000b98:	4ac6      	ldr	r2, [pc, #792]	; (8000eb4 <__aeabi_ddiv+0x378>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x64>
 8000b9e:	e162      	b.n	8000e66 <__aeabi_ddiv+0x32a>
 8000ba0:	49c5      	ldr	r1, [pc, #788]	; (8000eb8 <__aeabi_ddiv+0x37c>)
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	00e4      	lsls	r4, r4, #3
 8000ba8:	4659      	mov	r1, fp
 8000baa:	4314      	orrs	r4, r2
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	4463      	add	r3, ip
 8000bb0:	0412      	lsls	r2, r2, #16
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	4314      	orrs	r4, r2
 8000bb6:	469b      	mov	fp, r3
 8000bb8:	00c2      	lsls	r2, r0, #3
 8000bba:	2000      	movs	r0, #0
 8000bbc:	0033      	movs	r3, r6
 8000bbe:	407b      	eors	r3, r7
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	464b      	mov	r3, r9
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d827      	bhi.n	8000c18 <__aeabi_ddiv+0xdc>
 8000bc8:	49bc      	ldr	r1, [pc, #752]	; (8000ebc <__aeabi_ddiv+0x380>)
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	58cb      	ldr	r3, [r1, r3]
 8000bce:	469f      	mov	pc, r3
 8000bd0:	46b2      	mov	sl, r6
 8000bd2:	9b00      	ldr	r3, [sp, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d016      	beq.n	8000c06 <__aeabi_ddiv+0xca>
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d100      	bne.n	8000bde <__aeabi_ddiv+0xa2>
 8000bdc:	e28e      	b.n	80010fc <__aeabi_ddiv+0x5c0>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d000      	beq.n	8000be4 <__aeabi_ddiv+0xa8>
 8000be2:	e0d9      	b.n	8000d98 <__aeabi_ddiv+0x25c>
 8000be4:	2300      	movs	r3, #0
 8000be6:	2400      	movs	r4, #0
 8000be8:	2500      	movs	r5, #0
 8000bea:	4652      	mov	r2, sl
 8000bec:	051b      	lsls	r3, r3, #20
 8000bee:	4323      	orrs	r3, r4
 8000bf0:	07d2      	lsls	r2, r2, #31
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	0028      	movs	r0, r5
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	b005      	add	sp, #20
 8000bfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000bfc:	46bb      	mov	fp, r7
 8000bfe:	46b2      	mov	sl, r6
 8000c00:	46a9      	mov	r9, r5
 8000c02:	46a0      	mov	r8, r4
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	2400      	movs	r4, #0
 8000c08:	2500      	movs	r5, #0
 8000c0a:	4baa      	ldr	r3, [pc, #680]	; (8000eb4 <__aeabi_ddiv+0x378>)
 8000c0c:	e7ed      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000c0e:	46ba      	mov	sl, r7
 8000c10:	46a0      	mov	r8, r4
 8000c12:	0015      	movs	r5, r2
 8000c14:	9000      	str	r0, [sp, #0]
 8000c16:	e7dc      	b.n	8000bd2 <__aeabi_ddiv+0x96>
 8000c18:	4544      	cmp	r4, r8
 8000c1a:	d200      	bcs.n	8000c1e <__aeabi_ddiv+0xe2>
 8000c1c:	e1c7      	b.n	8000fae <__aeabi_ddiv+0x472>
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xe6>
 8000c20:	e1c2      	b.n	8000fa8 <__aeabi_ddiv+0x46c>
 8000c22:	2301      	movs	r3, #1
 8000c24:	425b      	negs	r3, r3
 8000c26:	469c      	mov	ip, r3
 8000c28:	002e      	movs	r6, r5
 8000c2a:	4640      	mov	r0, r8
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	44e3      	add	fp, ip
 8000c30:	0223      	lsls	r3, r4, #8
 8000c32:	0e14      	lsrs	r4, r2, #24
 8000c34:	431c      	orrs	r4, r3
 8000c36:	0c1b      	lsrs	r3, r3, #16
 8000c38:	4699      	mov	r9, r3
 8000c3a:	0423      	lsls	r3, r4, #16
 8000c3c:	0c1f      	lsrs	r7, r3, #16
 8000c3e:	0212      	lsls	r2, r2, #8
 8000c40:	4649      	mov	r1, r9
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	9701      	str	r7, [sp, #4]
 8000c46:	f7ff fae1 	bl	800020c <__aeabi_uidivmod>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	437a      	muls	r2, r7
 8000c4e:	040b      	lsls	r3, r1, #16
 8000c50:	0c31      	lsrs	r1, r6, #16
 8000c52:	4680      	mov	r8, r0
 8000c54:	4319      	orrs	r1, r3
 8000c56:	428a      	cmp	r2, r1
 8000c58:	d907      	bls.n	8000c6a <__aeabi_ddiv+0x12e>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	469c      	mov	ip, r3
 8000c60:	1909      	adds	r1, r1, r4
 8000c62:	44e0      	add	r8, ip
 8000c64:	428c      	cmp	r4, r1
 8000c66:	d800      	bhi.n	8000c6a <__aeabi_ddiv+0x12e>
 8000c68:	e207      	b.n	800107a <__aeabi_ddiv+0x53e>
 8000c6a:	1a88      	subs	r0, r1, r2
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	f7ff facd 	bl	800020c <__aeabi_uidivmod>
 8000c72:	0409      	lsls	r1, r1, #16
 8000c74:	468c      	mov	ip, r1
 8000c76:	0431      	lsls	r1, r6, #16
 8000c78:	4666      	mov	r6, ip
 8000c7a:	9a01      	ldr	r2, [sp, #4]
 8000c7c:	0c09      	lsrs	r1, r1, #16
 8000c7e:	4342      	muls	r2, r0
 8000c80:	0003      	movs	r3, r0
 8000c82:	4331      	orrs	r1, r6
 8000c84:	428a      	cmp	r2, r1
 8000c86:	d904      	bls.n	8000c92 <__aeabi_ddiv+0x156>
 8000c88:	1909      	adds	r1, r1, r4
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	428c      	cmp	r4, r1
 8000c8e:	d800      	bhi.n	8000c92 <__aeabi_ddiv+0x156>
 8000c90:	e1ed      	b.n	800106e <__aeabi_ddiv+0x532>
 8000c92:	1a88      	subs	r0, r1, r2
 8000c94:	4642      	mov	r2, r8
 8000c96:	0412      	lsls	r2, r2, #16
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	4690      	mov	r8, r2
 8000c9c:	4641      	mov	r1, r8
 8000c9e:	9b00      	ldr	r3, [sp, #0]
 8000ca0:	040e      	lsls	r6, r1, #16
 8000ca2:	0c1b      	lsrs	r3, r3, #16
 8000ca4:	001f      	movs	r7, r3
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	9b00      	ldr	r3, [sp, #0]
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	0c19      	lsrs	r1, r3, #16
 8000cb0:	000b      	movs	r3, r1
 8000cb2:	4373      	muls	r3, r6
 8000cb4:	0c12      	lsrs	r2, r2, #16
 8000cb6:	437e      	muls	r6, r7
 8000cb8:	9103      	str	r1, [sp, #12]
 8000cba:	4351      	muls	r1, r2
 8000cbc:	437a      	muls	r2, r7
 8000cbe:	0c1f      	lsrs	r7, r3, #16
 8000cc0:	46bc      	mov	ip, r7
 8000cc2:	1876      	adds	r6, r6, r1
 8000cc4:	4466      	add	r6, ip
 8000cc6:	42b1      	cmp	r1, r6
 8000cc8:	d903      	bls.n	8000cd2 <__aeabi_ddiv+0x196>
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0249      	lsls	r1, r1, #9
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4462      	add	r2, ip
 8000cd2:	0c31      	lsrs	r1, r6, #16
 8000cd4:	188a      	adds	r2, r1, r2
 8000cd6:	0431      	lsls	r1, r6, #16
 8000cd8:	041e      	lsls	r6, r3, #16
 8000cda:	0c36      	lsrs	r6, r6, #16
 8000cdc:	198e      	adds	r6, r1, r6
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d302      	bcc.n	8000ce8 <__aeabi_ddiv+0x1ac>
 8000ce2:	d112      	bne.n	8000d0a <__aeabi_ddiv+0x1ce>
 8000ce4:	42b5      	cmp	r5, r6
 8000ce6:	d210      	bcs.n	8000d0a <__aeabi_ddiv+0x1ce>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	1e59      	subs	r1, r3, #1
 8000cec:	9b00      	ldr	r3, [sp, #0]
 8000cee:	469c      	mov	ip, r3
 8000cf0:	4465      	add	r5, ip
 8000cf2:	001f      	movs	r7, r3
 8000cf4:	429d      	cmp	r5, r3
 8000cf6:	419b      	sbcs	r3, r3
 8000cf8:	425b      	negs	r3, r3
 8000cfa:	191b      	adds	r3, r3, r4
 8000cfc:	18c0      	adds	r0, r0, r3
 8000cfe:	4284      	cmp	r4, r0
 8000d00:	d200      	bcs.n	8000d04 <__aeabi_ddiv+0x1c8>
 8000d02:	e1a0      	b.n	8001046 <__aeabi_ddiv+0x50a>
 8000d04:	d100      	bne.n	8000d08 <__aeabi_ddiv+0x1cc>
 8000d06:	e19b      	b.n	8001040 <__aeabi_ddiv+0x504>
 8000d08:	4688      	mov	r8, r1
 8000d0a:	1bae      	subs	r6, r5, r6
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	41ad      	sbcs	r5, r5
 8000d10:	1a80      	subs	r0, r0, r2
 8000d12:	426d      	negs	r5, r5
 8000d14:	1b40      	subs	r0, r0, r5
 8000d16:	4284      	cmp	r4, r0
 8000d18:	d100      	bne.n	8000d1c <__aeabi_ddiv+0x1e0>
 8000d1a:	e1d5      	b.n	80010c8 <__aeabi_ddiv+0x58c>
 8000d1c:	4649      	mov	r1, r9
 8000d1e:	f7ff fa75 	bl	800020c <__aeabi_uidivmod>
 8000d22:	9a01      	ldr	r2, [sp, #4]
 8000d24:	040b      	lsls	r3, r1, #16
 8000d26:	4342      	muls	r2, r0
 8000d28:	0c31      	lsrs	r1, r6, #16
 8000d2a:	0005      	movs	r5, r0
 8000d2c:	4319      	orrs	r1, r3
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x1f8>
 8000d32:	e16c      	b.n	800100e <__aeabi_ddiv+0x4d2>
 8000d34:	1a88      	subs	r0, r1, r2
 8000d36:	4649      	mov	r1, r9
 8000d38:	f7ff fa68 	bl	800020c <__aeabi_uidivmod>
 8000d3c:	9a01      	ldr	r2, [sp, #4]
 8000d3e:	0436      	lsls	r6, r6, #16
 8000d40:	4342      	muls	r2, r0
 8000d42:	0409      	lsls	r1, r1, #16
 8000d44:	0c36      	lsrs	r6, r6, #16
 8000d46:	0003      	movs	r3, r0
 8000d48:	430e      	orrs	r6, r1
 8000d4a:	42b2      	cmp	r2, r6
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x214>
 8000d4e:	e153      	b.n	8000ff8 <__aeabi_ddiv+0x4bc>
 8000d50:	9803      	ldr	r0, [sp, #12]
 8000d52:	1ab6      	subs	r6, r6, r2
 8000d54:	0002      	movs	r2, r0
 8000d56:	042d      	lsls	r5, r5, #16
 8000d58:	431d      	orrs	r5, r3
 8000d5a:	9f02      	ldr	r7, [sp, #8]
 8000d5c:	042b      	lsls	r3, r5, #16
 8000d5e:	0c1b      	lsrs	r3, r3, #16
 8000d60:	435a      	muls	r2, r3
 8000d62:	437b      	muls	r3, r7
 8000d64:	469c      	mov	ip, r3
 8000d66:	0c29      	lsrs	r1, r5, #16
 8000d68:	4348      	muls	r0, r1
 8000d6a:	0c13      	lsrs	r3, r2, #16
 8000d6c:	4484      	add	ip, r0
 8000d6e:	4463      	add	r3, ip
 8000d70:	4379      	muls	r1, r7
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d903      	bls.n	8000d7e <__aeabi_ddiv+0x242>
 8000d76:	2080      	movs	r0, #128	; 0x80
 8000d78:	0240      	lsls	r0, r0, #9
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	4461      	add	r1, ip
 8000d7e:	0c18      	lsrs	r0, r3, #16
 8000d80:	0412      	lsls	r2, r2, #16
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	0c12      	lsrs	r2, r2, #16
 8000d86:	1841      	adds	r1, r0, r1
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	428e      	cmp	r6, r1
 8000d8c:	d200      	bcs.n	8000d90 <__aeabi_ddiv+0x254>
 8000d8e:	e0ff      	b.n	8000f90 <__aeabi_ddiv+0x454>
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x258>
 8000d92:	e0fa      	b.n	8000f8a <__aeabi_ddiv+0x44e>
 8000d94:	2301      	movs	r3, #1
 8000d96:	431d      	orrs	r5, r3
 8000d98:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <__aeabi_ddiv+0x384>)
 8000d9a:	445a      	add	r2, fp
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_ddiv+0x266>
 8000da0:	e0aa      	b.n	8000ef8 <__aeabi_ddiv+0x3bc>
 8000da2:	076b      	lsls	r3, r5, #29
 8000da4:	d000      	beq.n	8000da8 <__aeabi_ddiv+0x26c>
 8000da6:	e13d      	b.n	8001024 <__aeabi_ddiv+0x4e8>
 8000da8:	08ed      	lsrs	r5, r5, #3
 8000daa:	4643      	mov	r3, r8
 8000dac:	01db      	lsls	r3, r3, #7
 8000dae:	d506      	bpl.n	8000dbe <__aeabi_ddiv+0x282>
 8000db0:	4642      	mov	r2, r8
 8000db2:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <__aeabi_ddiv+0x388>)
 8000db4:	401a      	ands	r2, r3
 8000db6:	4690      	mov	r8, r2
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	00d2      	lsls	r2, r2, #3
 8000dbc:	445a      	add	r2, fp
 8000dbe:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <__aeabi_ddiv+0x38c>)
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_ddiv+0x28a>
 8000dc4:	e71f      	b.n	8000c06 <__aeabi_ddiv+0xca>
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	075b      	lsls	r3, r3, #29
 8000dca:	431d      	orrs	r5, r3
 8000dcc:	4643      	mov	r3, r8
 8000dce:	0552      	lsls	r2, r2, #21
 8000dd0:	025c      	lsls	r4, r3, #9
 8000dd2:	0b24      	lsrs	r4, r4, #12
 8000dd4:	0d53      	lsrs	r3, r2, #21
 8000dd6:	e708      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000dd8:	4652      	mov	r2, sl
 8000dda:	4322      	orrs	r2, r4
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x2a4>
 8000dde:	e07b      	b.n	8000ed8 <__aeabi_ddiv+0x39c>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_ddiv+0x2aa>
 8000de4:	e0fa      	b.n	8000fdc <__aeabi_ddiv+0x4a0>
 8000de6:	0020      	movs	r0, r4
 8000de8:	f001 f90e 	bl	8002008 <__clzsi2>
 8000dec:	0002      	movs	r2, r0
 8000dee:	3a0b      	subs	r2, #11
 8000df0:	231d      	movs	r3, #29
 8000df2:	0001      	movs	r1, r0
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	4652      	mov	r2, sl
 8000df8:	3908      	subs	r1, #8
 8000dfa:	40da      	lsrs	r2, r3
 8000dfc:	408c      	lsls	r4, r1
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	4652      	mov	r2, sl
 8000e02:	408a      	lsls	r2, r1
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <__aeabi_ddiv+0x390>)
 8000e06:	4458      	add	r0, fp
 8000e08:	469b      	mov	fp, r3
 8000e0a:	4483      	add	fp, r0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e6d5      	b.n	8000bbc <__aeabi_ddiv+0x80>
 8000e10:	464b      	mov	r3, r9
 8000e12:	4323      	orrs	r3, r4
 8000e14:	4698      	mov	r8, r3
 8000e16:	d044      	beq.n	8000ea2 <__aeabi_ddiv+0x366>
 8000e18:	2c00      	cmp	r4, #0
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_ddiv+0x2e2>
 8000e1c:	e0ce      	b.n	8000fbc <__aeabi_ddiv+0x480>
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f001 f8f2 	bl	8002008 <__clzsi2>
 8000e24:	0001      	movs	r1, r0
 8000e26:	0002      	movs	r2, r0
 8000e28:	390b      	subs	r1, #11
 8000e2a:	231d      	movs	r3, #29
 8000e2c:	1a5b      	subs	r3, r3, r1
 8000e2e:	4649      	mov	r1, r9
 8000e30:	0010      	movs	r0, r2
 8000e32:	40d9      	lsrs	r1, r3
 8000e34:	3808      	subs	r0, #8
 8000e36:	4084      	lsls	r4, r0
 8000e38:	000b      	movs	r3, r1
 8000e3a:	464d      	mov	r5, r9
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	4698      	mov	r8, r3
 8000e40:	4085      	lsls	r5, r0
 8000e42:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <__aeabi_ddiv+0x394>)
 8000e44:	1a83      	subs	r3, r0, r2
 8000e46:	469b      	mov	fp, r3
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4699      	mov	r9, r3
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	e69a      	b.n	8000b86 <__aeabi_ddiv+0x4a>
 8000e50:	464b      	mov	r3, r9
 8000e52:	4323      	orrs	r3, r4
 8000e54:	4698      	mov	r8, r3
 8000e56:	d11d      	bne.n	8000e94 <__aeabi_ddiv+0x358>
 8000e58:	2308      	movs	r3, #8
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	3b06      	subs	r3, #6
 8000e5e:	2500      	movs	r5, #0
 8000e60:	4683      	mov	fp, r0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	e68f      	b.n	8000b86 <__aeabi_ddiv+0x4a>
 8000e66:	4652      	mov	r2, sl
 8000e68:	4322      	orrs	r2, r4
 8000e6a:	d109      	bne.n	8000e80 <__aeabi_ddiv+0x344>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	4649      	mov	r1, r9
 8000e70:	4319      	orrs	r1, r3
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <__aeabi_ddiv+0x398>)
 8000e74:	4689      	mov	r9, r1
 8000e76:	469c      	mov	ip, r3
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	44e3      	add	fp, ip
 8000e7e:	e69d      	b.n	8000bbc <__aeabi_ddiv+0x80>
 8000e80:	2303      	movs	r3, #3
 8000e82:	464a      	mov	r2, r9
 8000e84:	431a      	orrs	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <__aeabi_ddiv+0x398>)
 8000e88:	4691      	mov	r9, r2
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	4652      	mov	r2, sl
 8000e8e:	2003      	movs	r0, #3
 8000e90:	44e3      	add	fp, ip
 8000e92:	e693      	b.n	8000bbc <__aeabi_ddiv+0x80>
 8000e94:	230c      	movs	r3, #12
 8000e96:	4699      	mov	r9, r3
 8000e98:	3b09      	subs	r3, #9
 8000e9a:	46a0      	mov	r8, r4
 8000e9c:	4683      	mov	fp, r0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	e671      	b.n	8000b86 <__aeabi_ddiv+0x4a>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	469b      	mov	fp, r3
 8000eaa:	3301      	adds	r3, #1
 8000eac:	2500      	movs	r5, #0
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	e669      	b.n	8000b86 <__aeabi_ddiv+0x4a>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	fffffc01 	.word	0xfffffc01
 8000ebc:	080072b0 	.word	0x080072b0
 8000ec0:	000003ff 	.word	0x000003ff
 8000ec4:	feffffff 	.word	0xfeffffff
 8000ec8:	000007fe 	.word	0x000007fe
 8000ecc:	000003f3 	.word	0x000003f3
 8000ed0:	fffffc0d 	.word	0xfffffc0d
 8000ed4:	fffff801 	.word	0xfffff801
 8000ed8:	4649      	mov	r1, r9
 8000eda:	2301      	movs	r3, #1
 8000edc:	4319      	orrs	r1, r3
 8000ede:	4689      	mov	r9, r1
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e66a      	b.n	8000bbc <__aeabi_ddiv+0x80>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2480      	movs	r4, #128	; 0x80
 8000eea:	469a      	mov	sl, r3
 8000eec:	2500      	movs	r5, #0
 8000eee:	4b8a      	ldr	r3, [pc, #552]	; (8001118 <__aeabi_ddiv+0x5dc>)
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	e67a      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000ef4:	2501      	movs	r5, #1
 8000ef6:	426d      	negs	r5, r5
 8000ef8:	2301      	movs	r3, #1
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	2b38      	cmp	r3, #56	; 0x38
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_ddiv+0x3c6>
 8000f00:	e670      	b.n	8000be4 <__aeabi_ddiv+0xa8>
 8000f02:	2b1f      	cmp	r3, #31
 8000f04:	dc00      	bgt.n	8000f08 <__aeabi_ddiv+0x3cc>
 8000f06:	e0bf      	b.n	8001088 <__aeabi_ddiv+0x54c>
 8000f08:	211f      	movs	r1, #31
 8000f0a:	4249      	negs	r1, r1
 8000f0c:	1a8a      	subs	r2, r1, r2
 8000f0e:	4641      	mov	r1, r8
 8000f10:	40d1      	lsrs	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d004      	beq.n	8000f22 <__aeabi_ddiv+0x3e6>
 8000f18:	4641      	mov	r1, r8
 8000f1a:	4b80      	ldr	r3, [pc, #512]	; (800111c <__aeabi_ddiv+0x5e0>)
 8000f1c:	445b      	add	r3, fp
 8000f1e:	4099      	lsls	r1, r3
 8000f20:	430d      	orrs	r5, r1
 8000f22:	1e6b      	subs	r3, r5, #1
 8000f24:	419d      	sbcs	r5, r3
 8000f26:	2307      	movs	r3, #7
 8000f28:	432a      	orrs	r2, r5
 8000f2a:	001d      	movs	r5, r3
 8000f2c:	2400      	movs	r4, #0
 8000f2e:	4015      	ands	r5, r2
 8000f30:	4213      	tst	r3, r2
 8000f32:	d100      	bne.n	8000f36 <__aeabi_ddiv+0x3fa>
 8000f34:	e0d4      	b.n	80010e0 <__aeabi_ddiv+0x5a4>
 8000f36:	210f      	movs	r1, #15
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4011      	ands	r1, r2
 8000f3c:	2904      	cmp	r1, #4
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_ddiv+0x406>
 8000f40:	e0cb      	b.n	80010da <__aeabi_ddiv+0x59e>
 8000f42:	1d11      	adds	r1, r2, #4
 8000f44:	4291      	cmp	r1, r2
 8000f46:	4192      	sbcs	r2, r2
 8000f48:	4252      	negs	r2, r2
 8000f4a:	189b      	adds	r3, r3, r2
 8000f4c:	000a      	movs	r2, r1
 8000f4e:	0219      	lsls	r1, r3, #8
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_ddiv+0x418>
 8000f52:	e0c2      	b.n	80010da <__aeabi_ddiv+0x59e>
 8000f54:	2301      	movs	r3, #1
 8000f56:	2400      	movs	r4, #0
 8000f58:	2500      	movs	r5, #0
 8000f5a:	e646      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	4641      	mov	r1, r8
 8000f60:	031b      	lsls	r3, r3, #12
 8000f62:	4219      	tst	r1, r3
 8000f64:	d008      	beq.n	8000f78 <__aeabi_ddiv+0x43c>
 8000f66:	421c      	tst	r4, r3
 8000f68:	d106      	bne.n	8000f78 <__aeabi_ddiv+0x43c>
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	0324      	lsls	r4, r4, #12
 8000f6e:	46ba      	mov	sl, r7
 8000f70:	0015      	movs	r5, r2
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <__aeabi_ddiv+0x5dc>)
 8000f74:	0b24      	lsrs	r4, r4, #12
 8000f76:	e638      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000f78:	2480      	movs	r4, #128	; 0x80
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	431c      	orrs	r4, r3
 8000f80:	0324      	lsls	r4, r4, #12
 8000f82:	46b2      	mov	sl, r6
 8000f84:	4b64      	ldr	r3, [pc, #400]	; (8001118 <__aeabi_ddiv+0x5dc>)
 8000f86:	0b24      	lsrs	r4, r4, #12
 8000f88:	e62f      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x454>
 8000f8e:	e703      	b.n	8000d98 <__aeabi_ddiv+0x25c>
 8000f90:	19a6      	adds	r6, r4, r6
 8000f92:	1e68      	subs	r0, r5, #1
 8000f94:	42a6      	cmp	r6, r4
 8000f96:	d200      	bcs.n	8000f9a <__aeabi_ddiv+0x45e>
 8000f98:	e08d      	b.n	80010b6 <__aeabi_ddiv+0x57a>
 8000f9a:	428e      	cmp	r6, r1
 8000f9c:	d200      	bcs.n	8000fa0 <__aeabi_ddiv+0x464>
 8000f9e:	e0a3      	b.n	80010e8 <__aeabi_ddiv+0x5ac>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x468>
 8000fa2:	e0b3      	b.n	800110c <__aeabi_ddiv+0x5d0>
 8000fa4:	0005      	movs	r5, r0
 8000fa6:	e6f5      	b.n	8000d94 <__aeabi_ddiv+0x258>
 8000fa8:	42aa      	cmp	r2, r5
 8000faa:	d900      	bls.n	8000fae <__aeabi_ddiv+0x472>
 8000fac:	e639      	b.n	8000c22 <__aeabi_ddiv+0xe6>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	07de      	lsls	r6, r3, #31
 8000fb2:	0858      	lsrs	r0, r3, #1
 8000fb4:	086b      	lsrs	r3, r5, #1
 8000fb6:	431e      	orrs	r6, r3
 8000fb8:	07ed      	lsls	r5, r5, #31
 8000fba:	e639      	b.n	8000c30 <__aeabi_ddiv+0xf4>
 8000fbc:	4648      	mov	r0, r9
 8000fbe:	f001 f823 	bl	8002008 <__clzsi2>
 8000fc2:	0001      	movs	r1, r0
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	3115      	adds	r1, #21
 8000fc8:	3220      	adds	r2, #32
 8000fca:	291c      	cmp	r1, #28
 8000fcc:	dc00      	bgt.n	8000fd0 <__aeabi_ddiv+0x494>
 8000fce:	e72c      	b.n	8000e2a <__aeabi_ddiv+0x2ee>
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	3808      	subs	r0, #8
 8000fd4:	4083      	lsls	r3, r0
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	4698      	mov	r8, r3
 8000fda:	e732      	b.n	8000e42 <__aeabi_ddiv+0x306>
 8000fdc:	f001 f814 	bl	8002008 <__clzsi2>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	3215      	adds	r2, #21
 8000fe6:	3020      	adds	r0, #32
 8000fe8:	2a1c      	cmp	r2, #28
 8000fea:	dc00      	bgt.n	8000fee <__aeabi_ddiv+0x4b2>
 8000fec:	e700      	b.n	8000df0 <__aeabi_ddiv+0x2b4>
 8000fee:	4654      	mov	r4, sl
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	409c      	lsls	r4, r3
 8000ff6:	e705      	b.n	8000e04 <__aeabi_ddiv+0x2c8>
 8000ff8:	1936      	adds	r6, r6, r4
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	42b4      	cmp	r4, r6
 8000ffe:	d900      	bls.n	8001002 <__aeabi_ddiv+0x4c6>
 8001000:	e6a6      	b.n	8000d50 <__aeabi_ddiv+0x214>
 8001002:	42b2      	cmp	r2, r6
 8001004:	d800      	bhi.n	8001008 <__aeabi_ddiv+0x4cc>
 8001006:	e6a3      	b.n	8000d50 <__aeabi_ddiv+0x214>
 8001008:	1e83      	subs	r3, r0, #2
 800100a:	1936      	adds	r6, r6, r4
 800100c:	e6a0      	b.n	8000d50 <__aeabi_ddiv+0x214>
 800100e:	1909      	adds	r1, r1, r4
 8001010:	3d01      	subs	r5, #1
 8001012:	428c      	cmp	r4, r1
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x4dc>
 8001016:	e68d      	b.n	8000d34 <__aeabi_ddiv+0x1f8>
 8001018:	428a      	cmp	r2, r1
 800101a:	d800      	bhi.n	800101e <__aeabi_ddiv+0x4e2>
 800101c:	e68a      	b.n	8000d34 <__aeabi_ddiv+0x1f8>
 800101e:	1e85      	subs	r5, r0, #2
 8001020:	1909      	adds	r1, r1, r4
 8001022:	e687      	b.n	8000d34 <__aeabi_ddiv+0x1f8>
 8001024:	230f      	movs	r3, #15
 8001026:	402b      	ands	r3, r5
 8001028:	2b04      	cmp	r3, #4
 800102a:	d100      	bne.n	800102e <__aeabi_ddiv+0x4f2>
 800102c:	e6bc      	b.n	8000da8 <__aeabi_ddiv+0x26c>
 800102e:	2305      	movs	r3, #5
 8001030:	425b      	negs	r3, r3
 8001032:	42ab      	cmp	r3, r5
 8001034:	419b      	sbcs	r3, r3
 8001036:	3504      	adds	r5, #4
 8001038:	425b      	negs	r3, r3
 800103a:	08ed      	lsrs	r5, r5, #3
 800103c:	4498      	add	r8, r3
 800103e:	e6b4      	b.n	8000daa <__aeabi_ddiv+0x26e>
 8001040:	42af      	cmp	r7, r5
 8001042:	d900      	bls.n	8001046 <__aeabi_ddiv+0x50a>
 8001044:	e660      	b.n	8000d08 <__aeabi_ddiv+0x1cc>
 8001046:	4282      	cmp	r2, r0
 8001048:	d804      	bhi.n	8001054 <__aeabi_ddiv+0x518>
 800104a:	d000      	beq.n	800104e <__aeabi_ddiv+0x512>
 800104c:	e65c      	b.n	8000d08 <__aeabi_ddiv+0x1cc>
 800104e:	42ae      	cmp	r6, r5
 8001050:	d800      	bhi.n	8001054 <__aeabi_ddiv+0x518>
 8001052:	e659      	b.n	8000d08 <__aeabi_ddiv+0x1cc>
 8001054:	2302      	movs	r3, #2
 8001056:	425b      	negs	r3, r3
 8001058:	469c      	mov	ip, r3
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	44e0      	add	r8, ip
 800105e:	469c      	mov	ip, r3
 8001060:	4465      	add	r5, ip
 8001062:	429d      	cmp	r5, r3
 8001064:	419b      	sbcs	r3, r3
 8001066:	425b      	negs	r3, r3
 8001068:	191b      	adds	r3, r3, r4
 800106a:	18c0      	adds	r0, r0, r3
 800106c:	e64d      	b.n	8000d0a <__aeabi_ddiv+0x1ce>
 800106e:	428a      	cmp	r2, r1
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x538>
 8001072:	e60e      	b.n	8000c92 <__aeabi_ddiv+0x156>
 8001074:	1e83      	subs	r3, r0, #2
 8001076:	1909      	adds	r1, r1, r4
 8001078:	e60b      	b.n	8000c92 <__aeabi_ddiv+0x156>
 800107a:	428a      	cmp	r2, r1
 800107c:	d800      	bhi.n	8001080 <__aeabi_ddiv+0x544>
 800107e:	e5f4      	b.n	8000c6a <__aeabi_ddiv+0x12e>
 8001080:	1e83      	subs	r3, r0, #2
 8001082:	4698      	mov	r8, r3
 8001084:	1909      	adds	r1, r1, r4
 8001086:	e5f0      	b.n	8000c6a <__aeabi_ddiv+0x12e>
 8001088:	4925      	ldr	r1, [pc, #148]	; (8001120 <__aeabi_ddiv+0x5e4>)
 800108a:	0028      	movs	r0, r5
 800108c:	4459      	add	r1, fp
 800108e:	408d      	lsls	r5, r1
 8001090:	4642      	mov	r2, r8
 8001092:	408a      	lsls	r2, r1
 8001094:	1e69      	subs	r1, r5, #1
 8001096:	418d      	sbcs	r5, r1
 8001098:	4641      	mov	r1, r8
 800109a:	40d8      	lsrs	r0, r3
 800109c:	40d9      	lsrs	r1, r3
 800109e:	4302      	orrs	r2, r0
 80010a0:	432a      	orrs	r2, r5
 80010a2:	000b      	movs	r3, r1
 80010a4:	0751      	lsls	r1, r2, #29
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x56e>
 80010a8:	e751      	b.n	8000f4e <__aeabi_ddiv+0x412>
 80010aa:	210f      	movs	r1, #15
 80010ac:	4011      	ands	r1, r2
 80010ae:	2904      	cmp	r1, #4
 80010b0:	d000      	beq.n	80010b4 <__aeabi_ddiv+0x578>
 80010b2:	e746      	b.n	8000f42 <__aeabi_ddiv+0x406>
 80010b4:	e74b      	b.n	8000f4e <__aeabi_ddiv+0x412>
 80010b6:	0005      	movs	r5, r0
 80010b8:	428e      	cmp	r6, r1
 80010ba:	d000      	beq.n	80010be <__aeabi_ddiv+0x582>
 80010bc:	e66a      	b.n	8000d94 <__aeabi_ddiv+0x258>
 80010be:	9a00      	ldr	r2, [sp, #0]
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x58a>
 80010c4:	e666      	b.n	8000d94 <__aeabi_ddiv+0x258>
 80010c6:	e667      	b.n	8000d98 <__aeabi_ddiv+0x25c>
 80010c8:	4a16      	ldr	r2, [pc, #88]	; (8001124 <__aeabi_ddiv+0x5e8>)
 80010ca:	445a      	add	r2, fp
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	dc00      	bgt.n	80010d2 <__aeabi_ddiv+0x596>
 80010d0:	e710      	b.n	8000ef4 <__aeabi_ddiv+0x3b8>
 80010d2:	2301      	movs	r3, #1
 80010d4:	2500      	movs	r5, #0
 80010d6:	4498      	add	r8, r3
 80010d8:	e667      	b.n	8000daa <__aeabi_ddiv+0x26e>
 80010da:	075d      	lsls	r5, r3, #29
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	0b1c      	lsrs	r4, r3, #12
 80010e0:	08d2      	lsrs	r2, r2, #3
 80010e2:	2300      	movs	r3, #0
 80010e4:	4315      	orrs	r5, r2
 80010e6:	e580      	b.n	8000bea <__aeabi_ddiv+0xae>
 80010e8:	9800      	ldr	r0, [sp, #0]
 80010ea:	3d02      	subs	r5, #2
 80010ec:	0042      	lsls	r2, r0, #1
 80010ee:	4282      	cmp	r2, r0
 80010f0:	41bf      	sbcs	r7, r7
 80010f2:	427f      	negs	r7, r7
 80010f4:	193c      	adds	r4, r7, r4
 80010f6:	1936      	adds	r6, r6, r4
 80010f8:	9200      	str	r2, [sp, #0]
 80010fa:	e7dd      	b.n	80010b8 <__aeabi_ddiv+0x57c>
 80010fc:	2480      	movs	r4, #128	; 0x80
 80010fe:	4643      	mov	r3, r8
 8001100:	0324      	lsls	r4, r4, #12
 8001102:	431c      	orrs	r4, r3
 8001104:	0324      	lsls	r4, r4, #12
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__aeabi_ddiv+0x5dc>)
 8001108:	0b24      	lsrs	r4, r4, #12
 800110a:	e56e      	b.n	8000bea <__aeabi_ddiv+0xae>
 800110c:	9a00      	ldr	r2, [sp, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3ea      	bcc.n	80010e8 <__aeabi_ddiv+0x5ac>
 8001112:	0005      	movs	r5, r0
 8001114:	e7d3      	b.n	80010be <__aeabi_ddiv+0x582>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	000007ff 	.word	0x000007ff
 800111c:	0000043e 	.word	0x0000043e
 8001120:	0000041e 	.word	0x0000041e
 8001124:	000003ff 	.word	0x000003ff

08001128 <__eqdf2>:
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	464e      	mov	r6, r9
 800112c:	4645      	mov	r5, r8
 800112e:	46de      	mov	lr, fp
 8001130:	4657      	mov	r7, sl
 8001132:	4690      	mov	r8, r2
 8001134:	b5e0      	push	{r5, r6, r7, lr}
 8001136:	0017      	movs	r7, r2
 8001138:	031a      	lsls	r2, r3, #12
 800113a:	0b12      	lsrs	r2, r2, #12
 800113c:	0005      	movs	r5, r0
 800113e:	4684      	mov	ip, r0
 8001140:	4819      	ldr	r0, [pc, #100]	; (80011a8 <__eqdf2+0x80>)
 8001142:	030e      	lsls	r6, r1, #12
 8001144:	004c      	lsls	r4, r1, #1
 8001146:	4691      	mov	r9, r2
 8001148:	005a      	lsls	r2, r3, #1
 800114a:	0fdb      	lsrs	r3, r3, #31
 800114c:	469b      	mov	fp, r3
 800114e:	0b36      	lsrs	r6, r6, #12
 8001150:	0d64      	lsrs	r4, r4, #21
 8001152:	0fc9      	lsrs	r1, r1, #31
 8001154:	0d52      	lsrs	r2, r2, #21
 8001156:	4284      	cmp	r4, r0
 8001158:	d019      	beq.n	800118e <__eqdf2+0x66>
 800115a:	4282      	cmp	r2, r0
 800115c:	d010      	beq.n	8001180 <__eqdf2+0x58>
 800115e:	2001      	movs	r0, #1
 8001160:	4294      	cmp	r4, r2
 8001162:	d10e      	bne.n	8001182 <__eqdf2+0x5a>
 8001164:	454e      	cmp	r6, r9
 8001166:	d10c      	bne.n	8001182 <__eqdf2+0x5a>
 8001168:	2001      	movs	r0, #1
 800116a:	45c4      	cmp	ip, r8
 800116c:	d109      	bne.n	8001182 <__eqdf2+0x5a>
 800116e:	4559      	cmp	r1, fp
 8001170:	d017      	beq.n	80011a2 <__eqdf2+0x7a>
 8001172:	2c00      	cmp	r4, #0
 8001174:	d105      	bne.n	8001182 <__eqdf2+0x5a>
 8001176:	0030      	movs	r0, r6
 8001178:	4328      	orrs	r0, r5
 800117a:	1e43      	subs	r3, r0, #1
 800117c:	4198      	sbcs	r0, r3
 800117e:	e000      	b.n	8001182 <__eqdf2+0x5a>
 8001180:	2001      	movs	r0, #1
 8001182:	bcf0      	pop	{r4, r5, r6, r7}
 8001184:	46bb      	mov	fp, r7
 8001186:	46b2      	mov	sl, r6
 8001188:	46a9      	mov	r9, r5
 800118a:	46a0      	mov	r8, r4
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	0033      	movs	r3, r6
 8001190:	2001      	movs	r0, #1
 8001192:	432b      	orrs	r3, r5
 8001194:	d1f5      	bne.n	8001182 <__eqdf2+0x5a>
 8001196:	42a2      	cmp	r2, r4
 8001198:	d1f3      	bne.n	8001182 <__eqdf2+0x5a>
 800119a:	464b      	mov	r3, r9
 800119c:	433b      	orrs	r3, r7
 800119e:	d1f0      	bne.n	8001182 <__eqdf2+0x5a>
 80011a0:	e7e2      	b.n	8001168 <__eqdf2+0x40>
 80011a2:	2000      	movs	r0, #0
 80011a4:	e7ed      	b.n	8001182 <__eqdf2+0x5a>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	000007ff 	.word	0x000007ff

080011ac <__gedf2>:
 80011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ae:	4647      	mov	r7, r8
 80011b0:	46ce      	mov	lr, r9
 80011b2:	0004      	movs	r4, r0
 80011b4:	0018      	movs	r0, r3
 80011b6:	0016      	movs	r6, r2
 80011b8:	031b      	lsls	r3, r3, #12
 80011ba:	0b1b      	lsrs	r3, r3, #12
 80011bc:	4d2d      	ldr	r5, [pc, #180]	; (8001274 <__gedf2+0xc8>)
 80011be:	004a      	lsls	r2, r1, #1
 80011c0:	4699      	mov	r9, r3
 80011c2:	b580      	push	{r7, lr}
 80011c4:	0043      	lsls	r3, r0, #1
 80011c6:	030f      	lsls	r7, r1, #12
 80011c8:	46a4      	mov	ip, r4
 80011ca:	46b0      	mov	r8, r6
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d52      	lsrs	r2, r2, #21
 80011d0:	0fc9      	lsrs	r1, r1, #31
 80011d2:	0d5b      	lsrs	r3, r3, #21
 80011d4:	0fc0      	lsrs	r0, r0, #31
 80011d6:	42aa      	cmp	r2, r5
 80011d8:	d021      	beq.n	800121e <__gedf2+0x72>
 80011da:	42ab      	cmp	r3, r5
 80011dc:	d013      	beq.n	8001206 <__gedf2+0x5a>
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d122      	bne.n	8001228 <__gedf2+0x7c>
 80011e2:	433c      	orrs	r4, r7
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <__gedf2+0x42>
 80011e8:	464d      	mov	r5, r9
 80011ea:	432e      	orrs	r6, r5
 80011ec:	d022      	beq.n	8001234 <__gedf2+0x88>
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	d010      	beq.n	8001214 <__gedf2+0x68>
 80011f2:	4281      	cmp	r1, r0
 80011f4:	d022      	beq.n	800123c <__gedf2+0x90>
 80011f6:	2002      	movs	r0, #2
 80011f8:	3901      	subs	r1, #1
 80011fa:	4008      	ands	r0, r1
 80011fc:	3801      	subs	r0, #1
 80011fe:	bcc0      	pop	{r6, r7}
 8001200:	46b9      	mov	r9, r7
 8001202:	46b0      	mov	r8, r6
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	464d      	mov	r5, r9
 8001208:	432e      	orrs	r6, r5
 800120a:	d129      	bne.n	8001260 <__gedf2+0xb4>
 800120c:	2a00      	cmp	r2, #0
 800120e:	d1f0      	bne.n	80011f2 <__gedf2+0x46>
 8001210:	433c      	orrs	r4, r7
 8001212:	d1ee      	bne.n	80011f2 <__gedf2+0x46>
 8001214:	2800      	cmp	r0, #0
 8001216:	d1f2      	bne.n	80011fe <__gedf2+0x52>
 8001218:	2001      	movs	r0, #1
 800121a:	4240      	negs	r0, r0
 800121c:	e7ef      	b.n	80011fe <__gedf2+0x52>
 800121e:	003d      	movs	r5, r7
 8001220:	4325      	orrs	r5, r4
 8001222:	d11d      	bne.n	8001260 <__gedf2+0xb4>
 8001224:	4293      	cmp	r3, r2
 8001226:	d0ee      	beq.n	8001206 <__gedf2+0x5a>
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e2      	bne.n	80011f2 <__gedf2+0x46>
 800122c:	464c      	mov	r4, r9
 800122e:	4326      	orrs	r6, r4
 8001230:	d1df      	bne.n	80011f2 <__gedf2+0x46>
 8001232:	e7e0      	b.n	80011f6 <__gedf2+0x4a>
 8001234:	2000      	movs	r0, #0
 8001236:	2c00      	cmp	r4, #0
 8001238:	d0e1      	beq.n	80011fe <__gedf2+0x52>
 800123a:	e7dc      	b.n	80011f6 <__gedf2+0x4a>
 800123c:	429a      	cmp	r2, r3
 800123e:	dc0a      	bgt.n	8001256 <__gedf2+0xaa>
 8001240:	dbe8      	blt.n	8001214 <__gedf2+0x68>
 8001242:	454f      	cmp	r7, r9
 8001244:	d8d7      	bhi.n	80011f6 <__gedf2+0x4a>
 8001246:	d00e      	beq.n	8001266 <__gedf2+0xba>
 8001248:	2000      	movs	r0, #0
 800124a:	454f      	cmp	r7, r9
 800124c:	d2d7      	bcs.n	80011fe <__gedf2+0x52>
 800124e:	2900      	cmp	r1, #0
 8001250:	d0e2      	beq.n	8001218 <__gedf2+0x6c>
 8001252:	0008      	movs	r0, r1
 8001254:	e7d3      	b.n	80011fe <__gedf2+0x52>
 8001256:	4243      	negs	r3, r0
 8001258:	4158      	adcs	r0, r3
 800125a:	0040      	lsls	r0, r0, #1
 800125c:	3801      	subs	r0, #1
 800125e:	e7ce      	b.n	80011fe <__gedf2+0x52>
 8001260:	2002      	movs	r0, #2
 8001262:	4240      	negs	r0, r0
 8001264:	e7cb      	b.n	80011fe <__gedf2+0x52>
 8001266:	45c4      	cmp	ip, r8
 8001268:	d8c5      	bhi.n	80011f6 <__gedf2+0x4a>
 800126a:	2000      	movs	r0, #0
 800126c:	45c4      	cmp	ip, r8
 800126e:	d2c6      	bcs.n	80011fe <__gedf2+0x52>
 8001270:	e7ed      	b.n	800124e <__gedf2+0xa2>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	000007ff 	.word	0x000007ff

08001278 <__ledf2>:
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	4647      	mov	r7, r8
 800127c:	46ce      	mov	lr, r9
 800127e:	0004      	movs	r4, r0
 8001280:	0018      	movs	r0, r3
 8001282:	0016      	movs	r6, r2
 8001284:	031b      	lsls	r3, r3, #12
 8001286:	0b1b      	lsrs	r3, r3, #12
 8001288:	4d2c      	ldr	r5, [pc, #176]	; (800133c <__ledf2+0xc4>)
 800128a:	004a      	lsls	r2, r1, #1
 800128c:	4699      	mov	r9, r3
 800128e:	b580      	push	{r7, lr}
 8001290:	0043      	lsls	r3, r0, #1
 8001292:	030f      	lsls	r7, r1, #12
 8001294:	46a4      	mov	ip, r4
 8001296:	46b0      	mov	r8, r6
 8001298:	0b3f      	lsrs	r7, r7, #12
 800129a:	0d52      	lsrs	r2, r2, #21
 800129c:	0fc9      	lsrs	r1, r1, #31
 800129e:	0d5b      	lsrs	r3, r3, #21
 80012a0:	0fc0      	lsrs	r0, r0, #31
 80012a2:	42aa      	cmp	r2, r5
 80012a4:	d00d      	beq.n	80012c2 <__ledf2+0x4a>
 80012a6:	42ab      	cmp	r3, r5
 80012a8:	d010      	beq.n	80012cc <__ledf2+0x54>
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d127      	bne.n	80012fe <__ledf2+0x86>
 80012ae:	433c      	orrs	r4, r7
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d111      	bne.n	80012d8 <__ledf2+0x60>
 80012b4:	464d      	mov	r5, r9
 80012b6:	432e      	orrs	r6, r5
 80012b8:	d10e      	bne.n	80012d8 <__ledf2+0x60>
 80012ba:	2000      	movs	r0, #0
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d015      	beq.n	80012ec <__ledf2+0x74>
 80012c0:	e00e      	b.n	80012e0 <__ledf2+0x68>
 80012c2:	003d      	movs	r5, r7
 80012c4:	4325      	orrs	r5, r4
 80012c6:	d110      	bne.n	80012ea <__ledf2+0x72>
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d118      	bne.n	80012fe <__ledf2+0x86>
 80012cc:	464d      	mov	r5, r9
 80012ce:	432e      	orrs	r6, r5
 80012d0:	d10b      	bne.n	80012ea <__ledf2+0x72>
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d102      	bne.n	80012dc <__ledf2+0x64>
 80012d6:	433c      	orrs	r4, r7
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d00b      	beq.n	80012f4 <__ledf2+0x7c>
 80012dc:	4281      	cmp	r1, r0
 80012de:	d014      	beq.n	800130a <__ledf2+0x92>
 80012e0:	2002      	movs	r0, #2
 80012e2:	3901      	subs	r1, #1
 80012e4:	4008      	ands	r0, r1
 80012e6:	3801      	subs	r0, #1
 80012e8:	e000      	b.n	80012ec <__ledf2+0x74>
 80012ea:	2002      	movs	r0, #2
 80012ec:	bcc0      	pop	{r6, r7}
 80012ee:	46b9      	mov	r9, r7
 80012f0:	46b0      	mov	r8, r6
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d1f9      	bne.n	80012ec <__ledf2+0x74>
 80012f8:	2001      	movs	r0, #1
 80012fa:	4240      	negs	r0, r0
 80012fc:	e7f6      	b.n	80012ec <__ledf2+0x74>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1ec      	bne.n	80012dc <__ledf2+0x64>
 8001302:	464c      	mov	r4, r9
 8001304:	4326      	orrs	r6, r4
 8001306:	d1e9      	bne.n	80012dc <__ledf2+0x64>
 8001308:	e7ea      	b.n	80012e0 <__ledf2+0x68>
 800130a:	429a      	cmp	r2, r3
 800130c:	dd04      	ble.n	8001318 <__ledf2+0xa0>
 800130e:	4243      	negs	r3, r0
 8001310:	4158      	adcs	r0, r3
 8001312:	0040      	lsls	r0, r0, #1
 8001314:	3801      	subs	r0, #1
 8001316:	e7e9      	b.n	80012ec <__ledf2+0x74>
 8001318:	429a      	cmp	r2, r3
 800131a:	dbeb      	blt.n	80012f4 <__ledf2+0x7c>
 800131c:	454f      	cmp	r7, r9
 800131e:	d8df      	bhi.n	80012e0 <__ledf2+0x68>
 8001320:	d006      	beq.n	8001330 <__ledf2+0xb8>
 8001322:	2000      	movs	r0, #0
 8001324:	454f      	cmp	r7, r9
 8001326:	d2e1      	bcs.n	80012ec <__ledf2+0x74>
 8001328:	2900      	cmp	r1, #0
 800132a:	d0e5      	beq.n	80012f8 <__ledf2+0x80>
 800132c:	0008      	movs	r0, r1
 800132e:	e7dd      	b.n	80012ec <__ledf2+0x74>
 8001330:	45c4      	cmp	ip, r8
 8001332:	d8d5      	bhi.n	80012e0 <__ledf2+0x68>
 8001334:	2000      	movs	r0, #0
 8001336:	45c4      	cmp	ip, r8
 8001338:	d2d8      	bcs.n	80012ec <__ledf2+0x74>
 800133a:	e7f5      	b.n	8001328 <__ledf2+0xb0>
 800133c:	000007ff 	.word	0x000007ff

08001340 <__aeabi_dmul>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	4657      	mov	r7, sl
 8001344:	464e      	mov	r6, r9
 8001346:	4645      	mov	r5, r8
 8001348:	46de      	mov	lr, fp
 800134a:	b5e0      	push	{r5, r6, r7, lr}
 800134c:	4698      	mov	r8, r3
 800134e:	030c      	lsls	r4, r1, #12
 8001350:	004b      	lsls	r3, r1, #1
 8001352:	0006      	movs	r6, r0
 8001354:	4692      	mov	sl, r2
 8001356:	b087      	sub	sp, #28
 8001358:	0b24      	lsrs	r4, r4, #12
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	0fcf      	lsrs	r7, r1, #31
 800135e:	2b00      	cmp	r3, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_dmul+0x24>
 8001362:	e15c      	b.n	800161e <__aeabi_dmul+0x2de>
 8001364:	4ad9      	ldr	r2, [pc, #868]	; (80016cc <__aeabi_dmul+0x38c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d100      	bne.n	800136c <__aeabi_dmul+0x2c>
 800136a:	e175      	b.n	8001658 <__aeabi_dmul+0x318>
 800136c:	0f42      	lsrs	r2, r0, #29
 800136e:	00e4      	lsls	r4, r4, #3
 8001370:	4314      	orrs	r4, r2
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	0412      	lsls	r2, r2, #16
 8001376:	4314      	orrs	r4, r2
 8001378:	4ad5      	ldr	r2, [pc, #852]	; (80016d0 <__aeabi_dmul+0x390>)
 800137a:	00c5      	lsls	r5, r0, #3
 800137c:	4694      	mov	ip, r2
 800137e:	4463      	add	r3, ip
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	4699      	mov	r9, r3
 8001386:	469b      	mov	fp, r3
 8001388:	4643      	mov	r3, r8
 800138a:	4642      	mov	r2, r8
 800138c:	031e      	lsls	r6, r3, #12
 800138e:	0fd2      	lsrs	r2, r2, #31
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4650      	mov	r0, sl
 8001394:	4690      	mov	r8, r2
 8001396:	0b36      	lsrs	r6, r6, #12
 8001398:	0d5b      	lsrs	r3, r3, #21
 800139a:	d100      	bne.n	800139e <__aeabi_dmul+0x5e>
 800139c:	e120      	b.n	80015e0 <__aeabi_dmul+0x2a0>
 800139e:	4acb      	ldr	r2, [pc, #812]	; (80016cc <__aeabi_dmul+0x38c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dmul+0x66>
 80013a4:	e162      	b.n	800166c <__aeabi_dmul+0x32c>
 80013a6:	49ca      	ldr	r1, [pc, #808]	; (80016d0 <__aeabi_dmul+0x390>)
 80013a8:	0f42      	lsrs	r2, r0, #29
 80013aa:	468c      	mov	ip, r1
 80013ac:	9900      	ldr	r1, [sp, #0]
 80013ae:	4463      	add	r3, ip
 80013b0:	00f6      	lsls	r6, r6, #3
 80013b2:	468c      	mov	ip, r1
 80013b4:	4316      	orrs	r6, r2
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	449c      	add	ip, r3
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4663      	mov	r3, ip
 80013be:	4316      	orrs	r6, r2
 80013c0:	00c2      	lsls	r2, r0, #3
 80013c2:	2000      	movs	r0, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	9900      	ldr	r1, [sp, #0]
 80013c8:	4643      	mov	r3, r8
 80013ca:	3101      	adds	r1, #1
 80013cc:	468c      	mov	ip, r1
 80013ce:	4649      	mov	r1, r9
 80013d0:	407b      	eors	r3, r7
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	290f      	cmp	r1, #15
 80013d6:	d826      	bhi.n	8001426 <__aeabi_dmul+0xe6>
 80013d8:	4bbe      	ldr	r3, [pc, #760]	; (80016d4 <__aeabi_dmul+0x394>)
 80013da:	0089      	lsls	r1, r1, #2
 80013dc:	5859      	ldr	r1, [r3, r1]
 80013de:	468f      	mov	pc, r1
 80013e0:	4643      	mov	r3, r8
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	0034      	movs	r4, r6
 80013e6:	0015      	movs	r5, r2
 80013e8:	4683      	mov	fp, r0
 80013ea:	465b      	mov	r3, fp
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d016      	beq.n	800141e <__aeabi_dmul+0xde>
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0xb6>
 80013f4:	e203      	b.n	80017fe <__aeabi_dmul+0x4be>
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d000      	beq.n	80013fc <__aeabi_dmul+0xbc>
 80013fa:	e0cd      	b.n	8001598 <__aeabi_dmul+0x258>
 80013fc:	2200      	movs	r2, #0
 80013fe:	2400      	movs	r4, #0
 8001400:	2500      	movs	r5, #0
 8001402:	9b01      	ldr	r3, [sp, #4]
 8001404:	0512      	lsls	r2, r2, #20
 8001406:	4322      	orrs	r2, r4
 8001408:	07db      	lsls	r3, r3, #31
 800140a:	431a      	orrs	r2, r3
 800140c:	0028      	movs	r0, r5
 800140e:	0011      	movs	r1, r2
 8001410:	b007      	add	sp, #28
 8001412:	bcf0      	pop	{r4, r5, r6, r7}
 8001414:	46bb      	mov	fp, r7
 8001416:	46b2      	mov	sl, r6
 8001418:	46a9      	mov	r9, r5
 800141a:	46a0      	mov	r8, r4
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	2400      	movs	r4, #0
 8001420:	2500      	movs	r5, #0
 8001422:	4aaa      	ldr	r2, [pc, #680]	; (80016cc <__aeabi_dmul+0x38c>)
 8001424:	e7ed      	b.n	8001402 <__aeabi_dmul+0xc2>
 8001426:	0c28      	lsrs	r0, r5, #16
 8001428:	042d      	lsls	r5, r5, #16
 800142a:	0c2d      	lsrs	r5, r5, #16
 800142c:	002b      	movs	r3, r5
 800142e:	0c11      	lsrs	r1, r2, #16
 8001430:	0412      	lsls	r2, r2, #16
 8001432:	0c12      	lsrs	r2, r2, #16
 8001434:	4353      	muls	r3, r2
 8001436:	4698      	mov	r8, r3
 8001438:	0013      	movs	r3, r2
 800143a:	002f      	movs	r7, r5
 800143c:	4343      	muls	r3, r0
 800143e:	4699      	mov	r9, r3
 8001440:	434f      	muls	r7, r1
 8001442:	444f      	add	r7, r9
 8001444:	46bb      	mov	fp, r7
 8001446:	4647      	mov	r7, r8
 8001448:	000b      	movs	r3, r1
 800144a:	0c3f      	lsrs	r7, r7, #16
 800144c:	46ba      	mov	sl, r7
 800144e:	4343      	muls	r3, r0
 8001450:	44da      	add	sl, fp
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	45d1      	cmp	r9, sl
 8001456:	d904      	bls.n	8001462 <__aeabi_dmul+0x122>
 8001458:	2780      	movs	r7, #128	; 0x80
 800145a:	027f      	lsls	r7, r7, #9
 800145c:	46b9      	mov	r9, r7
 800145e:	444b      	add	r3, r9
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	4653      	mov	r3, sl
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	469b      	mov	fp, r3
 8001468:	4653      	mov	r3, sl
 800146a:	041f      	lsls	r7, r3, #16
 800146c:	4643      	mov	r3, r8
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	4698      	mov	r8, r3
 8001474:	003b      	movs	r3, r7
 8001476:	4443      	add	r3, r8
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	0c33      	lsrs	r3, r6, #16
 800147c:	0436      	lsls	r6, r6, #16
 800147e:	0c36      	lsrs	r6, r6, #16
 8001480:	4698      	mov	r8, r3
 8001482:	0033      	movs	r3, r6
 8001484:	4343      	muls	r3, r0
 8001486:	4699      	mov	r9, r3
 8001488:	4643      	mov	r3, r8
 800148a:	4343      	muls	r3, r0
 800148c:	002f      	movs	r7, r5
 800148e:	469a      	mov	sl, r3
 8001490:	4643      	mov	r3, r8
 8001492:	4377      	muls	r7, r6
 8001494:	435d      	muls	r5, r3
 8001496:	0c38      	lsrs	r0, r7, #16
 8001498:	444d      	add	r5, r9
 800149a:	1945      	adds	r5, r0, r5
 800149c:	45a9      	cmp	r9, r5
 800149e:	d903      	bls.n	80014a8 <__aeabi_dmul+0x168>
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	4699      	mov	r9, r3
 80014a6:	44ca      	add	sl, r9
 80014a8:	043f      	lsls	r7, r7, #16
 80014aa:	0c28      	lsrs	r0, r5, #16
 80014ac:	0c3f      	lsrs	r7, r7, #16
 80014ae:	042d      	lsls	r5, r5, #16
 80014b0:	19ed      	adds	r5, r5, r7
 80014b2:	0c27      	lsrs	r7, r4, #16
 80014b4:	0424      	lsls	r4, r4, #16
 80014b6:	0c24      	lsrs	r4, r4, #16
 80014b8:	0003      	movs	r3, r0
 80014ba:	0020      	movs	r0, r4
 80014bc:	4350      	muls	r0, r2
 80014be:	437a      	muls	r2, r7
 80014c0:	4691      	mov	r9, r2
 80014c2:	003a      	movs	r2, r7
 80014c4:	4453      	add	r3, sl
 80014c6:	9305      	str	r3, [sp, #20]
 80014c8:	0c03      	lsrs	r3, r0, #16
 80014ca:	469a      	mov	sl, r3
 80014cc:	434a      	muls	r2, r1
 80014ce:	4361      	muls	r1, r4
 80014d0:	4449      	add	r1, r9
 80014d2:	4451      	add	r1, sl
 80014d4:	44ab      	add	fp, r5
 80014d6:	4589      	cmp	r9, r1
 80014d8:	d903      	bls.n	80014e2 <__aeabi_dmul+0x1a2>
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	025b      	lsls	r3, r3, #9
 80014de:	4699      	mov	r9, r3
 80014e0:	444a      	add	r2, r9
 80014e2:	0400      	lsls	r0, r0, #16
 80014e4:	0c0b      	lsrs	r3, r1, #16
 80014e6:	0c00      	lsrs	r0, r0, #16
 80014e8:	0409      	lsls	r1, r1, #16
 80014ea:	1809      	adds	r1, r1, r0
 80014ec:	0020      	movs	r0, r4
 80014ee:	4699      	mov	r9, r3
 80014f0:	4643      	mov	r3, r8
 80014f2:	4370      	muls	r0, r6
 80014f4:	435c      	muls	r4, r3
 80014f6:	437e      	muls	r6, r7
 80014f8:	435f      	muls	r7, r3
 80014fa:	0c03      	lsrs	r3, r0, #16
 80014fc:	4698      	mov	r8, r3
 80014fe:	19a4      	adds	r4, r4, r6
 8001500:	4444      	add	r4, r8
 8001502:	444a      	add	r2, r9
 8001504:	9703      	str	r7, [sp, #12]
 8001506:	42a6      	cmp	r6, r4
 8001508:	d904      	bls.n	8001514 <__aeabi_dmul+0x1d4>
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4698      	mov	r8, r3
 8001510:	4447      	add	r7, r8
 8001512:	9703      	str	r7, [sp, #12]
 8001514:	0423      	lsls	r3, r4, #16
 8001516:	9e02      	ldr	r6, [sp, #8]
 8001518:	469a      	mov	sl, r3
 800151a:	9b05      	ldr	r3, [sp, #20]
 800151c:	445e      	add	r6, fp
 800151e:	4698      	mov	r8, r3
 8001520:	42ae      	cmp	r6, r5
 8001522:	41ad      	sbcs	r5, r5
 8001524:	1876      	adds	r6, r6, r1
 8001526:	428e      	cmp	r6, r1
 8001528:	4189      	sbcs	r1, r1
 800152a:	0400      	lsls	r0, r0, #16
 800152c:	0c00      	lsrs	r0, r0, #16
 800152e:	4450      	add	r0, sl
 8001530:	4440      	add	r0, r8
 8001532:	426d      	negs	r5, r5
 8001534:	1947      	adds	r7, r0, r5
 8001536:	46b8      	mov	r8, r7
 8001538:	4693      	mov	fp, r2
 800153a:	4249      	negs	r1, r1
 800153c:	4689      	mov	r9, r1
 800153e:	44c3      	add	fp, r8
 8001540:	44d9      	add	r9, fp
 8001542:	4298      	cmp	r0, r3
 8001544:	4180      	sbcs	r0, r0
 8001546:	45a8      	cmp	r8, r5
 8001548:	41ad      	sbcs	r5, r5
 800154a:	4593      	cmp	fp, r2
 800154c:	4192      	sbcs	r2, r2
 800154e:	4589      	cmp	r9, r1
 8001550:	4189      	sbcs	r1, r1
 8001552:	426d      	negs	r5, r5
 8001554:	4240      	negs	r0, r0
 8001556:	4328      	orrs	r0, r5
 8001558:	0c24      	lsrs	r4, r4, #16
 800155a:	4252      	negs	r2, r2
 800155c:	4249      	negs	r1, r1
 800155e:	430a      	orrs	r2, r1
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	1900      	adds	r0, r0, r4
 8001564:	1880      	adds	r0, r0, r2
 8001566:	18c7      	adds	r7, r0, r3
 8001568:	464b      	mov	r3, r9
 800156a:	0ddc      	lsrs	r4, r3, #23
 800156c:	9b04      	ldr	r3, [sp, #16]
 800156e:	0275      	lsls	r5, r6, #9
 8001570:	431d      	orrs	r5, r3
 8001572:	1e6a      	subs	r2, r5, #1
 8001574:	4195      	sbcs	r5, r2
 8001576:	464b      	mov	r3, r9
 8001578:	0df6      	lsrs	r6, r6, #23
 800157a:	027f      	lsls	r7, r7, #9
 800157c:	4335      	orrs	r5, r6
 800157e:	025a      	lsls	r2, r3, #9
 8001580:	433c      	orrs	r4, r7
 8001582:	4315      	orrs	r5, r2
 8001584:	01fb      	lsls	r3, r7, #7
 8001586:	d400      	bmi.n	800158a <__aeabi_dmul+0x24a>
 8001588:	e11c      	b.n	80017c4 <__aeabi_dmul+0x484>
 800158a:	2101      	movs	r1, #1
 800158c:	086a      	lsrs	r2, r5, #1
 800158e:	400d      	ands	r5, r1
 8001590:	4315      	orrs	r5, r2
 8001592:	07e2      	lsls	r2, r4, #31
 8001594:	4315      	orrs	r5, r2
 8001596:	0864      	lsrs	r4, r4, #1
 8001598:	494f      	ldr	r1, [pc, #316]	; (80016d8 <__aeabi_dmul+0x398>)
 800159a:	4461      	add	r1, ip
 800159c:	2900      	cmp	r1, #0
 800159e:	dc00      	bgt.n	80015a2 <__aeabi_dmul+0x262>
 80015a0:	e0b0      	b.n	8001704 <__aeabi_dmul+0x3c4>
 80015a2:	076b      	lsls	r3, r5, #29
 80015a4:	d009      	beq.n	80015ba <__aeabi_dmul+0x27a>
 80015a6:	220f      	movs	r2, #15
 80015a8:	402a      	ands	r2, r5
 80015aa:	2a04      	cmp	r2, #4
 80015ac:	d005      	beq.n	80015ba <__aeabi_dmul+0x27a>
 80015ae:	1d2a      	adds	r2, r5, #4
 80015b0:	42aa      	cmp	r2, r5
 80015b2:	41ad      	sbcs	r5, r5
 80015b4:	426d      	negs	r5, r5
 80015b6:	1964      	adds	r4, r4, r5
 80015b8:	0015      	movs	r5, r2
 80015ba:	01e3      	lsls	r3, r4, #7
 80015bc:	d504      	bpl.n	80015c8 <__aeabi_dmul+0x288>
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	4a46      	ldr	r2, [pc, #280]	; (80016dc <__aeabi_dmul+0x39c>)
 80015c2:	00c9      	lsls	r1, r1, #3
 80015c4:	4014      	ands	r4, r2
 80015c6:	4461      	add	r1, ip
 80015c8:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <__aeabi_dmul+0x3a0>)
 80015ca:	4291      	cmp	r1, r2
 80015cc:	dd00      	ble.n	80015d0 <__aeabi_dmul+0x290>
 80015ce:	e726      	b.n	800141e <__aeabi_dmul+0xde>
 80015d0:	0762      	lsls	r2, r4, #29
 80015d2:	08ed      	lsrs	r5, r5, #3
 80015d4:	0264      	lsls	r4, r4, #9
 80015d6:	0549      	lsls	r1, r1, #21
 80015d8:	4315      	orrs	r5, r2
 80015da:	0b24      	lsrs	r4, r4, #12
 80015dc:	0d4a      	lsrs	r2, r1, #21
 80015de:	e710      	b.n	8001402 <__aeabi_dmul+0xc2>
 80015e0:	4652      	mov	r2, sl
 80015e2:	4332      	orrs	r2, r6
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dmul+0x2a8>
 80015e6:	e07f      	b.n	80016e8 <__aeabi_dmul+0x3a8>
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x2ae>
 80015ec:	e0dc      	b.n	80017a8 <__aeabi_dmul+0x468>
 80015ee:	0030      	movs	r0, r6
 80015f0:	f000 fd0a 	bl	8002008 <__clzsi2>
 80015f4:	0002      	movs	r2, r0
 80015f6:	3a0b      	subs	r2, #11
 80015f8:	231d      	movs	r3, #29
 80015fa:	0001      	movs	r1, r0
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	4652      	mov	r2, sl
 8001600:	3908      	subs	r1, #8
 8001602:	40da      	lsrs	r2, r3
 8001604:	408e      	lsls	r6, r1
 8001606:	4316      	orrs	r6, r2
 8001608:	4652      	mov	r2, sl
 800160a:	408a      	lsls	r2, r1
 800160c:	9b00      	ldr	r3, [sp, #0]
 800160e:	4935      	ldr	r1, [pc, #212]	; (80016e4 <__aeabi_dmul+0x3a4>)
 8001610:	1a18      	subs	r0, r3, r0
 8001612:	0003      	movs	r3, r0
 8001614:	468c      	mov	ip, r1
 8001616:	4463      	add	r3, ip
 8001618:	2000      	movs	r0, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	e6d3      	b.n	80013c6 <__aeabi_dmul+0x86>
 800161e:	0025      	movs	r5, r4
 8001620:	4305      	orrs	r5, r0
 8001622:	d04a      	beq.n	80016ba <__aeabi_dmul+0x37a>
 8001624:	2c00      	cmp	r4, #0
 8001626:	d100      	bne.n	800162a <__aeabi_dmul+0x2ea>
 8001628:	e0b0      	b.n	800178c <__aeabi_dmul+0x44c>
 800162a:	0020      	movs	r0, r4
 800162c:	f000 fcec 	bl	8002008 <__clzsi2>
 8001630:	0001      	movs	r1, r0
 8001632:	0002      	movs	r2, r0
 8001634:	390b      	subs	r1, #11
 8001636:	231d      	movs	r3, #29
 8001638:	0010      	movs	r0, r2
 800163a:	1a5b      	subs	r3, r3, r1
 800163c:	0031      	movs	r1, r6
 800163e:	0035      	movs	r5, r6
 8001640:	3808      	subs	r0, #8
 8001642:	4084      	lsls	r4, r0
 8001644:	40d9      	lsrs	r1, r3
 8001646:	4085      	lsls	r5, r0
 8001648:	430c      	orrs	r4, r1
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <__aeabi_dmul+0x3a4>)
 800164c:	1a83      	subs	r3, r0, r2
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	469b      	mov	fp, r3
 8001656:	e697      	b.n	8001388 <__aeabi_dmul+0x48>
 8001658:	0005      	movs	r5, r0
 800165a:	4325      	orrs	r5, r4
 800165c:	d126      	bne.n	80016ac <__aeabi_dmul+0x36c>
 800165e:	2208      	movs	r2, #8
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2302      	movs	r3, #2
 8001664:	2400      	movs	r4, #0
 8001666:	4691      	mov	r9, r2
 8001668:	469b      	mov	fp, r3
 800166a:	e68d      	b.n	8001388 <__aeabi_dmul+0x48>
 800166c:	4652      	mov	r2, sl
 800166e:	9b00      	ldr	r3, [sp, #0]
 8001670:	4332      	orrs	r2, r6
 8001672:	d110      	bne.n	8001696 <__aeabi_dmul+0x356>
 8001674:	4915      	ldr	r1, [pc, #84]	; (80016cc <__aeabi_dmul+0x38c>)
 8001676:	2600      	movs	r6, #0
 8001678:	468c      	mov	ip, r1
 800167a:	4463      	add	r3, ip
 800167c:	4649      	mov	r1, r9
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2302      	movs	r3, #2
 8001682:	4319      	orrs	r1, r3
 8001684:	4689      	mov	r9, r1
 8001686:	2002      	movs	r0, #2
 8001688:	e69d      	b.n	80013c6 <__aeabi_dmul+0x86>
 800168a:	465b      	mov	r3, fp
 800168c:	9701      	str	r7, [sp, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0x354>
 8001692:	e6ad      	b.n	80013f0 <__aeabi_dmul+0xb0>
 8001694:	e6c3      	b.n	800141e <__aeabi_dmul+0xde>
 8001696:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <__aeabi_dmul+0x38c>)
 8001698:	2003      	movs	r0, #3
 800169a:	4694      	mov	ip, r2
 800169c:	4463      	add	r3, ip
 800169e:	464a      	mov	r2, r9
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2303      	movs	r3, #3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	4691      	mov	r9, r2
 80016a8:	4652      	mov	r2, sl
 80016aa:	e68c      	b.n	80013c6 <__aeabi_dmul+0x86>
 80016ac:	220c      	movs	r2, #12
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2303      	movs	r3, #3
 80016b2:	0005      	movs	r5, r0
 80016b4:	4691      	mov	r9, r2
 80016b6:	469b      	mov	fp, r3
 80016b8:	e666      	b.n	8001388 <__aeabi_dmul+0x48>
 80016ba:	2304      	movs	r3, #4
 80016bc:	4699      	mov	r9, r3
 80016be:	2300      	movs	r3, #0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	2400      	movs	r4, #0
 80016c6:	469b      	mov	fp, r3
 80016c8:	e65e      	b.n	8001388 <__aeabi_dmul+0x48>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	000007ff 	.word	0x000007ff
 80016d0:	fffffc01 	.word	0xfffffc01
 80016d4:	080072f0 	.word	0x080072f0
 80016d8:	000003ff 	.word	0x000003ff
 80016dc:	feffffff 	.word	0xfeffffff
 80016e0:	000007fe 	.word	0x000007fe
 80016e4:	fffffc0d 	.word	0xfffffc0d
 80016e8:	4649      	mov	r1, r9
 80016ea:	2301      	movs	r3, #1
 80016ec:	4319      	orrs	r1, r3
 80016ee:	4689      	mov	r9, r1
 80016f0:	2600      	movs	r6, #0
 80016f2:	2001      	movs	r0, #1
 80016f4:	e667      	b.n	80013c6 <__aeabi_dmul+0x86>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2480      	movs	r4, #128	; 0x80
 80016fa:	2500      	movs	r5, #0
 80016fc:	4a43      	ldr	r2, [pc, #268]	; (800180c <__aeabi_dmul+0x4cc>)
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	0324      	lsls	r4, r4, #12
 8001702:	e67e      	b.n	8001402 <__aeabi_dmul+0xc2>
 8001704:	2001      	movs	r0, #1
 8001706:	1a40      	subs	r0, r0, r1
 8001708:	2838      	cmp	r0, #56	; 0x38
 800170a:	dd00      	ble.n	800170e <__aeabi_dmul+0x3ce>
 800170c:	e676      	b.n	80013fc <__aeabi_dmul+0xbc>
 800170e:	281f      	cmp	r0, #31
 8001710:	dd5b      	ble.n	80017ca <__aeabi_dmul+0x48a>
 8001712:	221f      	movs	r2, #31
 8001714:	0023      	movs	r3, r4
 8001716:	4252      	negs	r2, r2
 8001718:	1a51      	subs	r1, r2, r1
 800171a:	40cb      	lsrs	r3, r1
 800171c:	0019      	movs	r1, r3
 800171e:	2820      	cmp	r0, #32
 8001720:	d003      	beq.n	800172a <__aeabi_dmul+0x3ea>
 8001722:	4a3b      	ldr	r2, [pc, #236]	; (8001810 <__aeabi_dmul+0x4d0>)
 8001724:	4462      	add	r2, ip
 8001726:	4094      	lsls	r4, r2
 8001728:	4325      	orrs	r5, r4
 800172a:	1e6a      	subs	r2, r5, #1
 800172c:	4195      	sbcs	r5, r2
 800172e:	002a      	movs	r2, r5
 8001730:	430a      	orrs	r2, r1
 8001732:	2107      	movs	r1, #7
 8001734:	000d      	movs	r5, r1
 8001736:	2400      	movs	r4, #0
 8001738:	4015      	ands	r5, r2
 800173a:	4211      	tst	r1, r2
 800173c:	d05b      	beq.n	80017f6 <__aeabi_dmul+0x4b6>
 800173e:	210f      	movs	r1, #15
 8001740:	2400      	movs	r4, #0
 8001742:	4011      	ands	r1, r2
 8001744:	2904      	cmp	r1, #4
 8001746:	d053      	beq.n	80017f0 <__aeabi_dmul+0x4b0>
 8001748:	1d11      	adds	r1, r2, #4
 800174a:	4291      	cmp	r1, r2
 800174c:	4192      	sbcs	r2, r2
 800174e:	4252      	negs	r2, r2
 8001750:	18a4      	adds	r4, r4, r2
 8001752:	000a      	movs	r2, r1
 8001754:	0223      	lsls	r3, r4, #8
 8001756:	d54b      	bpl.n	80017f0 <__aeabi_dmul+0x4b0>
 8001758:	2201      	movs	r2, #1
 800175a:	2400      	movs	r4, #0
 800175c:	2500      	movs	r5, #0
 800175e:	e650      	b.n	8001402 <__aeabi_dmul+0xc2>
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	031b      	lsls	r3, r3, #12
 8001764:	421c      	tst	r4, r3
 8001766:	d009      	beq.n	800177c <__aeabi_dmul+0x43c>
 8001768:	421e      	tst	r6, r3
 800176a:	d107      	bne.n	800177c <__aeabi_dmul+0x43c>
 800176c:	4333      	orrs	r3, r6
 800176e:	031c      	lsls	r4, r3, #12
 8001770:	4643      	mov	r3, r8
 8001772:	0015      	movs	r5, r2
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	4a25      	ldr	r2, [pc, #148]	; (800180c <__aeabi_dmul+0x4cc>)
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	e642      	b.n	8001402 <__aeabi_dmul+0xc2>
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	0312      	lsls	r2, r2, #12
 8001780:	4314      	orrs	r4, r2
 8001782:	0324      	lsls	r4, r4, #12
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <__aeabi_dmul+0x4cc>)
 8001786:	0b24      	lsrs	r4, r4, #12
 8001788:	9701      	str	r7, [sp, #4]
 800178a:	e63a      	b.n	8001402 <__aeabi_dmul+0xc2>
 800178c:	f000 fc3c 	bl	8002008 <__clzsi2>
 8001790:	0001      	movs	r1, r0
 8001792:	0002      	movs	r2, r0
 8001794:	3115      	adds	r1, #21
 8001796:	3220      	adds	r2, #32
 8001798:	291c      	cmp	r1, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x45e>
 800179c:	e74b      	b.n	8001636 <__aeabi_dmul+0x2f6>
 800179e:	0034      	movs	r4, r6
 80017a0:	3808      	subs	r0, #8
 80017a2:	2500      	movs	r5, #0
 80017a4:	4084      	lsls	r4, r0
 80017a6:	e750      	b.n	800164a <__aeabi_dmul+0x30a>
 80017a8:	f000 fc2e 	bl	8002008 <__clzsi2>
 80017ac:	0003      	movs	r3, r0
 80017ae:	001a      	movs	r2, r3
 80017b0:	3215      	adds	r2, #21
 80017b2:	3020      	adds	r0, #32
 80017b4:	2a1c      	cmp	r2, #28
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x47a>
 80017b8:	e71e      	b.n	80015f8 <__aeabi_dmul+0x2b8>
 80017ba:	4656      	mov	r6, sl
 80017bc:	3b08      	subs	r3, #8
 80017be:	2200      	movs	r2, #0
 80017c0:	409e      	lsls	r6, r3
 80017c2:	e723      	b.n	800160c <__aeabi_dmul+0x2cc>
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	469c      	mov	ip, r3
 80017c8:	e6e6      	b.n	8001598 <__aeabi_dmul+0x258>
 80017ca:	4912      	ldr	r1, [pc, #72]	; (8001814 <__aeabi_dmul+0x4d4>)
 80017cc:	0022      	movs	r2, r4
 80017ce:	4461      	add	r1, ip
 80017d0:	002e      	movs	r6, r5
 80017d2:	408d      	lsls	r5, r1
 80017d4:	408a      	lsls	r2, r1
 80017d6:	40c6      	lsrs	r6, r0
 80017d8:	1e69      	subs	r1, r5, #1
 80017da:	418d      	sbcs	r5, r1
 80017dc:	4332      	orrs	r2, r6
 80017de:	432a      	orrs	r2, r5
 80017e0:	40c4      	lsrs	r4, r0
 80017e2:	0753      	lsls	r3, r2, #29
 80017e4:	d0b6      	beq.n	8001754 <__aeabi_dmul+0x414>
 80017e6:	210f      	movs	r1, #15
 80017e8:	4011      	ands	r1, r2
 80017ea:	2904      	cmp	r1, #4
 80017ec:	d1ac      	bne.n	8001748 <__aeabi_dmul+0x408>
 80017ee:	e7b1      	b.n	8001754 <__aeabi_dmul+0x414>
 80017f0:	0765      	lsls	r5, r4, #29
 80017f2:	0264      	lsls	r4, r4, #9
 80017f4:	0b24      	lsrs	r4, r4, #12
 80017f6:	08d2      	lsrs	r2, r2, #3
 80017f8:	4315      	orrs	r5, r2
 80017fa:	2200      	movs	r2, #0
 80017fc:	e601      	b.n	8001402 <__aeabi_dmul+0xc2>
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	0312      	lsls	r2, r2, #12
 8001802:	4314      	orrs	r4, r2
 8001804:	0324      	lsls	r4, r4, #12
 8001806:	4a01      	ldr	r2, [pc, #4]	; (800180c <__aeabi_dmul+0x4cc>)
 8001808:	0b24      	lsrs	r4, r4, #12
 800180a:	e5fa      	b.n	8001402 <__aeabi_dmul+0xc2>
 800180c:	000007ff 	.word	0x000007ff
 8001810:	0000043e 	.word	0x0000043e
 8001814:	0000041e 	.word	0x0000041e

08001818 <__aeabi_dsub>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	4657      	mov	r7, sl
 800181c:	464e      	mov	r6, r9
 800181e:	4645      	mov	r5, r8
 8001820:	46de      	mov	lr, fp
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	001e      	movs	r6, r3
 8001826:	0017      	movs	r7, r2
 8001828:	004a      	lsls	r2, r1, #1
 800182a:	030b      	lsls	r3, r1, #12
 800182c:	0d52      	lsrs	r2, r2, #21
 800182e:	0a5b      	lsrs	r3, r3, #9
 8001830:	4690      	mov	r8, r2
 8001832:	0f42      	lsrs	r2, r0, #29
 8001834:	431a      	orrs	r2, r3
 8001836:	0fcd      	lsrs	r5, r1, #31
 8001838:	4ccd      	ldr	r4, [pc, #820]	; (8001b70 <__aeabi_dsub+0x358>)
 800183a:	0331      	lsls	r1, r6, #12
 800183c:	00c3      	lsls	r3, r0, #3
 800183e:	4694      	mov	ip, r2
 8001840:	0070      	lsls	r0, r6, #1
 8001842:	0f7a      	lsrs	r2, r7, #29
 8001844:	0a49      	lsrs	r1, r1, #9
 8001846:	00ff      	lsls	r7, r7, #3
 8001848:	469a      	mov	sl, r3
 800184a:	46b9      	mov	r9, r7
 800184c:	0d40      	lsrs	r0, r0, #21
 800184e:	0ff6      	lsrs	r6, r6, #31
 8001850:	4311      	orrs	r1, r2
 8001852:	42a0      	cmp	r0, r4
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x40>
 8001856:	e0b1      	b.n	80019bc <__aeabi_dsub+0x1a4>
 8001858:	2201      	movs	r2, #1
 800185a:	4056      	eors	r6, r2
 800185c:	46b3      	mov	fp, r6
 800185e:	42b5      	cmp	r5, r6
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x4c>
 8001862:	e088      	b.n	8001976 <__aeabi_dsub+0x15e>
 8001864:	4642      	mov	r2, r8
 8001866:	1a12      	subs	r2, r2, r0
 8001868:	2a00      	cmp	r2, #0
 800186a:	dc00      	bgt.n	800186e <__aeabi_dsub+0x56>
 800186c:	e0ae      	b.n	80019cc <__aeabi_dsub+0x1b4>
 800186e:	2800      	cmp	r0, #0
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x5c>
 8001872:	e0c1      	b.n	80019f8 <__aeabi_dsub+0x1e0>
 8001874:	48be      	ldr	r0, [pc, #760]	; (8001b70 <__aeabi_dsub+0x358>)
 8001876:	4580      	cmp	r8, r0
 8001878:	d100      	bne.n	800187c <__aeabi_dsub+0x64>
 800187a:	e151      	b.n	8001b20 <__aeabi_dsub+0x308>
 800187c:	2080      	movs	r0, #128	; 0x80
 800187e:	0400      	lsls	r0, r0, #16
 8001880:	4301      	orrs	r1, r0
 8001882:	2a38      	cmp	r2, #56	; 0x38
 8001884:	dd00      	ble.n	8001888 <__aeabi_dsub+0x70>
 8001886:	e17b      	b.n	8001b80 <__aeabi_dsub+0x368>
 8001888:	2a1f      	cmp	r2, #31
 800188a:	dd00      	ble.n	800188e <__aeabi_dsub+0x76>
 800188c:	e1ee      	b.n	8001c6c <__aeabi_dsub+0x454>
 800188e:	2020      	movs	r0, #32
 8001890:	003e      	movs	r6, r7
 8001892:	1a80      	subs	r0, r0, r2
 8001894:	000c      	movs	r4, r1
 8001896:	40d6      	lsrs	r6, r2
 8001898:	40d1      	lsrs	r1, r2
 800189a:	4087      	lsls	r7, r0
 800189c:	4662      	mov	r2, ip
 800189e:	4084      	lsls	r4, r0
 80018a0:	1a52      	subs	r2, r2, r1
 80018a2:	1e78      	subs	r0, r7, #1
 80018a4:	4187      	sbcs	r7, r0
 80018a6:	4694      	mov	ip, r2
 80018a8:	4334      	orrs	r4, r6
 80018aa:	4327      	orrs	r7, r4
 80018ac:	1bdc      	subs	r4, r3, r7
 80018ae:	42a3      	cmp	r3, r4
 80018b0:	419b      	sbcs	r3, r3
 80018b2:	4662      	mov	r2, ip
 80018b4:	425b      	negs	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4699      	mov	r9, r3
 80018ba:	464b      	mov	r3, r9
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xaa>
 80018c0:	e118      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 80018c2:	464b      	mov	r3, r9
 80018c4:	0258      	lsls	r0, r3, #9
 80018c6:	0a43      	lsrs	r3, r0, #9
 80018c8:	4699      	mov	r9, r3
 80018ca:	464b      	mov	r3, r9
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dsub+0xba>
 80018d0:	e137      	b.n	8001b42 <__aeabi_dsub+0x32a>
 80018d2:	4648      	mov	r0, r9
 80018d4:	f000 fb98 	bl	8002008 <__clzsi2>
 80018d8:	0001      	movs	r1, r0
 80018da:	3908      	subs	r1, #8
 80018dc:	2320      	movs	r3, #32
 80018de:	0022      	movs	r2, r4
 80018e0:	4648      	mov	r0, r9
 80018e2:	1a5b      	subs	r3, r3, r1
 80018e4:	40da      	lsrs	r2, r3
 80018e6:	4088      	lsls	r0, r1
 80018e8:	408c      	lsls	r4, r1
 80018ea:	4643      	mov	r3, r8
 80018ec:	4310      	orrs	r0, r2
 80018ee:	4588      	cmp	r8, r1
 80018f0:	dd00      	ble.n	80018f4 <__aeabi_dsub+0xdc>
 80018f2:	e136      	b.n	8001b62 <__aeabi_dsub+0x34a>
 80018f4:	1ac9      	subs	r1, r1, r3
 80018f6:	1c4b      	adds	r3, r1, #1
 80018f8:	2b1f      	cmp	r3, #31
 80018fa:	dd00      	ble.n	80018fe <__aeabi_dsub+0xe6>
 80018fc:	e0ea      	b.n	8001ad4 <__aeabi_dsub+0x2bc>
 80018fe:	2220      	movs	r2, #32
 8001900:	0026      	movs	r6, r4
 8001902:	1ad2      	subs	r2, r2, r3
 8001904:	0001      	movs	r1, r0
 8001906:	4094      	lsls	r4, r2
 8001908:	40de      	lsrs	r6, r3
 800190a:	40d8      	lsrs	r0, r3
 800190c:	2300      	movs	r3, #0
 800190e:	4091      	lsls	r1, r2
 8001910:	1e62      	subs	r2, r4, #1
 8001912:	4194      	sbcs	r4, r2
 8001914:	4681      	mov	r9, r0
 8001916:	4698      	mov	r8, r3
 8001918:	4331      	orrs	r1, r6
 800191a:	430c      	orrs	r4, r1
 800191c:	0763      	lsls	r3, r4, #29
 800191e:	d009      	beq.n	8001934 <__aeabi_dsub+0x11c>
 8001920:	230f      	movs	r3, #15
 8001922:	4023      	ands	r3, r4
 8001924:	2b04      	cmp	r3, #4
 8001926:	d005      	beq.n	8001934 <__aeabi_dsub+0x11c>
 8001928:	1d23      	adds	r3, r4, #4
 800192a:	42a3      	cmp	r3, r4
 800192c:	41a4      	sbcs	r4, r4
 800192e:	4264      	negs	r4, r4
 8001930:	44a1      	add	r9, r4
 8001932:	001c      	movs	r4, r3
 8001934:	464b      	mov	r3, r9
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	d400      	bmi.n	800193c <__aeabi_dsub+0x124>
 800193a:	e0de      	b.n	8001afa <__aeabi_dsub+0x2e2>
 800193c:	4641      	mov	r1, r8
 800193e:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <__aeabi_dsub+0x358>)
 8001940:	3101      	adds	r1, #1
 8001942:	4299      	cmp	r1, r3
 8001944:	d100      	bne.n	8001948 <__aeabi_dsub+0x130>
 8001946:	e0e7      	b.n	8001b18 <__aeabi_dsub+0x300>
 8001948:	464b      	mov	r3, r9
 800194a:	488a      	ldr	r0, [pc, #552]	; (8001b74 <__aeabi_dsub+0x35c>)
 800194c:	08e4      	lsrs	r4, r4, #3
 800194e:	4003      	ands	r3, r0
 8001950:	0018      	movs	r0, r3
 8001952:	0549      	lsls	r1, r1, #21
 8001954:	075b      	lsls	r3, r3, #29
 8001956:	0240      	lsls	r0, r0, #9
 8001958:	4323      	orrs	r3, r4
 800195a:	0d4a      	lsrs	r2, r1, #21
 800195c:	0b04      	lsrs	r4, r0, #12
 800195e:	0512      	lsls	r2, r2, #20
 8001960:	07ed      	lsls	r5, r5, #31
 8001962:	4322      	orrs	r2, r4
 8001964:	432a      	orrs	r2, r5
 8001966:	0018      	movs	r0, r3
 8001968:	0011      	movs	r1, r2
 800196a:	bcf0      	pop	{r4, r5, r6, r7}
 800196c:	46bb      	mov	fp, r7
 800196e:	46b2      	mov	sl, r6
 8001970:	46a9      	mov	r9, r5
 8001972:	46a0      	mov	r8, r4
 8001974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001976:	4642      	mov	r2, r8
 8001978:	1a12      	subs	r2, r2, r0
 800197a:	2a00      	cmp	r2, #0
 800197c:	dd52      	ble.n	8001a24 <__aeabi_dsub+0x20c>
 800197e:	2800      	cmp	r0, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_dsub+0x16c>
 8001982:	e09c      	b.n	8001abe <__aeabi_dsub+0x2a6>
 8001984:	45a0      	cmp	r8, r4
 8001986:	d100      	bne.n	800198a <__aeabi_dsub+0x172>
 8001988:	e0ca      	b.n	8001b20 <__aeabi_dsub+0x308>
 800198a:	2080      	movs	r0, #128	; 0x80
 800198c:	0400      	lsls	r0, r0, #16
 800198e:	4301      	orrs	r1, r0
 8001990:	2a38      	cmp	r2, #56	; 0x38
 8001992:	dd00      	ble.n	8001996 <__aeabi_dsub+0x17e>
 8001994:	e149      	b.n	8001c2a <__aeabi_dsub+0x412>
 8001996:	2a1f      	cmp	r2, #31
 8001998:	dc00      	bgt.n	800199c <__aeabi_dsub+0x184>
 800199a:	e197      	b.n	8001ccc <__aeabi_dsub+0x4b4>
 800199c:	0010      	movs	r0, r2
 800199e:	000e      	movs	r6, r1
 80019a0:	3820      	subs	r0, #32
 80019a2:	40c6      	lsrs	r6, r0
 80019a4:	2a20      	cmp	r2, #32
 80019a6:	d004      	beq.n	80019b2 <__aeabi_dsub+0x19a>
 80019a8:	2040      	movs	r0, #64	; 0x40
 80019aa:	1a82      	subs	r2, r0, r2
 80019ac:	4091      	lsls	r1, r2
 80019ae:	430f      	orrs	r7, r1
 80019b0:	46b9      	mov	r9, r7
 80019b2:	464c      	mov	r4, r9
 80019b4:	1e62      	subs	r2, r4, #1
 80019b6:	4194      	sbcs	r4, r2
 80019b8:	4334      	orrs	r4, r6
 80019ba:	e13a      	b.n	8001c32 <__aeabi_dsub+0x41a>
 80019bc:	000a      	movs	r2, r1
 80019be:	433a      	orrs	r2, r7
 80019c0:	d028      	beq.n	8001a14 <__aeabi_dsub+0x1fc>
 80019c2:	46b3      	mov	fp, r6
 80019c4:	42b5      	cmp	r5, r6
 80019c6:	d02b      	beq.n	8001a20 <__aeabi_dsub+0x208>
 80019c8:	4a6b      	ldr	r2, [pc, #428]	; (8001b78 <__aeabi_dsub+0x360>)
 80019ca:	4442      	add	r2, r8
 80019cc:	2a00      	cmp	r2, #0
 80019ce:	d05d      	beq.n	8001a8c <__aeabi_dsub+0x274>
 80019d0:	4642      	mov	r2, r8
 80019d2:	4644      	mov	r4, r8
 80019d4:	1a82      	subs	r2, r0, r2
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d000      	beq.n	80019dc <__aeabi_dsub+0x1c4>
 80019da:	e0f5      	b.n	8001bc8 <__aeabi_dsub+0x3b0>
 80019dc:	4665      	mov	r5, ip
 80019de:	431d      	orrs	r5, r3
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1cc>
 80019e2:	e19c      	b.n	8001d1e <__aeabi_dsub+0x506>
 80019e4:	1e55      	subs	r5, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1d4>
 80019ea:	e1fb      	b.n	8001de4 <__aeabi_dsub+0x5cc>
 80019ec:	4c60      	ldr	r4, [pc, #384]	; (8001b70 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1dc>
 80019f2:	e1bd      	b.n	8001d70 <__aeabi_dsub+0x558>
 80019f4:	002a      	movs	r2, r5
 80019f6:	e0f0      	b.n	8001bda <__aeabi_dsub+0x3c2>
 80019f8:	0008      	movs	r0, r1
 80019fa:	4338      	orrs	r0, r7
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x1e8>
 80019fe:	e0c3      	b.n	8001b88 <__aeabi_dsub+0x370>
 8001a00:	1e50      	subs	r0, r2, #1
 8001a02:	2a01      	cmp	r2, #1
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x1f0>
 8001a06:	e1a8      	b.n	8001d5a <__aeabi_dsub+0x542>
 8001a08:	4c59      	ldr	r4, [pc, #356]	; (8001b70 <__aeabi_dsub+0x358>)
 8001a0a:	42a2      	cmp	r2, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x1f8>
 8001a0e:	e087      	b.n	8001b20 <__aeabi_dsub+0x308>
 8001a10:	0002      	movs	r2, r0
 8001a12:	e736      	b.n	8001882 <__aeabi_dsub+0x6a>
 8001a14:	2201      	movs	r2, #1
 8001a16:	4056      	eors	r6, r2
 8001a18:	46b3      	mov	fp, r6
 8001a1a:	42b5      	cmp	r5, r6
 8001a1c:	d000      	beq.n	8001a20 <__aeabi_dsub+0x208>
 8001a1e:	e721      	b.n	8001864 <__aeabi_dsub+0x4c>
 8001a20:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <__aeabi_dsub+0x360>)
 8001a22:	4442      	add	r2, r8
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x212>
 8001a28:	e0b5      	b.n	8001b96 <__aeabi_dsub+0x37e>
 8001a2a:	4642      	mov	r2, r8
 8001a2c:	4644      	mov	r4, r8
 8001a2e:	1a82      	subs	r2, r0, r2
 8001a30:	2c00      	cmp	r4, #0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dsub+0x21e>
 8001a34:	e138      	b.n	8001ca8 <__aeabi_dsub+0x490>
 8001a36:	4e4e      	ldr	r6, [pc, #312]	; (8001b70 <__aeabi_dsub+0x358>)
 8001a38:	42b0      	cmp	r0, r6
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_dsub+0x226>
 8001a3c:	e1de      	b.n	8001dfc <__aeabi_dsub+0x5e4>
 8001a3e:	2680      	movs	r6, #128	; 0x80
 8001a40:	4664      	mov	r4, ip
 8001a42:	0436      	lsls	r6, r6, #16
 8001a44:	4334      	orrs	r4, r6
 8001a46:	46a4      	mov	ip, r4
 8001a48:	2a38      	cmp	r2, #56	; 0x38
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dsub+0x236>
 8001a4c:	e196      	b.n	8001d7c <__aeabi_dsub+0x564>
 8001a4e:	2a1f      	cmp	r2, #31
 8001a50:	dd00      	ble.n	8001a54 <__aeabi_dsub+0x23c>
 8001a52:	e224      	b.n	8001e9e <__aeabi_dsub+0x686>
 8001a54:	2620      	movs	r6, #32
 8001a56:	1ab4      	subs	r4, r6, r2
 8001a58:	46a2      	mov	sl, r4
 8001a5a:	4664      	mov	r4, ip
 8001a5c:	4656      	mov	r6, sl
 8001a5e:	40b4      	lsls	r4, r6
 8001a60:	46a1      	mov	r9, r4
 8001a62:	001c      	movs	r4, r3
 8001a64:	464e      	mov	r6, r9
 8001a66:	40d4      	lsrs	r4, r2
 8001a68:	4326      	orrs	r6, r4
 8001a6a:	0034      	movs	r4, r6
 8001a6c:	4656      	mov	r6, sl
 8001a6e:	40b3      	lsls	r3, r6
 8001a70:	1e5e      	subs	r6, r3, #1
 8001a72:	41b3      	sbcs	r3, r6
 8001a74:	431c      	orrs	r4, r3
 8001a76:	4663      	mov	r3, ip
 8001a78:	40d3      	lsrs	r3, r2
 8001a7a:	18c9      	adds	r1, r1, r3
 8001a7c:	19e4      	adds	r4, r4, r7
 8001a7e:	42bc      	cmp	r4, r7
 8001a80:	41bf      	sbcs	r7, r7
 8001a82:	427f      	negs	r7, r7
 8001a84:	46b9      	mov	r9, r7
 8001a86:	4680      	mov	r8, r0
 8001a88:	4489      	add	r9, r1
 8001a8a:	e0d8      	b.n	8001c3e <__aeabi_dsub+0x426>
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	4c3b      	ldr	r4, [pc, #236]	; (8001b7c <__aeabi_dsub+0x364>)
 8001a90:	3001      	adds	r0, #1
 8001a92:	4220      	tst	r0, r4
 8001a94:	d000      	beq.n	8001a98 <__aeabi_dsub+0x280>
 8001a96:	e0b4      	b.n	8001c02 <__aeabi_dsub+0x3ea>
 8001a98:	4640      	mov	r0, r8
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x288>
 8001a9e:	e144      	b.n	8001d2a <__aeabi_dsub+0x512>
 8001aa0:	4660      	mov	r0, ip
 8001aa2:	4318      	orrs	r0, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x290>
 8001aa6:	e190      	b.n	8001dca <__aeabi_dsub+0x5b2>
 8001aa8:	0008      	movs	r0, r1
 8001aaa:	4338      	orrs	r0, r7
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dsub+0x298>
 8001aae:	e1aa      	b.n	8001e06 <__aeabi_dsub+0x5ee>
 8001ab0:	4661      	mov	r1, ip
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	0749      	lsls	r1, r1, #29
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	4661      	mov	r1, ip
 8001aba:	08cc      	lsrs	r4, r1, #3
 8001abc:	e027      	b.n	8001b0e <__aeabi_dsub+0x2f6>
 8001abe:	0008      	movs	r0, r1
 8001ac0:	4338      	orrs	r0, r7
 8001ac2:	d061      	beq.n	8001b88 <__aeabi_dsub+0x370>
 8001ac4:	1e50      	subs	r0, r2, #1
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x2b4>
 8001aca:	e139      	b.n	8001d40 <__aeabi_dsub+0x528>
 8001acc:	42a2      	cmp	r2, r4
 8001ace:	d027      	beq.n	8001b20 <__aeabi_dsub+0x308>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	e75d      	b.n	8001990 <__aeabi_dsub+0x178>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	391f      	subs	r1, #31
 8001ad8:	40ca      	lsrs	r2, r1
 8001ada:	0011      	movs	r1, r2
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d003      	beq.n	8001ae8 <__aeabi_dsub+0x2d0>
 8001ae0:	2240      	movs	r2, #64	; 0x40
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4098      	lsls	r0, r3
 8001ae6:	4304      	orrs	r4, r0
 8001ae8:	1e63      	subs	r3, r4, #1
 8001aea:	419c      	sbcs	r4, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	4699      	mov	r9, r3
 8001af0:	4698      	mov	r8, r3
 8001af2:	430c      	orrs	r4, r1
 8001af4:	0763      	lsls	r3, r4, #29
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x2e2>
 8001af8:	e712      	b.n	8001920 <__aeabi_dsub+0x108>
 8001afa:	464b      	mov	r3, r9
 8001afc:	464a      	mov	r2, r9
 8001afe:	08e4      	lsrs	r4, r4, #3
 8001b00:	075b      	lsls	r3, r3, #29
 8001b02:	4323      	orrs	r3, r4
 8001b04:	08d4      	lsrs	r4, r2, #3
 8001b06:	4642      	mov	r2, r8
 8001b08:	4919      	ldr	r1, [pc, #100]	; (8001b70 <__aeabi_dsub+0x358>)
 8001b0a:	428a      	cmp	r2, r1
 8001b0c:	d00e      	beq.n	8001b2c <__aeabi_dsub+0x314>
 8001b0e:	0324      	lsls	r4, r4, #12
 8001b10:	0552      	lsls	r2, r2, #21
 8001b12:	0b24      	lsrs	r4, r4, #12
 8001b14:	0d52      	lsrs	r2, r2, #21
 8001b16:	e722      	b.n	800195e <__aeabi_dsub+0x146>
 8001b18:	000a      	movs	r2, r1
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e71e      	b.n	800195e <__aeabi_dsub+0x146>
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	4662      	mov	r2, ip
 8001b24:	0752      	lsls	r2, r2, #29
 8001b26:	4313      	orrs	r3, r2
 8001b28:	4662      	mov	r2, ip
 8001b2a:	08d4      	lsrs	r4, r2, #3
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	4322      	orrs	r2, r4
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dsub+0x31c>
 8001b32:	e1fc      	b.n	8001f2e <__aeabi_dsub+0x716>
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0312      	lsls	r2, r2, #12
 8001b38:	4314      	orrs	r4, r2
 8001b3a:	0324      	lsls	r4, r4, #12
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <__aeabi_dsub+0x358>)
 8001b3e:	0b24      	lsrs	r4, r4, #12
 8001b40:	e70d      	b.n	800195e <__aeabi_dsub+0x146>
 8001b42:	0020      	movs	r0, r4
 8001b44:	f000 fa60 	bl	8002008 <__clzsi2>
 8001b48:	0001      	movs	r1, r0
 8001b4a:	3118      	adds	r1, #24
 8001b4c:	291f      	cmp	r1, #31
 8001b4e:	dc00      	bgt.n	8001b52 <__aeabi_dsub+0x33a>
 8001b50:	e6c4      	b.n	80018dc <__aeabi_dsub+0xc4>
 8001b52:	3808      	subs	r0, #8
 8001b54:	4084      	lsls	r4, r0
 8001b56:	4643      	mov	r3, r8
 8001b58:	0020      	movs	r0, r4
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	4588      	cmp	r8, r1
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_dsub+0x34a>
 8001b60:	e6c8      	b.n	80018f4 <__aeabi_dsub+0xdc>
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__aeabi_dsub+0x35c>)
 8001b64:	1a5b      	subs	r3, r3, r1
 8001b66:	4010      	ands	r0, r2
 8001b68:	4698      	mov	r8, r3
 8001b6a:	4681      	mov	r9, r0
 8001b6c:	e6d6      	b.n	800191c <__aeabi_dsub+0x104>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	000007ff 	.word	0x000007ff
 8001b74:	ff7fffff 	.word	0xff7fffff
 8001b78:	fffff801 	.word	0xfffff801
 8001b7c:	000007fe 	.word	0x000007fe
 8001b80:	430f      	orrs	r7, r1
 8001b82:	1e7a      	subs	r2, r7, #1
 8001b84:	4197      	sbcs	r7, r2
 8001b86:	e691      	b.n	80018ac <__aeabi_dsub+0x94>
 8001b88:	4661      	mov	r1, ip
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	0749      	lsls	r1, r1, #29
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	4661      	mov	r1, ip
 8001b92:	08cc      	lsrs	r4, r1, #3
 8001b94:	e7b8      	b.n	8001b08 <__aeabi_dsub+0x2f0>
 8001b96:	4640      	mov	r0, r8
 8001b98:	4cd3      	ldr	r4, [pc, #844]	; (8001ee8 <__aeabi_dsub+0x6d0>)
 8001b9a:	3001      	adds	r0, #1
 8001b9c:	4220      	tst	r0, r4
 8001b9e:	d000      	beq.n	8001ba2 <__aeabi_dsub+0x38a>
 8001ba0:	e0a2      	b.n	8001ce8 <__aeabi_dsub+0x4d0>
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x392>
 8001ba8:	e101      	b.n	8001dae <__aeabi_dsub+0x596>
 8001baa:	4660      	mov	r0, ip
 8001bac:	4318      	orrs	r0, r3
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x39a>
 8001bb0:	e15e      	b.n	8001e70 <__aeabi_dsub+0x658>
 8001bb2:	0008      	movs	r0, r1
 8001bb4:	4338      	orrs	r0, r7
 8001bb6:	d000      	beq.n	8001bba <__aeabi_dsub+0x3a2>
 8001bb8:	e15f      	b.n	8001e7a <__aeabi_dsub+0x662>
 8001bba:	4661      	mov	r1, ip
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	0749      	lsls	r1, r1, #29
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	4661      	mov	r1, ip
 8001bc4:	08cc      	lsrs	r4, r1, #3
 8001bc6:	e7a2      	b.n	8001b0e <__aeabi_dsub+0x2f6>
 8001bc8:	4dc8      	ldr	r5, [pc, #800]	; (8001eec <__aeabi_dsub+0x6d4>)
 8001bca:	42a8      	cmp	r0, r5
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x3b8>
 8001bce:	e0cf      	b.n	8001d70 <__aeabi_dsub+0x558>
 8001bd0:	2580      	movs	r5, #128	; 0x80
 8001bd2:	4664      	mov	r4, ip
 8001bd4:	042d      	lsls	r5, r5, #16
 8001bd6:	432c      	orrs	r4, r5
 8001bd8:	46a4      	mov	ip, r4
 8001bda:	2a38      	cmp	r2, #56	; 0x38
 8001bdc:	dc56      	bgt.n	8001c8c <__aeabi_dsub+0x474>
 8001bde:	2a1f      	cmp	r2, #31
 8001be0:	dd00      	ble.n	8001be4 <__aeabi_dsub+0x3cc>
 8001be2:	e0d1      	b.n	8001d88 <__aeabi_dsub+0x570>
 8001be4:	2520      	movs	r5, #32
 8001be6:	001e      	movs	r6, r3
 8001be8:	1aad      	subs	r5, r5, r2
 8001bea:	4664      	mov	r4, ip
 8001bec:	40ab      	lsls	r3, r5
 8001bee:	40ac      	lsls	r4, r5
 8001bf0:	40d6      	lsrs	r6, r2
 8001bf2:	1e5d      	subs	r5, r3, #1
 8001bf4:	41ab      	sbcs	r3, r5
 8001bf6:	4334      	orrs	r4, r6
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	4664      	mov	r4, ip
 8001bfc:	40d4      	lsrs	r4, r2
 8001bfe:	1b09      	subs	r1, r1, r4
 8001c00:	e049      	b.n	8001c96 <__aeabi_dsub+0x47e>
 8001c02:	4660      	mov	r0, ip
 8001c04:	1bdc      	subs	r4, r3, r7
 8001c06:	1a46      	subs	r6, r0, r1
 8001c08:	42a3      	cmp	r3, r4
 8001c0a:	4180      	sbcs	r0, r0
 8001c0c:	4240      	negs	r0, r0
 8001c0e:	4681      	mov	r9, r0
 8001c10:	0030      	movs	r0, r6
 8001c12:	464e      	mov	r6, r9
 8001c14:	1b80      	subs	r0, r0, r6
 8001c16:	4681      	mov	r9, r0
 8001c18:	0200      	lsls	r0, r0, #8
 8001c1a:	d476      	bmi.n	8001d0a <__aeabi_dsub+0x4f2>
 8001c1c:	464b      	mov	r3, r9
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dsub+0x40c>
 8001c22:	e652      	b.n	80018ca <__aeabi_dsub+0xb2>
 8001c24:	2400      	movs	r4, #0
 8001c26:	2500      	movs	r5, #0
 8001c28:	e771      	b.n	8001b0e <__aeabi_dsub+0x2f6>
 8001c2a:	4339      	orrs	r1, r7
 8001c2c:	000c      	movs	r4, r1
 8001c2e:	1e62      	subs	r2, r4, #1
 8001c30:	4194      	sbcs	r4, r2
 8001c32:	18e4      	adds	r4, r4, r3
 8001c34:	429c      	cmp	r4, r3
 8001c36:	419b      	sbcs	r3, r3
 8001c38:	425b      	negs	r3, r3
 8001c3a:	4463      	add	r3, ip
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	464b      	mov	r3, r9
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	d400      	bmi.n	8001c46 <__aeabi_dsub+0x42e>
 8001c44:	e756      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 8001c46:	2301      	movs	r3, #1
 8001c48:	469c      	mov	ip, r3
 8001c4a:	4ba8      	ldr	r3, [pc, #672]	; (8001eec <__aeabi_dsub+0x6d4>)
 8001c4c:	44e0      	add	r8, ip
 8001c4e:	4598      	cmp	r8, r3
 8001c50:	d038      	beq.n	8001cc4 <__aeabi_dsub+0x4ac>
 8001c52:	464b      	mov	r3, r9
 8001c54:	48a6      	ldr	r0, [pc, #664]	; (8001ef0 <__aeabi_dsub+0x6d8>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	4003      	ands	r3, r0
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	0863      	lsrs	r3, r4, #1
 8001c5e:	4014      	ands	r4, r2
 8001c60:	431c      	orrs	r4, r3
 8001c62:	07c3      	lsls	r3, r0, #31
 8001c64:	431c      	orrs	r4, r3
 8001c66:	0843      	lsrs	r3, r0, #1
 8001c68:	4699      	mov	r9, r3
 8001c6a:	e657      	b.n	800191c <__aeabi_dsub+0x104>
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	000e      	movs	r6, r1
 8001c70:	3820      	subs	r0, #32
 8001c72:	40c6      	lsrs	r6, r0
 8001c74:	2a20      	cmp	r2, #32
 8001c76:	d004      	beq.n	8001c82 <__aeabi_dsub+0x46a>
 8001c78:	2040      	movs	r0, #64	; 0x40
 8001c7a:	1a82      	subs	r2, r0, r2
 8001c7c:	4091      	lsls	r1, r2
 8001c7e:	430f      	orrs	r7, r1
 8001c80:	46b9      	mov	r9, r7
 8001c82:	464f      	mov	r7, r9
 8001c84:	1e7a      	subs	r2, r7, #1
 8001c86:	4197      	sbcs	r7, r2
 8001c88:	4337      	orrs	r7, r6
 8001c8a:	e60f      	b.n	80018ac <__aeabi_dsub+0x94>
 8001c8c:	4662      	mov	r2, ip
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	1e5a      	subs	r2, r3, #1
 8001c94:	4193      	sbcs	r3, r2
 8001c96:	1afc      	subs	r4, r7, r3
 8001c98:	42a7      	cmp	r7, r4
 8001c9a:	41bf      	sbcs	r7, r7
 8001c9c:	427f      	negs	r7, r7
 8001c9e:	1bcb      	subs	r3, r1, r7
 8001ca0:	4699      	mov	r9, r3
 8001ca2:	465d      	mov	r5, fp
 8001ca4:	4680      	mov	r8, r0
 8001ca6:	e608      	b.n	80018ba <__aeabi_dsub+0xa2>
 8001ca8:	4666      	mov	r6, ip
 8001caa:	431e      	orrs	r6, r3
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x498>
 8001cae:	e0be      	b.n	8001e2e <__aeabi_dsub+0x616>
 8001cb0:	1e56      	subs	r6, r2, #1
 8001cb2:	2a01      	cmp	r2, #1
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x4a0>
 8001cb6:	e109      	b.n	8001ecc <__aeabi_dsub+0x6b4>
 8001cb8:	4c8c      	ldr	r4, [pc, #560]	; (8001eec <__aeabi_dsub+0x6d4>)
 8001cba:	42a2      	cmp	r2, r4
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4a8>
 8001cbe:	e119      	b.n	8001ef4 <__aeabi_dsub+0x6dc>
 8001cc0:	0032      	movs	r2, r6
 8001cc2:	e6c1      	b.n	8001a48 <__aeabi_dsub+0x230>
 8001cc4:	4642      	mov	r2, r8
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e648      	b.n	800195e <__aeabi_dsub+0x146>
 8001ccc:	2020      	movs	r0, #32
 8001cce:	000c      	movs	r4, r1
 8001cd0:	1a80      	subs	r0, r0, r2
 8001cd2:	003e      	movs	r6, r7
 8001cd4:	4087      	lsls	r7, r0
 8001cd6:	4084      	lsls	r4, r0
 8001cd8:	40d6      	lsrs	r6, r2
 8001cda:	1e78      	subs	r0, r7, #1
 8001cdc:	4187      	sbcs	r7, r0
 8001cde:	40d1      	lsrs	r1, r2
 8001ce0:	4334      	orrs	r4, r6
 8001ce2:	433c      	orrs	r4, r7
 8001ce4:	448c      	add	ip, r1
 8001ce6:	e7a4      	b.n	8001c32 <__aeabi_dsub+0x41a>
 8001ce8:	4a80      	ldr	r2, [pc, #512]	; (8001eec <__aeabi_dsub+0x6d4>)
 8001cea:	4290      	cmp	r0, r2
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x4d8>
 8001cee:	e0e9      	b.n	8001ec4 <__aeabi_dsub+0x6ac>
 8001cf0:	19df      	adds	r7, r3, r7
 8001cf2:	429f      	cmp	r7, r3
 8001cf4:	419b      	sbcs	r3, r3
 8001cf6:	4461      	add	r1, ip
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	18c9      	adds	r1, r1, r3
 8001cfc:	07cc      	lsls	r4, r1, #31
 8001cfe:	087f      	lsrs	r7, r7, #1
 8001d00:	084b      	lsrs	r3, r1, #1
 8001d02:	4699      	mov	r9, r3
 8001d04:	4680      	mov	r8, r0
 8001d06:	433c      	orrs	r4, r7
 8001d08:	e6f4      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 8001d0a:	1afc      	subs	r4, r7, r3
 8001d0c:	42a7      	cmp	r7, r4
 8001d0e:	41bf      	sbcs	r7, r7
 8001d10:	4663      	mov	r3, ip
 8001d12:	427f      	negs	r7, r7
 8001d14:	1ac9      	subs	r1, r1, r3
 8001d16:	1bcb      	subs	r3, r1, r7
 8001d18:	4699      	mov	r9, r3
 8001d1a:	465d      	mov	r5, fp
 8001d1c:	e5d5      	b.n	80018ca <__aeabi_dsub+0xb2>
 8001d1e:	08ff      	lsrs	r7, r7, #3
 8001d20:	074b      	lsls	r3, r1, #29
 8001d22:	465d      	mov	r5, fp
 8001d24:	433b      	orrs	r3, r7
 8001d26:	08cc      	lsrs	r4, r1, #3
 8001d28:	e6ee      	b.n	8001b08 <__aeabi_dsub+0x2f0>
 8001d2a:	4662      	mov	r2, ip
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x51a>
 8001d30:	e082      	b.n	8001e38 <__aeabi_dsub+0x620>
 8001d32:	000b      	movs	r3, r1
 8001d34:	433b      	orrs	r3, r7
 8001d36:	d11b      	bne.n	8001d70 <__aeabi_dsub+0x558>
 8001d38:	2480      	movs	r4, #128	; 0x80
 8001d3a:	2500      	movs	r5, #0
 8001d3c:	0324      	lsls	r4, r4, #12
 8001d3e:	e6f9      	b.n	8001b34 <__aeabi_dsub+0x31c>
 8001d40:	19dc      	adds	r4, r3, r7
 8001d42:	429c      	cmp	r4, r3
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	4461      	add	r1, ip
 8001d48:	4689      	mov	r9, r1
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	4499      	add	r9, r3
 8001d4e:	464b      	mov	r3, r9
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	d444      	bmi.n	8001dde <__aeabi_dsub+0x5c6>
 8001d54:	2301      	movs	r3, #1
 8001d56:	4698      	mov	r8, r3
 8001d58:	e6cc      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 8001d5a:	1bdc      	subs	r4, r3, r7
 8001d5c:	4662      	mov	r2, ip
 8001d5e:	42a3      	cmp	r3, r4
 8001d60:	419b      	sbcs	r3, r3
 8001d62:	1a51      	subs	r1, r2, r1
 8001d64:	425b      	negs	r3, r3
 8001d66:	1acb      	subs	r3, r1, r3
 8001d68:	4699      	mov	r9, r3
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4698      	mov	r8, r3
 8001d6e:	e5a4      	b.n	80018ba <__aeabi_dsub+0xa2>
 8001d70:	08ff      	lsrs	r7, r7, #3
 8001d72:	074b      	lsls	r3, r1, #29
 8001d74:	465d      	mov	r5, fp
 8001d76:	433b      	orrs	r3, r7
 8001d78:	08cc      	lsrs	r4, r1, #3
 8001d7a:	e6d7      	b.n	8001b2c <__aeabi_dsub+0x314>
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	0014      	movs	r4, r2
 8001d82:	1e63      	subs	r3, r4, #1
 8001d84:	419c      	sbcs	r4, r3
 8001d86:	e679      	b.n	8001a7c <__aeabi_dsub+0x264>
 8001d88:	0015      	movs	r5, r2
 8001d8a:	4664      	mov	r4, ip
 8001d8c:	3d20      	subs	r5, #32
 8001d8e:	40ec      	lsrs	r4, r5
 8001d90:	46a0      	mov	r8, r4
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d005      	beq.n	8001da2 <__aeabi_dsub+0x58a>
 8001d96:	2540      	movs	r5, #64	; 0x40
 8001d98:	4664      	mov	r4, ip
 8001d9a:	1aaa      	subs	r2, r5, r2
 8001d9c:	4094      	lsls	r4, r2
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	469a      	mov	sl, r3
 8001da2:	4654      	mov	r4, sl
 8001da4:	1e63      	subs	r3, r4, #1
 8001da6:	419c      	sbcs	r4, r3
 8001da8:	4643      	mov	r3, r8
 8001daa:	4323      	orrs	r3, r4
 8001dac:	e773      	b.n	8001c96 <__aeabi_dsub+0x47e>
 8001dae:	4662      	mov	r2, ip
 8001db0:	431a      	orrs	r2, r3
 8001db2:	d023      	beq.n	8001dfc <__aeabi_dsub+0x5e4>
 8001db4:	000a      	movs	r2, r1
 8001db6:	433a      	orrs	r2, r7
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dsub+0x5a4>
 8001dba:	e0a0      	b.n	8001efe <__aeabi_dsub+0x6e6>
 8001dbc:	4662      	mov	r2, ip
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	0752      	lsls	r2, r2, #29
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	4662      	mov	r2, ip
 8001dc6:	08d4      	lsrs	r4, r2, #3
 8001dc8:	e6b0      	b.n	8001b2c <__aeabi_dsub+0x314>
 8001dca:	000b      	movs	r3, r1
 8001dcc:	433b      	orrs	r3, r7
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x5ba>
 8001dd0:	e728      	b.n	8001c24 <__aeabi_dsub+0x40c>
 8001dd2:	08ff      	lsrs	r7, r7, #3
 8001dd4:	074b      	lsls	r3, r1, #29
 8001dd6:	465d      	mov	r5, fp
 8001dd8:	433b      	orrs	r3, r7
 8001dda:	08cc      	lsrs	r4, r1, #3
 8001ddc:	e697      	b.n	8001b0e <__aeabi_dsub+0x2f6>
 8001dde:	2302      	movs	r3, #2
 8001de0:	4698      	mov	r8, r3
 8001de2:	e736      	b.n	8001c52 <__aeabi_dsub+0x43a>
 8001de4:	1afc      	subs	r4, r7, r3
 8001de6:	42a7      	cmp	r7, r4
 8001de8:	41bf      	sbcs	r7, r7
 8001dea:	4663      	mov	r3, ip
 8001dec:	427f      	negs	r7, r7
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	1bcb      	subs	r3, r1, r7
 8001df2:	4699      	mov	r9, r3
 8001df4:	2301      	movs	r3, #1
 8001df6:	465d      	mov	r5, fp
 8001df8:	4698      	mov	r8, r3
 8001dfa:	e55e      	b.n	80018ba <__aeabi_dsub+0xa2>
 8001dfc:	074b      	lsls	r3, r1, #29
 8001dfe:	08ff      	lsrs	r7, r7, #3
 8001e00:	433b      	orrs	r3, r7
 8001e02:	08cc      	lsrs	r4, r1, #3
 8001e04:	e692      	b.n	8001b2c <__aeabi_dsub+0x314>
 8001e06:	1bdc      	subs	r4, r3, r7
 8001e08:	4660      	mov	r0, ip
 8001e0a:	42a3      	cmp	r3, r4
 8001e0c:	41b6      	sbcs	r6, r6
 8001e0e:	1a40      	subs	r0, r0, r1
 8001e10:	4276      	negs	r6, r6
 8001e12:	1b80      	subs	r0, r0, r6
 8001e14:	4681      	mov	r9, r0
 8001e16:	0200      	lsls	r0, r0, #8
 8001e18:	d560      	bpl.n	8001edc <__aeabi_dsub+0x6c4>
 8001e1a:	1afc      	subs	r4, r7, r3
 8001e1c:	42a7      	cmp	r7, r4
 8001e1e:	41bf      	sbcs	r7, r7
 8001e20:	4663      	mov	r3, ip
 8001e22:	427f      	negs	r7, r7
 8001e24:	1ac9      	subs	r1, r1, r3
 8001e26:	1bcb      	subs	r3, r1, r7
 8001e28:	4699      	mov	r9, r3
 8001e2a:	465d      	mov	r5, fp
 8001e2c:	e576      	b.n	800191c <__aeabi_dsub+0x104>
 8001e2e:	08ff      	lsrs	r7, r7, #3
 8001e30:	074b      	lsls	r3, r1, #29
 8001e32:	433b      	orrs	r3, r7
 8001e34:	08cc      	lsrs	r4, r1, #3
 8001e36:	e667      	b.n	8001b08 <__aeabi_dsub+0x2f0>
 8001e38:	000a      	movs	r2, r1
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	433a      	orrs	r2, r7
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_dsub+0x62a>
 8001e40:	e66f      	b.n	8001b22 <__aeabi_dsub+0x30a>
 8001e42:	4662      	mov	r2, ip
 8001e44:	0752      	lsls	r2, r2, #29
 8001e46:	4313      	orrs	r3, r2
 8001e48:	4662      	mov	r2, ip
 8001e4a:	08d4      	lsrs	r4, r2, #3
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	0312      	lsls	r2, r2, #12
 8001e50:	4214      	tst	r4, r2
 8001e52:	d007      	beq.n	8001e64 <__aeabi_dsub+0x64c>
 8001e54:	08c8      	lsrs	r0, r1, #3
 8001e56:	4210      	tst	r0, r2
 8001e58:	d104      	bne.n	8001e64 <__aeabi_dsub+0x64c>
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	0004      	movs	r4, r0
 8001e5e:	08fb      	lsrs	r3, r7, #3
 8001e60:	0749      	lsls	r1, r1, #29
 8001e62:	430b      	orrs	r3, r1
 8001e64:	0f5a      	lsrs	r2, r3, #29
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	0752      	lsls	r2, r2, #29
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	e65d      	b.n	8001b2c <__aeabi_dsub+0x314>
 8001e70:	074b      	lsls	r3, r1, #29
 8001e72:	08ff      	lsrs	r7, r7, #3
 8001e74:	433b      	orrs	r3, r7
 8001e76:	08cc      	lsrs	r4, r1, #3
 8001e78:	e649      	b.n	8001b0e <__aeabi_dsub+0x2f6>
 8001e7a:	19dc      	adds	r4, r3, r7
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	419b      	sbcs	r3, r3
 8001e80:	4461      	add	r1, ip
 8001e82:	4689      	mov	r9, r1
 8001e84:	425b      	negs	r3, r3
 8001e86:	4499      	add	r9, r3
 8001e88:	464b      	mov	r3, r9
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	d400      	bmi.n	8001e90 <__aeabi_dsub+0x678>
 8001e8e:	e631      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 8001e90:	464a      	mov	r2, r9
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <__aeabi_dsub+0x6d8>)
 8001e94:	401a      	ands	r2, r3
 8001e96:	2301      	movs	r3, #1
 8001e98:	4691      	mov	r9, r2
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	e62a      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 8001e9e:	0016      	movs	r6, r2
 8001ea0:	4664      	mov	r4, ip
 8001ea2:	3e20      	subs	r6, #32
 8001ea4:	40f4      	lsrs	r4, r6
 8001ea6:	46a0      	mov	r8, r4
 8001ea8:	2a20      	cmp	r2, #32
 8001eaa:	d005      	beq.n	8001eb8 <__aeabi_dsub+0x6a0>
 8001eac:	2640      	movs	r6, #64	; 0x40
 8001eae:	4664      	mov	r4, ip
 8001eb0:	1ab2      	subs	r2, r6, r2
 8001eb2:	4094      	lsls	r4, r2
 8001eb4:	4323      	orrs	r3, r4
 8001eb6:	469a      	mov	sl, r3
 8001eb8:	4654      	mov	r4, sl
 8001eba:	1e63      	subs	r3, r4, #1
 8001ebc:	419c      	sbcs	r4, r3
 8001ebe:	4643      	mov	r3, r8
 8001ec0:	431c      	orrs	r4, r3
 8001ec2:	e5db      	b.n	8001a7c <__aeabi_dsub+0x264>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	2400      	movs	r4, #0
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e548      	b.n	800195e <__aeabi_dsub+0x146>
 8001ecc:	19dc      	adds	r4, r3, r7
 8001ece:	42bc      	cmp	r4, r7
 8001ed0:	41bf      	sbcs	r7, r7
 8001ed2:	4461      	add	r1, ip
 8001ed4:	4689      	mov	r9, r1
 8001ed6:	427f      	negs	r7, r7
 8001ed8:	44b9      	add	r9, r7
 8001eda:	e738      	b.n	8001d4e <__aeabi_dsub+0x536>
 8001edc:	464b      	mov	r3, r9
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x6cc>
 8001ee2:	e69f      	b.n	8001c24 <__aeabi_dsub+0x40c>
 8001ee4:	e606      	b.n	8001af4 <__aeabi_dsub+0x2dc>
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	000007fe 	.word	0x000007fe
 8001eec:	000007ff 	.word	0x000007ff
 8001ef0:	ff7fffff 	.word	0xff7fffff
 8001ef4:	08ff      	lsrs	r7, r7, #3
 8001ef6:	074b      	lsls	r3, r1, #29
 8001ef8:	433b      	orrs	r3, r7
 8001efa:	08cc      	lsrs	r4, r1, #3
 8001efc:	e616      	b.n	8001b2c <__aeabi_dsub+0x314>
 8001efe:	4662      	mov	r2, ip
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	0752      	lsls	r2, r2, #29
 8001f04:	4313      	orrs	r3, r2
 8001f06:	4662      	mov	r2, ip
 8001f08:	08d4      	lsrs	r4, r2, #3
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	0312      	lsls	r2, r2, #12
 8001f0e:	4214      	tst	r4, r2
 8001f10:	d007      	beq.n	8001f22 <__aeabi_dsub+0x70a>
 8001f12:	08c8      	lsrs	r0, r1, #3
 8001f14:	4210      	tst	r0, r2
 8001f16:	d104      	bne.n	8001f22 <__aeabi_dsub+0x70a>
 8001f18:	465d      	mov	r5, fp
 8001f1a:	0004      	movs	r4, r0
 8001f1c:	08fb      	lsrs	r3, r7, #3
 8001f1e:	0749      	lsls	r1, r1, #29
 8001f20:	430b      	orrs	r3, r1
 8001f22:	0f5a      	lsrs	r2, r3, #29
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	0752      	lsls	r2, r2, #29
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	e5fe      	b.n	8001b2c <__aeabi_dsub+0x314>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	4a01      	ldr	r2, [pc, #4]	; (8001f38 <__aeabi_dsub+0x720>)
 8001f32:	001c      	movs	r4, r3
 8001f34:	e513      	b.n	800195e <__aeabi_dsub+0x146>
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	000007ff 	.word	0x000007ff

08001f3c <__aeabi_d2iz>:
 8001f3c:	000a      	movs	r2, r1
 8001f3e:	b530      	push	{r4, r5, lr}
 8001f40:	4c13      	ldr	r4, [pc, #76]	; (8001f90 <__aeabi_d2iz+0x54>)
 8001f42:	0053      	lsls	r3, r2, #1
 8001f44:	0309      	lsls	r1, r1, #12
 8001f46:	0005      	movs	r5, r0
 8001f48:	0b09      	lsrs	r1, r1, #12
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	0d5b      	lsrs	r3, r3, #21
 8001f4e:	0fd2      	lsrs	r2, r2, #31
 8001f50:	42a3      	cmp	r3, r4
 8001f52:	dd04      	ble.n	8001f5e <__aeabi_d2iz+0x22>
 8001f54:	480f      	ldr	r0, [pc, #60]	; (8001f94 <__aeabi_d2iz+0x58>)
 8001f56:	4283      	cmp	r3, r0
 8001f58:	dd02      	ble.n	8001f60 <__aeabi_d2iz+0x24>
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <__aeabi_d2iz+0x5c>)
 8001f5c:	18d0      	adds	r0, r2, r3
 8001f5e:	bd30      	pop	{r4, r5, pc}
 8001f60:	2080      	movs	r0, #128	; 0x80
 8001f62:	0340      	lsls	r0, r0, #13
 8001f64:	4301      	orrs	r1, r0
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <__aeabi_d2iz+0x60>)
 8001f68:	1ac0      	subs	r0, r0, r3
 8001f6a:	281f      	cmp	r0, #31
 8001f6c:	dd08      	ble.n	8001f80 <__aeabi_d2iz+0x44>
 8001f6e:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <__aeabi_d2iz+0x64>)
 8001f70:	1ac3      	subs	r3, r0, r3
 8001f72:	40d9      	lsrs	r1, r3
 8001f74:	000b      	movs	r3, r1
 8001f76:	4258      	negs	r0, r3
 8001f78:	2a00      	cmp	r2, #0
 8001f7a:	d1f0      	bne.n	8001f5e <__aeabi_d2iz+0x22>
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	e7ee      	b.n	8001f5e <__aeabi_d2iz+0x22>
 8001f80:	4c08      	ldr	r4, [pc, #32]	; (8001fa4 <__aeabi_d2iz+0x68>)
 8001f82:	40c5      	lsrs	r5, r0
 8001f84:	46a4      	mov	ip, r4
 8001f86:	4463      	add	r3, ip
 8001f88:	4099      	lsls	r1, r3
 8001f8a:	000b      	movs	r3, r1
 8001f8c:	432b      	orrs	r3, r5
 8001f8e:	e7f2      	b.n	8001f76 <__aeabi_d2iz+0x3a>
 8001f90:	000003fe 	.word	0x000003fe
 8001f94:	0000041d 	.word	0x0000041d
 8001f98:	7fffffff 	.word	0x7fffffff
 8001f9c:	00000433 	.word	0x00000433
 8001fa0:	00000413 	.word	0x00000413
 8001fa4:	fffffbed 	.word	0xfffffbed

08001fa8 <__aeabi_i2d>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d016      	beq.n	8001fdc <__aeabi_i2d+0x34>
 8001fae:	17c3      	asrs	r3, r0, #31
 8001fb0:	18c5      	adds	r5, r0, r3
 8001fb2:	405d      	eors	r5, r3
 8001fb4:	0fc4      	lsrs	r4, r0, #31
 8001fb6:	0028      	movs	r0, r5
 8001fb8:	f000 f826 	bl	8002008 <__clzsi2>
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <__aeabi_i2d+0x5c>)
 8001fbe:	1a12      	subs	r2, r2, r0
 8001fc0:	280a      	cmp	r0, #10
 8001fc2:	dc16      	bgt.n	8001ff2 <__aeabi_i2d+0x4a>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	002e      	movs	r6, r5
 8001fc8:	3315      	adds	r3, #21
 8001fca:	409e      	lsls	r6, r3
 8001fcc:	230b      	movs	r3, #11
 8001fce:	1a18      	subs	r0, r3, r0
 8001fd0:	40c5      	lsrs	r5, r0
 8001fd2:	0552      	lsls	r2, r2, #21
 8001fd4:	032d      	lsls	r5, r5, #12
 8001fd6:	0b2d      	lsrs	r5, r5, #12
 8001fd8:	0d53      	lsrs	r3, r2, #21
 8001fda:	e003      	b.n	8001fe4 <__aeabi_i2d+0x3c>
 8001fdc:	2400      	movs	r4, #0
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	432b      	orrs	r3, r5
 8001fe8:	07e4      	lsls	r4, r4, #31
 8001fea:	4323      	orrs	r3, r4
 8001fec:	0030      	movs	r0, r6
 8001fee:	0019      	movs	r1, r3
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
 8001ff2:	380b      	subs	r0, #11
 8001ff4:	4085      	lsls	r5, r0
 8001ff6:	0552      	lsls	r2, r2, #21
 8001ff8:	032d      	lsls	r5, r5, #12
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	0b2d      	lsrs	r5, r5, #12
 8001ffe:	0d53      	lsrs	r3, r2, #21
 8002000:	e7f0      	b.n	8001fe4 <__aeabi_i2d+0x3c>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	0000041e 	.word	0x0000041e

08002008 <__clzsi2>:
 8002008:	211c      	movs	r1, #28
 800200a:	2301      	movs	r3, #1
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	4298      	cmp	r0, r3
 8002010:	d301      	bcc.n	8002016 <__clzsi2+0xe>
 8002012:	0c00      	lsrs	r0, r0, #16
 8002014:	3910      	subs	r1, #16
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	4298      	cmp	r0, r3
 800201a:	d301      	bcc.n	8002020 <__clzsi2+0x18>
 800201c:	0a00      	lsrs	r0, r0, #8
 800201e:	3908      	subs	r1, #8
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	4298      	cmp	r0, r3
 8002024:	d301      	bcc.n	800202a <__clzsi2+0x22>
 8002026:	0900      	lsrs	r0, r0, #4
 8002028:	3904      	subs	r1, #4
 800202a:	a202      	add	r2, pc, #8	; (adr r2, 8002034 <__clzsi2+0x2c>)
 800202c:	5c10      	ldrb	r0, [r2, r0]
 800202e:	1840      	adds	r0, r0, r1
 8002030:	4770      	bx	lr
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	02020304 	.word	0x02020304
 8002038:	01010101 	.word	0x01010101
	...

08002044 <exe_motor>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void exe_motor(int8_t inst_speed){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	0002      	movs	r2, r0
 800204c:	1dfb      	adds	r3, r7, #7
 800204e:	701a      	strb	r2, [r3, #0]
	if(inst_speed > 0){
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	dd09      	ble.n	800206e <exe_motor+0x2a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, inst_speed);
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <exe_motor+0x70>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1dfa      	adds	r2, r7, #7
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	b252      	sxtb	r2, r2
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <exe_motor+0x74>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(inst_speed < 0){
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b7f      	cmp	r3, #127	; 0x7f
 8002074:	d90a      	bls.n	800208c <exe_motor+0x48>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <exe_motor+0x70>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, inst_speed * -1);
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b25b      	sxtb	r3, r3
 8002084:	425a      	negs	r2, r3
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <exe_motor+0x74>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(inst_speed == 0){
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b25b      	sxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <exe_motor+0x62>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <exe_motor+0x70>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <exe_motor+0x74>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	  HAL_Delay(10);
 80020a6:	200a      	movs	r0, #10
 80020a8:	f000 fec6 	bl	8002e38 <HAL_Delay>
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000002c 	.word	0x2000002c
 80020b8:	20000078 	.word	0x20000078

080020bc <DMA_read>:
void DMA_read(){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	index_len = huart2.hdmarx->Instance->CNDTR;
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <DMA_read+0x98>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	589b      	ldr	r3, [r3, r2]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <DMA_read+0x9c>)
 80020d0:	701a      	strb	r2, [r3, #0]
	index_len = sizeof(rxBuf) - index_len;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <DMA_read+0x9c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	425b      	negs	r3, r3
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <DMA_read+0x9c>)
 80020dc:	701a      	strb	r2, [r3, #0]
	uint16_t search = index_len - 7;
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <DMA_read+0x9c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	3a07      	subs	r2, #7
 80020e8:	801a      	strh	r2, [r3, #0]
	if(search > 0 && search < 253){
 80020ea:	1dbb      	adds	r3, r7, #6
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02c      	beq.n	800214c <DMA_read+0x90>
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	2bfc      	cmp	r3, #252	; 0xfc
 80020f8:	d828      	bhi.n	800214c <DMA_read+0x90>
		while(1){
			if(rxBuf[search] == 250){
 80020fa:	1dbb      	adds	r3, r7, #6
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <DMA_read+0xa0>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	2bfa      	cmp	r3, #250	; 0xfa
 8002104:	d115      	bne.n	8002132 <DMA_read+0x76>
				rcvData[0] = rxBuf[search + 1];
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <DMA_read+0xa0>)
 800210e:	5cd2      	ldrb	r2, [r2, r3]
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <DMA_read+0xa4>)
 8002112:	701a      	strb	r2, [r3, #0]
				rcvData[1] = rxBuf[search + 2];
 8002114:	1dbb      	adds	r3, r7, #6
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	3302      	adds	r3, #2
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <DMA_read+0xa0>)
 800211c:	5cd2      	ldrb	r2, [r2, r3]
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <DMA_read+0xa4>)
 8002120:	705a      	strb	r2, [r3, #1]
				rcvData[2] = rxBuf[search + 3];
 8002122:	1dbb      	adds	r3, r7, #6
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	3303      	adds	r3, #3
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <DMA_read+0xa0>)
 800212a:	5cd2      	ldrb	r2, [r2, r3]
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <DMA_read+0xa4>)
 800212e:	709a      	strb	r2, [r3, #2]
				break;
 8002130:	e00c      	b.n	800214c <DMA_read+0x90>
			}
			if(search == sizeof(rxBuf)){
 8002132:	1dbb      	adds	r3, r7, #6
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	429a      	cmp	r2, r3
 800213c:	d005      	beq.n	800214a <DMA_read+0x8e>
				break;
			}
			search++;
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	1dbb      	adds	r3, r7, #6
 8002144:	3201      	adds	r2, #1
 8002146:	801a      	strh	r2, [r3, #0]
			if(rxBuf[search] == 250){
 8002148:	e7d7      	b.n	80020fa <DMA_read+0x3e>
				break;
 800214a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000110 	.word	0x20000110
 8002158:	20000300 	.word	0x20000300
 800215c:	20000200 	.word	0x20000200
 8002160:	20000304 	.word	0x20000304

08002164 <readCounter>:
uint64_t readCounter(){
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	af00      	add	r7, sp, #0
   return (m_counter * 1000) + TIM14->CNT;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <readCounter+0x30>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	22fa      	movs	r2, #250	; 0xfa
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	2300      	movs	r3, #0
 8002174:	f7fe f978 	bl	8000468 <__aeabi_lmul>
 8002178:	0002      	movs	r2, r0
 800217a:	000b      	movs	r3, r1
 800217c:	4906      	ldr	r1, [pc, #24]	; (8002198 <readCounter+0x34>)
 800217e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002180:	000c      	movs	r4, r1
 8002182:	2100      	movs	r1, #0
 8002184:	000d      	movs	r5, r1
 8002186:	1912      	adds	r2, r2, r4
 8002188:	416b      	adcs	r3, r5
}
 800218a:	0010      	movs	r0, r2
 800218c:	0019      	movs	r1, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bdb0      	pop	{r4, r5, r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	20000310 	.word	0x20000310
 8002198:	40002000 	.word	0x40002000

0800219c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    if (htim == &htim14){
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d109      	bne.n	80021c0 <HAL_TIM_PeriodElapsedCallback+0x24>
        m_counter++;
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2001      	movs	r0, #1
 80021b4:	2100      	movs	r1, #0
 80021b6:	1812      	adds	r2, r2, r0
 80021b8:	414b      	adcs	r3, r1
 80021ba:	4904      	ldr	r1, [pc, #16]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021bc:	600a      	str	r2, [r1, #0]
 80021be:	604b      	str	r3, [r1, #4]
    }
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200000c4 	.word	0x200000c4
 80021cc:	20000310 	.word	0x20000310

080021d0 <get_ID>:
void get_ID(){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	  if(HAL_GPIO_ReadPin(dipsw0_GPIO_Port, dipsw0_Pin) == 1){
 80021d4:	23a0      	movs	r3, #160	; 0xa0
 80021d6:	05db      	lsls	r3, r3, #23
 80021d8:	2102      	movs	r1, #2
 80021da:	0018      	movs	r0, r3
 80021dc:	f001 fae4 	bl	80037a8 <HAL_GPIO_ReadPin>
 80021e0:	0003      	movs	r3, r0
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d103      	bne.n	80021ee <get_ID+0x1e>
		  ID = 0;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <get_ID+0x54>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
	  }else if(HAL_GPIO_ReadPin(dipsw1_GPIO_Port, dipsw1_Pin) == 1){
		  ID = 1;
	  }else if(HAL_GPIO_ReadPin(dipsw2_GPIO_Port, dipsw2_Pin) == 1){
		  ID = 2;
	  }
}
 80021ec:	e016      	b.n	800221c <get_ID+0x4c>
	  }else if(HAL_GPIO_ReadPin(dipsw1_GPIO_Port, dipsw1_Pin) == 1){
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <get_ID+0x58>)
 80021f0:	2120      	movs	r1, #32
 80021f2:	0018      	movs	r0, r3
 80021f4:	f001 fad8 	bl	80037a8 <HAL_GPIO_ReadPin>
 80021f8:	0003      	movs	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d103      	bne.n	8002206 <get_ID+0x36>
		  ID = 1;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <get_ID+0x54>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
}
 8002204:	e00a      	b.n	800221c <get_ID+0x4c>
	  }else if(HAL_GPIO_ReadPin(dipsw2_GPIO_Port, dipsw2_Pin) == 1){
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <get_ID+0x58>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0018      	movs	r0, r3
 800220c:	f001 facc 	bl	80037a8 <HAL_GPIO_ReadPin>
 8002210:	0003      	movs	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d102      	bne.n	800221c <get_ID+0x4c>
		  ID = 2;
 8002216:	4b03      	ldr	r3, [pc, #12]	; (8002224 <get_ID+0x54>)
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000000 	.word	0x20000000
 8002228:	50000400 	.word	0x50000400

0800222c <unzip>:
void unzip(uint8_t zip[3]){
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	angle = zip[0] * 100 + zip[1];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	2264      	movs	r2, #100	; 0x64
 800223c:	4353      	muls	r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	18d3      	adds	r3, r2, r3
 800224a:	b29b      	uxth	r3, r3
 800224c:	b21a      	sxth	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <unzip+0x3c>)
 8002250:	801a      	strh	r2, [r3, #0]
	speed = zip[2];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3302      	adds	r3, #2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b21a      	sxth	r2, r3
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <unzip+0x40>)
 800225c:	801a      	strh	r2, [r3, #0]
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	20000318 	.word	0x20000318
 800226c:	2000031a 	.word	0x2000031a

08002270 <calc_angle>:
void calc_angle(){
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	af00      	add	r7, sp, #0
	  speed0 = sin(((double)angle - 60) / 180 * 3.14) * speed;
 8002274:	4b55      	ldr	r3, [pc, #340]	; (80023cc <calc_angle+0x15c>)
 8002276:	2200      	movs	r2, #0
 8002278:	5e9b      	ldrsh	r3, [r3, r2]
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fe94 	bl	8001fa8 <__aeabi_i2d>
 8002280:	2200      	movs	r2, #0
 8002282:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <calc_angle+0x160>)
 8002284:	f7ff fac8 	bl	8001818 <__aeabi_dsub>
 8002288:	0002      	movs	r2, r0
 800228a:	000b      	movs	r3, r1
 800228c:	0010      	movs	r0, r2
 800228e:	0019      	movs	r1, r3
 8002290:	2200      	movs	r2, #0
 8002292:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <calc_angle+0x164>)
 8002294:	f7fe fc52 	bl	8000b3c <__aeabi_ddiv>
 8002298:	0002      	movs	r2, r0
 800229a:	000b      	movs	r3, r1
 800229c:	0010      	movs	r0, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	4a4d      	ldr	r2, [pc, #308]	; (80023d8 <calc_angle+0x168>)
 80022a2:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <calc_angle+0x16c>)
 80022a4:	f7ff f84c 	bl	8001340 <__aeabi_dmul>
 80022a8:	0002      	movs	r2, r0
 80022aa:	000b      	movs	r3, r1
 80022ac:	0010      	movs	r0, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	f003 ffe2 	bl	8006278 <sin>
 80022b4:	0004      	movs	r4, r0
 80022b6:	000d      	movs	r5, r1
 80022b8:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <calc_angle+0x170>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	5e9b      	ldrsh	r3, [r3, r2]
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff fe72 	bl	8001fa8 <__aeabi_i2d>
 80022c4:	0002      	movs	r2, r0
 80022c6:	000b      	movs	r3, r1
 80022c8:	0020      	movs	r0, r4
 80022ca:	0029      	movs	r1, r5
 80022cc:	f7ff f838 	bl	8001340 <__aeabi_dmul>
 80022d0:	0002      	movs	r2, r0
 80022d2:	000b      	movs	r3, r1
 80022d4:	0010      	movs	r0, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	f7ff fe30 	bl	8001f3c <__aeabi_d2iz>
 80022dc:	0003      	movs	r3, r0
 80022de:	b21a      	sxth	r2, r3
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <calc_angle+0x174>)
 80022e2:	801a      	strh	r2, [r3, #0]
	  speed1 = sin(((double)angle - 180) / 180 * 3.14) * speed;
 80022e4:	4b39      	ldr	r3, [pc, #228]	; (80023cc <calc_angle+0x15c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	5e9b      	ldrsh	r3, [r3, r2]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff fe5c 	bl	8001fa8 <__aeabi_i2d>
 80022f0:	2200      	movs	r2, #0
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <calc_angle+0x164>)
 80022f4:	f7ff fa90 	bl	8001818 <__aeabi_dsub>
 80022f8:	0002      	movs	r2, r0
 80022fa:	000b      	movs	r3, r1
 80022fc:	0010      	movs	r0, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	2200      	movs	r2, #0
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <calc_angle+0x164>)
 8002304:	f7fe fc1a 	bl	8000b3c <__aeabi_ddiv>
 8002308:	0002      	movs	r2, r0
 800230a:	000b      	movs	r3, r1
 800230c:	0010      	movs	r0, r2
 800230e:	0019      	movs	r1, r3
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <calc_angle+0x168>)
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <calc_angle+0x16c>)
 8002314:	f7ff f814 	bl	8001340 <__aeabi_dmul>
 8002318:	0002      	movs	r2, r0
 800231a:	000b      	movs	r3, r1
 800231c:	0010      	movs	r0, r2
 800231e:	0019      	movs	r1, r3
 8002320:	f003 ffaa 	bl	8006278 <sin>
 8002324:	0004      	movs	r4, r0
 8002326:	000d      	movs	r5, r1
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <calc_angle+0x170>)
 800232a:	2200      	movs	r2, #0
 800232c:	5e9b      	ldrsh	r3, [r3, r2]
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff fe3a 	bl	8001fa8 <__aeabi_i2d>
 8002334:	0002      	movs	r2, r0
 8002336:	000b      	movs	r3, r1
 8002338:	0020      	movs	r0, r4
 800233a:	0029      	movs	r1, r5
 800233c:	f7ff f800 	bl	8001340 <__aeabi_dmul>
 8002340:	0002      	movs	r2, r0
 8002342:	000b      	movs	r3, r1
 8002344:	0010      	movs	r0, r2
 8002346:	0019      	movs	r1, r3
 8002348:	f7ff fdf8 	bl	8001f3c <__aeabi_d2iz>
 800234c:	0003      	movs	r3, r0
 800234e:	b21a      	sxth	r2, r3
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <calc_angle+0x178>)
 8002352:	801a      	strh	r2, [r3, #0]
	  speed2 = sin(((double)angle - 300) / 180 * 3.14) * speed;
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <calc_angle+0x15c>)
 8002356:	2200      	movs	r2, #0
 8002358:	5e9b      	ldrsh	r3, [r3, r2]
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff fe24 	bl	8001fa8 <__aeabi_i2d>
 8002360:	2200      	movs	r2, #0
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <calc_angle+0x17c>)
 8002364:	f7ff fa58 	bl	8001818 <__aeabi_dsub>
 8002368:	0002      	movs	r2, r0
 800236a:	000b      	movs	r3, r1
 800236c:	0010      	movs	r0, r2
 800236e:	0019      	movs	r1, r3
 8002370:	2200      	movs	r2, #0
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <calc_angle+0x164>)
 8002374:	f7fe fbe2 	bl	8000b3c <__aeabi_ddiv>
 8002378:	0002      	movs	r2, r0
 800237a:	000b      	movs	r3, r1
 800237c:	0010      	movs	r0, r2
 800237e:	0019      	movs	r1, r3
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <calc_angle+0x168>)
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <calc_angle+0x16c>)
 8002384:	f7fe ffdc 	bl	8001340 <__aeabi_dmul>
 8002388:	0002      	movs	r2, r0
 800238a:	000b      	movs	r3, r1
 800238c:	0010      	movs	r0, r2
 800238e:	0019      	movs	r1, r3
 8002390:	f003 ff72 	bl	8006278 <sin>
 8002394:	0004      	movs	r4, r0
 8002396:	000d      	movs	r5, r1
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <calc_angle+0x170>)
 800239a:	2200      	movs	r2, #0
 800239c:	5e9b      	ldrsh	r3, [r3, r2]
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fe02 	bl	8001fa8 <__aeabi_i2d>
 80023a4:	0002      	movs	r2, r0
 80023a6:	000b      	movs	r3, r1
 80023a8:	0020      	movs	r0, r4
 80023aa:	0029      	movs	r1, r5
 80023ac:	f7fe ffc8 	bl	8001340 <__aeabi_dmul>
 80023b0:	0002      	movs	r2, r0
 80023b2:	000b      	movs	r3, r1
 80023b4:	0010      	movs	r0, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	f7ff fdc0 	bl	8001f3c <__aeabi_d2iz>
 80023bc:	0003      	movs	r3, r0
 80023be:	b21a      	sxth	r2, r3
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <calc_angle+0x180>)
 80023c2:	801a      	strh	r2, [r3, #0]
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000318 	.word	0x20000318
 80023d0:	404e0000 	.word	0x404e0000
 80023d4:	40668000 	.word	0x40668000
 80023d8:	51eb851f 	.word	0x51eb851f
 80023dc:	40091eb8 	.word	0x40091eb8
 80023e0:	2000031a 	.word	0x2000031a
 80023e4:	2000031c 	.word	0x2000031c
 80023e8:	2000031e 	.word	0x2000031e
 80023ec:	4072c000 	.word	0x4072c000
 80023f0:	20000320 	.word	0x20000320

080023f4 <move>:
void move(){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	if(ID == 0){
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <move+0x54>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <move+0x1a>
		exe_motor(speed0);
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <move+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	5e9b      	ldrsh	r3, [r3, r2]
 8002406:	b25b      	sxtb	r3, r3
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff fe1b 	bl	8002044 <exe_motor>
	}
	if(ID == 1){
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <move+0x54>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d106      	bne.n	8002424 <move+0x30>
		exe_motor(speed1);
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <move+0x5c>)
 8002418:	2200      	movs	r2, #0
 800241a:	5e9b      	ldrsh	r3, [r3, r2]
 800241c:	b25b      	sxtb	r3, r3
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff fe10 	bl	8002044 <exe_motor>
	}
	if(ID == 2){
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <move+0x54>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d107      	bne.n	800243c <move+0x48>
		exe_motor(speed2);
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <move+0x60>)
 800242e:	2200      	movs	r2, #0
 8002430:	5e9b      	ldrsh	r3, [r3, r2]
 8002432:	b25b      	sxtb	r3, r3
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff fe05 	bl	8002044 <exe_motor>
	}
	else{
		exe_motor(0);
	}
}
 800243a:	e002      	b.n	8002442 <move+0x4e>
		exe_motor(0);
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fe01 	bl	8002044 <exe_motor>
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000000 	.word	0x20000000
 800244c:	2000031c 	.word	0x2000031c
 8002450:	2000031e 	.word	0x2000031e
 8002454:	20000320 	.word	0x20000320

08002458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245c:	f000 fc66 	bl	8002d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002460:	f000 f84e 	bl	8002500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002464:	f000 fa56 	bl	8002914 <MX_GPIO_Init>
  MX_DMA_Init();
 8002468:	f000 fa36 	bl	80028d8 <MX_DMA_Init>
  MX_TIM1_Init();
 800246c:	f000 f890 	bl	8002590 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002470:	f000 f958 	bl	8002724 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002474:	f000 f9fc 	bl	8002870 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8002478:	f000 f9d2 	bl	8002820 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <main+0x88>)
 800247e:	2108      	movs	r1, #8
 8002480:	0018      	movs	r0, r3
 8002482:	f001 ffbb 	bl	80043fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <main+0x8c>)
 8002488:	2100      	movs	r1, #0
 800248a:	0018      	movs	r0, r3
 800248c:	f001 ffb6 	bl	80043fc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <main+0x90>)
 8002492:	0018      	movs	r0, r3
 8002494:	f001 ff04 	bl	80042a0 <HAL_TIM_Base_Start_IT>
  get_ID();
 8002498:	f7ff fe9a 	bl	80021d0 <get_ID>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	005a      	lsls	r2, r3, #1
 80024a0:	4912      	ldr	r1, [pc, #72]	; (80024ec <main+0x94>)
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <main+0x98>)
 80024a4:	0018      	movs	r0, r3
 80024a6:	f003 f8c1 	bl	800562c <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  milli_seconds = readCounter();
 80024aa:	f7ff fe5b 	bl	8002164 <readCounter>
 80024ae:	0002      	movs	r2, r0
 80024b0:	000b      	movs	r3, r1
 80024b2:	4910      	ldr	r1, [pc, #64]	; (80024f4 <main+0x9c>)
 80024b4:	600a      	str	r2, [r1, #0]
 80024b6:	604b      	str	r3, [r1, #4]
	  DMA_read();
 80024b8:	f7ff fe00 	bl	80020bc <DMA_read>
	  unzip(rcvData);
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <main+0xa0>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff feb4 	bl	800222c <unzip>
	  calc_angle();
 80024c4:	f7ff fed4 	bl	8002270 <calc_angle>
	  if(milli_seconds > 3000){
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <main+0x9c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <main+0x82>
 80024d2:	d1ea      	bne.n	80024aa <main+0x52>
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <main+0xa4>)
 80024d6:	428a      	cmp	r2, r1
 80024d8:	d901      	bls.n	80024de <main+0x86>
		  move();
 80024da:	f7ff ff8b 	bl	80023f4 <move>
	  milli_seconds = readCounter();
 80024de:	e7e4      	b.n	80024aa <main+0x52>
 80024e0:	2000002c 	.word	0x2000002c
 80024e4:	20000078 	.word	0x20000078
 80024e8:	200000c4 	.word	0x200000c4
 80024ec:	20000200 	.word	0x20000200
 80024f0:	20000110 	.word	0x20000110
 80024f4:	20000308 	.word	0x20000308
 80024f8:	20000304 	.word	0x20000304
 80024fc:	00000bb8 	.word	0x00000bb8

08002500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b093      	sub	sp, #76	; 0x4c
 8002504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002506:	2414      	movs	r4, #20
 8002508:	193b      	adds	r3, r7, r4
 800250a:	0018      	movs	r0, r3
 800250c:	2334      	movs	r3, #52	; 0x34
 800250e:	001a      	movs	r2, r3
 8002510:	2100      	movs	r1, #0
 8002512:	f003 fea9 	bl	8006268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	0018      	movs	r0, r3
 800251a:	2310      	movs	r3, #16
 800251c:	001a      	movs	r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	f003 fea2 	bl	8006268 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	0018      	movs	r0, r3
 800252a:	f001 f95b 	bl	80037e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800252e:	193b      	adds	r3, r7, r4
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	0052      	lsls	r2, r2, #1
 800253a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800253c:	193b      	adds	r3, r7, r4
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002548:	193b      	adds	r3, r7, r4
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254e:	193b      	adds	r3, r7, r4
 8002550:	0018      	movs	r0, r3
 8002552:	f001 f993 	bl	800387c <HAL_RCC_OscConfig>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800255a:	f000 fa27 	bl	80029ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2100      	movs	r1, #0
 800257a:	0018      	movs	r0, r3
 800257c:	f001 fc8e 	bl	8003e9c <HAL_RCC_ClockConfig>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002584:	f000 fa12 	bl	80029ac <Error_Handler>
  }
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b013      	add	sp, #76	; 0x4c
 800258e:	bd90      	pop	{r4, r7, pc}

08002590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b09c      	sub	sp, #112	; 0x70
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	2360      	movs	r3, #96	; 0x60
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	0018      	movs	r0, r3
 800259c:	2310      	movs	r3, #16
 800259e:	001a      	movs	r2, r3
 80025a0:	2100      	movs	r1, #0
 80025a2:	f003 fe61 	bl	8006268 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a6:	2354      	movs	r3, #84	; 0x54
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	0018      	movs	r0, r3
 80025ac:	230c      	movs	r3, #12
 80025ae:	001a      	movs	r2, r3
 80025b0:	2100      	movs	r1, #0
 80025b2:	f003 fe59 	bl	8006268 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b6:	2338      	movs	r3, #56	; 0x38
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	0018      	movs	r0, r3
 80025bc:	231c      	movs	r3, #28
 80025be:	001a      	movs	r2, r3
 80025c0:	2100      	movs	r1, #0
 80025c2:	f003 fe51 	bl	8006268 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	0018      	movs	r0, r3
 80025ca:	2334      	movs	r3, #52	; 0x34
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f003 fe4a 	bl	8006268 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025d4:	4b51      	ldr	r3, [pc, #324]	; (800271c <MX_TIM1_Init+0x18c>)
 80025d6:	4a52      	ldr	r2, [pc, #328]	; (8002720 <MX_TIM1_Init+0x190>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <MX_TIM1_Init+0x18c>)
 80025dc:	220f      	movs	r2, #15
 80025de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b4e      	ldr	r3, [pc, #312]	; (800271c <MX_TIM1_Init+0x18c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 128-1;
 80025e6:	4b4d      	ldr	r3, [pc, #308]	; (800271c <MX_TIM1_Init+0x18c>)
 80025e8:	227f      	movs	r2, #127	; 0x7f
 80025ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b4b      	ldr	r3, [pc, #300]	; (800271c <MX_TIM1_Init+0x18c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025f2:	4b4a      	ldr	r3, [pc, #296]	; (800271c <MX_TIM1_Init+0x18c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <MX_TIM1_Init+0x18c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <MX_TIM1_Init+0x18c>)
 8002600:	0018      	movs	r0, r3
 8002602:	f001 fdf5 	bl	80041f0 <HAL_TIM_Base_Init>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d001      	beq.n	800260e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800260a:	f000 f9cf 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260e:	2160      	movs	r1, #96	; 0x60
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	0152      	lsls	r2, r2, #5
 8002616:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002618:	187a      	adds	r2, r7, r1
 800261a:	4b40      	ldr	r3, [pc, #256]	; (800271c <MX_TIM1_Init+0x18c>)
 800261c:	0011      	movs	r1, r2
 800261e:	0018      	movs	r0, r3
 8002620:	f002 f9cc 	bl	80049bc <HAL_TIM_ConfigClockSource>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002628:	f000 f9c0 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <MX_TIM1_Init+0x18c>)
 800262e:	0018      	movs	r0, r3
 8002630:	f001 fe84 	bl	800433c <HAL_TIM_PWM_Init>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d001      	beq.n	800263c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002638:	f000 f9b8 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2154      	movs	r1, #84	; 0x54
 800263e:	187b      	adds	r3, r7, r1
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2200      	movs	r2, #0
 8002648:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002650:	187a      	adds	r2, r7, r1
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <MX_TIM1_Init+0x18c>)
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f002 fe7c 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002660:	f000 f9a4 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002664:	2138      	movs	r1, #56	; 0x38
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2260      	movs	r2, #96	; 0x60
 800266a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2200      	movs	r2, #0
 8002688:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800268a:	187b      	adds	r3, r7, r1
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002690:	1879      	adds	r1, r7, r1
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <MX_TIM1_Init+0x18c>)
 8002694:	2208      	movs	r2, #8
 8002696:	0018      	movs	r0, r3
 8002698:	f002 f890 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80026a0:	f000 f984 	bl	80029ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0192      	lsls	r2, r2, #6
 80026c8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	0492      	lsls	r2, r2, #18
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026f6:	1d3a      	adds	r2, r7, #4
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <MX_TIM1_Init+0x18c>)
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f002 fe8b 	bl	8005418 <HAL_TIMEx_ConfigBreakDeadTime>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d001      	beq.n	800270a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8002706:	f000 f951 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <MX_TIM1_Init+0x18c>)
 800270c:	0018      	movs	r0, r3
 800270e:	f000 f9c9 	bl	8002aa4 <HAL_TIM_MspPostInit>

}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b01c      	add	sp, #112	; 0x70
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	2000002c 	.word	0x2000002c
 8002720:	40012c00 	.word	0x40012c00

08002724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08e      	sub	sp, #56	; 0x38
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272a:	2328      	movs	r3, #40	; 0x28
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	0018      	movs	r0, r3
 8002730:	2310      	movs	r3, #16
 8002732:	001a      	movs	r2, r3
 8002734:	2100      	movs	r1, #0
 8002736:	f003 fd97 	bl	8006268 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273a:	231c      	movs	r3, #28
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	0018      	movs	r0, r3
 8002740:	230c      	movs	r3, #12
 8002742:	001a      	movs	r2, r3
 8002744:	2100      	movs	r1, #0
 8002746:	f003 fd8f 	bl	8006268 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800274a:	003b      	movs	r3, r7
 800274c:	0018      	movs	r0, r3
 800274e:	231c      	movs	r3, #28
 8002750:	001a      	movs	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f003 fd88 	bl	8006268 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002758:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <MX_TIM3_Init+0xf4>)
 800275a:	4a30      	ldr	r2, [pc, #192]	; (800281c <MX_TIM3_Init+0xf8>)
 800275c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <MX_TIM3_Init+0xf4>)
 8002760:	220f      	movs	r2, #15
 8002762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <MX_TIM3_Init+0xf4>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 128-1;
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <MX_TIM3_Init+0xf4>)
 800276c:	227f      	movs	r2, #127	; 0x7f
 800276e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <MX_TIM3_Init+0xf4>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <MX_TIM3_Init+0xf4>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <MX_TIM3_Init+0xf4>)
 800277e:	0018      	movs	r0, r3
 8002780:	f001 fd36 	bl	80041f0 <HAL_TIM_Base_Init>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002788:	f000 f910 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278c:	2128      	movs	r1, #40	; 0x28
 800278e:	187b      	adds	r3, r7, r1
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0152      	lsls	r2, r2, #5
 8002794:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002796:	187a      	adds	r2, r7, r1
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <MX_TIM3_Init+0xf4>)
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f002 f90d 	bl	80049bc <HAL_TIM_ConfigClockSource>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80027a6:	f000 f901 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_TIM3_Init+0xf4>)
 80027ac:	0018      	movs	r0, r3
 80027ae:	f001 fdc5 	bl	800433c <HAL_TIM_PWM_Init>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80027b6:	f000 f8f9 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ba:	211c      	movs	r1, #28
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c8:	187a      	adds	r2, r7, r1
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <MX_TIM3_Init+0xf4>)
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 fdc0 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80027d8:	f000 f8e8 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027dc:	003b      	movs	r3, r7
 80027de:	2260      	movs	r2, #96	; 0x60
 80027e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027e2:	003b      	movs	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e8:	003b      	movs	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ee:	003b      	movs	r3, r7
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f4:	0039      	movs	r1, r7
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_TIM3_Init+0xf4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	0018      	movs	r0, r3
 80027fc:	f001 ffde 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002804:	f000 f8d2 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <MX_TIM3_Init+0xf4>)
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f94a 	bl	8002aa4 <HAL_TIM_MspPostInit>

}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b00e      	add	sp, #56	; 0x38
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000078 	.word	0x20000078
 800281c:	40000400 	.word	0x40000400

08002820 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_TIM14_Init+0x40>)
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <MX_TIM14_Init+0x44>)
 8002828:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <MX_TIM14_Init+0x40>)
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <MX_TIM14_Init+0x48>)
 800282e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_TIM14_Init+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <MX_TIM14_Init+0x40>)
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <MX_TIM14_Init+0x4c>)
 800283a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_TIM14_Init+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <MX_TIM14_Init+0x40>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <MX_TIM14_Init+0x40>)
 800284a:	0018      	movs	r0, r3
 800284c:	f001 fcd0 	bl	80041f0 <HAL_TIM_Base_Init>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002854:	f000 f8aa 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	200000c4 	.word	0x200000c4
 8002864:	40002000 	.word	0x40002000
 8002868:	00003e7f 	.word	0x00003e7f
 800286c:	000003e7 	.word	0x000003e7

08002870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <MX_USART2_UART_Init+0x64>)
 8002878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 800287c:	22e1      	movs	r2, #225	; 0xe1
 800287e:	0252      	lsls	r2, r2, #9
 8002880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <MX_USART2_UART_Init+0x60>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f002 fe60 	bl	8005580 <HAL_UART_Init>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028c4:	f000 f872 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	20000110 	.word	0x20000110
 80028d4:	40004400 	.word	0x40004400

080028d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_DMA_Init+0x38>)
 80028e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_DMA_Init+0x38>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_DMA_Init+0x38>)
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	2201      	movs	r2, #1
 80028f0:	4013      	ands	r3, r2
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2009      	movs	r0, #9
 80028fc:	f000 fb6c 	bl	8002fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002900:	2009      	movs	r0, #9
 8002902:	f000 fb7e 	bl	8003002 <HAL_NVIC_EnableIRQ>

}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	40021000 	.word	0x40021000

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	240c      	movs	r4, #12
 800291c:	193b      	adds	r3, r7, r4
 800291e:	0018      	movs	r0, r3
 8002920:	2314      	movs	r3, #20
 8002922:	001a      	movs	r2, r3
 8002924:	2100      	movs	r1, #0
 8002926:	f003 fc9f 	bl	8006268 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <MX_GPIO_Init+0x90>)
 800292c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_GPIO_Init+0x90>)
 8002930:	2102      	movs	r1, #2
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <MX_GPIO_Init+0x90>)
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <MX_GPIO_Init+0x90>)
 8002944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_GPIO_Init+0x90>)
 8002948:	2101      	movs	r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	635a      	str	r2, [r3, #52]	; 0x34
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_GPIO_Init+0x90>)
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : dipsw4_Pin dipsw1_Pin dipsw2_Pin dipsw3_Pin */
  GPIO_InitStruct.Pin = dipsw4_Pin|dipsw1_Pin|dipsw2_Pin|dipsw3_Pin;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	22e8      	movs	r2, #232	; 0xe8
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002962:	193b      	adds	r3, r7, r4
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	193b      	adds	r3, r7, r4
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	193b      	adds	r3, r7, r4
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <MX_GPIO_Init+0x94>)
 8002972:	0019      	movs	r1, r3
 8002974:	0010      	movs	r0, r2
 8002976:	f000 fdb3 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : dipsw0_Pin */
  GPIO_InitStruct.Pin = dipsw0_Pin;
 800297a:	0021      	movs	r1, r4
 800297c:	187b      	adds	r3, r7, r1
 800297e:	2202      	movs	r2, #2
 8002980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2200      	movs	r2, #0
 8002986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dipsw0_GPIO_Port, &GPIO_InitStruct);
 800298e:	187a      	adds	r2, r7, r1
 8002990:	23a0      	movs	r3, #160	; 0xa0
 8002992:	05db      	lsls	r3, r3, #23
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fda2 	bl	80034e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b009      	add	sp, #36	; 0x24
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	50000400 	.word	0x50000400

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <Error_Handler+0x8>
	...

080029b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_MspInit+0x44>)
 80029c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_MspInit+0x44>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <HAL_MspInit+0x44>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2201      	movs	r2, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_MspInit+0x44>)
 80029d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_MspInit+0x44>)
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	0549      	lsls	r1, r1, #21
 80029e0:	430a      	orrs	r2, r1
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_MspInit+0x44>)
 80029e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	055b      	lsls	r3, r3, #21
 80029ec:	4013      	ands	r3, r2
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b002      	add	sp, #8
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40021000 	.word	0x40021000

08002a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_TIM_Base_MspInit+0x94>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0109      	lsls	r1, r1, #4
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a2e:	e02c      	b.n	8002a8a <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_TIM_Base_MspInit+0x9c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10c      	bne.n	8002a54 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a40:	2102      	movs	r1, #2
 8002a42:	430a      	orrs	r2, r1
 8002a44:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
}
 8002a52:	e01a      	b.n	8002a8a <HAL_TIM_Base_MspInit+0x8a>
  else if(htim_base->Instance==TIM14)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_TIM_Base_MspInit+0xa0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d115      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	0209      	lsls	r1, r1, #8
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_TIM_Base_MspInit+0x98>)
 8002a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2013      	movs	r0, #19
 8002a80:	f000 faaa 	bl	8002fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002a84:	2013      	movs	r0, #19
 8002a86:	f000 fabc 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b006      	add	sp, #24
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40002000 	.word	0x40002000

08002aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b08b      	sub	sp, #44	; 0x2c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	2414      	movs	r4, #20
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	2314      	movs	r3, #20
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f003 fbd6 	bl	8006268 <memset>
  if(htim->Instance==TIM1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a28      	ldr	r2, [pc, #160]	; (8002b64 <HAL_TIM_MspPostInit+0xc0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_TIM_MspPostInit+0xc4>)
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_TIM_MspPostInit+0xc4>)
 8002acc:	2102      	movs	r1, #2
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_TIM_MspPostInit+0xc4>)
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ade:	0021      	movs	r1, r4
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2202      	movs	r2, #2
 8002aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2201      	movs	r2, #1
 8002afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <HAL_TIM_MspPostInit+0xc8>)
 8002b02:	0019      	movs	r1, r3
 8002b04:	0010      	movs	r0, r2
 8002b06:	f000 fceb 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b0a:	e027      	b.n	8002b5c <HAL_TIM_MspPostInit+0xb8>
  else if(htim->Instance==TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_TIM_MspPostInit+0xcc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_TIM_MspPostInit+0xc4>)
 8002b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_TIM_MspPostInit+0xc4>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_TIM_MspPostInit+0xc4>)
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	2201      	movs	r2, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b2e:	2114      	movs	r1, #20
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	2202      	movs	r2, #2
 8002b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	187a      	adds	r2, r7, r1
 8002b50:	23a0      	movs	r3, #160	; 0xa0
 8002b52:	05db      	lsls	r3, r3, #23
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 fcc2 	bl	80034e0 <HAL_GPIO_Init>
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b00b      	add	sp, #44	; 0x2c
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	50000400 	.word	0x50000400
 8002b70:	40000400 	.word	0x40000400

08002b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b08b      	sub	sp, #44	; 0x2c
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	2414      	movs	r4, #20
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	0018      	movs	r0, r3
 8002b82:	2314      	movs	r3, #20
 8002b84:	001a      	movs	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f003 fb6e 	bl	8006268 <memset>
  if(huart->Instance==USART2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a31      	ldr	r2, [pc, #196]	; (8002c58 <HAL_UART_MspInit+0xe4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d15b      	bne.n	8002c4e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_UART_MspInit+0xe8>)
 8002b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_UART_MspInit+0xe8>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0289      	lsls	r1, r1, #10
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_UART_MspInit+0xe8>)
 8002ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_UART_MspInit+0xe8>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_UART_MspInit+0xe8>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_UART_MspInit+0xe8>)
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002bca:	0021      	movs	r1, r4
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <HAL_UART_MspInit+0xec>)
 8002bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	2201      	movs	r2, #1
 8002be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	187a      	adds	r2, r7, r1
 8002bec:	23a0      	movs	r3, #160	; 0xa0
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fc74 	bl	80034e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0xf4>)
 8002bfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c00:	2234      	movs	r2, #52	; 0x34
 8002c02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c24:	2220      	movs	r2, #32
 8002c26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c2a:	22c0      	movs	r2, #192	; 0xc0
 8002c2c:	0192      	lsls	r2, r2, #6
 8002c2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 fa02 	bl	800303c <HAL_DMA_Init>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002c3c:	f7ff feb6 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c46:	505a      	str	r2, [r3, r1]
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_UART_MspInit+0xf0>)
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b00b      	add	sp, #44	; 0x2c
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	40004400 	.word	0x40004400
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	00008004 	.word	0x00008004
 8002c64:	200001a4 	.word	0x200001a4
 8002c68:	40020008 	.word	0x40020008

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c90:	f000 f8b6 	bl	8002e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <DMA1_Channel1_IRQHandler+0x14>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 fada 	bl	800325c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	200001a4 	.word	0x200001a4

08002cb4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <TIM14_IRQHandler+0x14>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f001 fc76 	bl	80045ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	200000c4 	.word	0x200000c4

08002ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cdc:	f7ff fff6 	bl	8002ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce0:	480c      	ldr	r0, [pc, #48]	; (8002d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ce2:	490d      	ldr	r1, [pc, #52]	; (8002d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <LoopForever+0xe>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce8:	e002      	b.n	8002cf0 <LoopCopyDataInit>

08002cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cee:	3304      	adds	r3, #4

08002cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf4:	d3f9      	bcc.n	8002cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cf8:	4c0a      	ldr	r4, [pc, #40]	; (8002d24 <LoopForever+0x16>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cfc:	e001      	b.n	8002d02 <LoopFillZerobss>

08002cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d00:	3204      	adds	r2, #4

08002d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d04:	d3fb      	bcc.n	8002cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d06:	f003 fa8b 	bl	8006220 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d0a:	f7ff fba5 	bl	8002458 <main>

08002d0e <LoopForever>:

LoopForever:
  b LoopForever
 8002d0e:	e7fe      	b.n	8002d0e <LoopForever>
  ldr   r0, =_estack
 8002d10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002d1c:	080075e0 	.word	0x080075e0
  ldr r2, =_sbss
 8002d20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002d24:	20000328 	.word	0x20000328

08002d28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d28:	e7fe      	b.n	8002d28 <ADC1_IRQHandler>
	...

08002d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d32:	1dfb      	adds	r3, r7, #7
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_Init+0x3c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_Init+0x3c>)
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	0049      	lsls	r1, r1, #1
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d46:	2003      	movs	r0, #3
 8002d48:	f000 f810 	bl	8002d6c <HAL_InitTick>
 8002d4c:	1e03      	subs	r3, r0, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e001      	b.n	8002d5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002d58:	f7ff fe2e 	bl	80029b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d74:	230f      	movs	r3, #15
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_InitTick+0x88>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02b      	beq.n	8002ddc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_InitTick+0x8c>)
 8002d86:	681c      	ldr	r4, [r3, #0]
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_InitTick+0x88>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	23fa      	movs	r3, #250	; 0xfa
 8002d90:	0098      	lsls	r0, r3, #2
 8002d92:	f7fd f9b5 	bl	8000100 <__udivsi3>
 8002d96:	0003      	movs	r3, r0
 8002d98:	0019      	movs	r1, r3
 8002d9a:	0020      	movs	r0, r4
 8002d9c:	f7fd f9b0 	bl	8000100 <__udivsi3>
 8002da0:	0003      	movs	r3, r0
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f93d 	bl	8003022 <HAL_SYSTICK_Config>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d112      	bne.n	8002dd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d80a      	bhi.n	8002dc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	2301      	movs	r3, #1
 8002db6:	425b      	negs	r3, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 f90c 	bl	8002fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_InitTick+0x90>)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e00d      	b.n	8002de4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002dc8:	230f      	movs	r3, #15
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e008      	b.n	8002de4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dd2:	230f      	movs	r3, #15
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e003      	b.n	8002de4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ddc:	230f      	movs	r3, #15
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002de4:	230f      	movs	r3, #15
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b005      	add	sp, #20
 8002df0:	bd90      	pop	{r4, r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	20000008 	.word	0x20000008

08002e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_IncTick+0x1c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	001a      	movs	r2, r3
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_IncTick+0x20>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	18d2      	adds	r2, r2, r3
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_IncTick+0x20>)
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	2000000c 	.word	0x2000000c
 8002e20:	20000324 	.word	0x20000324

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <HAL_GetTick+0x10>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	20000324 	.word	0x20000324

08002e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	d005      	beq.n	8002e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_Delay+0x44>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	001a      	movs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	f7ff ffe0 	bl	8002e24 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d8f7      	bhi.n	8002e60 <HAL_Delay+0x28>
  {
  }
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	2000000c 	.word	0x2000000c

08002e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	0002      	movs	r2, r0
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b7f      	cmp	r3, #127	; 0x7f
 8002e92:	d809      	bhi.n	8002ea8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e94:	1dfb      	adds	r3, r7, #7
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	001a      	movs	r2, r3
 8002e9a:	231f      	movs	r3, #31
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_EnableIRQ+0x30>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4091      	lsls	r1, r2
 8002ea4:	000a      	movs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	0002      	movs	r2, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec8:	d828      	bhi.n	8002f1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eca:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <__NVIC_SetPriority+0xd4>)
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	33c0      	adds	r3, #192	; 0xc0
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	589b      	ldr	r3, [r3, r2]
 8002eda:	1dfa      	adds	r2, r7, #7
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	0011      	movs	r1, r2
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	21ff      	movs	r1, #255	; 0xff
 8002ee8:	4091      	lsls	r1, r2
 8002eea:	000a      	movs	r2, r1
 8002eec:	43d2      	mvns	r2, r2
 8002eee:	401a      	ands	r2, r3
 8002ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	019b      	lsls	r3, r3, #6
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	401a      	ands	r2, r3
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	2303      	movs	r3, #3
 8002f02:	4003      	ands	r3, r0
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f08:	481f      	ldr	r0, [pc, #124]	; (8002f88 <__NVIC_SetPriority+0xd4>)
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	430a      	orrs	r2, r1
 8002f14:	33c0      	adds	r3, #192	; 0xc0
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f1a:	e031      	b.n	8002f80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <__NVIC_SetPriority+0xd8>)
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	0019      	movs	r1, r3
 8002f24:	230f      	movs	r3, #15
 8002f26:	400b      	ands	r3, r1
 8002f28:	3b08      	subs	r3, #8
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	18d3      	adds	r3, r2, r3
 8002f32:	3304      	adds	r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1dfa      	adds	r2, r7, #7
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	400a      	ands	r2, r1
 8002f40:	00d2      	lsls	r2, r2, #3
 8002f42:	21ff      	movs	r1, #255	; 0xff
 8002f44:	4091      	lsls	r1, r2
 8002f46:	000a      	movs	r2, r1
 8002f48:	43d2      	mvns	r2, r2
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	401a      	ands	r2, r3
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	4003      	ands	r3, r0
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f64:	4809      	ldr	r0, [pc, #36]	; (8002f8c <__NVIC_SetPriority+0xd8>)
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	001c      	movs	r4, r3
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	4023      	ands	r3, r4
 8002f70:	3b08      	subs	r3, #8
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	430a      	orrs	r2, r1
 8002f76:	3306      	adds	r3, #6
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	18c3      	adds	r3, r0, r3
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b003      	add	sp, #12
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	e000e100 	.word	0xe000e100
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	045b      	lsls	r3, r3, #17
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d301      	bcc.n	8002fa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e010      	b.n	8002fca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <SysTick_Config+0x44>)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	3a01      	subs	r2, #1
 8002fae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7ff ff7c 	bl	8002eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <SysTick_Config+0x44>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <SysTick_Config+0x44>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	1c02      	adds	r2, r0, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff5d 	bl	8002eb4 <__NVIC_SetPriority>
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	0002      	movs	r2, r0
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b25b      	sxtb	r3, r3
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ff33 	bl	8002e80 <__NVIC_EnableIRQ>
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff ffaf 	bl	8002f90 <SysTick_Config>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e077      	b.n	800313e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <HAL_DMA_Init+0x10c>)
 8003054:	4694      	mov	ip, r2
 8003056:	4463      	add	r3, ip
 8003058:	2114      	movs	r1, #20
 800305a:	0018      	movs	r0, r3
 800305c:	f7fd f850 	bl	8000100 <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	009a      	lsls	r2, r3, #2
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2225      	movs	r2, #37	; 0x25
 800306c:	2102      	movs	r1, #2
 800306e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4934      	ldr	r1, [pc, #208]	; (800314c <HAL_DMA_Init+0x110>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f9c1 	bl	8003440 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	01db      	lsls	r3, r3, #7
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d102      	bne.n	80030d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	213f      	movs	r1, #63	; 0x3f
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d011      	beq.n	8003114 <HAL_DMA_Init+0xd8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d80d      	bhi.n	8003114 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f9cc 	bl	8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e008      	b.n	8003126 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2225      	movs	r2, #37	; 0x25
 8003130:	2101      	movs	r1, #1
 8003132:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	bffdfff8 	.word	0xbffdfff8
 800314c:	ffff800f 	.word	0xffff800f

08003150 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2317      	movs	r3, #23
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2224      	movs	r2, #36	; 0x24
 800316a:	5c9b      	ldrb	r3, [r3, r2]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_DMA_Start_IT+0x24>
 8003170:	2302      	movs	r3, #2
 8003172:	e06f      	b.n	8003254 <HAL_DMA_Start_IT+0x104>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	2101      	movs	r1, #1
 800317a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2225      	movs	r2, #37	; 0x25
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d157      	bne.n	8003238 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2225      	movs	r2, #37	; 0x25
 800318c:	2102      	movs	r1, #2
 800318e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	438a      	bics	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f907 	bl	80033c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	210e      	movs	r1, #14
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00f      	b.n	80031ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2104      	movs	r1, #4
 80031d8:	438a      	bics	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	210a      	movs	r1, #10
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	025b      	lsls	r3, r3, #9
 80031f6:	4013      	ands	r3, r2
 80031f8:	d008      	beq.n	800320c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0049      	lsls	r1, r1, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	0049      	lsls	r1, r1, #1
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e00a      	b.n	800324e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003246:	2317      	movs	r3, #23
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800324e:	2317      	movs	r3, #23
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	781b      	ldrb	r3, [r3, #0]
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b006      	add	sp, #24
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003264:	4b55      	ldr	r3, [pc, #340]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	221c      	movs	r2, #28
 8003278:	4013      	ands	r3, r2
 800327a:	2204      	movs	r2, #4
 800327c:	409a      	lsls	r2, r3
 800327e:	0013      	movs	r3, r2
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	d027      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x7a>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2204      	movs	r2, #4
 800328a:	4013      	ands	r3, r2
 800328c:	d023      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2220      	movs	r2, #32
 8003296:	4013      	ands	r3, r2
 8003298:	d107      	bne.n	80032aa <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2104      	movs	r1, #4
 80032a6:	438a      	bics	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80032aa:	4b44      	ldr	r3, [pc, #272]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	221c      	movs	r2, #28
 80032b4:	4013      	ands	r3, r2
 80032b6:	2204      	movs	r2, #4
 80032b8:	409a      	lsls	r2, r3
 80032ba:	4b40      	ldr	r3, [pc, #256]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d100      	bne.n	80032ca <HAL_DMA_IRQHandler+0x6e>
 80032c8:	e073      	b.n	80033b2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	0010      	movs	r0, r2
 80032d2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80032d4:	e06d      	b.n	80033b2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	221c      	movs	r2, #28
 80032dc:	4013      	ands	r3, r2
 80032de:	2202      	movs	r2, #2
 80032e0:	409a      	lsls	r2, r3
 80032e2:	0013      	movs	r3, r2
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	d02e      	beq.n	8003348 <HAL_DMA_IRQHandler+0xec>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2202      	movs	r2, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	d02a      	beq.n	8003348 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	4013      	ands	r3, r2
 80032fc:	d10b      	bne.n	8003316 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	210a      	movs	r1, #10
 800330a:	438a      	bics	r2, r1
 800330c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2225      	movs	r2, #37	; 0x25
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	221c      	movs	r2, #28
 8003320:	4013      	ands	r3, r2
 8003322:	2202      	movs	r2, #2
 8003324:	409a      	lsls	r2, r3
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d03a      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	0010      	movs	r0, r2
 8003344:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003346:	e034      	b.n	80033b2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	221c      	movs	r2, #28
 800334e:	4013      	ands	r3, r2
 8003350:	2208      	movs	r2, #8
 8003352:	409a      	lsls	r2, r3
 8003354:	0013      	movs	r3, r2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4013      	ands	r3, r2
 800335a:	d02b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x158>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2208      	movs	r2, #8
 8003360:	4013      	ands	r3, r2
 8003362:	d027      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	210e      	movs	r1, #14
 8003370:	438a      	bics	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	221c      	movs	r2, #28
 800337e:	4013      	ands	r3, r2
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_DMA_IRQHandler+0x160>)
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2225      	movs	r2, #37	; 0x25
 8003394:	2101      	movs	r1, #1
 8003396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	0010      	movs	r0, r2
 80033b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46c0      	nop			; (mov r8, r8)
}
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40020000 	.word	0x40020000

080033c0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033e8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <DMA_SetConfig+0x7c>)
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	221c      	movs	r2, #28
 80033f4:	4013      	ands	r3, r2
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <DMA_SetConfig+0x7c>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d108      	bne.n	8003422 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003420:	e007      	b.n	8003432 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	60da      	str	r2, [r3, #12]
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40020000 	.word	0x40020000

08003440 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003450:	4694      	mov	ip, r2
 8003452:	4463      	add	r3, ip
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	001a      	movs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	001a      	movs	r2, r3
 8003462:	23ff      	movs	r3, #255	; 0xff
 8003464:	4013      	ands	r3, r2
 8003466:	3b08      	subs	r3, #8
 8003468:	2114      	movs	r1, #20
 800346a:	0018      	movs	r0, r3
 800346c:	f7fc fe48 	bl	8000100 <__udivsi3>
 8003470:	0003      	movs	r3, r0
 8003472:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003478:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	221f      	movs	r2, #31
 800347e:	4013      	ands	r3, r2
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b004      	add	sp, #16
 800348e:	bd80      	pop	{r7, pc}
 8003490:	10008200 	.word	0x10008200
 8003494:	40020880 	.word	0x40020880

08003498 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	223f      	movs	r2, #63	; 0x3f
 80034a6:	4013      	ands	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034ae:	4694      	mov	ip, r2
 80034b0:	4463      	add	r3, ip
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	001a      	movs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a07      	ldr	r2, [pc, #28]	; (80034dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	4013      	ands	r3, r2
 80034c8:	2201      	movs	r2, #1
 80034ca:	409a      	lsls	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	659a      	str	r2, [r3, #88]	; 0x58
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b004      	add	sp, #16
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	1000823f 	.word	0x1000823f
 80034dc:	40020940 	.word	0x40020940

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ee:	e147      	b.n	8003780 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2101      	movs	r1, #1
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4091      	lsls	r1, r2
 80034fa:	000a      	movs	r2, r1
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d100      	bne.n	8003508 <HAL_GPIO_Init+0x28>
 8003506:	e138      	b.n	800377a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	4013      	ands	r3, r2
 8003510:	2b01      	cmp	r3, #1
 8003512:	d005      	beq.n	8003520 <HAL_GPIO_Init+0x40>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2203      	movs	r2, #3
 800351a:	4013      	ands	r3, r2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d130      	bne.n	8003582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	43da      	mvns	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	409a      	lsls	r2, r3
 8003542:	0013      	movs	r3, r2
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003556:	2201      	movs	r2, #1
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
 800355c:	0013      	movs	r3, r2
 800355e:	43da      	mvns	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	2201      	movs	r2, #1
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	4013      	ands	r3, r2
 800358a:	2b03      	cmp	r3, #3
 800358c:	d017      	beq.n	80035be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	0013      	movs	r3, r2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2203      	movs	r2, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d123      	bne.n	8003612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	08da      	lsrs	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3208      	adds	r2, #8
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	58d3      	ldr	r3, [r2, r3]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2207      	movs	r2, #7
 80035dc:	4013      	ands	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	43da      	mvns	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2107      	movs	r1, #7
 80035f6:	400b      	ands	r3, r1
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	409a      	lsls	r2, r3
 80035fc:	0013      	movs	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	6939      	ldr	r1, [r7, #16]
 8003610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	409a      	lsls	r2, r3
 8003620:	0013      	movs	r3, r2
 8003622:	43da      	mvns	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	401a      	ands	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	23c0      	movs	r3, #192	; 0xc0
 800364c:	029b      	lsls	r3, r3, #10
 800364e:	4013      	ands	r3, r2
 8003650:	d100      	bne.n	8003654 <HAL_GPIO_Init+0x174>
 8003652:	e092      	b.n	800377a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003654:	4a50      	ldr	r2, [pc, #320]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3318      	adds	r3, #24
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	589b      	ldr	r3, [r3, r2]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2203      	movs	r2, #3
 8003666:	4013      	ands	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	220f      	movs	r2, #15
 800366c:	409a      	lsls	r2, r3
 800366e:	0013      	movs	r3, r2
 8003670:	43da      	mvns	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	23a0      	movs	r3, #160	; 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	429a      	cmp	r2, r3
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0x1ca>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a45      	ldr	r2, [pc, #276]	; (800379c <HAL_GPIO_Init+0x2bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_Init+0x1c6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <HAL_GPIO_Init+0x2c0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x1c2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a43      	ldr	r2, [pc, #268]	; (80037a4 <HAL_GPIO_Init+0x2c4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x1be>
 800369a:	2303      	movs	r3, #3
 800369c:	e006      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 800369e:	2305      	movs	r3, #5
 80036a0:	e004      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e002      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_GPIO_Init+0x1cc>
 80036aa:	2300      	movs	r3, #0
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	2103      	movs	r1, #3
 80036b0:	400a      	ands	r2, r1
 80036b2:	00d2      	lsls	r2, r2, #3
 80036b4:	4093      	lsls	r3, r2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036bc:	4936      	ldr	r1, [pc, #216]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3318      	adds	r3, #24
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ca:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	035b      	lsls	r3, r3, #13
 80036e2:	4013      	ands	r3, r2
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	039b      	lsls	r3, r3, #14
 800370c:	4013      	ands	r3, r2
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003720:	2384      	movs	r3, #132	; 0x84
 8003722:	58d3      	ldr	r3, [r2, r3]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43da      	mvns	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	4013      	ands	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003744:	4914      	ldr	r1, [pc, #80]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003746:	2284      	movs	r2, #132	; 0x84
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	58d3      	ldr	r3, [r2, r3]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43da      	mvns	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	4013      	ands	r3, r2
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003772:	4909      	ldr	r1, [pc, #36]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3301      	adds	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	40da      	lsrs	r2, r3
 8003788:	1e13      	subs	r3, r2, #0
 800378a:	d000      	beq.n	800378e <HAL_GPIO_Init+0x2ae>
 800378c:	e6b0      	b.n	80034f0 <HAL_GPIO_Init+0x10>
  }
}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021800 	.word	0x40021800
 800379c:	50000400 	.word	0x50000400
 80037a0:	50000800 	.word	0x50000800
 80037a4:	50000c00 	.word	0x50000c00

080037a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	000a      	movs	r2, r1
 80037b2:	1cbb      	adds	r3, r7, #2
 80037b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	1cba      	adds	r2, r7, #2
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	4013      	ands	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80037c2:	230f      	movs	r3, #15
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e003      	b.n	80037d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037cc:	230f      	movs	r3, #15
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80037d4:	230f      	movs	r3, #15
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	781b      	ldrb	r3, [r3, #0]
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d11f      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	0013      	movs	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	189b      	adds	r3, r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4912      	ldr	r1, [pc, #72]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003816:	0018      	movs	r0, r3
 8003818:	f7fc fc72 	bl	8000100 <__udivsi3>
 800381c:	0003      	movs	r3, r0
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003822:	e008      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b01      	subs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e001      	b.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e009      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	401a      	ands	r2, r3
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	429a      	cmp	r2, r3
 8003846:	d0ed      	beq.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40007000 	.word	0x40007000
 8003858:	fffff9ff 	.word	0xfffff9ff
 800385c:	20000004 	.word	0x20000004
 8003860:	000f4240 	.word	0x000f4240

08003864 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <LL_RCC_GetAPB1Prescaler+0x14>)
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	23e0      	movs	r3, #224	; 0xe0
 800386e:	01db      	lsls	r3, r3, #7
 8003870:	4013      	ands	r3, r2
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e2f3      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	4013      	ands	r3, r2
 8003896:	d100      	bne.n	800389a <HAL_RCC_OscConfig+0x1e>
 8003898:	e07c      	b.n	8003994 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389a:	4bc3      	ldr	r3, [pc, #780]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2238      	movs	r2, #56	; 0x38
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a4:	4bc0      	ldr	r3, [pc, #768]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2203      	movs	r2, #3
 80038aa:	4013      	ands	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_OscConfig+0x3e>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d10b      	bne.n	80038d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	4bb9      	ldr	r3, [pc, #740]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	4013      	ands	r3, r2
 80038ca:	d062      	beq.n	8003992 <HAL_RCC_OscConfig+0x116>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d15e      	bne.n	8003992 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e2ce      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	025b      	lsls	r3, r3, #9
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x78>
 80038e4:	4bb0      	ldr	r3, [pc, #704]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4baf      	ldr	r3, [pc, #700]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0249      	lsls	r1, r1, #9
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e020      	b.n	8003936 <HAL_RCC_OscConfig+0xba>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	23a0      	movs	r3, #160	; 0xa0
 80038fa:	02db      	lsls	r3, r3, #11
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10e      	bne.n	800391e <HAL_RCC_OscConfig+0xa2>
 8003900:	4ba9      	ldr	r3, [pc, #676]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4ba8      	ldr	r3, [pc, #672]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	02c9      	lsls	r1, r1, #11
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	4ba6      	ldr	r3, [pc, #664]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4ba5      	ldr	r3, [pc, #660]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0249      	lsls	r1, r1, #9
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0xba>
 800391e:	4ba2      	ldr	r3, [pc, #648]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4ba1      	ldr	r3, [pc, #644]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003924:	49a1      	ldr	r1, [pc, #644]	; (8003bac <HAL_RCC_OscConfig+0x330>)
 8003926:	400a      	ands	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	4b9f      	ldr	r3, [pc, #636]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b9e      	ldr	r3, [pc, #632]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003930:	499f      	ldr	r1, [pc, #636]	; (8003bb0 <HAL_RCC_OscConfig+0x334>)
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d014      	beq.n	8003968 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7ff fa71 	bl	8002e24 <HAL_GetTick>
 8003942:	0003      	movs	r3, r0
 8003944:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7ff fa6c 	bl	8002e24 <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e28d      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b93      	ldr	r3, [pc, #588]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	029b      	lsls	r3, r3, #10
 8003962:	4013      	ands	r3, r2
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xcc>
 8003966:	e015      	b.n	8003994 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7ff fa5c 	bl	8002e24 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003972:	f7ff fa57 	bl	8002e24 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e278      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003984:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	029b      	lsls	r3, r3, #10
 800398c:	4013      	ands	r3, r2
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0xf6>
 8003990:	e000      	b.n	8003994 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d100      	bne.n	80039a0 <HAL_RCC_OscConfig+0x124>
 800399e:	e099      	b.n	8003ad4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a0:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2238      	movs	r2, #56	; 0x38
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039aa:	4b7f      	ldr	r3, [pc, #508]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d102      	bne.n	80039c0 <HAL_RCC_OscConfig+0x144>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d002      	beq.n	80039c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d135      	bne.n	8003a32 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	4b78      	ldr	r3, [pc, #480]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4013      	ands	r3, r2
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x162>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e24b      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a74      	ldr	r2, [pc, #464]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	021a      	lsls	r2, r3, #8
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d112      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039fa:	4b6b      	ldr	r3, [pc, #428]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6e      	ldr	r2, [pc, #440]	; (8003bb8 <HAL_RCC_OscConfig+0x33c>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a0e:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	2207      	movs	r2, #7
 8003a16:	4013      	ands	r3, r2
 8003a18:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <HAL_RCC_OscConfig+0x340>)
 8003a1a:	40da      	lsrs	r2, r3
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x344>)
 8003a1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x348>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff f9a1 	bl	8002d6c <HAL_InitTick>
 8003a2a:	1e03      	subs	r3, r0, #0
 8003a2c:	d051      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e221      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d030      	beq.n	8003a9c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x33c>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a54:	2180      	movs	r1, #128	; 0x80
 8003a56:	0049      	lsls	r1, r1, #1
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7ff f9e2 	bl	8002e24 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7ff f9dd 	bl	8002e24 <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1fe      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4013      	ands	r3, r2
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b48      	ldr	r3, [pc, #288]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	e01b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	4949      	ldr	r1, [pc, #292]	; (8003bc8 <HAL_RCC_OscConfig+0x34c>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7ff f9bc 	bl	8002e24 <HAL_GetTick>
 8003aac:	0003      	movs	r3, r0
 8003aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7ff f9b7 	bl	8002e24 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1d8      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x236>
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	4013      	ands	r3, r2
 8003adc:	d047      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ade:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2238      	movs	r2, #56	; 0x38
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d03c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d138      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e1ba      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d019      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b0e:	2101      	movs	r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7ff f986 	bl	8002e24 <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7ff f981 	bl	8002e24 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a2      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b30:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	2202      	movs	r2, #2
 8003b36:	4013      	ands	r3, r2
 8003b38:	d0f1      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2a2>
 8003b3a:	e018      	b.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b42:	2101      	movs	r1, #1
 8003b44:	438a      	bics	r2, r1
 8003b46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7ff f96c 	bl	8002e24 <HAL_GetTick>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b52:	f7ff f967 	bl	8002e24 <HAL_GetTick>
 8003b56:	0002      	movs	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e188      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d1f1      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2204      	movs	r2, #4
 8003b74:	4013      	ands	r3, r2
 8003b76:	d100      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2fe>
 8003b78:	e0c6      	b.n	8003d08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2238      	movs	r2, #56	; 0x38
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d11e      	bne.n	8003bcc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2202      	movs	r2, #2
 8003b94:	4013      	ands	r3, r2
 8003b96:	d100      	bne.n	8003b9a <HAL_RCC_OscConfig+0x31e>
 8003b98:	e0b6      	b.n	8003d08 <HAL_RCC_OscConfig+0x48c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d000      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x328>
 8003ba2:	e0b1      	b.n	8003d08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e166      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	fffeffff 	.word	0xfffeffff
 8003bb0:	fffbffff 	.word	0xfffbffff
 8003bb4:	ffff80ff 	.word	0xffff80ff
 8003bb8:	ffffc7ff 	.word	0xffffc7ff
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	20000008 	.word	0x20000008
 8003bc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bcc:	4bac      	ldr	r3, [pc, #688]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	055b      	lsls	r3, r3, #21
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_OscConfig+0x360>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x362>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d011      	beq.n	8003c06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4ba7      	ldr	r3, [pc, #668]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be6:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	0549      	lsls	r1, r1, #21
 8003bec:	430a      	orrs	r2, r1
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bf0:	4ba3      	ldr	r3, [pc, #652]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	055b      	lsls	r3, r3, #21
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003bfe:	231f      	movs	r3, #31
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b9f      	ldr	r3, [pc, #636]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d11a      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c12:	4b9c      	ldr	r3, [pc, #624]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b9b      	ldr	r3, [pc, #620]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	0049      	lsls	r1, r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c20:	f7ff f900 	bl	8002e24 <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7ff f8fb 	bl	8002e24 <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e11c      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3c:	4b91      	ldr	r3, [pc, #580]	; (8003e84 <HAL_RCC_OscConfig+0x608>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3e2>
 8003c50:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c54:	4b8a      	ldr	r3, [pc, #552]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x41c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x404>
 8003c66:	4b86      	ldr	r3, [pc, #536]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c72:	4b83      	ldr	r3, [pc, #524]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x41c>
 8003c80:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c84:	4b7e      	ldr	r3, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c8c:	4b7c      	ldr	r3, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c90:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003c92:	2104      	movs	r1, #4
 8003c94:	438a      	bics	r2, r1
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d014      	beq.n	8003cca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7ff f8c0 	bl	8002e24 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	e009      	b.n	8003cbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7ff f8bb 	bl	8002e24 <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	4a74      	ldr	r2, [pc, #464]	; (8003e88 <HAL_RCC_OscConfig+0x60c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0db      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x42e>
 8003cc8:	e013      	b.n	8003cf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7ff f8ab 	bl	8002e24 <HAL_GetTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7ff f8a6 	bl	8002e24 <HAL_GetTick>
 8003cd8:	0002      	movs	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_RCC_OscConfig+0x60c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0c6      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce8:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	2202      	movs	r2, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003cf2:	231f      	movs	r3, #31
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d02:	4962      	ldr	r1, [pc, #392]	; (8003e8c <HAL_RCC_OscConfig+0x610>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d100      	bne.n	8003d12 <HAL_RCC_OscConfig+0x496>
 8003d10:	e0b0      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2238      	movs	r2, #56	; 0x38
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d100      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4a4>
 8003d1e:	e078      	b.n	8003e12 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d153      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b54      	ldr	r3, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d2e:	4958      	ldr	r1, [pc, #352]	; (8003e90 <HAL_RCC_OscConfig+0x614>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7ff f876 	bl	8002e24 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7ff f871 	bl	8002e24 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e092      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b4b      	ldr	r3, [pc, #300]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	049b      	lsls	r3, r3, #18
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5c:	4b48      	ldr	r3, [pc, #288]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	; (8003e94 <HAL_RCC_OscConfig+0x618>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	431a      	orrs	r2, r3
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	0449      	lsls	r1, r1, #17
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	0549      	lsls	r1, r1, #21
 8003da2:	430a      	orrs	r2, r1
 8003da4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7ff f83d 	bl	8002e24 <HAL_GetTick>
 8003daa:	0003      	movs	r3, r0
 8003dac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db0:	f7ff f838 	bl	8002e24 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e059      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	049b      	lsls	r3, r3, #18
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x534>
 8003dce:	e051      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dd6:	492e      	ldr	r1, [pc, #184]	; (8003e90 <HAL_RCC_OscConfig+0x614>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7ff f822 	bl	8002e24 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7ff f81d 	bl	8002e24 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03e      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	049b      	lsls	r3, r3, #18
 8003e00:	4013      	ands	r3, r2
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003e0a:	4923      	ldr	r1, [pc, #140]	; (8003e98 <HAL_RCC_OscConfig+0x61c>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	e030      	b.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02b      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_RCC_OscConfig+0x604>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2203      	movs	r2, #3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d11e      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2270      	movs	r2, #112	; 0x70
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d117      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	23fe      	movs	r3, #254	; 0xfe
 8003e44:	01db      	lsls	r3, r3, #7
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10e      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	23f8      	movs	r3, #248	; 0xf8
 8003e56:	039b      	lsls	r3, r3, #14
 8003e58:	401a      	ands	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	0f5b      	lsrs	r3, r3, #29
 8003e66:	075a      	lsls	r2, r3, #29
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b008      	add	sp, #32
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40007000 	.word	0x40007000
 8003e88:	00001388 	.word	0x00001388
 8003e8c:	efffffff 	.word	0xefffffff
 8003e90:	feffffff 	.word	0xfeffffff
 8003e94:	1fc1808c 	.word	0x1fc1808c
 8003e98:	effefffc 	.word	0xeffefffc

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0e9      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d91e      	bls.n	8003efc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b73      	ldr	r3, [pc, #460]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2207      	movs	r2, #7
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ed0:	f7fe ffa8 	bl	8002e24 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ed8:	e009      	b.n	8003eee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eda:	f7fe ffa3 	bl	8002e24 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	4a6a      	ldr	r2, [pc, #424]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0ca      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eee:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1ee      	bne.n	8003eda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d006      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	4b5f      	ldr	r3, [pc, #380]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f16:	21e0      	movs	r1, #224	; 0xe0
 8003f18:	01c9      	lsls	r1, r1, #7
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4a5d      	ldr	r2, [pc, #372]	; (8004098 <HAL_RCC_ClockConfig+0x1fc>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2201      	movs	r2, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d057      	beq.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d12b      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e097      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5c:	4b4d      	ldr	r3, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	049b      	lsls	r3, r3, #18
 8003f64:	4013      	ands	r3, r2
 8003f66:	d11f      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e08b      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f74:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d113      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e07f      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d106      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8c:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f90:	2202      	movs	r2, #2
 8003f92:	4013      	ands	r3, r2
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e074      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e06d      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2207      	movs	r2, #7
 8003fae:	4393      	bics	r3, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fe ff32 	bl	8002e24 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc4:	e009      	b.n	8003fda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc6:	f7fe ff2d 	bl	8002e24 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	4a2f      	ldr	r2, [pc, #188]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e054      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2238      	movs	r2, #56	; 0x38
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1ec      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d21e      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2207      	movs	r2, #7
 8004000:	4393      	bics	r3, r2
 8004002:	0019      	movs	r1, r3
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800400c:	f7fe ff0a 	bl	8002e24 <HAL_GetTick>
 8004010:	0003      	movs	r3, r0
 8004012:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004014:	e009      	b.n	800402a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004016:	f7fe ff05 	bl	8002e24 <HAL_GetTick>
 800401a:	0002      	movs	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e02c      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2207      	movs	r2, #7
 8004030:	4013      	ands	r3, r2
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2204      	movs	r2, #4
 800403e:	4013      	ands	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_RCC_ClockConfig+0x200>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004056:	f000 f829 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 800405a:	0001      	movs	r1, r0
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	220f      	movs	r2, #15
 8004064:	401a      	ands	r2, r3
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_RCC_ClockConfig+0x204>)
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	58d3      	ldr	r3, [r2, r3]
 800406c:	221f      	movs	r2, #31
 800406e:	4013      	ands	r3, r2
 8004070:	000a      	movs	r2, r1
 8004072:	40da      	lsrs	r2, r3
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_ClockConfig+0x208>)
 8004076:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x20c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0018      	movs	r0, r3
 800407e:	f7fe fe75 	bl	8002d6c <HAL_InitTick>
 8004082:	0003      	movs	r3, r0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b004      	add	sp, #16
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40022000 	.word	0x40022000
 8004090:	00001388 	.word	0x00001388
 8004094:	40021000 	.word	0x40021000
 8004098:	fffff0ff 	.word	0xfffff0ff
 800409c:	ffff8fff 	.word	0xffff8fff
 80040a0:	08007330 	.word	0x08007330
 80040a4:	20000004 	.word	0x20000004
 80040a8:	20000008 	.word	0x20000008

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040b2:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2238      	movs	r2, #56	; 0x38
 80040b8:	4013      	ands	r3, r2
 80040ba:	d10f      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0adb      	lsrs	r3, r3, #11
 80040c2:	2207      	movs	r2, #7
 80040c4:	4013      	ands	r3, r2
 80040c6:	2201      	movs	r2, #1
 80040c8:	409a      	lsls	r2, r3
 80040ca:	0013      	movs	r3, r2
 80040cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	4835      	ldr	r0, [pc, #212]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040d2:	f7fc f815 	bl	8000100 <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e05d      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040dc:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2238      	movs	r2, #56	; 0x38
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d102      	bne.n	80040ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCC_GetSysClockFreq+0x100>)
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	e054      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2238      	movs	r2, #56	; 0x38
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d138      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80040fa:	4b2a      	ldr	r3, [pc, #168]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2203      	movs	r2, #3
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	2207      	movs	r2, #7
 800410c:	4013      	ands	r3, r2
 800410e:	3301      	adds	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d10d      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4824      	ldr	r0, [pc, #144]	; (80041ac <HAL_RCC_GetSysClockFreq+0x100>)
 800411c:	f7fb fff0 	bl	8000100 <__udivsi3>
 8004120:	0003      	movs	r3, r0
 8004122:	0019      	movs	r1, r3
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	227f      	movs	r2, #127	; 0x7f
 800412c:	4013      	ands	r3, r2
 800412e:	434b      	muls	r3, r1
 8004130:	617b      	str	r3, [r7, #20]
        break;
 8004132:	e00d      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	481c      	ldr	r0, [pc, #112]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004138:	f7fb ffe2 	bl	8000100 <__udivsi3>
 800413c:	0003      	movs	r3, r0
 800413e:	0019      	movs	r1, r3
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	227f      	movs	r2, #127	; 0x7f
 8004148:	4013      	ands	r3, r2
 800414a:	434b      	muls	r3, r1
 800414c:	617b      	str	r3, [r7, #20]
        break;
 800414e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	0f5b      	lsrs	r3, r3, #29
 8004156:	2207      	movs	r2, #7
 8004158:	4013      	ands	r3, r2
 800415a:	3301      	adds	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7fb ffcd 	bl	8000100 <__udivsi3>
 8004166:	0003      	movs	r3, r0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e015      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2238      	movs	r2, #56	; 0x38
 8004172:	4013      	ands	r3, r2
 8004174:	2b20      	cmp	r3, #32
 8004176:	d103      	bne.n	8004180 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	e00b      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2238      	movs	r2, #56	; 0x38
 8004186:	4013      	ands	r3, r2
 8004188:	2b18      	cmp	r3, #24
 800418a:	d103      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800418c:	23fa      	movs	r3, #250	; 0xfa
 800418e:	01db      	lsls	r3, r3, #7
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e001      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004198:	693b      	ldr	r3, [r7, #16]
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b006      	add	sp, #24
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	40021000 	.word	0x40021000
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	20000004 	.word	0x20000004

080041c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c4:	b5b0      	push	{r4, r5, r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041c8:	f7ff fff2 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041cc:	0004      	movs	r4, r0
 80041ce:	f7ff fb49 	bl	8003864 <LL_RCC_GetAPB1Prescaler>
 80041d2:	0003      	movs	r3, r0
 80041d4:	0b1a      	lsrs	r2, r3, #12
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	221f      	movs	r2, #31
 80041de:	4013      	ands	r3, r2
 80041e0:	40dc      	lsrs	r4, r3
 80041e2:	0023      	movs	r3, r4
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	08007370 	.word	0x08007370

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e04a      	b.n	8004298 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	223d      	movs	r2, #61	; 0x3d
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	223c      	movs	r2, #60	; 0x3c
 8004212:	2100      	movs	r1, #0
 8004214:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f7fe fbf1 	bl	8002a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	223d      	movs	r2, #61	; 0x3d
 8004222:	2102      	movs	r1, #2
 8004224:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	0019      	movs	r1, r3
 8004230:	0010      	movs	r0, r2
 8004232:	f000 fcb9 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2248      	movs	r2, #72	; 0x48
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	223e      	movs	r2, #62	; 0x3e
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	223f      	movs	r2, #63	; 0x3f
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2240      	movs	r2, #64	; 0x40
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2241      	movs	r2, #65	; 0x41
 800425a:	2101      	movs	r1, #1
 800425c:	5499      	strb	r1, [r3, r2]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2242      	movs	r2, #66	; 0x42
 8004262:	2101      	movs	r1, #1
 8004264:	5499      	strb	r1, [r3, r2]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2243      	movs	r2, #67	; 0x43
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2244      	movs	r2, #68	; 0x44
 8004272:	2101      	movs	r1, #1
 8004274:	5499      	strb	r1, [r3, r2]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2245      	movs	r2, #69	; 0x45
 800427a:	2101      	movs	r1, #1
 800427c:	5499      	strb	r1, [r3, r2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2246      	movs	r2, #70	; 0x46
 8004282:	2101      	movs	r1, #1
 8004284:	5499      	strb	r1, [r3, r2]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2247      	movs	r2, #71	; 0x47
 800428a:	2101      	movs	r1, #1
 800428c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	223d      	movs	r2, #61	; 0x3d
 8004292:	2101      	movs	r1, #1
 8004294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223d      	movs	r2, #61	; 0x3d
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e037      	b.n	8004328 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	223d      	movs	r2, #61	; 0x3d
 80042bc:	2102      	movs	r1, #2
 80042be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2101      	movs	r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIM_Base_Start_IT+0x90>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x44>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_TIM_Base_Start_IT+0x94>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d116      	bne.n	8004312 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4a13      	ldr	r2, [pc, #76]	; (8004338 <HAL_TIM_Base_Start_IT+0x98>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d016      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x84>
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	025b      	lsls	r3, r3, #9
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d011      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2101      	movs	r1, #1
 800430c:	430a      	orrs	r2, r1
 800430e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	e008      	b.n	8004324 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2101      	movs	r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e000      	b.n	8004326 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	00010007 	.word	0x00010007

0800433c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e04a      	b.n	80043e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	223d      	movs	r2, #61	; 0x3d
 8004352:	5c9b      	ldrb	r3, [r3, r2]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d107      	bne.n	800436a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	223c      	movs	r2, #60	; 0x3c
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f000 f841 	bl	80043ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	223d      	movs	r2, #61	; 0x3d
 800436e:	2102      	movs	r1, #2
 8004370:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	0019      	movs	r1, r3
 800437c:	0010      	movs	r0, r2
 800437e:	f000 fc13 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2248      	movs	r2, #72	; 0x48
 8004386:	2101      	movs	r1, #1
 8004388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	223e      	movs	r2, #62	; 0x3e
 800438e:	2101      	movs	r1, #1
 8004390:	5499      	strb	r1, [r3, r2]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223f      	movs	r2, #63	; 0x3f
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	2101      	movs	r1, #1
 80043a0:	5499      	strb	r1, [r3, r2]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2241      	movs	r2, #65	; 0x41
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2242      	movs	r2, #66	; 0x42
 80043ae:	2101      	movs	r1, #1
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2243      	movs	r2, #67	; 0x43
 80043b6:	2101      	movs	r1, #1
 80043b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2244      	movs	r2, #68	; 0x44
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2245      	movs	r2, #69	; 0x45
 80043c6:	2101      	movs	r1, #1
 80043c8:	5499      	strb	r1, [r3, r2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2246      	movs	r2, #70	; 0x46
 80043ce:	2101      	movs	r1, #1
 80043d0:	5499      	strb	r1, [r3, r2]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2247      	movs	r2, #71	; 0x47
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	223d      	movs	r2, #61	; 0x3d
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <HAL_TIM_PWM_Start+0x22>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223e      	movs	r2, #62	; 0x3e
 8004410:	5c9b      	ldrb	r3, [r3, r2]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	4193      	sbcs	r3, r2
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e037      	b.n	800448e <HAL_TIM_PWM_Start+0x92>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d108      	bne.n	8004436 <HAL_TIM_PWM_Start+0x3a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	223f      	movs	r2, #63	; 0x3f
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	4193      	sbcs	r3, r2
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e02b      	b.n	800448e <HAL_TIM_PWM_Start+0x92>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d108      	bne.n	800444e <HAL_TIM_PWM_Start+0x52>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2240      	movs	r2, #64	; 0x40
 8004440:	5c9b      	ldrb	r3, [r3, r2]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	4193      	sbcs	r3, r2
 800444a:	b2db      	uxtb	r3, r3
 800444c:	e01f      	b.n	800448e <HAL_TIM_PWM_Start+0x92>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d108      	bne.n	8004466 <HAL_TIM_PWM_Start+0x6a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2241      	movs	r2, #65	; 0x41
 8004458:	5c9b      	ldrb	r3, [r3, r2]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	1e5a      	subs	r2, r3, #1
 8004460:	4193      	sbcs	r3, r2
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e013      	b.n	800448e <HAL_TIM_PWM_Start+0x92>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b10      	cmp	r3, #16
 800446a:	d108      	bne.n	800447e <HAL_TIM_PWM_Start+0x82>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2242      	movs	r2, #66	; 0x42
 8004470:	5c9b      	ldrb	r3, [r3, r2]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	4193      	sbcs	r3, r2
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e007      	b.n	800448e <HAL_TIM_PWM_Start+0x92>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2243      	movs	r2, #67	; 0x43
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	1e5a      	subs	r2, r3, #1
 800448a:	4193      	sbcs	r3, r2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e07b      	b.n	800458e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0xaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	223e      	movs	r2, #62	; 0x3e
 80044a0:	2102      	movs	r1, #2
 80044a2:	5499      	strb	r1, [r3, r2]
 80044a4:	e023      	b.n	80044ee <HAL_TIM_PWM_Start+0xf2>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0xba>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	223f      	movs	r2, #63	; 0x3f
 80044b0:	2102      	movs	r1, #2
 80044b2:	5499      	strb	r1, [r3, r2]
 80044b4:	e01b      	b.n	80044ee <HAL_TIM_PWM_Start+0xf2>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Start+0xca>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	2102      	movs	r1, #2
 80044c2:	5499      	strb	r1, [r3, r2]
 80044c4:	e013      	b.n	80044ee <HAL_TIM_PWM_Start+0xf2>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Start+0xda>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2241      	movs	r2, #65	; 0x41
 80044d0:	2102      	movs	r1, #2
 80044d2:	5499      	strb	r1, [r3, r2]
 80044d4:	e00b      	b.n	80044ee <HAL_TIM_PWM_Start+0xf2>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_PWM_Start+0xea>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2242      	movs	r2, #66	; 0x42
 80044e0:	2102      	movs	r1, #2
 80044e2:	5499      	strb	r1, [r3, r2]
 80044e4:	e003      	b.n	80044ee <HAL_TIM_PWM_Start+0xf2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2243      	movs	r2, #67	; 0x43
 80044ea:	2102      	movs	r1, #2
 80044ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	2201      	movs	r2, #1
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 ff08 	bl	800530c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <HAL_TIM_PWM_Start+0x19c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_TIM_PWM_Start+0x11e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a24      	ldr	r2, [pc, #144]	; (800459c <HAL_TIM_PWM_Start+0x1a0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_TIM_PWM_Start+0x11e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_TIM_PWM_Start+0x1a4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_TIM_PWM_Start+0x122>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <HAL_TIM_PWM_Start+0x124>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	0209      	lsls	r1, r1, #8
 8004532:	430a      	orrs	r2, r1
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a17      	ldr	r2, [pc, #92]	; (8004598 <HAL_TIM_PWM_Start+0x19c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_TIM_PWM_Start+0x14e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <HAL_TIM_PWM_Start+0x1a8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d116      	bne.n	8004578 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_TIM_PWM_Start+0x1ac>)
 8004552:	4013      	ands	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d016      	beq.n	800458a <HAL_TIM_PWM_Start+0x18e>
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	429a      	cmp	r2, r3
 8004564:	d011      	beq.n	800458a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	e008      	b.n	800458a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2101      	movs	r1, #1
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e000      	b.n	800458c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b004      	add	sp, #16
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800
 80045a4:	40000400 	.word	0x40000400
 80045a8:	00010007 	.word	0x00010007

080045ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2202      	movs	r2, #2
 80045c8:	4013      	ands	r3, r2
 80045ca:	d021      	beq.n	8004610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2202      	movs	r2, #2
 80045d0:	4013      	ands	r3, r2
 80045d2:	d01d      	beq.n	8004610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2203      	movs	r2, #3
 80045da:	4252      	negs	r2, r2
 80045dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 fac0 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e007      	b.n	800460a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 fab3 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 fabf 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2204      	movs	r2, #4
 8004614:	4013      	ands	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	d01e      	beq.n	800465e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2205      	movs	r2, #5
 8004626:	4252      	negs	r2, r2
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	23c0      	movs	r3, #192	; 0xc0
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 fa99 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004646:	e007      	b.n	8004658 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	0018      	movs	r0, r3
 800464c:	f000 fa8c 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0018      	movs	r0, r3
 8004654:	f000 fa98 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2208      	movs	r2, #8
 8004662:	4013      	ands	r3, r2
 8004664:	d021      	beq.n	80046aa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2208      	movs	r2, #8
 800466a:	4013      	ands	r3, r2
 800466c:	d01d      	beq.n	80046aa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2209      	movs	r2, #9
 8004674:	4252      	negs	r2, r2
 8004676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2204      	movs	r2, #4
 800467c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2203      	movs	r2, #3
 8004686:	4013      	ands	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 fa73 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004692:	e007      	b.n	80046a4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0018      	movs	r0, r3
 8004698:	f000 fa66 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 fa72 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2210      	movs	r2, #16
 80046ae:	4013      	ands	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2210      	movs	r2, #16
 80046b6:	4013      	ands	r3, r2
 80046b8:	d01e      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2211      	movs	r2, #17
 80046c0:	4252      	negs	r2, r2
 80046c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2208      	movs	r2, #8
 80046c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	23c0      	movs	r3, #192	; 0xc0
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4013      	ands	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 fa4c 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e007      	b.n	80046f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 fa3f 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f000 fa4b 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	d00c      	beq.n	800471a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	4013      	ands	r3, r2
 8004706:	d008      	beq.n	800471a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2202      	movs	r2, #2
 800470e:	4252      	negs	r2, r2
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f7fd fd41 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2280      	movs	r2, #128	; 0x80
 800471e:	4013      	ands	r3, r2
 8004720:	d104      	bne.n	800472c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	019b      	lsls	r3, r3, #6
 8004728:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800472a:	d00b      	beq.n	8004744 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	4013      	ands	r3, r2
 8004732:	d007      	beq.n	8004744 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <HAL_TIM_IRQHandler+0x208>)
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 ff0e 	bl	8005560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4013      	ands	r3, r2
 800474c:	d00b      	beq.n	8004766 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	4013      	ands	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <HAL_TIM_IRQHandler+0x20c>)
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f000 ff05 	bl	8005570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2240      	movs	r2, #64	; 0x40
 800476a:	4013      	ands	r3, r2
 800476c:	d00c      	beq.n	8004788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	4013      	ands	r3, r2
 8004774:	d008      	beq.n	8004788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2241      	movs	r2, #65	; 0x41
 800477c:	4252      	negs	r2, r2
 800477e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fa08 	bl	8004b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2220      	movs	r2, #32
 800478c:	4013      	ands	r3, r2
 800478e:	d00c      	beq.n	80047aa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	4013      	ands	r3, r2
 8004796:	d008      	beq.n	80047aa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2221      	movs	r2, #33	; 0x21
 800479e:	4252      	negs	r2, r2
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 fed3 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b004      	add	sp, #16
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	ffffdf7f 	.word	0xffffdf7f
 80047b8:	fffffeff 	.word	0xfffffeff

080047bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2317      	movs	r3, #23
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	223c      	movs	r2, #60	; 0x3c
 80047d4:	5c9b      	ldrb	r3, [r3, r2]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_TIM_PWM_ConfigChannel+0x22>
 80047da:	2302      	movs	r3, #2
 80047dc:	e0e5      	b.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	223c      	movs	r2, #60	; 0x3c
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b14      	cmp	r3, #20
 80047ea:	d900      	bls.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80047ec:	e0d1      	b.n	8004992 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	009a      	lsls	r2, r3, #2
 80047f2:	4b70      	ldr	r3, [pc, #448]	; (80049b4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80047f4:	18d3      	adds	r3, r2, r3
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f000 fa4a 	bl	8004c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2108      	movs	r1, #8
 8004814:	430a      	orrs	r2, r1
 8004816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2104      	movs	r1, #4
 8004824:	438a      	bics	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6999      	ldr	r1, [r3, #24]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	619a      	str	r2, [r3, #24]
      break;
 800483a:	e0af      	b.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f000 faa9 	bl	8004d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0109      	lsls	r1, r1, #4
 8004858:	430a      	orrs	r2, r1
 800485a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4954      	ldr	r1, [pc, #336]	; (80049b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004868:	400a      	ands	r2, r1
 800486a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6999      	ldr	r1, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	619a      	str	r2, [r3, #24]
      break;
 8004880:	e08c      	b.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	0011      	movs	r1, r2
 800488a:	0018      	movs	r0, r3
 800488c:	f000 fb04 	bl	8004e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2108      	movs	r1, #8
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2104      	movs	r1, #4
 80048ac:	438a      	bics	r2, r1
 80048ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69d9      	ldr	r1, [r3, #28]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]
      break;
 80048c2:	e06b      	b.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	0011      	movs	r1, r2
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 fb65 	bl	8004f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	0109      	lsls	r1, r1, #4
 80048e0:	430a      	orrs	r2, r1
 80048e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4932      	ldr	r1, [pc, #200]	; (80049b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80048f0:	400a      	ands	r2, r1
 80048f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69d9      	ldr	r1, [r3, #28]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	61da      	str	r2, [r3, #28]
      break;
 8004908:	e048      	b.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f000 fba6 	bl	8005064 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2108      	movs	r1, #8
 8004924:	430a      	orrs	r2, r1
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2104      	movs	r1, #4
 8004934:	438a      	bics	r2, r1
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800494a:	e027      	b.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	0011      	movs	r1, r2
 8004954:	0018      	movs	r0, r3
 8004956:	f000 fbdf 	bl	8005118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	0109      	lsls	r1, r1, #4
 8004968:	430a      	orrs	r2, r1
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4910      	ldr	r1, [pc, #64]	; (80049b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004978:	400a      	ands	r2, r1
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004990:	e004      	b.n	800499c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004992:	2317      	movs	r3, #23
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
      break;
 800499a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	223c      	movs	r2, #60	; 0x3c
 80049a0:	2100      	movs	r1, #0
 80049a2:	5499      	strb	r1, [r3, r2]

  return status;
 80049a4:	2317      	movs	r3, #23
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	781b      	ldrb	r3, [r3, #0]
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b006      	add	sp, #24
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	08007390 	.word	0x08007390
 80049b8:	fffffbff 	.word	0xfffffbff

080049bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	230f      	movs	r3, #15
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	223c      	movs	r2, #60	; 0x3c
 80049d2:	5c9b      	ldrb	r3, [r3, r2]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIM_ConfigClockSource+0x20>
 80049d8:	2302      	movs	r3, #2
 80049da:	e0bc      	b.n	8004b56 <HAL_TIM_ConfigClockSource+0x19a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	223c      	movs	r2, #60	; 0x3c
 80049e0:	2101      	movs	r1, #1
 80049e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	223d      	movs	r2, #61	; 0x3d
 80049e8:	2102      	movs	r1, #2
 80049ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a5a      	ldr	r2, [pc, #360]	; (8004b60 <HAL_TIM_ConfigClockSource+0x1a4>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a59      	ldr	r2, [pc, #356]	; (8004b64 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2280      	movs	r2, #128	; 0x80
 8004a12:	0192      	lsls	r2, r2, #6
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d040      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0xde>
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	0192      	lsls	r2, r2, #6
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d900      	bls.n	8004a22 <HAL_TIM_ConfigClockSource+0x66>
 8004a20:	e088      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	0152      	lsls	r2, r2, #5
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d100      	bne.n	8004a2c <HAL_TIM_ConfigClockSource+0x70>
 8004a2a:	e088      	b.n	8004b3e <HAL_TIM_ConfigClockSource+0x182>
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	0152      	lsls	r2, r2, #5
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d900      	bls.n	8004a36 <HAL_TIM_ConfigClockSource+0x7a>
 8004a34:	e07e      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a36:	2b70      	cmp	r3, #112	; 0x70
 8004a38:	d018      	beq.n	8004a6c <HAL_TIM_ConfigClockSource+0xb0>
 8004a3a:	d900      	bls.n	8004a3e <HAL_TIM_ConfigClockSource+0x82>
 8004a3c:	e07a      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a3e:	2b60      	cmp	r3, #96	; 0x60
 8004a40:	d04f      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x126>
 8004a42:	d900      	bls.n	8004a46 <HAL_TIM_ConfigClockSource+0x8a>
 8004a44:	e076      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a46:	2b50      	cmp	r3, #80	; 0x50
 8004a48:	d03b      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x106>
 8004a4a:	d900      	bls.n	8004a4e <HAL_TIM_ConfigClockSource+0x92>
 8004a4c:	e072      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d057      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x146>
 8004a52:	d900      	bls.n	8004a56 <HAL_TIM_ConfigClockSource+0x9a>
 8004a54:	e06e      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a56:	2b30      	cmp	r3, #48	; 0x30
 8004a58:	d063      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x166>
 8004a5a:	d86b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d060      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x166>
 8004a60:	d868      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05d      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x166>
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d05b      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x166>
 8004a6a:	e063      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6899      	ldr	r1, [r3, #8]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f000 fc26 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2277      	movs	r2, #119	; 0x77
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]
      break;
 8004a98:	e052      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6899      	ldr	r1, [r3, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f000 fc0f 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	01c9      	lsls	r1, r1, #7
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
      break;
 8004ac0:	e03e      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	001a      	movs	r2, r3
 8004ad0:	f000 fb80 	bl	80051d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2150      	movs	r1, #80	; 0x50
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 fbda 	bl	8005294 <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e02e      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	001a      	movs	r2, r3
 8004af0:	f000 fb9e 	bl	8005230 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2160      	movs	r1, #96	; 0x60
 8004afa:	0018      	movs	r0, r3
 8004afc:	f000 fbca 	bl	8005294 <TIM_ITRx_SetConfig>
      break;
 8004b00:	e01e      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	001a      	movs	r2, r3
 8004b10:	f000 fb60 	bl	80051d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 fbba 	bl	8005294 <TIM_ITRx_SetConfig>
      break;
 8004b20:	e00e      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	0010      	movs	r0, r2
 8004b2e:	f000 fbb1 	bl	8005294 <TIM_ITRx_SetConfig>
      break;
 8004b32:	e005      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b34:	230f      	movs	r3, #15
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
      break;
 8004b3c:	e000      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004b3e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	223d      	movs	r2, #61	; 0x3d
 8004b44:	2101      	movs	r1, #1
 8004b46:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	223c      	movs	r2, #60	; 0x3c
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]

  return status;
 8004b50:	230f      	movs	r3, #15
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	781b      	ldrb	r3, [r3, #0]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	ffceff88 	.word	0xffceff88
 8004b64:	ffff00ff 	.word	0xffff00ff

08004b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <TIM_Base_SetConfig+0xdc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0x20>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a31      	ldr	r2, [pc, #196]	; (8004c88 <TIM_Base_SetConfig+0xe0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d108      	bne.n	8004bda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2270      	movs	r2, #112	; 0x70
 8004bcc:	4393      	bics	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <TIM_Base_SetConfig+0xdc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <TIM_Base_SetConfig+0xe0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <TIM_Base_SetConfig+0xe4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <TIM_Base_SetConfig+0xe8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <TIM_Base_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <TIM_Base_SetConfig+0xf0>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	4393      	bics	r3, r2
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <TIM_Base_SetConfig+0xdc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d007      	beq.n	8004c52 <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_Base_SetConfig+0xe8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_Base_SetConfig+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <TIM_Base_SetConfig+0xec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d103      	bne.n	8004c5a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d106      	bne.n	8004c7a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2201      	movs	r2, #1
 8004c72:	4393      	bics	r3, r2
 8004c74:	001a      	movs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]
  }
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b004      	add	sp, #16
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40002000 	.word	0x40002000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800
 8004c98:	fffffcff 	.word	0xfffffcff

08004c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a2e      	ldr	r2, [pc, #184]	; (8004d84 <TIM_OC1_SetConfig+0xe8>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	4393      	bics	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	4393      	bics	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <TIM_OC1_SetConfig+0xec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_OC1_SetConfig+0x6e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <TIM_OC1_SetConfig+0xf0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_OC1_SetConfig+0x6e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <TIM_OC1_SetConfig+0xf4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10c      	bne.n	8004d24 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4393      	bics	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	4393      	bics	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <TIM_OC1_SetConfig+0xec>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_OC1_SetConfig+0xa0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <TIM_OC1_SetConfig+0xf0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_OC1_SetConfig+0xa0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <TIM_OC1_SetConfig+0xf4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d111      	bne.n	8004d60 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <TIM_OC1_SetConfig+0xf8>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <TIM_OC1_SetConfig+0xfc>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b006      	add	sp, #24
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	fffeff8f 	.word	0xfffeff8f
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	fffffeff 	.word	0xfffffeff
 8004d98:	fffffdff 	.word	0xfffffdff

08004d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	2210      	movs	r2, #16
 8004db2:	4393      	bics	r3, r2
 8004db4:	001a      	movs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <TIM_OC2_SetConfig+0xe0>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <TIM_OC2_SetConfig+0xe4>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2220      	movs	r2, #32
 8004de6:	4393      	bics	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <TIM_OC2_SetConfig+0xe8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10d      	bne.n	8004e1a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2280      	movs	r2, #128	; 0x80
 8004e02:	4393      	bics	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	4393      	bics	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <TIM_OC2_SetConfig+0xe8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_OC2_SetConfig+0x96>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <TIM_OC2_SetConfig+0xec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC2_SetConfig+0x96>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <TIM_OC2_SetConfig+0xf0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d113      	bne.n	8004e5a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <TIM_OC2_SetConfig+0xf4>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <TIM_OC2_SetConfig+0xf8>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b006      	add	sp, #24
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	feff8fff 	.word	0xfeff8fff
 8004e80:	fffffcff 	.word	0xfffffcff
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800
 8004e90:	fffffbff 	.word	0xfffffbff
 8004e94:	fffff7ff 	.word	0xfffff7ff

08004e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4a31      	ldr	r2, [pc, #196]	; (8004f74 <TIM_OC3_SetConfig+0xdc>)
 8004eae:	401a      	ands	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <TIM_OC3_SetConfig+0xe0>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	4393      	bics	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <TIM_OC3_SetConfig+0xe4>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <TIM_OC3_SetConfig+0xe8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10d      	bne.n	8004f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <TIM_OC3_SetConfig+0xec>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <TIM_OC3_SetConfig+0xf0>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <TIM_OC3_SetConfig+0xe8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_OC3_SetConfig+0x92>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <TIM_OC3_SetConfig+0xf4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_OC3_SetConfig+0x92>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <TIM_OC3_SetConfig+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d113      	bne.n	8004f52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <TIM_OC3_SetConfig+0xfc>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <TIM_OC3_SetConfig+0x100>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b006      	add	sp, #24
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	fffffeff 	.word	0xfffffeff
 8004f78:	fffeff8f 	.word	0xfffeff8f
 8004f7c:	fffffdff 	.word	0xfffffdff
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	fffff7ff 	.word	0xfffff7ff
 8004f88:	fffffbff 	.word	0xfffffbff
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800
 8004f94:	ffffefff 	.word	0xffffefff
 8004f98:	ffffdfff 	.word	0xffffdfff

08004f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4a24      	ldr	r2, [pc, #144]	; (8005044 <TIM_OC4_SetConfig+0xa8>)
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a20      	ldr	r2, [pc, #128]	; (8005048 <TIM_OC4_SetConfig+0xac>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a1f      	ldr	r2, [pc, #124]	; (800504c <TIM_OC4_SetConfig+0xb0>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <TIM_OC4_SetConfig+0xb4>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	031b      	lsls	r3, r3, #12
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	; (8005054 <TIM_OC4_SetConfig+0xb8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_OC4_SetConfig+0x70>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <TIM_OC4_SetConfig+0xbc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_OC4_SetConfig+0x70>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <TIM_OC4_SetConfig+0xc0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d109      	bne.n	8005020 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4a14      	ldr	r2, [pc, #80]	; (8005060 <TIM_OC4_SetConfig+0xc4>)
 8005010:	4013      	ands	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b006      	add	sp, #24
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	ffffefff 	.word	0xffffefff
 8005048:	feff8fff 	.word	0xfeff8fff
 800504c:	fffffcff 	.word	0xfffffcff
 8005050:	ffffdfff 	.word	0xffffdfff
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800
 8005060:	ffffbfff 	.word	0xffffbfff

08005064 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4a21      	ldr	r2, [pc, #132]	; (8005100 <TIM_OC5_SetConfig+0x9c>)
 800507a:	401a      	ands	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <TIM_OC5_SetConfig+0xa0>)
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4a19      	ldr	r2, [pc, #100]	; (8005108 <TIM_OC5_SetConfig+0xa4>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a15      	ldr	r2, [pc, #84]	; (800510c <TIM_OC5_SetConfig+0xa8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d007      	beq.n	80050ca <TIM_OC5_SetConfig+0x66>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <TIM_OC5_SetConfig+0xac>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC5_SetConfig+0x66>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a13      	ldr	r2, [pc, #76]	; (8005114 <TIM_OC5_SetConfig+0xb0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d109      	bne.n	80050de <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <TIM_OC5_SetConfig+0x9c>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b006      	add	sp, #24
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	fffeffff 	.word	0xfffeffff
 8005104:	fffeff8f 	.word	0xfffeff8f
 8005108:	fffdffff 	.word	0xfffdffff
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40014400 	.word	0x40014400
 8005114:	40014800 	.word	0x40014800

08005118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <TIM_OC6_SetConfig+0xa0>)
 800512e:	401a      	ands	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <TIM_OC6_SetConfig+0xa4>)
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <TIM_OC6_SetConfig+0xa8>)
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	051b      	lsls	r3, r3, #20
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <TIM_OC6_SetConfig+0xac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_OC6_SetConfig+0x68>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <TIM_OC6_SetConfig+0xb0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC6_SetConfig+0x68>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a14      	ldr	r2, [pc, #80]	; (80051cc <TIM_OC6_SetConfig+0xb4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <TIM_OC6_SetConfig+0xb8>)
 8005184:	4013      	ands	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	029b      	lsls	r3, r3, #10
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b006      	add	sp, #24
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	ffefffff 	.word	0xffefffff
 80051bc:	feff8fff 	.word	0xfeff8fff
 80051c0:	ffdfffff 	.word	0xffdfffff
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800
 80051d0:	fffbffff 	.word	0xfffbffff

080051d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	2201      	movs	r2, #1
 80051ec:	4393      	bics	r3, r2
 80051ee:	001a      	movs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	22f0      	movs	r2, #240	; 0xf0
 80051fe:	4393      	bics	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	220a      	movs	r2, #10
 8005210:	4393      	bics	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b006      	add	sp, #24
 800522e:	bd80      	pop	{r7, pc}

08005230 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	2210      	movs	r2, #16
 8005248:	4393      	bics	r3, r2
 800524a:	001a      	movs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4a0d      	ldr	r2, [pc, #52]	; (8005290 <TIM_TI2_ConfigInputStage+0x60>)
 800525a:	4013      	ands	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	22a0      	movs	r2, #160	; 0xa0
 800526c:	4393      	bics	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b006      	add	sp, #24
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	ffff0fff 	.word	0xffff0fff

08005294 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <TIM_ITRx_SetConfig+0x34>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	2207      	movs	r2, #7
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	609a      	str	r2, [r3, #8]
}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b004      	add	sp, #16
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	ffcfff8f 	.word	0xffcfff8f

080052cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <TIM_ETR_SetConfig+0x3c>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	b006      	add	sp, #24
 8005306:	bd80      	pop	{r7, pc}
 8005308:	ffff00ff 	.word	0xffff00ff

0800530c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	221f      	movs	r2, #31
 800531c:	4013      	ands	r3, r2
 800531e:	2201      	movs	r2, #1
 8005320:	409a      	lsls	r2, r3
 8005322:	0013      	movs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	43d2      	mvns	r2, r2
 800532e:	401a      	ands	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	211f      	movs	r1, #31
 800533c:	400b      	ands	r3, r1
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4099      	lsls	r1, r3
 8005342:	000b      	movs	r3, r1
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b006      	add	sp, #24
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	223c      	movs	r2, #60	; 0x3c
 8005362:	5c9b      	ldrb	r3, [r3, r2]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e04a      	b.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	223c      	movs	r2, #60	; 0x3c
 8005370:	2101      	movs	r1, #1
 8005372:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	223d      	movs	r2, #61	; 0x3d
 8005378:	2102      	movs	r1, #2
 800537a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800539a:	4013      	ands	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2270      	movs	r2, #112	; 0x70
 80053ac:	4393      	bics	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a11      	ldr	r2, [pc, #68]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a10      	ldr	r2, [pc, #64]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10c      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	4393      	bics	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	223d      	movs	r2, #61	; 0x3d
 80053f4:	2101      	movs	r1, #1
 80053f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	223c      	movs	r2, #60	; 0x3c
 80053fc:	2100      	movs	r1, #0
 80053fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b004      	add	sp, #16
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	40012c00 	.word	0x40012c00
 8005410:	ff0fffff 	.word	0xff0fffff
 8005414:	40000400 	.word	0x40000400

08005418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223c      	movs	r2, #60	; 0x3c
 800542a:	5c9b      	ldrb	r3, [r3, r2]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005430:	2302      	movs	r3, #2
 8005432:	e06f      	b.n	8005514 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	223c      	movs	r2, #60	; 0x3c
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	4393      	bics	r3, r2
 8005442:	001a      	movs	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a33      	ldr	r2, [pc, #204]	; (800551c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005450:	401a      	ands	r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a30      	ldr	r2, [pc, #192]	; (8005520 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800545e:	401a      	ands	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800546c:	401a      	ands	r2, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a2b      	ldr	r2, [pc, #172]	; (8005528 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800547a:	401a      	ands	r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a29      	ldr	r2, [pc, #164]	; (800552c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005488:	401a      	ands	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a26      	ldr	r2, [pc, #152]	; (8005530 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005496:	401a      	ands	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a24      	ldr	r2, [pc, #144]	; (8005534 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80054a4:	401a      	ands	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a21      	ldr	r2, [pc, #132]	; (8005538 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80054b4:	401a      	ands	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d11c      	bne.n	8005502 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80054cc:	401a      	ands	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	051b      	lsls	r3, r3, #20
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80054dc:	401a      	ands	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a17      	ldr	r2, [pc, #92]	; (8005548 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80054ea:	401a      	ands	r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a15      	ldr	r2, [pc, #84]	; (800554c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80054f8:	401a      	ands	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	223c      	movs	r2, #60	; 0x3c
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b004      	add	sp, #16
 800551a:	bd80      	pop	{r7, pc}
 800551c:	fffffcff 	.word	0xfffffcff
 8005520:	fffffbff 	.word	0xfffffbff
 8005524:	fffff7ff 	.word	0xfffff7ff
 8005528:	ffffefff 	.word	0xffffefff
 800552c:	ffffdfff 	.word	0xffffdfff
 8005530:	ffffbfff 	.word	0xffffbfff
 8005534:	fff0ffff 	.word	0xfff0ffff
 8005538:	efffffff 	.word	0xefffffff
 800553c:	40012c00 	.word	0x40012c00
 8005540:	ff0fffff 	.word	0xff0fffff
 8005544:	feffffff 	.word	0xfeffffff
 8005548:	fdffffff 	.word	0xfdffffff
 800554c:	dfffffff 	.word	0xdfffffff

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005578:	46c0      	nop			; (mov r8, r8)
 800557a:	46bd      	mov	sp, r7
 800557c:	b002      	add	sp, #8
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e046      	b.n	8005620 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2288      	movs	r2, #136	; 0x88
 8005596:	589b      	ldr	r3, [r3, r2]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d107      	bne.n	80055ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2284      	movs	r2, #132	; 0x84
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	0018      	movs	r0, r3
 80055a8:	f7fd fae4 	bl	8002b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2288      	movs	r2, #136	; 0x88
 80055b0:	2124      	movs	r1, #36	; 0x24
 80055b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2101      	movs	r1, #1
 80055c0:	438a      	bics	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 fa10 	bl	80059f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f000 f8a2 	bl	8005720 <UART_SetConfig>
 80055dc:	0003      	movs	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e01c      	b.n	8005620 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	490d      	ldr	r1, [pc, #52]	; (8005628 <HAL_UART_Init+0xa8>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	212a      	movs	r1, #42	; 0x2a
 8005602:	438a      	bics	r2, r1
 8005604:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	0018      	movs	r0, r3
 800561a:	f000 fa9f 	bl	8005b5c <UART_CheckIdleState>
 800561e:	0003      	movs	r3, r0
}
 8005620:	0018      	movs	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	b002      	add	sp, #8
 8005626:	bd80      	pop	{r7, pc}
 8005628:	ffffb7ff 	.word	0xffffb7ff

0800562c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	1dbb      	adds	r3, r7, #6
 8005638:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	228c      	movs	r2, #140	; 0x8c
 800563e:	589b      	ldr	r3, [r3, r2]
 8005640:	2b20      	cmp	r3, #32
 8005642:	d145      	bne.n	80056d0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_UART_Receive_DMA+0x26>
 800564a:	1dbb      	adds	r3, r7, #6
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e03d      	b.n	80056d2 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	015b      	lsls	r3, r3, #5
 800565e:	429a      	cmp	r2, r3
 8005660:	d109      	bne.n	8005676 <HAL_UART_Receive_DMA+0x4a>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d105      	bne.n	8005676 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2201      	movs	r2, #1
 800566e:	4013      	ands	r3, r2
 8005670:	d001      	beq.n	8005676 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e02d      	b.n	80056d2 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	4013      	ands	r3, r2
 8005688:	d019      	beq.n	80056be <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568a:	f3ef 8310 	mrs	r3, PRIMASK
 800568e:	613b      	str	r3, [r7, #16]
  return(result);
 8005690:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	2301      	movs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f383 8810 	msr	PRIMASK, r3
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	04c9      	lsls	r1, r1, #19
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f383 8810 	msr	PRIMASK, r3
}
 80056bc:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80056be:	1dbb      	adds	r3, r7, #6
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 fb62 	bl	8005d90 <UART_Start_Receive_DMA>
 80056cc:	0003      	movs	r3, r0
 80056ce:	e000      	b.n	80056d2 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b008      	add	sp, #32
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b002      	add	sp, #8
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b002      	add	sp, #8
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	46bd      	mov	sp, r7
 8005706:	b002      	add	sp, #8
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	000a      	movs	r2, r1
 8005714:	1cbb      	adds	r3, r7, #2
 8005716:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b002      	add	sp, #8
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005728:	231a      	movs	r3, #26
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4313      	orrs	r3, r2
 8005746:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4aa1      	ldr	r2, [pc, #644]	; (80059d4 <UART_SetConfig+0x2b4>)
 8005750:	4013      	ands	r3, r2
 8005752:	0019      	movs	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	430a      	orrs	r2, r1
 800575c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a9c      	ldr	r2, [pc, #624]	; (80059d8 <UART_SetConfig+0x2b8>)
 8005766:	4013      	ands	r3, r2
 8005768:	0019      	movs	r1, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	4313      	orrs	r3, r2
 8005784:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4a93      	ldr	r2, [pc, #588]	; (80059dc <UART_SetConfig+0x2bc>)
 800578e:	4013      	ands	r3, r2
 8005790:	0019      	movs	r1, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	220f      	movs	r2, #15
 80057a4:	4393      	bics	r3, r2
 80057a6:	0019      	movs	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a89      	ldr	r2, [pc, #548]	; (80059e0 <UART_SetConfig+0x2c0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d127      	bne.n	800580e <UART_SetConfig+0xee>
 80057be:	4b89      	ldr	r3, [pc, #548]	; (80059e4 <UART_SetConfig+0x2c4>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	2203      	movs	r2, #3
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d017      	beq.n	80057fa <UART_SetConfig+0xda>
 80057ca:	d81b      	bhi.n	8005804 <UART_SetConfig+0xe4>
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d00a      	beq.n	80057e6 <UART_SetConfig+0xc6>
 80057d0:	d818      	bhi.n	8005804 <UART_SetConfig+0xe4>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <UART_SetConfig+0xbc>
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00a      	beq.n	80057f0 <UART_SetConfig+0xd0>
 80057da:	e013      	b.n	8005804 <UART_SetConfig+0xe4>
 80057dc:	231b      	movs	r3, #27
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e021      	b.n	800582a <UART_SetConfig+0x10a>
 80057e6:	231b      	movs	r3, #27
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2202      	movs	r2, #2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e01c      	b.n	800582a <UART_SetConfig+0x10a>
 80057f0:	231b      	movs	r3, #27
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2204      	movs	r2, #4
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e017      	b.n	800582a <UART_SetConfig+0x10a>
 80057fa:	231b      	movs	r3, #27
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2208      	movs	r2, #8
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e012      	b.n	800582a <UART_SetConfig+0x10a>
 8005804:	231b      	movs	r3, #27
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2210      	movs	r2, #16
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e00d      	b.n	800582a <UART_SetConfig+0x10a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a75      	ldr	r2, [pc, #468]	; (80059e8 <UART_SetConfig+0x2c8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d104      	bne.n	8005822 <UART_SetConfig+0x102>
 8005818:	231b      	movs	r3, #27
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e003      	b.n	800582a <UART_SetConfig+0x10a>
 8005822:	231b      	movs	r3, #27
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	2210      	movs	r2, #16
 8005828:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	429a      	cmp	r2, r3
 8005834:	d000      	beq.n	8005838 <UART_SetConfig+0x118>
 8005836:	e065      	b.n	8005904 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005838:	231b      	movs	r3, #27
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d015      	beq.n	800586e <UART_SetConfig+0x14e>
 8005842:	dc18      	bgt.n	8005876 <UART_SetConfig+0x156>
 8005844:	2b04      	cmp	r3, #4
 8005846:	d00d      	beq.n	8005864 <UART_SetConfig+0x144>
 8005848:	dc15      	bgt.n	8005876 <UART_SetConfig+0x156>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <UART_SetConfig+0x134>
 800584e:	2b02      	cmp	r3, #2
 8005850:	d005      	beq.n	800585e <UART_SetConfig+0x13e>
 8005852:	e010      	b.n	8005876 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fcb6 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8005858:	0003      	movs	r3, r0
 800585a:	617b      	str	r3, [r7, #20]
        break;
 800585c:	e012      	b.n	8005884 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <UART_SetConfig+0x2cc>)
 8005860:	617b      	str	r3, [r7, #20]
        break;
 8005862:	e00f      	b.n	8005884 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005864:	f7fe fc22 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8005868:	0003      	movs	r3, r0
 800586a:	617b      	str	r3, [r7, #20]
        break;
 800586c:	e00a      	b.n	8005884 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	617b      	str	r3, [r7, #20]
        break;
 8005874:	e006      	b.n	8005884 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800587a:	231a      	movs	r3, #26
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
        break;
 8005882:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d100      	bne.n	800588c <UART_SetConfig+0x16c>
 800588a:	e08d      	b.n	80059a8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005890:	4b57      	ldr	r3, [pc, #348]	; (80059f0 <UART_SetConfig+0x2d0>)
 8005892:	0052      	lsls	r2, r2, #1
 8005894:	5ad3      	ldrh	r3, [r2, r3]
 8005896:	0019      	movs	r1, r3
 8005898:	6978      	ldr	r0, [r7, #20]
 800589a:	f7fa fc31 	bl	8000100 <__udivsi3>
 800589e:	0003      	movs	r3, r0
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	18d2      	adds	r2, r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	0019      	movs	r1, r3
 80058b0:	0010      	movs	r0, r2
 80058b2:	f7fa fc25 	bl	8000100 <__udivsi3>
 80058b6:	0003      	movs	r3, r0
 80058b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d91c      	bls.n	80058fa <UART_SetConfig+0x1da>
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	025b      	lsls	r3, r3, #9
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d217      	bcs.n	80058fa <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	200e      	movs	r0, #14
 80058d0:	183b      	adds	r3, r7, r0
 80058d2:	210f      	movs	r1, #15
 80058d4:	438a      	bics	r2, r1
 80058d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2207      	movs	r2, #7
 80058e0:	4013      	ands	r3, r2
 80058e2:	b299      	uxth	r1, r3
 80058e4:	183b      	adds	r3, r7, r0
 80058e6:	183a      	adds	r2, r7, r0
 80058e8:	8812      	ldrh	r2, [r2, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	183a      	adds	r2, r7, r0
 80058f4:	8812      	ldrh	r2, [r2, #0]
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	e056      	b.n	80059a8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80058fa:	231a      	movs	r3, #26
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e051      	b.n	80059a8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005904:	231b      	movs	r3, #27
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d015      	beq.n	800593a <UART_SetConfig+0x21a>
 800590e:	dc18      	bgt.n	8005942 <UART_SetConfig+0x222>
 8005910:	2b04      	cmp	r3, #4
 8005912:	d00d      	beq.n	8005930 <UART_SetConfig+0x210>
 8005914:	dc15      	bgt.n	8005942 <UART_SetConfig+0x222>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <UART_SetConfig+0x200>
 800591a:	2b02      	cmp	r3, #2
 800591c:	d005      	beq.n	800592a <UART_SetConfig+0x20a>
 800591e:	e010      	b.n	8005942 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe fc50 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8005924:	0003      	movs	r3, r0
 8005926:	617b      	str	r3, [r7, #20]
        break;
 8005928:	e012      	b.n	8005950 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592a:	4b30      	ldr	r3, [pc, #192]	; (80059ec <UART_SetConfig+0x2cc>)
 800592c:	617b      	str	r3, [r7, #20]
        break;
 800592e:	e00f      	b.n	8005950 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005930:	f7fe fbbc 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8005934:	0003      	movs	r3, r0
 8005936:	617b      	str	r3, [r7, #20]
        break;
 8005938:	e00a      	b.n	8005950 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	617b      	str	r3, [r7, #20]
        break;
 8005940:	e006      	b.n	8005950 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005946:	231a      	movs	r3, #26
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
        break;
 800594e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d028      	beq.n	80059a8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800595a:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <UART_SetConfig+0x2d0>)
 800595c:	0052      	lsls	r2, r2, #1
 800595e:	5ad3      	ldrh	r3, [r2, r3]
 8005960:	0019      	movs	r1, r3
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7fa fbcc 	bl	8000100 <__udivsi3>
 8005968:	0003      	movs	r3, r0
 800596a:	001a      	movs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	18d2      	adds	r2, r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	0019      	movs	r1, r3
 800597a:	0010      	movs	r0, r2
 800597c:	f7fa fbc0 	bl	8000100 <__udivsi3>
 8005980:	0003      	movs	r3, r0
 8005982:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d90a      	bls.n	80059a0 <UART_SetConfig+0x280>
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	025b      	lsls	r3, r3, #9
 8005990:	429a      	cmp	r2, r3
 8005992:	d205      	bcs.n	80059a0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	b29a      	uxth	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	e003      	b.n	80059a8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80059a0:	231a      	movs	r3, #26
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	226a      	movs	r2, #106	; 0x6a
 80059ac:	2101      	movs	r1, #1
 80059ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2268      	movs	r2, #104	; 0x68
 80059b4:	2101      	movs	r1, #1
 80059b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059c4:	231a      	movs	r3, #26
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	781b      	ldrb	r3, [r3, #0]
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b008      	add	sp, #32
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	cfff69f3 	.word	0xcfff69f3
 80059d8:	ffffcfff 	.word	0xffffcfff
 80059dc:	11fff4ff 	.word	0x11fff4ff
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40004400 	.word	0x40004400
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	080073e4 	.word	0x080073e4

080059f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	2208      	movs	r2, #8
 8005a02:	4013      	ands	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <UART_AdvFeatureConfig+0x144>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	2201      	movs	r2, #1
 8005a24:	4013      	ands	r3, r2
 8005a26:	d00b      	beq.n	8005a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4a43      	ldr	r2, [pc, #268]	; (8005b3c <UART_AdvFeatureConfig+0x148>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	0019      	movs	r1, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	2202      	movs	r2, #2
 8005a46:	4013      	ands	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4a3b      	ldr	r2, [pc, #236]	; (8005b40 <UART_AdvFeatureConfig+0x14c>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	0019      	movs	r1, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2204      	movs	r2, #4
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4a34      	ldr	r2, [pc, #208]	; (8005b44 <UART_AdvFeatureConfig+0x150>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	2210      	movs	r2, #16
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4a2c      	ldr	r2, [pc, #176]	; (8005b48 <UART_AdvFeatureConfig+0x154>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	2220      	movs	r2, #32
 8005aac:	4013      	ands	r3, r2
 8005aae:	d00b      	beq.n	8005ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <UART_AdvFeatureConfig+0x158>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	0019      	movs	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	2240      	movs	r2, #64	; 0x40
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d01d      	beq.n	8005b0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <UART_AdvFeatureConfig+0x15c>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	0019      	movs	r1, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	035b      	lsls	r3, r3, #13
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d10b      	bne.n	8005b0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <UART_AdvFeatureConfig+0x160>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	0019      	movs	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	2280      	movs	r2, #128	; 0x80
 8005b14:	4013      	ands	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <UART_AdvFeatureConfig+0x164>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	0019      	movs	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]
  }
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b002      	add	sp, #8
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	ffff7fff 	.word	0xffff7fff
 8005b3c:	fffdffff 	.word	0xfffdffff
 8005b40:	fffeffff 	.word	0xfffeffff
 8005b44:	fffbffff 	.word	0xfffbffff
 8005b48:	ffffefff 	.word	0xffffefff
 8005b4c:	ffffdfff 	.word	0xffffdfff
 8005b50:	ffefffff 	.word	0xffefffff
 8005b54:	ff9fffff 	.word	0xff9fffff
 8005b58:	fff7ffff 	.word	0xfff7ffff

08005b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b092      	sub	sp, #72	; 0x48
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2290      	movs	r2, #144	; 0x90
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b6c:	f7fd f95a 	bl	8002e24 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d12d      	bne.n	8005bde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	0391      	lsls	r1, r2, #14
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4a47      	ldr	r2, [pc, #284]	; (8005ca8 <UART_CheckIdleState+0x14c>)
 8005b8c:	9200      	str	r2, [sp, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f000 f88e 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005b94:	1e03      	subs	r3, r0, #0
 8005b96:	d022      	beq.n	8005bde <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b98:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f383 8810 	msr	PRIMASK, r3
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	438a      	bics	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	f383 8810 	msr	PRIMASK, r3
}
 8005bc8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2288      	movs	r2, #136	; 0x88
 8005bce:	2120      	movs	r1, #32
 8005bd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2284      	movs	r2, #132	; 0x84
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e060      	b.n	8005ca0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2204      	movs	r2, #4
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d146      	bne.n	8005c7a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	03d1      	lsls	r1, r2, #15
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <UART_CheckIdleState+0x14c>)
 8005bf6:	9200      	str	r2, [sp, #0]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f000 f859 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005bfe:	1e03      	subs	r3, r0, #0
 8005c00:	d03b      	beq.n	8005c7a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c02:	f3ef 8310 	mrs	r3, PRIMASK
 8005c06:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f383 8810 	msr	PRIMASK, r3
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4922      	ldr	r1, [pc, #136]	; (8005cac <UART_CheckIdleState+0x150>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2101      	movs	r1, #1
 8005c56:	438a      	bics	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	228c      	movs	r2, #140	; 0x8c
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2284      	movs	r2, #132	; 0x84
 8005c72:	2100      	movs	r1, #0
 8005c74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e012      	b.n	8005ca0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2288      	movs	r2, #136	; 0x88
 8005c7e:	2120      	movs	r1, #32
 8005c80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	228c      	movs	r2, #140	; 0x8c
 8005c86:	2120      	movs	r1, #32
 8005c88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2284      	movs	r2, #132	; 0x84
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	b010      	add	sp, #64	; 0x40
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	01ffffff 	.word	0x01ffffff
 8005cac:	fffffedf 	.word	0xfffffedf

08005cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	1dfb      	adds	r3, r7, #7
 8005cbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc0:	e051      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	d04e      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fd f8ac 	bl	8002e24 <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <UART_WaitOnFlagUntilTimeout+0x2e>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e051      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	4013      	ands	r3, r2
 8005cec:	d03b      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d038      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d035      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	2208      	movs	r2, #8
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d111      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f922 	bl	8005f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2290      	movs	r2, #144	; 0x90
 8005d1c:	2108      	movs	r1, #8
 8005d1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2284      	movs	r2, #132	; 0x84
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e02c      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69da      	ldr	r2, [r3, #28]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	401a      	ands	r2, r3
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d112      	bne.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2280      	movs	r2, #128	; 0x80
 8005d46:	0112      	lsls	r2, r2, #4
 8005d48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 f905 	bl	8005f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2290      	movs	r2, #144	; 0x90
 8005d56:	2120      	movs	r1, #32
 8005d58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2284      	movs	r2, #132	; 0x84
 8005d5e:	2100      	movs	r1, #0
 8005d60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00f      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	425a      	negs	r2, r3
 8005d76:	4153      	adcs	r3, r2
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	001a      	movs	r2, r3
 8005d7c:	1dfb      	adds	r3, r7, #7
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d09e      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	0018      	movs	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b004      	add	sp, #16
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b090      	sub	sp, #64	; 0x40
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	1dbb      	adds	r3, r7, #6
 8005d9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1dba      	adds	r2, r7, #6
 8005da8:	215c      	movs	r1, #92	; 0x5c
 8005daa:	8812      	ldrh	r2, [r2, #0]
 8005dac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2290      	movs	r2, #144	; 0x90
 8005db2:	2100      	movs	r1, #0
 8005db4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	228c      	movs	r2, #140	; 0x8c
 8005dba:	2122      	movs	r1, #34	; 0x22
 8005dbc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	589b      	ldr	r3, [r3, r2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02d      	beq.n	8005e24 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	589b      	ldr	r3, [r3, r2]
 8005dce:	4a40      	ldr	r2, [pc, #256]	; (8005ed0 <UART_Start_Receive_DMA+0x140>)
 8005dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2280      	movs	r2, #128	; 0x80
 8005dd6:	589b      	ldr	r3, [r3, r2]
 8005dd8:	4a3e      	ldr	r2, [pc, #248]	; (8005ed4 <UART_Start_Receive_DMA+0x144>)
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	589b      	ldr	r3, [r3, r2]
 8005de2:	4a3d      	ldr	r2, [pc, #244]	; (8005ed8 <UART_Start_Receive_DMA+0x148>)
 8005de4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2280      	movs	r2, #128	; 0x80
 8005dea:	589b      	ldr	r3, [r3, r2]
 8005dec:	2200      	movs	r2, #0
 8005dee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	5898      	ldr	r0, [r3, r2]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	001a      	movs	r2, r3
 8005e04:	1dbb      	adds	r3, r7, #6
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	f7fd f9a2 	bl	8003150 <HAL_DMA_Start_IT>
 8005e0c:	1e03      	subs	r3, r0, #0
 8005e0e:	d009      	beq.n	8005e24 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2290      	movs	r2, #144	; 0x90
 8005e14:	2110      	movs	r1, #16
 8005e16:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	228c      	movs	r2, #140	; 0x8c
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e050      	b.n	8005ec6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d019      	beq.n	8005e60 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e36:	2301      	movs	r3, #1
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	f383 8810 	msr	PRIMASK, r3
}
 8005e40:	46c0      	nop			; (mov r8, r8)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2180      	movs	r1, #128	; 0x80
 8005e4e:	0049      	lsls	r1, r1, #1
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	f383 8810 	msr	PRIMASK, r3
}
 8005e5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e60:	f3ef 8310 	mrs	r3, PRIMASK
 8005e64:	613b      	str	r3, [r7, #16]
  return(result);
 8005e66:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2101      	movs	r1, #1
 8005e82:	430a      	orrs	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e92:	f3ef 8310 	mrs	r3, PRIMASK
 8005e96:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e98:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f383 8810 	msr	PRIMASK, r3
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2140      	movs	r1, #64	; 0x40
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b010      	add	sp, #64	; 0x40
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	08006029 	.word	0x08006029
 8005ed4:	08006159 	.word	0x08006159
 8005ed8:	0800619b 	.word	0x0800619b

08005edc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eea:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
 8005eee:	2301      	movs	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f383 8810 	msr	PRIMASK, r3
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	21c0      	movs	r1, #192	; 0xc0
 8005f06:	438a      	bics	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f383 8810 	msr	PRIMASK, r3
}
 8005f14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f16:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1a:	617b      	str	r3, [r7, #20]
  return(result);
 8005f1c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	2301      	movs	r3, #1
 8005f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f383 8810 	msr	PRIMASK, r3
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <UART_EndTxTransfer+0x7c>)
 8005f38:	400a      	ands	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f383 8810 	msr	PRIMASK, r3
}
 8005f46:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2288      	movs	r2, #136	; 0x88
 8005f4c:	2120      	movs	r1, #32
 8005f4e:	5099      	str	r1, [r3, r2]
}
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b00a      	add	sp, #40	; 0x28
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	ff7fffff 	.word	0xff7fffff

08005f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08e      	sub	sp, #56	; 0x38
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f64:	f3ef 8310 	mrs	r3, PRIMASK
 8005f68:	617b      	str	r3, [r7, #20]
  return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6e:	2301      	movs	r3, #1
 8005f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f383 8810 	msr	PRIMASK, r3
}
 8005f78:	46c0      	nop			; (mov r8, r8)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4926      	ldr	r1, [pc, #152]	; (8006020 <UART_EndRxTransfer+0xc4>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f383 8810 	msr	PRIMASK, r3
}
 8005f94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f96:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	f383 8810 	msr	PRIMASK, r3
}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	491b      	ldr	r1, [pc, #108]	; (8006024 <UART_EndRxTransfer+0xc8>)
 8005fb8:	400a      	ands	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f383 8810 	msr	PRIMASK, r3
}
 8005fc6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d118      	bne.n	8006002 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fda:	2301      	movs	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f383 8810 	msr	PRIMASK, r3
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	438a      	bics	r2, r1
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f383 8810 	msr	PRIMASK, r3
}
 8006000:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	228c      	movs	r2, #140	; 0x8c
 8006006:	2120      	movs	r1, #32
 8006008:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	46bd      	mov	sp, r7
 800601a:	b00e      	add	sp, #56	; 0x38
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	fffffedf 	.word	0xfffffedf
 8006024:	effffffe 	.word	0xeffffffe

08006028 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b094      	sub	sp, #80	; 0x50
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2220      	movs	r2, #32
 800603e:	4013      	ands	r3, r2
 8006040:	d16f      	bne.n	8006122 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	225e      	movs	r2, #94	; 0x5e
 8006046:	2100      	movs	r1, #0
 8006048:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604a:	f3ef 8310 	mrs	r3, PRIMASK
 800604e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006050:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
 8006054:	2301      	movs	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f383 8810 	msr	PRIMASK, r3
}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	493a      	ldr	r1, [pc, #232]	; (8006154 <UART_DMAReceiveCplt+0x12c>)
 800606c:	400a      	ands	r2, r1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006072:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f383 8810 	msr	PRIMASK, r3
}
 800607a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607c:	f3ef 8310 	mrs	r3, PRIMASK
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006084:	647b      	str	r3, [r7, #68]	; 0x44
 8006086:	2301      	movs	r3, #1
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	f383 8810 	msr	PRIMASK, r3
}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2101      	movs	r1, #1
 800609e:	438a      	bics	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
 80060a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	f383 8810 	msr	PRIMASK, r3
}
 80060ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ae:	f3ef 8310 	mrs	r3, PRIMASK
 80060b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b6:	643b      	str	r3, [r7, #64]	; 0x40
 80060b8:	2301      	movs	r3, #1
 80060ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2140      	movs	r1, #64	; 0x40
 80060d0:	438a      	bics	r2, r1
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	228c      	movs	r2, #140	; 0x8c
 80060e4:	2120      	movs	r1, #32
 80060e6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d118      	bne.n	8006122 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f0:	f3ef 8310 	mrs	r3, PRIMASK
 80060f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80060f6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fa:	2301      	movs	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2110      	movs	r1, #16
 8006112:	438a      	bics	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	2200      	movs	r2, #0
 8006126:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d108      	bne.n	8006142 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006132:	225c      	movs	r2, #92	; 0x5c
 8006134:	5a9a      	ldrh	r2, [r3, r2]
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f7ff fae5 	bl	800570a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006140:	e003      	b.n	800614a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006144:	0018      	movs	r0, r3
 8006146:	f7ff fac8 	bl	80056da <HAL_UART_RxCpltCallback>
}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b014      	add	sp, #80	; 0x50
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	fffffeff 	.word	0xfffffeff

08006158 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10a      	bne.n	800618a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	225c      	movs	r2, #92	; 0x5c
 8006178:	5a9b      	ldrh	r3, [r3, r2]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f7ff fac1 	bl	800570a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006188:	e003      	b.n	8006192 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	0018      	movs	r0, r3
 800618e:	f7ff faac 	bl	80056ea <HAL_UART_RxHalfCpltCallback>
}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	46bd      	mov	sp, r7
 8006196:	b004      	add	sp, #16
 8006198:	bd80      	pop	{r7, pc}

0800619a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2288      	movs	r2, #136	; 0x88
 80061ac:	589b      	ldr	r3, [r3, r2]
 80061ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	228c      	movs	r2, #140	; 0x8c
 80061b4:	589b      	ldr	r3, [r3, r2]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b80      	cmp	r3, #128	; 0x80
 80061c4:	d10a      	bne.n	80061dc <UART_DMAError+0x42>
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b21      	cmp	r3, #33	; 0x21
 80061ca:	d107      	bne.n	80061dc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2256      	movs	r2, #86	; 0x56
 80061d0:	2100      	movs	r1, #0
 80061d2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f7ff fe80 	bl	8005edc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d10a      	bne.n	8006200 <UART_DMAError+0x66>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b22      	cmp	r3, #34	; 0x22
 80061ee:	d107      	bne.n	8006200 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	225e      	movs	r2, #94	; 0x5e
 80061f4:	2100      	movs	r1, #0
 80061f6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f7ff feae 	bl	8005f5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2290      	movs	r2, #144	; 0x90
 8006204:	589b      	ldr	r3, [r3, r2]
 8006206:	2210      	movs	r2, #16
 8006208:	431a      	orrs	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2190      	movs	r1, #144	; 0x90
 800620e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	0018      	movs	r0, r3
 8006214:	f7ff fa71 	bl	80056fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006218:	46c0      	nop			; (mov r8, r8)
 800621a:	46bd      	mov	sp, r7
 800621c:	b006      	add	sp, #24
 800621e:	bd80      	pop	{r7, pc}

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	2600      	movs	r6, #0
 8006224:	4d0c      	ldr	r5, [pc, #48]	; (8006258 <__libc_init_array+0x38>)
 8006226:	4c0d      	ldr	r4, [pc, #52]	; (800625c <__libc_init_array+0x3c>)
 8006228:	1b64      	subs	r4, r4, r5
 800622a:	10a4      	asrs	r4, r4, #2
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	2600      	movs	r6, #0
 8006232:	f001 f82f 	bl	8007294 <_init>
 8006236:	4d0a      	ldr	r5, [pc, #40]	; (8006260 <__libc_init_array+0x40>)
 8006238:	4c0a      	ldr	r4, [pc, #40]	; (8006264 <__libc_init_array+0x44>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	00b3      	lsls	r3, r6, #2
 8006246:	58eb      	ldr	r3, [r5, r3]
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	00b3      	lsls	r3, r6, #2
 8006250:	58eb      	ldr	r3, [r5, r3]
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	080075d8 	.word	0x080075d8
 800625c:	080075d8 	.word	0x080075d8
 8006260:	080075d8 	.word	0x080075d8
 8006264:	080075dc 	.word	0x080075dc

08006268 <memset>:
 8006268:	0003      	movs	r3, r0
 800626a:	1882      	adds	r2, r0, r2
 800626c:	4293      	cmp	r3, r2
 800626e:	d100      	bne.n	8006272 <memset+0xa>
 8006270:	4770      	bx	lr
 8006272:	7019      	strb	r1, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	e7f9      	b.n	800626c <memset+0x4>

08006278 <sin>:
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	4a20      	ldr	r2, [pc, #128]	; (80062fc <sin+0x84>)
 800627c:	004b      	lsls	r3, r1, #1
 800627e:	b087      	sub	sp, #28
 8006280:	085b      	lsrs	r3, r3, #1
 8006282:	4293      	cmp	r3, r2
 8006284:	dc06      	bgt.n	8006294 <sin+0x1c>
 8006286:	2300      	movs	r3, #0
 8006288:	2200      	movs	r2, #0
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	2300      	movs	r3, #0
 800628e:	f000 fe53 	bl	8006f38 <__kernel_sin>
 8006292:	e006      	b.n	80062a2 <sin+0x2a>
 8006294:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <sin+0x88>)
 8006296:	4293      	cmp	r3, r2
 8006298:	dd05      	ble.n	80062a6 <sin+0x2e>
 800629a:	0002      	movs	r2, r0
 800629c:	000b      	movs	r3, r1
 800629e:	f7fb fabb 	bl	8001818 <__aeabi_dsub>
 80062a2:	b007      	add	sp, #28
 80062a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a6:	aa02      	add	r2, sp, #8
 80062a8:	f000 f82c 	bl	8006304 <__ieee754_rem_pio2>
 80062ac:	9c04      	ldr	r4, [sp, #16]
 80062ae:	9d05      	ldr	r5, [sp, #20]
 80062b0:	2303      	movs	r3, #3
 80062b2:	4003      	ands	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d00a      	beq.n	80062ce <sin+0x56>
 80062b8:	9802      	ldr	r0, [sp, #8]
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d00d      	beq.n	80062dc <sin+0x64>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d115      	bne.n	80062f0 <sin+0x78>
 80062c4:	3301      	adds	r3, #1
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	0022      	movs	r2, r4
 80062ca:	002b      	movs	r3, r5
 80062cc:	e7df      	b.n	800628e <sin+0x16>
 80062ce:	0022      	movs	r2, r4
 80062d0:	9802      	ldr	r0, [sp, #8]
 80062d2:	9903      	ldr	r1, [sp, #12]
 80062d4:	002b      	movs	r3, r5
 80062d6:	f000 fa05 	bl	80066e4 <__kernel_cos>
 80062da:	e7e2      	b.n	80062a2 <sin+0x2a>
 80062dc:	2301      	movs	r3, #1
 80062de:	0022      	movs	r2, r4
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	002b      	movs	r3, r5
 80062e4:	f000 fe28 	bl	8006f38 <__kernel_sin>
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	18c9      	adds	r1, r1, r3
 80062ee:	e7d8      	b.n	80062a2 <sin+0x2a>
 80062f0:	0022      	movs	r2, r4
 80062f2:	002b      	movs	r3, r5
 80062f4:	f000 f9f6 	bl	80066e4 <__kernel_cos>
 80062f8:	e7f6      	b.n	80062e8 <sin+0x70>
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	3fe921fb 	.word	0x3fe921fb
 8006300:	7fefffff 	.word	0x7fefffff

08006304 <__ieee754_rem_pio2>:
 8006304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006306:	004b      	lsls	r3, r1, #1
 8006308:	b091      	sub	sp, #68	; 0x44
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	9302      	str	r3, [sp, #8]
 800630e:	0017      	movs	r7, r2
 8006310:	4bb6      	ldr	r3, [pc, #728]	; (80065ec <__ieee754_rem_pio2+0x2e8>)
 8006312:	9a02      	ldr	r2, [sp, #8]
 8006314:	0004      	movs	r4, r0
 8006316:	000d      	movs	r5, r1
 8006318:	9109      	str	r1, [sp, #36]	; 0x24
 800631a:	429a      	cmp	r2, r3
 800631c:	dc09      	bgt.n	8006332 <__ieee754_rem_pio2+0x2e>
 800631e:	0002      	movs	r2, r0
 8006320:	000b      	movs	r3, r1
 8006322:	603a      	str	r2, [r7, #0]
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	60ba      	str	r2, [r7, #8]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	2600      	movs	r6, #0
 8006330:	e025      	b.n	800637e <__ieee754_rem_pio2+0x7a>
 8006332:	4baf      	ldr	r3, [pc, #700]	; (80065f0 <__ieee754_rem_pio2+0x2ec>)
 8006334:	9a02      	ldr	r2, [sp, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	dd00      	ble.n	800633c <__ieee754_rem_pio2+0x38>
 800633a:	e06e      	b.n	800641a <__ieee754_rem_pio2+0x116>
 800633c:	4ead      	ldr	r6, [pc, #692]	; (80065f4 <__ieee754_rem_pio2+0x2f0>)
 800633e:	4aae      	ldr	r2, [pc, #696]	; (80065f8 <__ieee754_rem_pio2+0x2f4>)
 8006340:	2d00      	cmp	r5, #0
 8006342:	dd35      	ble.n	80063b0 <__ieee754_rem_pio2+0xac>
 8006344:	0020      	movs	r0, r4
 8006346:	0029      	movs	r1, r5
 8006348:	4baa      	ldr	r3, [pc, #680]	; (80065f4 <__ieee754_rem_pio2+0x2f0>)
 800634a:	f7fb fa65 	bl	8001818 <__aeabi_dsub>
 800634e:	9b02      	ldr	r3, [sp, #8]
 8006350:	0004      	movs	r4, r0
 8006352:	000d      	movs	r5, r1
 8006354:	42b3      	cmp	r3, r6
 8006356:	d015      	beq.n	8006384 <__ieee754_rem_pio2+0x80>
 8006358:	4aa8      	ldr	r2, [pc, #672]	; (80065fc <__ieee754_rem_pio2+0x2f8>)
 800635a:	4ba9      	ldr	r3, [pc, #676]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 800635c:	f7fb fa5c 	bl	8001818 <__aeabi_dsub>
 8006360:	0002      	movs	r2, r0
 8006362:	000b      	movs	r3, r1
 8006364:	0020      	movs	r0, r4
 8006366:	603a      	str	r2, [r7, #0]
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	0029      	movs	r1, r5
 800636c:	f7fb fa54 	bl	8001818 <__aeabi_dsub>
 8006370:	4aa2      	ldr	r2, [pc, #648]	; (80065fc <__ieee754_rem_pio2+0x2f8>)
 8006372:	4ba3      	ldr	r3, [pc, #652]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 8006374:	f7fb fa50 	bl	8001818 <__aeabi_dsub>
 8006378:	2601      	movs	r6, #1
 800637a:	60b8      	str	r0, [r7, #8]
 800637c:	60f9      	str	r1, [r7, #12]
 800637e:	0030      	movs	r0, r6
 8006380:	b011      	add	sp, #68	; 0x44
 8006382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006384:	22d3      	movs	r2, #211	; 0xd3
 8006386:	4b9e      	ldr	r3, [pc, #632]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 8006388:	0552      	lsls	r2, r2, #21
 800638a:	f7fb fa45 	bl	8001818 <__aeabi_dsub>
 800638e:	4a9d      	ldr	r2, [pc, #628]	; (8006604 <__ieee754_rem_pio2+0x300>)
 8006390:	4b9d      	ldr	r3, [pc, #628]	; (8006608 <__ieee754_rem_pio2+0x304>)
 8006392:	0004      	movs	r4, r0
 8006394:	000d      	movs	r5, r1
 8006396:	f7fb fa3f 	bl	8001818 <__aeabi_dsub>
 800639a:	0002      	movs	r2, r0
 800639c:	000b      	movs	r3, r1
 800639e:	0020      	movs	r0, r4
 80063a0:	603a      	str	r2, [r7, #0]
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	0029      	movs	r1, r5
 80063a6:	f7fb fa37 	bl	8001818 <__aeabi_dsub>
 80063aa:	4a96      	ldr	r2, [pc, #600]	; (8006604 <__ieee754_rem_pio2+0x300>)
 80063ac:	4b96      	ldr	r3, [pc, #600]	; (8006608 <__ieee754_rem_pio2+0x304>)
 80063ae:	e7e1      	b.n	8006374 <__ieee754_rem_pio2+0x70>
 80063b0:	0020      	movs	r0, r4
 80063b2:	0029      	movs	r1, r5
 80063b4:	4b8f      	ldr	r3, [pc, #572]	; (80065f4 <__ieee754_rem_pio2+0x2f0>)
 80063b6:	f7fa f885 	bl	80004c4 <__aeabi_dadd>
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	0004      	movs	r4, r0
 80063be:	000d      	movs	r5, r1
 80063c0:	42b3      	cmp	r3, r6
 80063c2:	d014      	beq.n	80063ee <__ieee754_rem_pio2+0xea>
 80063c4:	4a8d      	ldr	r2, [pc, #564]	; (80065fc <__ieee754_rem_pio2+0x2f8>)
 80063c6:	4b8e      	ldr	r3, [pc, #568]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 80063c8:	f7fa f87c 	bl	80004c4 <__aeabi_dadd>
 80063cc:	0002      	movs	r2, r0
 80063ce:	000b      	movs	r3, r1
 80063d0:	0020      	movs	r0, r4
 80063d2:	603a      	str	r2, [r7, #0]
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	0029      	movs	r1, r5
 80063d8:	f7fb fa1e 	bl	8001818 <__aeabi_dsub>
 80063dc:	4a87      	ldr	r2, [pc, #540]	; (80065fc <__ieee754_rem_pio2+0x2f8>)
 80063de:	4b88      	ldr	r3, [pc, #544]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 80063e0:	f7fa f870 	bl	80004c4 <__aeabi_dadd>
 80063e4:	2601      	movs	r6, #1
 80063e6:	60b8      	str	r0, [r7, #8]
 80063e8:	60f9      	str	r1, [r7, #12]
 80063ea:	4276      	negs	r6, r6
 80063ec:	e7c7      	b.n	800637e <__ieee754_rem_pio2+0x7a>
 80063ee:	22d3      	movs	r2, #211	; 0xd3
 80063f0:	4b83      	ldr	r3, [pc, #524]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 80063f2:	0552      	lsls	r2, r2, #21
 80063f4:	f7fa f866 	bl	80004c4 <__aeabi_dadd>
 80063f8:	4a82      	ldr	r2, [pc, #520]	; (8006604 <__ieee754_rem_pio2+0x300>)
 80063fa:	4b83      	ldr	r3, [pc, #524]	; (8006608 <__ieee754_rem_pio2+0x304>)
 80063fc:	0004      	movs	r4, r0
 80063fe:	000d      	movs	r5, r1
 8006400:	f7fa f860 	bl	80004c4 <__aeabi_dadd>
 8006404:	0002      	movs	r2, r0
 8006406:	000b      	movs	r3, r1
 8006408:	0020      	movs	r0, r4
 800640a:	603a      	str	r2, [r7, #0]
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	0029      	movs	r1, r5
 8006410:	f7fb fa02 	bl	8001818 <__aeabi_dsub>
 8006414:	4a7b      	ldr	r2, [pc, #492]	; (8006604 <__ieee754_rem_pio2+0x300>)
 8006416:	4b7c      	ldr	r3, [pc, #496]	; (8006608 <__ieee754_rem_pio2+0x304>)
 8006418:	e7e2      	b.n	80063e0 <__ieee754_rem_pio2+0xdc>
 800641a:	4b7c      	ldr	r3, [pc, #496]	; (800660c <__ieee754_rem_pio2+0x308>)
 800641c:	9a02      	ldr	r2, [sp, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	dd00      	ble.n	8006424 <__ieee754_rem_pio2+0x120>
 8006422:	e0d3      	b.n	80065cc <__ieee754_rem_pio2+0x2c8>
 8006424:	0020      	movs	r0, r4
 8006426:	0029      	movs	r1, r5
 8006428:	f000 fe32 	bl	8007090 <fabs>
 800642c:	4a78      	ldr	r2, [pc, #480]	; (8006610 <__ieee754_rem_pio2+0x30c>)
 800642e:	4b79      	ldr	r3, [pc, #484]	; (8006614 <__ieee754_rem_pio2+0x310>)
 8006430:	0004      	movs	r4, r0
 8006432:	000d      	movs	r5, r1
 8006434:	f7fa ff84 	bl	8001340 <__aeabi_dmul>
 8006438:	2200      	movs	r2, #0
 800643a:	4b77      	ldr	r3, [pc, #476]	; (8006618 <__ieee754_rem_pio2+0x314>)
 800643c:	f7fa f842 	bl	80004c4 <__aeabi_dadd>
 8006440:	f7fb fd7c 	bl	8001f3c <__aeabi_d2iz>
 8006444:	0006      	movs	r6, r0
 8006446:	f7fb fdaf 	bl	8001fa8 <__aeabi_i2d>
 800644a:	4a6b      	ldr	r2, [pc, #428]	; (80065f8 <__ieee754_rem_pio2+0x2f4>)
 800644c:	4b69      	ldr	r3, [pc, #420]	; (80065f4 <__ieee754_rem_pio2+0x2f0>)
 800644e:	9006      	str	r0, [sp, #24]
 8006450:	9107      	str	r1, [sp, #28]
 8006452:	f7fa ff75 	bl	8001340 <__aeabi_dmul>
 8006456:	0002      	movs	r2, r0
 8006458:	000b      	movs	r3, r1
 800645a:	0020      	movs	r0, r4
 800645c:	0029      	movs	r1, r5
 800645e:	f7fb f9db 	bl	8001818 <__aeabi_dsub>
 8006462:	4a66      	ldr	r2, [pc, #408]	; (80065fc <__ieee754_rem_pio2+0x2f8>)
 8006464:	9004      	str	r0, [sp, #16]
 8006466:	9105      	str	r1, [sp, #20]
 8006468:	9806      	ldr	r0, [sp, #24]
 800646a:	9907      	ldr	r1, [sp, #28]
 800646c:	4b64      	ldr	r3, [pc, #400]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 800646e:	f7fa ff67 	bl	8001340 <__aeabi_dmul>
 8006472:	0004      	movs	r4, r0
 8006474:	000d      	movs	r5, r1
 8006476:	2e1f      	cmp	r6, #31
 8006478:	dc0f      	bgt.n	800649a <__ieee754_rem_pio2+0x196>
 800647a:	4a68      	ldr	r2, [pc, #416]	; (800661c <__ieee754_rem_pio2+0x318>)
 800647c:	1e73      	subs	r3, r6, #1
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	589b      	ldr	r3, [r3, r2]
 8006482:	9a02      	ldr	r2, [sp, #8]
 8006484:	4293      	cmp	r3, r2
 8006486:	d008      	beq.n	800649a <__ieee754_rem_pio2+0x196>
 8006488:	9804      	ldr	r0, [sp, #16]
 800648a:	9905      	ldr	r1, [sp, #20]
 800648c:	0022      	movs	r2, r4
 800648e:	002b      	movs	r3, r5
 8006490:	f7fb f9c2 	bl	8001818 <__aeabi_dsub>
 8006494:	6038      	str	r0, [r7, #0]
 8006496:	6079      	str	r1, [r7, #4]
 8006498:	e012      	b.n	80064c0 <__ieee754_rem_pio2+0x1bc>
 800649a:	0022      	movs	r2, r4
 800649c:	9804      	ldr	r0, [sp, #16]
 800649e:	9905      	ldr	r1, [sp, #20]
 80064a0:	002b      	movs	r3, r5
 80064a2:	f7fb f9b9 	bl	8001818 <__aeabi_dsub>
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	151b      	asrs	r3, r3, #20
 80064aa:	9308      	str	r3, [sp, #32]
 80064ac:	9a08      	ldr	r2, [sp, #32]
 80064ae:	004b      	lsls	r3, r1, #1
 80064b0:	0d5b      	lsrs	r3, r3, #21
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	dc21      	bgt.n	80064fc <__ieee754_rem_pio2+0x1f8>
 80064b8:	0002      	movs	r2, r0
 80064ba:	000b      	movs	r3, r1
 80064bc:	603a      	str	r2, [r7, #0]
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	9804      	ldr	r0, [sp, #16]
 80064c2:	9905      	ldr	r1, [sp, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	9302      	str	r3, [sp, #8]
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	f7fb f9a4 	bl	8001818 <__aeabi_dsub>
 80064d0:	0022      	movs	r2, r4
 80064d2:	002b      	movs	r3, r5
 80064d4:	f7fb f9a0 	bl	8001818 <__aeabi_dsub>
 80064d8:	000b      	movs	r3, r1
 80064da:	0002      	movs	r2, r0
 80064dc:	60ba      	str	r2, [r7, #8]
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	db00      	blt.n	80064e8 <__ieee754_rem_pio2+0x1e4>
 80064e6:	e74a      	b.n	800637e <__ieee754_rem_pio2+0x7a>
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	469c      	mov	ip, r3
 80064ee:	9c02      	ldr	r4, [sp, #8]
 80064f0:	18c9      	adds	r1, r1, r3
 80064f2:	4464      	add	r4, ip
 80064f4:	607c      	str	r4, [r7, #4]
 80064f6:	60b8      	str	r0, [r7, #8]
 80064f8:	60f9      	str	r1, [r7, #12]
 80064fa:	e776      	b.n	80063ea <__ieee754_rem_pio2+0xe6>
 80064fc:	22d3      	movs	r2, #211	; 0xd3
 80064fe:	9806      	ldr	r0, [sp, #24]
 8006500:	9907      	ldr	r1, [sp, #28]
 8006502:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <__ieee754_rem_pio2+0x2fc>)
 8006504:	0552      	lsls	r2, r2, #21
 8006506:	f7fa ff1b 	bl	8001340 <__aeabi_dmul>
 800650a:	0004      	movs	r4, r0
 800650c:	000d      	movs	r5, r1
 800650e:	0002      	movs	r2, r0
 8006510:	000b      	movs	r3, r1
 8006512:	9804      	ldr	r0, [sp, #16]
 8006514:	9905      	ldr	r1, [sp, #20]
 8006516:	f7fb f97f 	bl	8001818 <__aeabi_dsub>
 800651a:	0002      	movs	r2, r0
 800651c:	000b      	movs	r3, r1
 800651e:	9002      	str	r0, [sp, #8]
 8006520:	9103      	str	r1, [sp, #12]
 8006522:	9804      	ldr	r0, [sp, #16]
 8006524:	9905      	ldr	r1, [sp, #20]
 8006526:	f7fb f977 	bl	8001818 <__aeabi_dsub>
 800652a:	0022      	movs	r2, r4
 800652c:	002b      	movs	r3, r5
 800652e:	f7fb f973 	bl	8001818 <__aeabi_dsub>
 8006532:	0004      	movs	r4, r0
 8006534:	000d      	movs	r5, r1
 8006536:	9806      	ldr	r0, [sp, #24]
 8006538:	9907      	ldr	r1, [sp, #28]
 800653a:	4a32      	ldr	r2, [pc, #200]	; (8006604 <__ieee754_rem_pio2+0x300>)
 800653c:	4b32      	ldr	r3, [pc, #200]	; (8006608 <__ieee754_rem_pio2+0x304>)
 800653e:	f7fa feff 	bl	8001340 <__aeabi_dmul>
 8006542:	0022      	movs	r2, r4
 8006544:	002b      	movs	r3, r5
 8006546:	f7fb f967 	bl	8001818 <__aeabi_dsub>
 800654a:	0002      	movs	r2, r0
 800654c:	000b      	movs	r3, r1
 800654e:	0004      	movs	r4, r0
 8006550:	000d      	movs	r5, r1
 8006552:	9802      	ldr	r0, [sp, #8]
 8006554:	9903      	ldr	r1, [sp, #12]
 8006556:	f7fb f95f 	bl	8001818 <__aeabi_dsub>
 800655a:	9a08      	ldr	r2, [sp, #32]
 800655c:	004b      	lsls	r3, r1, #1
 800655e:	0d5b      	lsrs	r3, r3, #21
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b31      	cmp	r3, #49	; 0x31
 8006564:	dc08      	bgt.n	8006578 <__ieee754_rem_pio2+0x274>
 8006566:	0002      	movs	r2, r0
 8006568:	000b      	movs	r3, r1
 800656a:	603a      	str	r2, [r7, #0]
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	9a02      	ldr	r2, [sp, #8]
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	9204      	str	r2, [sp, #16]
 8006574:	9305      	str	r3, [sp, #20]
 8006576:	e7a3      	b.n	80064c0 <__ieee754_rem_pio2+0x1bc>
 8006578:	22b8      	movs	r2, #184	; 0xb8
 800657a:	9806      	ldr	r0, [sp, #24]
 800657c:	9907      	ldr	r1, [sp, #28]
 800657e:	4b22      	ldr	r3, [pc, #136]	; (8006608 <__ieee754_rem_pio2+0x304>)
 8006580:	0592      	lsls	r2, r2, #22
 8006582:	f7fa fedd 	bl	8001340 <__aeabi_dmul>
 8006586:	0004      	movs	r4, r0
 8006588:	000d      	movs	r5, r1
 800658a:	0002      	movs	r2, r0
 800658c:	000b      	movs	r3, r1
 800658e:	9802      	ldr	r0, [sp, #8]
 8006590:	9903      	ldr	r1, [sp, #12]
 8006592:	f7fb f941 	bl	8001818 <__aeabi_dsub>
 8006596:	0002      	movs	r2, r0
 8006598:	000b      	movs	r3, r1
 800659a:	9004      	str	r0, [sp, #16]
 800659c:	9105      	str	r1, [sp, #20]
 800659e:	9802      	ldr	r0, [sp, #8]
 80065a0:	9903      	ldr	r1, [sp, #12]
 80065a2:	f7fb f939 	bl	8001818 <__aeabi_dsub>
 80065a6:	0022      	movs	r2, r4
 80065a8:	002b      	movs	r3, r5
 80065aa:	f7fb f935 	bl	8001818 <__aeabi_dsub>
 80065ae:	0004      	movs	r4, r0
 80065b0:	000d      	movs	r5, r1
 80065b2:	9806      	ldr	r0, [sp, #24]
 80065b4:	9907      	ldr	r1, [sp, #28]
 80065b6:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <__ieee754_rem_pio2+0x31c>)
 80065b8:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <__ieee754_rem_pio2+0x320>)
 80065ba:	f7fa fec1 	bl	8001340 <__aeabi_dmul>
 80065be:	0022      	movs	r2, r4
 80065c0:	002b      	movs	r3, r5
 80065c2:	f7fb f929 	bl	8001818 <__aeabi_dsub>
 80065c6:	0004      	movs	r4, r0
 80065c8:	000d      	movs	r5, r1
 80065ca:	e75d      	b.n	8006488 <__ieee754_rem_pio2+0x184>
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <__ieee754_rem_pio2+0x324>)
 80065ce:	9a02      	ldr	r2, [sp, #8]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	dd2b      	ble.n	800662c <__ieee754_rem_pio2+0x328>
 80065d4:	0022      	movs	r2, r4
 80065d6:	002b      	movs	r3, r5
 80065d8:	0020      	movs	r0, r4
 80065da:	0029      	movs	r1, r5
 80065dc:	f7fb f91c 	bl	8001818 <__aeabi_dsub>
 80065e0:	60b8      	str	r0, [r7, #8]
 80065e2:	60f9      	str	r1, [r7, #12]
 80065e4:	6038      	str	r0, [r7, #0]
 80065e6:	6079      	str	r1, [r7, #4]
 80065e8:	e6a1      	b.n	800632e <__ieee754_rem_pio2+0x2a>
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	3fe921fb 	.word	0x3fe921fb
 80065f0:	4002d97b 	.word	0x4002d97b
 80065f4:	3ff921fb 	.word	0x3ff921fb
 80065f8:	54400000 	.word	0x54400000
 80065fc:	1a626331 	.word	0x1a626331
 8006600:	3dd0b461 	.word	0x3dd0b461
 8006604:	2e037073 	.word	0x2e037073
 8006608:	3ba3198a 	.word	0x3ba3198a
 800660c:	413921fb 	.word	0x413921fb
 8006610:	6dc9c883 	.word	0x6dc9c883
 8006614:	3fe45f30 	.word	0x3fe45f30
 8006618:	3fe00000 	.word	0x3fe00000
 800661c:	080073fc 	.word	0x080073fc
 8006620:	252049c1 	.word	0x252049c1
 8006624:	397b839a 	.word	0x397b839a
 8006628:	7fefffff 	.word	0x7fefffff
 800662c:	9a02      	ldr	r2, [sp, #8]
 800662e:	0020      	movs	r0, r4
 8006630:	1516      	asrs	r6, r2, #20
 8006632:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <__ieee754_rem_pio2+0x3d4>)
 8006634:	18b6      	adds	r6, r6, r2
 8006636:	9a02      	ldr	r2, [sp, #8]
 8006638:	0533      	lsls	r3, r6, #20
 800663a:	1ad5      	subs	r5, r2, r3
 800663c:	0029      	movs	r1, r5
 800663e:	f7fb fc7d 	bl	8001f3c <__aeabi_d2iz>
 8006642:	f7fb fcb1 	bl	8001fa8 <__aeabi_i2d>
 8006646:	0002      	movs	r2, r0
 8006648:	000b      	movs	r3, r1
 800664a:	0020      	movs	r0, r4
 800664c:	0029      	movs	r1, r5
 800664e:	920a      	str	r2, [sp, #40]	; 0x28
 8006650:	930b      	str	r3, [sp, #44]	; 0x2c
 8006652:	f7fb f8e1 	bl	8001818 <__aeabi_dsub>
 8006656:	2200      	movs	r2, #0
 8006658:	4b20      	ldr	r3, [pc, #128]	; (80066dc <__ieee754_rem_pio2+0x3d8>)
 800665a:	f7fa fe71 	bl	8001340 <__aeabi_dmul>
 800665e:	000d      	movs	r5, r1
 8006660:	0004      	movs	r4, r0
 8006662:	f7fb fc6b 	bl	8001f3c <__aeabi_d2iz>
 8006666:	f7fb fc9f 	bl	8001fa8 <__aeabi_i2d>
 800666a:	0002      	movs	r2, r0
 800666c:	000b      	movs	r3, r1
 800666e:	0020      	movs	r0, r4
 8006670:	0029      	movs	r1, r5
 8006672:	920c      	str	r2, [sp, #48]	; 0x30
 8006674:	930d      	str	r3, [sp, #52]	; 0x34
 8006676:	f7fb f8cf 	bl	8001818 <__aeabi_dsub>
 800667a:	2200      	movs	r2, #0
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <__ieee754_rem_pio2+0x3d8>)
 800667e:	f7fa fe5f 	bl	8001340 <__aeabi_dmul>
 8006682:	2503      	movs	r5, #3
 8006684:	900e      	str	r0, [sp, #56]	; 0x38
 8006686:	910f      	str	r1, [sp, #60]	; 0x3c
 8006688:	ac0a      	add	r4, sp, #40	; 0x28
 800668a:	2200      	movs	r2, #0
 800668c:	6920      	ldr	r0, [r4, #16]
 800668e:	6961      	ldr	r1, [r4, #20]
 8006690:	2300      	movs	r3, #0
 8006692:	9502      	str	r5, [sp, #8]
 8006694:	3c08      	subs	r4, #8
 8006696:	3d01      	subs	r5, #1
 8006698:	f7f9 feb8 	bl	800040c <__aeabi_dcmpeq>
 800669c:	2800      	cmp	r0, #0
 800669e:	d1f4      	bne.n	800668a <__ieee754_rem_pio2+0x386>
 80066a0:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <__ieee754_rem_pio2+0x3dc>)
 80066a2:	0032      	movs	r2, r6
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	2302      	movs	r3, #2
 80066a8:	0039      	movs	r1, r7
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	a80a      	add	r0, sp, #40	; 0x28
 80066ae:	9b02      	ldr	r3, [sp, #8]
 80066b0:	f000 f8d8 	bl	8006864 <__kernel_rem_pio2>
 80066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b6:	0006      	movs	r6, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	db00      	blt.n	80066be <__ieee754_rem_pio2+0x3ba>
 80066bc:	e65f      	b.n	800637e <__ieee754_rem_pio2+0x7a>
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	0609      	lsls	r1, r1, #24
 80066c6:	1843      	adds	r3, r0, r1
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	603a      	str	r2, [r7, #0]
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	1843      	adds	r3, r0, r1
 80066d2:	60ba      	str	r2, [r7, #8]
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e688      	b.n	80063ea <__ieee754_rem_pio2+0xe6>
 80066d8:	fffffbea 	.word	0xfffffbea
 80066dc:	41700000 	.word	0x41700000
 80066e0:	0800747c 	.word	0x0800747c

080066e4 <__kernel_cos>:
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	b087      	sub	sp, #28
 80066e8:	9204      	str	r2, [sp, #16]
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	004b      	lsls	r3, r1, #1
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	23f9      	movs	r3, #249	; 0xf9
 80066f4:	9a00      	ldr	r2, [sp, #0]
 80066f6:	0007      	movs	r7, r0
 80066f8:	000e      	movs	r6, r1
 80066fa:	059b      	lsls	r3, r3, #22
 80066fc:	429a      	cmp	r2, r3
 80066fe:	da04      	bge.n	800670a <__kernel_cos+0x26>
 8006700:	f7fb fc1c 	bl	8001f3c <__aeabi_d2iz>
 8006704:	2800      	cmp	r0, #0
 8006706:	d100      	bne.n	800670a <__kernel_cos+0x26>
 8006708:	e084      	b.n	8006814 <__kernel_cos+0x130>
 800670a:	003a      	movs	r2, r7
 800670c:	0033      	movs	r3, r6
 800670e:	0038      	movs	r0, r7
 8006710:	0031      	movs	r1, r6
 8006712:	f7fa fe15 	bl	8001340 <__aeabi_dmul>
 8006716:	2200      	movs	r2, #0
 8006718:	4b40      	ldr	r3, [pc, #256]	; (800681c <__kernel_cos+0x138>)
 800671a:	0004      	movs	r4, r0
 800671c:	000d      	movs	r5, r1
 800671e:	f7fa fe0f 	bl	8001340 <__aeabi_dmul>
 8006722:	4a3f      	ldr	r2, [pc, #252]	; (8006820 <__kernel_cos+0x13c>)
 8006724:	9002      	str	r0, [sp, #8]
 8006726:	9103      	str	r1, [sp, #12]
 8006728:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <__kernel_cos+0x140>)
 800672a:	0020      	movs	r0, r4
 800672c:	0029      	movs	r1, r5
 800672e:	f7fa fe07 	bl	8001340 <__aeabi_dmul>
 8006732:	4a3d      	ldr	r2, [pc, #244]	; (8006828 <__kernel_cos+0x144>)
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <__kernel_cos+0x148>)
 8006736:	f7f9 fec5 	bl	80004c4 <__aeabi_dadd>
 800673a:	0022      	movs	r2, r4
 800673c:	002b      	movs	r3, r5
 800673e:	f7fa fdff 	bl	8001340 <__aeabi_dmul>
 8006742:	4a3b      	ldr	r2, [pc, #236]	; (8006830 <__kernel_cos+0x14c>)
 8006744:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <__kernel_cos+0x150>)
 8006746:	f7fb f867 	bl	8001818 <__aeabi_dsub>
 800674a:	0022      	movs	r2, r4
 800674c:	002b      	movs	r3, r5
 800674e:	f7fa fdf7 	bl	8001340 <__aeabi_dmul>
 8006752:	4a39      	ldr	r2, [pc, #228]	; (8006838 <__kernel_cos+0x154>)
 8006754:	4b39      	ldr	r3, [pc, #228]	; (800683c <__kernel_cos+0x158>)
 8006756:	f7f9 feb5 	bl	80004c4 <__aeabi_dadd>
 800675a:	0022      	movs	r2, r4
 800675c:	002b      	movs	r3, r5
 800675e:	f7fa fdef 	bl	8001340 <__aeabi_dmul>
 8006762:	4a37      	ldr	r2, [pc, #220]	; (8006840 <__kernel_cos+0x15c>)
 8006764:	4b37      	ldr	r3, [pc, #220]	; (8006844 <__kernel_cos+0x160>)
 8006766:	f7fb f857 	bl	8001818 <__aeabi_dsub>
 800676a:	0022      	movs	r2, r4
 800676c:	002b      	movs	r3, r5
 800676e:	f7fa fde7 	bl	8001340 <__aeabi_dmul>
 8006772:	4a35      	ldr	r2, [pc, #212]	; (8006848 <__kernel_cos+0x164>)
 8006774:	4b35      	ldr	r3, [pc, #212]	; (800684c <__kernel_cos+0x168>)
 8006776:	f7f9 fea5 	bl	80004c4 <__aeabi_dadd>
 800677a:	0022      	movs	r2, r4
 800677c:	002b      	movs	r3, r5
 800677e:	f7fa fddf 	bl	8001340 <__aeabi_dmul>
 8006782:	0022      	movs	r2, r4
 8006784:	002b      	movs	r3, r5
 8006786:	f7fa fddb 	bl	8001340 <__aeabi_dmul>
 800678a:	9a04      	ldr	r2, [sp, #16]
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	0004      	movs	r4, r0
 8006790:	000d      	movs	r5, r1
 8006792:	0038      	movs	r0, r7
 8006794:	0031      	movs	r1, r6
 8006796:	f7fa fdd3 	bl	8001340 <__aeabi_dmul>
 800679a:	0002      	movs	r2, r0
 800679c:	000b      	movs	r3, r1
 800679e:	0020      	movs	r0, r4
 80067a0:	0029      	movs	r1, r5
 80067a2:	f7fb f839 	bl	8001818 <__aeabi_dsub>
 80067a6:	4b2a      	ldr	r3, [pc, #168]	; (8006850 <__kernel_cos+0x16c>)
 80067a8:	9a00      	ldr	r2, [sp, #0]
 80067aa:	0004      	movs	r4, r0
 80067ac:	000d      	movs	r5, r1
 80067ae:	429a      	cmp	r2, r3
 80067b0:	dc0d      	bgt.n	80067ce <__kernel_cos+0xea>
 80067b2:	0002      	movs	r2, r0
 80067b4:	000b      	movs	r3, r1
 80067b6:	9802      	ldr	r0, [sp, #8]
 80067b8:	9903      	ldr	r1, [sp, #12]
 80067ba:	f7fb f82d 	bl	8001818 <__aeabi_dsub>
 80067be:	0002      	movs	r2, r0
 80067c0:	2000      	movs	r0, #0
 80067c2:	000b      	movs	r3, r1
 80067c4:	4923      	ldr	r1, [pc, #140]	; (8006854 <__kernel_cos+0x170>)
 80067c6:	f7fb f827 	bl	8001818 <__aeabi_dsub>
 80067ca:	b007      	add	sp, #28
 80067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ce:	4b22      	ldr	r3, [pc, #136]	; (8006858 <__kernel_cos+0x174>)
 80067d0:	9a00      	ldr	r2, [sp, #0]
 80067d2:	2600      	movs	r6, #0
 80067d4:	429a      	cmp	r2, r3
 80067d6:	dc1b      	bgt.n	8006810 <__kernel_cos+0x12c>
 80067d8:	0013      	movs	r3, r2
 80067da:	4a20      	ldr	r2, [pc, #128]	; (800685c <__kernel_cos+0x178>)
 80067dc:	4694      	mov	ip, r2
 80067de:	4463      	add	r3, ip
 80067e0:	001f      	movs	r7, r3
 80067e2:	0032      	movs	r2, r6
 80067e4:	003b      	movs	r3, r7
 80067e6:	2000      	movs	r0, #0
 80067e8:	491a      	ldr	r1, [pc, #104]	; (8006854 <__kernel_cos+0x170>)
 80067ea:	f7fb f815 	bl	8001818 <__aeabi_dsub>
 80067ee:	0032      	movs	r2, r6
 80067f0:	003b      	movs	r3, r7
 80067f2:	9000      	str	r0, [sp, #0]
 80067f4:	9101      	str	r1, [sp, #4]
 80067f6:	9802      	ldr	r0, [sp, #8]
 80067f8:	9903      	ldr	r1, [sp, #12]
 80067fa:	f7fb f80d 	bl	8001818 <__aeabi_dsub>
 80067fe:	0022      	movs	r2, r4
 8006800:	002b      	movs	r3, r5
 8006802:	f7fb f809 	bl	8001818 <__aeabi_dsub>
 8006806:	0002      	movs	r2, r0
 8006808:	000b      	movs	r3, r1
 800680a:	9800      	ldr	r0, [sp, #0]
 800680c:	9901      	ldr	r1, [sp, #4]
 800680e:	e7da      	b.n	80067c6 <__kernel_cos+0xe2>
 8006810:	4f13      	ldr	r7, [pc, #76]	; (8006860 <__kernel_cos+0x17c>)
 8006812:	e7e6      	b.n	80067e2 <__kernel_cos+0xfe>
 8006814:	2000      	movs	r0, #0
 8006816:	490f      	ldr	r1, [pc, #60]	; (8006854 <__kernel_cos+0x170>)
 8006818:	e7d7      	b.n	80067ca <__kernel_cos+0xe6>
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	be8838d4 	.word	0xbe8838d4
 8006824:	bda8fae9 	.word	0xbda8fae9
 8006828:	bdb4b1c4 	.word	0xbdb4b1c4
 800682c:	3e21ee9e 	.word	0x3e21ee9e
 8006830:	809c52ad 	.word	0x809c52ad
 8006834:	3e927e4f 	.word	0x3e927e4f
 8006838:	19cb1590 	.word	0x19cb1590
 800683c:	3efa01a0 	.word	0x3efa01a0
 8006840:	16c15177 	.word	0x16c15177
 8006844:	3f56c16c 	.word	0x3f56c16c
 8006848:	5555554c 	.word	0x5555554c
 800684c:	3fa55555 	.word	0x3fa55555
 8006850:	3fd33332 	.word	0x3fd33332
 8006854:	3ff00000 	.word	0x3ff00000
 8006858:	3fe90000 	.word	0x3fe90000
 800685c:	ffe00000 	.word	0xffe00000
 8006860:	3fd20000 	.word	0x3fd20000

08006864 <__kernel_rem_pio2>:
 8006864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006866:	4ccb      	ldr	r4, [pc, #812]	; (8006b94 <__kernel_rem_pio2+0x330>)
 8006868:	44a5      	add	sp, r4
 800686a:	930d      	str	r3, [sp, #52]	; 0x34
 800686c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800686e:	0014      	movs	r4, r2
 8006870:	009a      	lsls	r2, r3, #2
 8006872:	4bc9      	ldr	r3, [pc, #804]	; (8006b98 <__kernel_rem_pio2+0x334>)
 8006874:	900e      	str	r0, [sp, #56]	; 0x38
 8006876:	58d3      	ldr	r3, [r2, r3]
 8006878:	9107      	str	r1, [sp, #28]
 800687a:	930a      	str	r3, [sp, #40]	; 0x28
 800687c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800687e:	3b01      	subs	r3, #1
 8006880:	930c      	str	r3, [sp, #48]	; 0x30
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	0023      	movs	r3, r4
 8006888:	3314      	adds	r3, #20
 800688a:	db04      	blt.n	8006896 <__kernel_rem_pio2+0x32>
 800688c:	2118      	movs	r1, #24
 800688e:	1ee0      	subs	r0, r4, #3
 8006890:	f7f9 fcc0 	bl	8000214 <__divsi3>
 8006894:	9000      	str	r0, [sp, #0]
 8006896:	2218      	movs	r2, #24
 8006898:	9b00      	ldr	r3, [sp, #0]
 800689a:	4252      	negs	r2, r2
 800689c:	3301      	adds	r3, #1
 800689e:	435a      	muls	r2, r3
 80068a0:	1913      	adds	r3, r2, r4
 80068a2:	9302      	str	r3, [sp, #8]
 80068a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a6:	9b00      	ldr	r3, [sp, #0]
 80068a8:	ae26      	add	r6, sp, #152	; 0x98
 80068aa:	1a9d      	subs	r5, r3, r2
 80068ac:	002c      	movs	r4, r5
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	189f      	adds	r7, r3, r2
 80068b2:	1b63      	subs	r3, r4, r5
 80068b4:	429f      	cmp	r7, r3
 80068b6:	da0f      	bge.n	80068d8 <__kernel_rem_pio2+0x74>
 80068b8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80068ba:	af76      	add	r7, sp, #472	; 0x1d8
 80068bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c0:	1af3      	subs	r3, r6, r3
 80068c2:	429a      	cmp	r2, r3
 80068c4:	db30      	blt.n	8006928 <__kernel_rem_pio2+0xc4>
 80068c6:	ab26      	add	r3, sp, #152	; 0x98
 80068c8:	00f4      	lsls	r4, r6, #3
 80068ca:	2200      	movs	r2, #0
 80068cc:	18e4      	adds	r4, r4, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	2500      	movs	r5, #0
 80068d2:	9204      	str	r2, [sp, #16]
 80068d4:	9305      	str	r3, [sp, #20]
 80068d6:	e01e      	b.n	8006916 <__kernel_rem_pio2+0xb2>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	db07      	blt.n	80068ec <__kernel_rem_pio2+0x88>
 80068dc:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80068de:	00a3      	lsls	r3, r4, #2
 80068e0:	58d0      	ldr	r0, [r2, r3]
 80068e2:	f7fb fb61 	bl	8001fa8 <__aeabi_i2d>
 80068e6:	c603      	stmia	r6!, {r0, r1}
 80068e8:	3401      	adds	r4, #1
 80068ea:	e7e2      	b.n	80068b2 <__kernel_rem_pio2+0x4e>
 80068ec:	2000      	movs	r0, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	e7f9      	b.n	80068e6 <__kernel_rem_pio2+0x82>
 80068f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f4:	00e9      	lsls	r1, r5, #3
 80068f6:	1859      	adds	r1, r3, r1
 80068f8:	6808      	ldr	r0, [r1, #0]
 80068fa:	6849      	ldr	r1, [r1, #4]
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	f7fa fd1e 	bl	8001340 <__aeabi_dmul>
 8006904:	0002      	movs	r2, r0
 8006906:	000b      	movs	r3, r1
 8006908:	9804      	ldr	r0, [sp, #16]
 800690a:	9905      	ldr	r1, [sp, #20]
 800690c:	f7f9 fdda 	bl	80004c4 <__aeabi_dadd>
 8006910:	9004      	str	r0, [sp, #16]
 8006912:	9105      	str	r1, [sp, #20]
 8006914:	3501      	adds	r5, #1
 8006916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006918:	3c08      	subs	r4, #8
 800691a:	429d      	cmp	r5, r3
 800691c:	dde9      	ble.n	80068f2 <__kernel_rem_pio2+0x8e>
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	9c05      	ldr	r4, [sp, #20]
 8006922:	3601      	adds	r6, #1
 8006924:	c718      	stmia	r7!, {r3, r4}
 8006926:	e7c9      	b.n	80068bc <__kernel_rem_pio2+0x58>
 8006928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692a:	aa12      	add	r2, sp, #72	; 0x48
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	189b      	adds	r3, r3, r2
 8006930:	9310      	str	r3, [sp, #64]	; 0x40
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	0098      	lsls	r0, r3, #2
 8006936:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006938:	181b      	adds	r3, r3, r0
 800693a:	930f      	str	r3, [sp, #60]	; 0x3c
 800693c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	9b04      	ldr	r3, [sp, #16]
 8006942:	aa76      	add	r2, sp, #472	; 0x1d8
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	18d3      	adds	r3, r2, r3
 8006948:	681c      	ldr	r4, [r3, #0]
 800694a:	685d      	ldr	r5, [r3, #4]
 800694c:	ab12      	add	r3, sp, #72	; 0x48
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	9309      	str	r3, [sp, #36]	; 0x24
 8006952:	9b04      	ldr	r3, [sp, #16]
 8006954:	9211      	str	r2, [sp, #68]	; 0x44
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dc74      	bgt.n	8006a48 <__kernel_rem_pio2+0x1e4>
 800695e:	0020      	movs	r0, r4
 8006960:	0029      	movs	r1, r5
 8006962:	9a02      	ldr	r2, [sp, #8]
 8006964:	f000 fc22 	bl	80071ac <scalbn>
 8006968:	23ff      	movs	r3, #255	; 0xff
 800696a:	2200      	movs	r2, #0
 800696c:	059b      	lsls	r3, r3, #22
 800696e:	0004      	movs	r4, r0
 8006970:	000d      	movs	r5, r1
 8006972:	f7fa fce5 	bl	8001340 <__aeabi_dmul>
 8006976:	f000 fb8f 	bl	8007098 <floor>
 800697a:	2200      	movs	r2, #0
 800697c:	4b87      	ldr	r3, [pc, #540]	; (8006b9c <__kernel_rem_pio2+0x338>)
 800697e:	f7fa fcdf 	bl	8001340 <__aeabi_dmul>
 8006982:	0002      	movs	r2, r0
 8006984:	000b      	movs	r3, r1
 8006986:	0020      	movs	r0, r4
 8006988:	0029      	movs	r1, r5
 800698a:	f7fa ff45 	bl	8001818 <__aeabi_dsub>
 800698e:	000d      	movs	r5, r1
 8006990:	0004      	movs	r4, r0
 8006992:	f7fb fad3 	bl	8001f3c <__aeabi_d2iz>
 8006996:	9009      	str	r0, [sp, #36]	; 0x24
 8006998:	f7fb fb06 	bl	8001fa8 <__aeabi_i2d>
 800699c:	000b      	movs	r3, r1
 800699e:	0002      	movs	r2, r0
 80069a0:	0029      	movs	r1, r5
 80069a2:	0020      	movs	r0, r4
 80069a4:	f7fa ff38 	bl	8001818 <__aeabi_dsub>
 80069a8:	9b02      	ldr	r3, [sp, #8]
 80069aa:	0006      	movs	r6, r0
 80069ac:	000f      	movs	r7, r1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd74      	ble.n	8006a9c <__kernel_rem_pio2+0x238>
 80069b2:	2118      	movs	r1, #24
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	aa12      	add	r2, sp, #72	; 0x48
 80069b8:	3b01      	subs	r3, #1
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	589a      	ldr	r2, [r3, r2]
 80069be:	9802      	ldr	r0, [sp, #8]
 80069c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80069c2:	1a09      	subs	r1, r1, r0
 80069c4:	0010      	movs	r0, r2
 80069c6:	4108      	asrs	r0, r1
 80069c8:	1824      	adds	r4, r4, r0
 80069ca:	4088      	lsls	r0, r1
 80069cc:	a912      	add	r1, sp, #72	; 0x48
 80069ce:	1a12      	subs	r2, r2, r0
 80069d0:	505a      	str	r2, [r3, r1]
 80069d2:	2317      	movs	r3, #23
 80069d4:	9902      	ldr	r1, [sp, #8]
 80069d6:	9409      	str	r4, [sp, #36]	; 0x24
 80069d8:	1a5b      	subs	r3, r3, r1
 80069da:	411a      	asrs	r2, r3
 80069dc:	9208      	str	r2, [sp, #32]
 80069de:	9b08      	ldr	r3, [sp, #32]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd6d      	ble.n	8006ac0 <__kernel_rem_pio2+0x25c>
 80069e4:	2200      	movs	r2, #0
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	2080      	movs	r0, #128	; 0x80
 80069ea:	3301      	adds	r3, #1
 80069ec:	9309      	str	r3, [sp, #36]	; 0x24
 80069ee:	4b6c      	ldr	r3, [pc, #432]	; (8006ba0 <__kernel_rem_pio2+0x33c>)
 80069f0:	0014      	movs	r4, r2
 80069f2:	469c      	mov	ip, r3
 80069f4:	2501      	movs	r5, #1
 80069f6:	0440      	lsls	r0, r0, #17
 80069f8:	9b04      	ldr	r3, [sp, #16]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	dd00      	ble.n	8006a00 <__kernel_rem_pio2+0x19c>
 80069fe:	e099      	b.n	8006b34 <__kernel_rem_pio2+0x2d0>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dd05      	ble.n	8006a12 <__kernel_rem_pio2+0x1ae>
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d100      	bne.n	8006a0c <__kernel_rem_pio2+0x1a8>
 8006a0a:	e0a9      	b.n	8006b60 <__kernel_rem_pio2+0x2fc>
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d100      	bne.n	8006a12 <__kernel_rem_pio2+0x1ae>
 8006a10:	e0b1      	b.n	8006b76 <__kernel_rem_pio2+0x312>
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d153      	bne.n	8006ac0 <__kernel_rem_pio2+0x25c>
 8006a18:	0032      	movs	r2, r6
 8006a1a:	003b      	movs	r3, r7
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	4961      	ldr	r1, [pc, #388]	; (8006ba4 <__kernel_rem_pio2+0x340>)
 8006a20:	f7fa fefa 	bl	8001818 <__aeabi_dsub>
 8006a24:	0006      	movs	r6, r0
 8006a26:	000f      	movs	r7, r1
 8006a28:	2c00      	cmp	r4, #0
 8006a2a:	d049      	beq.n	8006ac0 <__kernel_rem_pio2+0x25c>
 8006a2c:	9a02      	ldr	r2, [sp, #8]
 8006a2e:	2000      	movs	r0, #0
 8006a30:	495c      	ldr	r1, [pc, #368]	; (8006ba4 <__kernel_rem_pio2+0x340>)
 8006a32:	f000 fbbb 	bl	80071ac <scalbn>
 8006a36:	0002      	movs	r2, r0
 8006a38:	000b      	movs	r3, r1
 8006a3a:	0030      	movs	r0, r6
 8006a3c:	0039      	movs	r1, r7
 8006a3e:	f7fa feeb 	bl	8001818 <__aeabi_dsub>
 8006a42:	0006      	movs	r6, r0
 8006a44:	000f      	movs	r7, r1
 8006a46:	e03b      	b.n	8006ac0 <__kernel_rem_pio2+0x25c>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4b57      	ldr	r3, [pc, #348]	; (8006ba8 <__kernel_rem_pio2+0x344>)
 8006a4c:	0020      	movs	r0, r4
 8006a4e:	0029      	movs	r1, r5
 8006a50:	f7fa fc76 	bl	8001340 <__aeabi_dmul>
 8006a54:	f7fb fa72 	bl	8001f3c <__aeabi_d2iz>
 8006a58:	f7fb faa6 	bl	8001fa8 <__aeabi_i2d>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4b53      	ldr	r3, [pc, #332]	; (8006bac <__kernel_rem_pio2+0x348>)
 8006a60:	0006      	movs	r6, r0
 8006a62:	000f      	movs	r7, r1
 8006a64:	f7fa fc6c 	bl	8001340 <__aeabi_dmul>
 8006a68:	0002      	movs	r2, r0
 8006a6a:	000b      	movs	r3, r1
 8006a6c:	0020      	movs	r0, r4
 8006a6e:	0029      	movs	r1, r5
 8006a70:	f7fa fed2 	bl	8001818 <__aeabi_dsub>
 8006a74:	f7fb fa62 	bl	8001f3c <__aeabi_d2iz>
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a7c:	c301      	stmia	r3!, {r0}
 8006a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	0030      	movs	r0, r6
 8006a84:	3b01      	subs	r3, #1
 8006a86:	9308      	str	r3, [sp, #32]
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	18d3      	adds	r3, r2, r3
 8006a8c:	0039      	movs	r1, r7
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f7f9 fd17 	bl	80004c4 <__aeabi_dadd>
 8006a96:	0004      	movs	r4, r0
 8006a98:	000d      	movs	r5, r1
 8006a9a:	e75d      	b.n	8006958 <__kernel_rem_pio2+0xf4>
 8006a9c:	9b02      	ldr	r3, [sp, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <__kernel_rem_pio2+0x24e>
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	aa12      	add	r2, sp, #72	; 0x48
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	5898      	ldr	r0, [r3, r2]
 8006aac:	15c3      	asrs	r3, r0, #23
 8006aae:	9308      	str	r3, [sp, #32]
 8006ab0:	e795      	b.n	80069de <__kernel_rem_pio2+0x17a>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <__kernel_rem_pio2+0x34c>)
 8006ab6:	f7f9 fccd 	bl	8000454 <__aeabi_dcmpge>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d137      	bne.n	8006b2e <__kernel_rem_pio2+0x2ca>
 8006abe:	9008      	str	r0, [sp, #32]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	0030      	movs	r0, r6
 8006ac6:	0039      	movs	r1, r7
 8006ac8:	f7f9 fca0 	bl	800040c <__aeabi_dcmpeq>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d100      	bne.n	8006ad2 <__kernel_rem_pio2+0x26e>
 8006ad0:	e0b9      	b.n	8006c46 <__kernel_rem_pio2+0x3e2>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	9b04      	ldr	r3, [sp, #16]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006adc:	428b      	cmp	r3, r1
 8006ade:	da53      	bge.n	8006b88 <__kernel_rem_pio2+0x324>
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d100      	bne.n	8006ae6 <__kernel_rem_pio2+0x282>
 8006ae4:	e095      	b.n	8006c12 <__kernel_rem_pio2+0x3ae>
 8006ae6:	9b02      	ldr	r3, [sp, #8]
 8006ae8:	aa12      	add	r2, sp, #72	; 0x48
 8006aea:	3b18      	subs	r3, #24
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	589b      	ldr	r3, [r3, r2]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d100      	bne.n	8006afa <__kernel_rem_pio2+0x296>
 8006af8:	e0a1      	b.n	8006c3e <__kernel_rem_pio2+0x3da>
 8006afa:	2000      	movs	r0, #0
 8006afc:	9a02      	ldr	r2, [sp, #8]
 8006afe:	4929      	ldr	r1, [pc, #164]	; (8006ba4 <__kernel_rem_pio2+0x340>)
 8006b00:	f000 fb54 	bl	80071ac <scalbn>
 8006b04:	0006      	movs	r6, r0
 8006b06:	000f      	movs	r7, r1
 8006b08:	9c00      	ldr	r4, [sp, #0]
 8006b0a:	2c00      	cmp	r4, #0
 8006b0c:	db00      	blt.n	8006b10 <__kernel_rem_pio2+0x2ac>
 8006b0e:	e0d9      	b.n	8006cc4 <__kernel_rem_pio2+0x460>
 8006b10:	9c00      	ldr	r4, [sp, #0]
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	da00      	bge.n	8006b18 <__kernel_rem_pio2+0x2b4>
 8006b16:	e10c      	b.n	8006d32 <__kernel_rem_pio2+0x4ce>
 8006b18:	ab76      	add	r3, sp, #472	; 0x1d8
 8006b1a:	00e6      	lsls	r6, r4, #3
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	18f6      	adds	r6, r6, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	9202      	str	r2, [sp, #8]
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	9b00      	ldr	r3, [sp, #0]
 8006b28:	2500      	movs	r5, #0
 8006b2a:	1b1f      	subs	r7, r3, r4
 8006b2c:	e0f3      	b.n	8006d16 <__kernel_rem_pio2+0x4b2>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	9308      	str	r3, [sp, #32]
 8006b32:	e757      	b.n	80069e4 <__kernel_rem_pio2+0x180>
 8006b34:	9b00      	ldr	r3, [sp, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2c00      	cmp	r4, #0
 8006b3a:	d10b      	bne.n	8006b54 <__kernel_rem_pio2+0x2f0>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <__kernel_rem_pio2+0x2e4>
 8006b40:	9c00      	ldr	r4, [sp, #0]
 8006b42:	1ac3      	subs	r3, r0, r3
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	002b      	movs	r3, r5
 8006b48:	9c00      	ldr	r4, [sp, #0]
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	3404      	adds	r4, #4
 8006b4e:	9400      	str	r4, [sp, #0]
 8006b50:	001c      	movs	r4, r3
 8006b52:	e751      	b.n	80069f8 <__kernel_rem_pio2+0x194>
 8006b54:	4661      	mov	r1, ip
 8006b56:	1acb      	subs	r3, r1, r3
 8006b58:	9900      	ldr	r1, [sp, #0]
 8006b5a:	600b      	str	r3, [r1, #0]
 8006b5c:	0023      	movs	r3, r4
 8006b5e:	e7f3      	b.n	8006b48 <__kernel_rem_pio2+0x2e4>
 8006b60:	9b04      	ldr	r3, [sp, #16]
 8006b62:	aa12      	add	r2, sp, #72	; 0x48
 8006b64:	3b01      	subs	r3, #1
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	589a      	ldr	r2, [r3, r2]
 8006b6a:	9200      	str	r2, [sp, #0]
 8006b6c:	0252      	lsls	r2, r2, #9
 8006b6e:	0a52      	lsrs	r2, r2, #9
 8006b70:	a912      	add	r1, sp, #72	; 0x48
 8006b72:	505a      	str	r2, [r3, r1]
 8006b74:	e74d      	b.n	8006a12 <__kernel_rem_pio2+0x1ae>
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	aa12      	add	r2, sp, #72	; 0x48
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	589a      	ldr	r2, [r3, r2]
 8006b80:	9200      	str	r2, [sp, #0]
 8006b82:	0292      	lsls	r2, r2, #10
 8006b84:	0a92      	lsrs	r2, r2, #10
 8006b86:	e7f3      	b.n	8006b70 <__kernel_rem_pio2+0x30c>
 8006b88:	0099      	lsls	r1, r3, #2
 8006b8a:	a812      	add	r0, sp, #72	; 0x48
 8006b8c:	5809      	ldr	r1, [r1, r0]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	430a      	orrs	r2, r1
 8006b92:	e7a2      	b.n	8006ada <__kernel_rem_pio2+0x276>
 8006b94:	fffffd84 	.word	0xfffffd84
 8006b98:	080075c8 	.word	0x080075c8
 8006b9c:	40200000 	.word	0x40200000
 8006ba0:	00ffffff 	.word	0x00ffffff
 8006ba4:	3ff00000 	.word	0x3ff00000
 8006ba8:	3e700000 	.word	0x3e700000
 8006bac:	41700000 	.word	0x41700000
 8006bb0:	3fe00000 	.word	0x3fe00000
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006bb8:	009a      	lsls	r2, r3, #2
 8006bba:	4252      	negs	r2, r2
 8006bbc:	588a      	ldr	r2, [r1, r2]
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d0f8      	beq.n	8006bb4 <__kernel_rem_pio2+0x350>
 8006bc2:	9a04      	ldr	r2, [sp, #16]
 8006bc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bc6:	1c57      	adds	r7, r2, #1
 8006bc8:	1854      	adds	r4, r2, r1
 8006bca:	00e4      	lsls	r4, r4, #3
 8006bcc:	aa26      	add	r2, sp, #152	; 0x98
 8006bce:	1914      	adds	r4, r2, r4
 8006bd0:	9a04      	ldr	r2, [sp, #16]
 8006bd2:	18d3      	adds	r3, r2, r3
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	42bb      	cmp	r3, r7
 8006bda:	da00      	bge.n	8006bde <__kernel_rem_pio2+0x37a>
 8006bdc:	e6b0      	b.n	8006940 <__kernel_rem_pio2+0xdc>
 8006bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006be0:	00bb      	lsls	r3, r7, #2
 8006be2:	58d0      	ldr	r0, [r2, r3]
 8006be4:	f7fb f9e0 	bl	8001fa8 <__aeabi_i2d>
 8006be8:	2200      	movs	r2, #0
 8006bea:	2300      	movs	r3, #0
 8006bec:	0026      	movs	r6, r4
 8006bee:	2500      	movs	r5, #0
 8006bf0:	6020      	str	r0, [r4, #0]
 8006bf2:	6061      	str	r1, [r4, #4]
 8006bf4:	9200      	str	r2, [sp, #0]
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bfa:	429d      	cmp	r5, r3
 8006bfc:	dd0b      	ble.n	8006c16 <__kernel_rem_pio2+0x3b2>
 8006bfe:	00fb      	lsls	r3, r7, #3
 8006c00:	aa76      	add	r2, sp, #472	; 0x1d8
 8006c02:	18d3      	adds	r3, r2, r3
 8006c04:	3701      	adds	r7, #1
 8006c06:	9900      	ldr	r1, [sp, #0]
 8006c08:	9a01      	ldr	r2, [sp, #4]
 8006c0a:	3408      	adds	r4, #8
 8006c0c:	6019      	str	r1, [r3, #0]
 8006c0e:	605a      	str	r2, [r3, #4]
 8006c10:	e7e1      	b.n	8006bd6 <__kernel_rem_pio2+0x372>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e7cf      	b.n	8006bb6 <__kernel_rem_pio2+0x352>
 8006c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c18:	00e9      	lsls	r1, r5, #3
 8006c1a:	1859      	adds	r1, r3, r1
 8006c1c:	6808      	ldr	r0, [r1, #0]
 8006c1e:	6849      	ldr	r1, [r1, #4]
 8006c20:	6832      	ldr	r2, [r6, #0]
 8006c22:	6873      	ldr	r3, [r6, #4]
 8006c24:	f7fa fb8c 	bl	8001340 <__aeabi_dmul>
 8006c28:	0002      	movs	r2, r0
 8006c2a:	000b      	movs	r3, r1
 8006c2c:	9800      	ldr	r0, [sp, #0]
 8006c2e:	9901      	ldr	r1, [sp, #4]
 8006c30:	f7f9 fc48 	bl	80004c4 <__aeabi_dadd>
 8006c34:	3501      	adds	r5, #1
 8006c36:	9000      	str	r0, [sp, #0]
 8006c38:	9101      	str	r1, [sp, #4]
 8006c3a:	3e08      	subs	r6, #8
 8006c3c:	e7dc      	b.n	8006bf8 <__kernel_rem_pio2+0x394>
 8006c3e:	9b00      	ldr	r3, [sp, #0]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	e74f      	b.n	8006ae6 <__kernel_rem_pio2+0x282>
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	0030      	movs	r0, r6
 8006c4a:	425a      	negs	r2, r3
 8006c4c:	0039      	movs	r1, r7
 8006c4e:	f000 faad 	bl	80071ac <scalbn>
 8006c52:	2200      	movs	r2, #0
 8006c54:	4bb5      	ldr	r3, [pc, #724]	; (8006f2c <__kernel_rem_pio2+0x6c8>)
 8006c56:	0004      	movs	r4, r0
 8006c58:	000d      	movs	r5, r1
 8006c5a:	f7f9 fbfb 	bl	8000454 <__aeabi_dcmpge>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d025      	beq.n	8006cae <__kernel_rem_pio2+0x44a>
 8006c62:	2200      	movs	r2, #0
 8006c64:	4bb2      	ldr	r3, [pc, #712]	; (8006f30 <__kernel_rem_pio2+0x6cc>)
 8006c66:	0020      	movs	r0, r4
 8006c68:	0029      	movs	r1, r5
 8006c6a:	f7fa fb69 	bl	8001340 <__aeabi_dmul>
 8006c6e:	f7fb f965 	bl	8001f3c <__aeabi_d2iz>
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	0006      	movs	r6, r0
 8006c76:	009f      	lsls	r7, r3, #2
 8006c78:	f7fb f996 	bl	8001fa8 <__aeabi_i2d>
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4bab      	ldr	r3, [pc, #684]	; (8006f2c <__kernel_rem_pio2+0x6c8>)
 8006c80:	f7fa fb5e 	bl	8001340 <__aeabi_dmul>
 8006c84:	0002      	movs	r2, r0
 8006c86:	000b      	movs	r3, r1
 8006c88:	0020      	movs	r0, r4
 8006c8a:	0029      	movs	r1, r5
 8006c8c:	f7fa fdc4 	bl	8001818 <__aeabi_dsub>
 8006c90:	f7fb f954 	bl	8001f3c <__aeabi_d2iz>
 8006c94:	ab12      	add	r3, sp, #72	; 0x48
 8006c96:	51d8      	str	r0, [r3, r7]
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	aa12      	add	r2, sp, #72	; 0x48
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	3318      	adds	r3, #24
 8006ca4:	9302      	str	r3, [sp, #8]
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	509e      	str	r6, [r3, r2]
 8006cac:	e725      	b.n	8006afa <__kernel_rem_pio2+0x296>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	0020      	movs	r0, r4
 8006cb2:	0029      	movs	r1, r5
 8006cb4:	009e      	lsls	r6, r3, #2
 8006cb6:	f7fb f941 	bl	8001f3c <__aeabi_d2iz>
 8006cba:	ab12      	add	r3, sp, #72	; 0x48
 8006cbc:	5198      	str	r0, [r3, r6]
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	e71a      	b.n	8006afa <__kernel_rem_pio2+0x296>
 8006cc4:	00e5      	lsls	r5, r4, #3
 8006cc6:	ab76      	add	r3, sp, #472	; 0x1d8
 8006cc8:	aa12      	add	r2, sp, #72	; 0x48
 8006cca:	195d      	adds	r5, r3, r5
 8006ccc:	00a3      	lsls	r3, r4, #2
 8006cce:	5898      	ldr	r0, [r3, r2]
 8006cd0:	f7fb f96a 	bl	8001fa8 <__aeabi_i2d>
 8006cd4:	0032      	movs	r2, r6
 8006cd6:	003b      	movs	r3, r7
 8006cd8:	f7fa fb32 	bl	8001340 <__aeabi_dmul>
 8006cdc:	2200      	movs	r2, #0
 8006cde:	6028      	str	r0, [r5, #0]
 8006ce0:	6069      	str	r1, [r5, #4]
 8006ce2:	4b93      	ldr	r3, [pc, #588]	; (8006f30 <__kernel_rem_pio2+0x6cc>)
 8006ce4:	0030      	movs	r0, r6
 8006ce6:	0039      	movs	r1, r7
 8006ce8:	f7fa fb2a 	bl	8001340 <__aeabi_dmul>
 8006cec:	3c01      	subs	r4, #1
 8006cee:	0006      	movs	r6, r0
 8006cf0:	000f      	movs	r7, r1
 8006cf2:	e70a      	b.n	8006b0a <__kernel_rem_pio2+0x2a6>
 8006cf4:	4b8f      	ldr	r3, [pc, #572]	; (8006f34 <__kernel_rem_pio2+0x6d0>)
 8006cf6:	00e9      	lsls	r1, r5, #3
 8006cf8:	1859      	adds	r1, r3, r1
 8006cfa:	6808      	ldr	r0, [r1, #0]
 8006cfc:	6849      	ldr	r1, [r1, #4]
 8006cfe:	ce0c      	ldmia	r6!, {r2, r3}
 8006d00:	f7fa fb1e 	bl	8001340 <__aeabi_dmul>
 8006d04:	0002      	movs	r2, r0
 8006d06:	000b      	movs	r3, r1
 8006d08:	9802      	ldr	r0, [sp, #8]
 8006d0a:	9903      	ldr	r1, [sp, #12]
 8006d0c:	f7f9 fbda 	bl	80004c4 <__aeabi_dadd>
 8006d10:	9002      	str	r0, [sp, #8]
 8006d12:	9103      	str	r1, [sp, #12]
 8006d14:	3501      	adds	r5, #1
 8006d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d18:	429d      	cmp	r5, r3
 8006d1a:	dc01      	bgt.n	8006d20 <__kernel_rem_pio2+0x4bc>
 8006d1c:	42bd      	cmp	r5, r7
 8006d1e:	dde9      	ble.n	8006cf4 <__kernel_rem_pio2+0x490>
 8006d20:	ab4e      	add	r3, sp, #312	; 0x138
 8006d22:	00ff      	lsls	r7, r7, #3
 8006d24:	19df      	adds	r7, r3, r7
 8006d26:	3c01      	subs	r4, #1
 8006d28:	9a02      	ldr	r2, [sp, #8]
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	603a      	str	r2, [r7, #0]
 8006d2e:	607b      	str	r3, [r7, #4]
 8006d30:	e6ef      	b.n	8006b12 <__kernel_rem_pio2+0x2ae>
 8006d32:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	dc0e      	bgt.n	8006d56 <__kernel_rem_pio2+0x4f2>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dd00      	ble.n	8006d3e <__kernel_rem_pio2+0x4da>
 8006d3c:	e08c      	b.n	8006e58 <__kernel_rem_pio2+0x5f4>
 8006d3e:	2500      	movs	r5, #0
 8006d40:	002c      	movs	r4, r5
 8006d42:	42ab      	cmp	r3, r5
 8006d44:	d046      	beq.n	8006dd4 <__kernel_rem_pio2+0x570>
 8006d46:	2007      	movs	r0, #7
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	4003      	ands	r3, r0
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	239f      	movs	r3, #159	; 0x9f
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	449d      	add	sp, r3
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d1f4      	bne.n	8006d46 <__kernel_rem_pio2+0x4e2>
 8006d5c:	9b00      	ldr	r3, [sp, #0]
 8006d5e:	00dc      	lsls	r4, r3, #3
 8006d60:	ab4e      	add	r3, sp, #312	; 0x138
 8006d62:	191c      	adds	r4, r3, r4
 8006d64:	0025      	movs	r5, r4
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	9b02      	ldr	r3, [sp, #8]
 8006d6c:	3d08      	subs	r5, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	dd00      	ble.n	8006d74 <__kernel_rem_pio2+0x510>
 8006d72:	e07f      	b.n	8006e74 <__kernel_rem_pio2+0x610>
 8006d74:	9d00      	ldr	r5, [sp, #0]
 8006d76:	3c08      	subs	r4, #8
 8006d78:	2d01      	cmp	r5, #1
 8006d7a:	dd00      	ble.n	8006d7e <__kernel_rem_pio2+0x51a>
 8006d7c:	e09c      	b.n	8006eb8 <__kernel_rem_pio2+0x654>
 8006d7e:	2400      	movs	r4, #0
 8006d80:	0021      	movs	r1, r4
 8006d82:	9b00      	ldr	r3, [sp, #0]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	dd00      	ble.n	8006d8a <__kernel_rem_pio2+0x526>
 8006d88:	e0b4      	b.n	8006ef4 <__kernel_rem_pio2+0x690>
 8006d8a:	9b08      	ldr	r3, [sp, #32]
 8006d8c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8006d8e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8006d90:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8006d92:	9851      	ldr	r0, [sp, #324]	; 0x144
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d000      	beq.n	8006d9a <__kernel_rem_pio2+0x536>
 8006d98:	e0ba      	b.n	8006f10 <__kernel_rem_pio2+0x6ac>
 8006d9a:	0033      	movs	r3, r6
 8006d9c:	003a      	movs	r2, r7
 8006d9e:	9e07      	ldr	r6, [sp, #28]
 8006da0:	6032      	str	r2, [r6, #0]
 8006da2:	6073      	str	r3, [r6, #4]
 8006da4:	002a      	movs	r2, r5
 8006da6:	0003      	movs	r3, r0
 8006da8:	60b2      	str	r2, [r6, #8]
 8006daa:	60f3      	str	r3, [r6, #12]
 8006dac:	0022      	movs	r2, r4
 8006dae:	000b      	movs	r3, r1
 8006db0:	6132      	str	r2, [r6, #16]
 8006db2:	6173      	str	r3, [r6, #20]
 8006db4:	e7c7      	b.n	8006d46 <__kernel_rem_pio2+0x4e2>
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	aa4e      	add	r2, sp, #312	; 0x138
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	0028      	movs	r0, r5
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	0021      	movs	r1, r4
 8006dc6:	f7f9 fb7d 	bl	80004c4 <__aeabi_dadd>
 8006dca:	0005      	movs	r5, r0
 8006dcc:	000c      	movs	r4, r1
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	daed      	bge.n	8006db6 <__kernel_rem_pio2+0x552>
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <__kernel_rem_pio2+0x582>
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	061b      	lsls	r3, r3, #24
 8006de4:	18e4      	adds	r4, r4, r3
 8006de6:	002a      	movs	r2, r5
 8006de8:	0023      	movs	r3, r4
 8006dea:	9907      	ldr	r1, [sp, #28]
 8006dec:	600a      	str	r2, [r1, #0]
 8006dee:	604b      	str	r3, [r1, #4]
 8006df0:	e7a9      	b.n	8006d46 <__kernel_rem_pio2+0x4e2>
 8006df2:	00e3      	lsls	r3, r4, #3
 8006df4:	aa4e      	add	r2, sp, #312	; 0x138
 8006df6:	18d3      	adds	r3, r2, r3
 8006df8:	0030      	movs	r0, r6
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	0029      	movs	r1, r5
 8006e00:	f7f9 fb60 	bl	80004c4 <__aeabi_dadd>
 8006e04:	0006      	movs	r6, r0
 8006e06:	000d      	movs	r5, r1
 8006e08:	3c01      	subs	r4, #1
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	daf1      	bge.n	8006df2 <__kernel_rem_pio2+0x58e>
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	0029      	movs	r1, r5
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <__kernel_rem_pio2+0x5b8>
 8006e16:	2380      	movs	r3, #128	; 0x80
 8006e18:	061b      	lsls	r3, r3, #24
 8006e1a:	18e9      	adds	r1, r5, r3
 8006e1c:	0032      	movs	r2, r6
 8006e1e:	000b      	movs	r3, r1
 8006e20:	9907      	ldr	r1, [sp, #28]
 8006e22:	2401      	movs	r4, #1
 8006e24:	600a      	str	r2, [r1, #0]
 8006e26:	604b      	str	r3, [r1, #4]
 8006e28:	984e      	ldr	r0, [sp, #312]	; 0x138
 8006e2a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8006e2c:	002b      	movs	r3, r5
 8006e2e:	f7fa fcf3 	bl	8001818 <__aeabi_dsub>
 8006e32:	0007      	movs	r7, r0
 8006e34:	000e      	movs	r6, r1
 8006e36:	ad4e      	add	r5, sp, #312	; 0x138
 8006e38:	9b00      	ldr	r3, [sp, #0]
 8006e3a:	3508      	adds	r5, #8
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	da0f      	bge.n	8006e60 <__kernel_rem_pio2+0x5fc>
 8006e40:	9b08      	ldr	r3, [sp, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <__kernel_rem_pio2+0x5e8>
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	18f6      	adds	r6, r6, r3
 8006e4c:	003a      	movs	r2, r7
 8006e4e:	0033      	movs	r3, r6
 8006e50:	9907      	ldr	r1, [sp, #28]
 8006e52:	608a      	str	r2, [r1, #8]
 8006e54:	60cb      	str	r3, [r1, #12]
 8006e56:	e776      	b.n	8006d46 <__kernel_rem_pio2+0x4e2>
 8006e58:	2600      	movs	r6, #0
 8006e5a:	9c00      	ldr	r4, [sp, #0]
 8006e5c:	0035      	movs	r5, r6
 8006e5e:	e7d4      	b.n	8006e0a <__kernel_rem_pio2+0x5a6>
 8006e60:	0038      	movs	r0, r7
 8006e62:	682a      	ldr	r2, [r5, #0]
 8006e64:	686b      	ldr	r3, [r5, #4]
 8006e66:	0031      	movs	r1, r6
 8006e68:	f7f9 fb2c 	bl	80004c4 <__aeabi_dadd>
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	0007      	movs	r7, r0
 8006e70:	000e      	movs	r6, r1
 8006e72:	e7e1      	b.n	8006e38 <__kernel_rem_pio2+0x5d4>
 8006e74:	9b02      	ldr	r3, [sp, #8]
 8006e76:	68ae      	ldr	r6, [r5, #8]
 8006e78:	68ef      	ldr	r7, [r5, #12]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	9302      	str	r3, [sp, #8]
 8006e7e:	682a      	ldr	r2, [r5, #0]
 8006e80:	686b      	ldr	r3, [r5, #4]
 8006e82:	9204      	str	r2, [sp, #16]
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	9804      	ldr	r0, [sp, #16]
 8006e88:	9905      	ldr	r1, [sp, #20]
 8006e8a:	0032      	movs	r2, r6
 8006e8c:	003b      	movs	r3, r7
 8006e8e:	f7f9 fb19 	bl	80004c4 <__aeabi_dadd>
 8006e92:	0002      	movs	r2, r0
 8006e94:	000b      	movs	r3, r1
 8006e96:	900a      	str	r0, [sp, #40]	; 0x28
 8006e98:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e9a:	9804      	ldr	r0, [sp, #16]
 8006e9c:	9905      	ldr	r1, [sp, #20]
 8006e9e:	f7fa fcbb 	bl	8001818 <__aeabi_dsub>
 8006ea2:	0032      	movs	r2, r6
 8006ea4:	003b      	movs	r3, r7
 8006ea6:	f7f9 fb0d 	bl	80004c4 <__aeabi_dadd>
 8006eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eae:	60a8      	str	r0, [r5, #8]
 8006eb0:	60e9      	str	r1, [r5, #12]
 8006eb2:	602a      	str	r2, [r5, #0]
 8006eb4:	606b      	str	r3, [r5, #4]
 8006eb6:	e758      	b.n	8006d6a <__kernel_rem_pio2+0x506>
 8006eb8:	6826      	ldr	r6, [r4, #0]
 8006eba:	6867      	ldr	r7, [r4, #4]
 8006ebc:	68a2      	ldr	r2, [r4, #8]
 8006ebe:	68e3      	ldr	r3, [r4, #12]
 8006ec0:	0030      	movs	r0, r6
 8006ec2:	0039      	movs	r1, r7
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	9303      	str	r3, [sp, #12]
 8006ec8:	f7f9 fafc 	bl	80004c4 <__aeabi_dadd>
 8006ecc:	0002      	movs	r2, r0
 8006ece:	000b      	movs	r3, r1
 8006ed0:	9004      	str	r0, [sp, #16]
 8006ed2:	9105      	str	r1, [sp, #20]
 8006ed4:	0030      	movs	r0, r6
 8006ed6:	0039      	movs	r1, r7
 8006ed8:	f7fa fc9e 	bl	8001818 <__aeabi_dsub>
 8006edc:	9a02      	ldr	r2, [sp, #8]
 8006ede:	9b03      	ldr	r3, [sp, #12]
 8006ee0:	f7f9 faf0 	bl	80004c4 <__aeabi_dadd>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	9b05      	ldr	r3, [sp, #20]
 8006ee8:	60a0      	str	r0, [r4, #8]
 8006eea:	60e1      	str	r1, [r4, #12]
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	6063      	str	r3, [r4, #4]
 8006ef0:	3d01      	subs	r5, #1
 8006ef2:	e740      	b.n	8006d76 <__kernel_rem_pio2+0x512>
 8006ef4:	9b00      	ldr	r3, [sp, #0]
 8006ef6:	aa4e      	add	r2, sp, #312	; 0x138
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	18d3      	adds	r3, r2, r3
 8006efc:	0020      	movs	r0, r4
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f7f9 fadf 	bl	80004c4 <__aeabi_dadd>
 8006f06:	9b00      	ldr	r3, [sp, #0]
 8006f08:	0004      	movs	r4, r0
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	e738      	b.n	8006d82 <__kernel_rem_pio2+0x51e>
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	9a07      	ldr	r2, [sp, #28]
 8006f14:	601f      	str	r7, [r3, #0]
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	18f6      	adds	r6, r6, r3
 8006f1c:	18c0      	adds	r0, r0, r3
 8006f1e:	18c9      	adds	r1, r1, r3
 8006f20:	6056      	str	r6, [r2, #4]
 8006f22:	6095      	str	r5, [r2, #8]
 8006f24:	60d0      	str	r0, [r2, #12]
 8006f26:	6114      	str	r4, [r2, #16]
 8006f28:	6151      	str	r1, [r2, #20]
 8006f2a:	e70c      	b.n	8006d46 <__kernel_rem_pio2+0x4e2>
 8006f2c:	41700000 	.word	0x41700000
 8006f30:	3e700000 	.word	0x3e700000
 8006f34:	08007588 	.word	0x08007588

08006f38 <__kernel_sin>:
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	9202      	str	r2, [sp, #8]
 8006f3e:	9303      	str	r3, [sp, #12]
 8006f40:	22f9      	movs	r2, #249	; 0xf9
 8006f42:	004b      	lsls	r3, r1, #1
 8006f44:	0007      	movs	r7, r0
 8006f46:	000e      	movs	r6, r1
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	0592      	lsls	r2, r2, #22
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	da03      	bge.n	8006f58 <__kernel_sin+0x20>
 8006f50:	f7fa fff4 	bl	8001f3c <__aeabi_d2iz>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d04c      	beq.n	8006ff2 <__kernel_sin+0xba>
 8006f58:	003a      	movs	r2, r7
 8006f5a:	0033      	movs	r3, r6
 8006f5c:	0038      	movs	r0, r7
 8006f5e:	0031      	movs	r1, r6
 8006f60:	f7fa f9ee 	bl	8001340 <__aeabi_dmul>
 8006f64:	0004      	movs	r4, r0
 8006f66:	000d      	movs	r5, r1
 8006f68:	0002      	movs	r2, r0
 8006f6a:	000b      	movs	r3, r1
 8006f6c:	0038      	movs	r0, r7
 8006f6e:	0031      	movs	r1, r6
 8006f70:	f7fa f9e6 	bl	8001340 <__aeabi_dmul>
 8006f74:	4a39      	ldr	r2, [pc, #228]	; (800705c <__kernel_sin+0x124>)
 8006f76:	9000      	str	r0, [sp, #0]
 8006f78:	9101      	str	r1, [sp, #4]
 8006f7a:	4b39      	ldr	r3, [pc, #228]	; (8007060 <__kernel_sin+0x128>)
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	0029      	movs	r1, r5
 8006f80:	f7fa f9de 	bl	8001340 <__aeabi_dmul>
 8006f84:	4a37      	ldr	r2, [pc, #220]	; (8007064 <__kernel_sin+0x12c>)
 8006f86:	4b38      	ldr	r3, [pc, #224]	; (8007068 <__kernel_sin+0x130>)
 8006f88:	f7fa fc46 	bl	8001818 <__aeabi_dsub>
 8006f8c:	0022      	movs	r2, r4
 8006f8e:	002b      	movs	r3, r5
 8006f90:	f7fa f9d6 	bl	8001340 <__aeabi_dmul>
 8006f94:	4a35      	ldr	r2, [pc, #212]	; (800706c <__kernel_sin+0x134>)
 8006f96:	4b36      	ldr	r3, [pc, #216]	; (8007070 <__kernel_sin+0x138>)
 8006f98:	f7f9 fa94 	bl	80004c4 <__aeabi_dadd>
 8006f9c:	0022      	movs	r2, r4
 8006f9e:	002b      	movs	r3, r5
 8006fa0:	f7fa f9ce 	bl	8001340 <__aeabi_dmul>
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <__kernel_sin+0x13c>)
 8006fa6:	4b34      	ldr	r3, [pc, #208]	; (8007078 <__kernel_sin+0x140>)
 8006fa8:	f7fa fc36 	bl	8001818 <__aeabi_dsub>
 8006fac:	0022      	movs	r2, r4
 8006fae:	002b      	movs	r3, r5
 8006fb0:	f7fa f9c6 	bl	8001340 <__aeabi_dmul>
 8006fb4:	4b31      	ldr	r3, [pc, #196]	; (800707c <__kernel_sin+0x144>)
 8006fb6:	4a32      	ldr	r2, [pc, #200]	; (8007080 <__kernel_sin+0x148>)
 8006fb8:	f7f9 fa84 	bl	80004c4 <__aeabi_dadd>
 8006fbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fbe:	9004      	str	r0, [sp, #16]
 8006fc0:	9105      	str	r1, [sp, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d119      	bne.n	8006ffa <__kernel_sin+0xc2>
 8006fc6:	0002      	movs	r2, r0
 8006fc8:	000b      	movs	r3, r1
 8006fca:	0020      	movs	r0, r4
 8006fcc:	0029      	movs	r1, r5
 8006fce:	f7fa f9b7 	bl	8001340 <__aeabi_dmul>
 8006fd2:	4a2c      	ldr	r2, [pc, #176]	; (8007084 <__kernel_sin+0x14c>)
 8006fd4:	4b2c      	ldr	r3, [pc, #176]	; (8007088 <__kernel_sin+0x150>)
 8006fd6:	f7fa fc1f 	bl	8001818 <__aeabi_dsub>
 8006fda:	9a00      	ldr	r2, [sp, #0]
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	f7fa f9af 	bl	8001340 <__aeabi_dmul>
 8006fe2:	0002      	movs	r2, r0
 8006fe4:	000b      	movs	r3, r1
 8006fe6:	0038      	movs	r0, r7
 8006fe8:	0031      	movs	r1, r6
 8006fea:	f7f9 fa6b 	bl	80004c4 <__aeabi_dadd>
 8006fee:	0007      	movs	r7, r0
 8006ff0:	000e      	movs	r6, r1
 8006ff2:	0038      	movs	r0, r7
 8006ff4:	0031      	movs	r1, r6
 8006ff6:	b009      	add	sp, #36	; 0x24
 8006ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	9802      	ldr	r0, [sp, #8]
 8006ffe:	9903      	ldr	r1, [sp, #12]
 8007000:	4b22      	ldr	r3, [pc, #136]	; (800708c <__kernel_sin+0x154>)
 8007002:	f7fa f99d 	bl	8001340 <__aeabi_dmul>
 8007006:	9a04      	ldr	r2, [sp, #16]
 8007008:	9b05      	ldr	r3, [sp, #20]
 800700a:	9006      	str	r0, [sp, #24]
 800700c:	9107      	str	r1, [sp, #28]
 800700e:	9800      	ldr	r0, [sp, #0]
 8007010:	9901      	ldr	r1, [sp, #4]
 8007012:	f7fa f995 	bl	8001340 <__aeabi_dmul>
 8007016:	0002      	movs	r2, r0
 8007018:	000b      	movs	r3, r1
 800701a:	9806      	ldr	r0, [sp, #24]
 800701c:	9907      	ldr	r1, [sp, #28]
 800701e:	f7fa fbfb 	bl	8001818 <__aeabi_dsub>
 8007022:	0022      	movs	r2, r4
 8007024:	002b      	movs	r3, r5
 8007026:	f7fa f98b 	bl	8001340 <__aeabi_dmul>
 800702a:	9a02      	ldr	r2, [sp, #8]
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	f7fa fbf3 	bl	8001818 <__aeabi_dsub>
 8007032:	4a14      	ldr	r2, [pc, #80]	; (8007084 <__kernel_sin+0x14c>)
 8007034:	0004      	movs	r4, r0
 8007036:	000d      	movs	r5, r1
 8007038:	9800      	ldr	r0, [sp, #0]
 800703a:	9901      	ldr	r1, [sp, #4]
 800703c:	4b12      	ldr	r3, [pc, #72]	; (8007088 <__kernel_sin+0x150>)
 800703e:	f7fa f97f 	bl	8001340 <__aeabi_dmul>
 8007042:	0002      	movs	r2, r0
 8007044:	000b      	movs	r3, r1
 8007046:	0020      	movs	r0, r4
 8007048:	0029      	movs	r1, r5
 800704a:	f7f9 fa3b 	bl	80004c4 <__aeabi_dadd>
 800704e:	0002      	movs	r2, r0
 8007050:	000b      	movs	r3, r1
 8007052:	0038      	movs	r0, r7
 8007054:	0031      	movs	r1, r6
 8007056:	f7fa fbdf 	bl	8001818 <__aeabi_dsub>
 800705a:	e7c8      	b.n	8006fee <__kernel_sin+0xb6>
 800705c:	5acfd57c 	.word	0x5acfd57c
 8007060:	3de5d93a 	.word	0x3de5d93a
 8007064:	8a2b9ceb 	.word	0x8a2b9ceb
 8007068:	3e5ae5e6 	.word	0x3e5ae5e6
 800706c:	57b1fe7d 	.word	0x57b1fe7d
 8007070:	3ec71de3 	.word	0x3ec71de3
 8007074:	19c161d5 	.word	0x19c161d5
 8007078:	3f2a01a0 	.word	0x3f2a01a0
 800707c:	3f811111 	.word	0x3f811111
 8007080:	1110f8a6 	.word	0x1110f8a6
 8007084:	55555549 	.word	0x55555549
 8007088:	3fc55555 	.word	0x3fc55555
 800708c:	3fe00000 	.word	0x3fe00000

08007090 <fabs>:
 8007090:	004b      	lsls	r3, r1, #1
 8007092:	0859      	lsrs	r1, r3, #1
 8007094:	4770      	bx	lr
	...

08007098 <floor>:
 8007098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800709a:	004b      	lsls	r3, r1, #1
 800709c:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <floor+0xfc>)
 800709e:	0d5b      	lsrs	r3, r3, #21
 80070a0:	189f      	adds	r7, r3, r2
 80070a2:	4684      	mov	ip, r0
 80070a4:	000e      	movs	r6, r1
 80070a6:	000d      	movs	r5, r1
 80070a8:	0004      	movs	r4, r0
 80070aa:	9001      	str	r0, [sp, #4]
 80070ac:	2f13      	cmp	r7, #19
 80070ae:	dc34      	bgt.n	800711a <floor+0x82>
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	da16      	bge.n	80070e2 <floor+0x4a>
 80070b4:	4a38      	ldr	r2, [pc, #224]	; (8007198 <floor+0x100>)
 80070b6:	4b39      	ldr	r3, [pc, #228]	; (800719c <floor+0x104>)
 80070b8:	4660      	mov	r0, ip
 80070ba:	0031      	movs	r1, r6
 80070bc:	f7f9 fa02 	bl	80004c4 <__aeabi_dadd>
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	f7f9 f9bc 	bl	8000440 <__aeabi_dcmpgt>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d007      	beq.n	80070dc <floor+0x44>
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	da5d      	bge.n	800718c <floor+0xf4>
 80070d0:	0073      	lsls	r3, r6, #1
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	431c      	orrs	r4, r3
 80070d6:	d001      	beq.n	80070dc <floor+0x44>
 80070d8:	2400      	movs	r4, #0
 80070da:	4d31      	ldr	r5, [pc, #196]	; (80071a0 <floor+0x108>)
 80070dc:	46a4      	mov	ip, r4
 80070de:	002e      	movs	r6, r5
 80070e0:	e029      	b.n	8007136 <floor+0x9e>
 80070e2:	4b30      	ldr	r3, [pc, #192]	; (80071a4 <floor+0x10c>)
 80070e4:	413b      	asrs	r3, r7
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	400b      	ands	r3, r1
 80070ea:	4303      	orrs	r3, r0
 80070ec:	d023      	beq.n	8007136 <floor+0x9e>
 80070ee:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <floor+0x100>)
 80070f0:	4b2a      	ldr	r3, [pc, #168]	; (800719c <floor+0x104>)
 80070f2:	4660      	mov	r0, ip
 80070f4:	0031      	movs	r1, r6
 80070f6:	f7f9 f9e5 	bl	80004c4 <__aeabi_dadd>
 80070fa:	2200      	movs	r2, #0
 80070fc:	2300      	movs	r3, #0
 80070fe:	f7f9 f99f 	bl	8000440 <__aeabi_dcmpgt>
 8007102:	2800      	cmp	r0, #0
 8007104:	d0ea      	beq.n	80070dc <floor+0x44>
 8007106:	2e00      	cmp	r6, #0
 8007108:	da03      	bge.n	8007112 <floor+0x7a>
 800710a:	2380      	movs	r3, #128	; 0x80
 800710c:	035b      	lsls	r3, r3, #13
 800710e:	413b      	asrs	r3, r7
 8007110:	18f5      	adds	r5, r6, r3
 8007112:	9b00      	ldr	r3, [sp, #0]
 8007114:	2400      	movs	r4, #0
 8007116:	439d      	bics	r5, r3
 8007118:	e7e0      	b.n	80070dc <floor+0x44>
 800711a:	2f33      	cmp	r7, #51	; 0x33
 800711c:	dd0f      	ble.n	800713e <floor+0xa6>
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	429f      	cmp	r7, r3
 8007124:	d107      	bne.n	8007136 <floor+0x9e>
 8007126:	0002      	movs	r2, r0
 8007128:	000b      	movs	r3, r1
 800712a:	4660      	mov	r0, ip
 800712c:	0031      	movs	r1, r6
 800712e:	f7f9 f9c9 	bl	80004c4 <__aeabi_dadd>
 8007132:	4684      	mov	ip, r0
 8007134:	000e      	movs	r6, r1
 8007136:	4660      	mov	r0, ip
 8007138:	0031      	movs	r1, r6
 800713a:	b003      	add	sp, #12
 800713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713e:	4a1a      	ldr	r2, [pc, #104]	; (80071a8 <floor+0x110>)
 8007140:	189b      	adds	r3, r3, r2
 8007142:	2201      	movs	r2, #1
 8007144:	4252      	negs	r2, r2
 8007146:	40da      	lsrs	r2, r3
 8007148:	9200      	str	r2, [sp, #0]
 800714a:	4210      	tst	r0, r2
 800714c:	d0f3      	beq.n	8007136 <floor+0x9e>
 800714e:	4a12      	ldr	r2, [pc, #72]	; (8007198 <floor+0x100>)
 8007150:	4b12      	ldr	r3, [pc, #72]	; (800719c <floor+0x104>)
 8007152:	4660      	mov	r0, ip
 8007154:	0031      	movs	r1, r6
 8007156:	f7f9 f9b5 	bl	80004c4 <__aeabi_dadd>
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	f7f9 f96f 	bl	8000440 <__aeabi_dcmpgt>
 8007162:	2800      	cmp	r0, #0
 8007164:	d0ba      	beq.n	80070dc <floor+0x44>
 8007166:	2e00      	cmp	r6, #0
 8007168:	da02      	bge.n	8007170 <floor+0xd8>
 800716a:	2f14      	cmp	r7, #20
 800716c:	d103      	bne.n	8007176 <floor+0xde>
 800716e:	3501      	adds	r5, #1
 8007170:	9b00      	ldr	r3, [sp, #0]
 8007172:	439c      	bics	r4, r3
 8007174:	e7b2      	b.n	80070dc <floor+0x44>
 8007176:	2334      	movs	r3, #52	; 0x34
 8007178:	1bdf      	subs	r7, r3, r7
 800717a:	3b33      	subs	r3, #51	; 0x33
 800717c:	40bb      	lsls	r3, r7
 800717e:	18e4      	adds	r4, r4, r3
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	429c      	cmp	r4, r3
 8007184:	419b      	sbcs	r3, r3
 8007186:	425b      	negs	r3, r3
 8007188:	18f5      	adds	r5, r6, r3
 800718a:	e7f1      	b.n	8007170 <floor+0xd8>
 800718c:	2400      	movs	r4, #0
 800718e:	0025      	movs	r5, r4
 8007190:	e7a4      	b.n	80070dc <floor+0x44>
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	fffffc01 	.word	0xfffffc01
 8007198:	8800759c 	.word	0x8800759c
 800719c:	7e37e43c 	.word	0x7e37e43c
 80071a0:	bff00000 	.word	0xbff00000
 80071a4:	000fffff 	.word	0x000fffff
 80071a8:	fffffbed 	.word	0xfffffbed

080071ac <scalbn>:
 80071ac:	004b      	lsls	r3, r1, #1
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	0d5b      	lsrs	r3, r3, #21
 80071b2:	0014      	movs	r4, r2
 80071b4:	000a      	movs	r2, r1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10d      	bne.n	80071d6 <scalbn+0x2a>
 80071ba:	004b      	lsls	r3, r1, #1
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	4303      	orrs	r3, r0
 80071c0:	d010      	beq.n	80071e4 <scalbn+0x38>
 80071c2:	4b27      	ldr	r3, [pc, #156]	; (8007260 <scalbn+0xb4>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	f7fa f8bb 	bl	8001340 <__aeabi_dmul>
 80071ca:	4b26      	ldr	r3, [pc, #152]	; (8007264 <scalbn+0xb8>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	da0a      	bge.n	80071e6 <scalbn+0x3a>
 80071d0:	4a25      	ldr	r2, [pc, #148]	; (8007268 <scalbn+0xbc>)
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <scalbn+0xc0>)
 80071d4:	e019      	b.n	800720a <scalbn+0x5e>
 80071d6:	4d26      	ldr	r5, [pc, #152]	; (8007270 <scalbn+0xc4>)
 80071d8:	42ab      	cmp	r3, r5
 80071da:	d108      	bne.n	80071ee <scalbn+0x42>
 80071dc:	0002      	movs	r2, r0
 80071de:	000b      	movs	r3, r1
 80071e0:	f7f9 f970 	bl	80004c4 <__aeabi_dadd>
 80071e4:	bd70      	pop	{r4, r5, r6, pc}
 80071e6:	000a      	movs	r2, r1
 80071e8:	004b      	lsls	r3, r1, #1
 80071ea:	0d5b      	lsrs	r3, r3, #21
 80071ec:	3b36      	subs	r3, #54	; 0x36
 80071ee:	4d21      	ldr	r5, [pc, #132]	; (8007274 <scalbn+0xc8>)
 80071f0:	18e3      	adds	r3, r4, r3
 80071f2:	42ab      	cmp	r3, r5
 80071f4:	dd0c      	ble.n	8007210 <scalbn+0x64>
 80071f6:	4c20      	ldr	r4, [pc, #128]	; (8007278 <scalbn+0xcc>)
 80071f8:	4d20      	ldr	r5, [pc, #128]	; (800727c <scalbn+0xd0>)
 80071fa:	2900      	cmp	r1, #0
 80071fc:	da01      	bge.n	8007202 <scalbn+0x56>
 80071fe:	4c1e      	ldr	r4, [pc, #120]	; (8007278 <scalbn+0xcc>)
 8007200:	4d1f      	ldr	r5, [pc, #124]	; (8007280 <scalbn+0xd4>)
 8007202:	0020      	movs	r0, r4
 8007204:	0029      	movs	r1, r5
 8007206:	4a1c      	ldr	r2, [pc, #112]	; (8007278 <scalbn+0xcc>)
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <scalbn+0xd0>)
 800720a:	f7fa f899 	bl	8001340 <__aeabi_dmul>
 800720e:	e7e9      	b.n	80071e4 <scalbn+0x38>
 8007210:	2b00      	cmp	r3, #0
 8007212:	dd05      	ble.n	8007220 <scalbn+0x74>
 8007214:	4c1b      	ldr	r4, [pc, #108]	; (8007284 <scalbn+0xd8>)
 8007216:	051b      	lsls	r3, r3, #20
 8007218:	4022      	ands	r2, r4
 800721a:	431a      	orrs	r2, r3
 800721c:	0011      	movs	r1, r2
 800721e:	e7e1      	b.n	80071e4 <scalbn+0x38>
 8007220:	001d      	movs	r5, r3
 8007222:	3535      	adds	r5, #53	; 0x35
 8007224:	da13      	bge.n	800724e <scalbn+0xa2>
 8007226:	4a18      	ldr	r2, [pc, #96]	; (8007288 <scalbn+0xdc>)
 8007228:	0fcb      	lsrs	r3, r1, #31
 800722a:	4294      	cmp	r4, r2
 800722c:	dd08      	ble.n	8007240 <scalbn+0x94>
 800722e:	4812      	ldr	r0, [pc, #72]	; (8007278 <scalbn+0xcc>)
 8007230:	4912      	ldr	r1, [pc, #72]	; (800727c <scalbn+0xd0>)
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <scalbn+0x8e>
 8007236:	4810      	ldr	r0, [pc, #64]	; (8007278 <scalbn+0xcc>)
 8007238:	4911      	ldr	r1, [pc, #68]	; (8007280 <scalbn+0xd4>)
 800723a:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <scalbn+0xcc>)
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <scalbn+0xd0>)
 800723e:	e7e4      	b.n	800720a <scalbn+0x5e>
 8007240:	4809      	ldr	r0, [pc, #36]	; (8007268 <scalbn+0xbc>)
 8007242:	490a      	ldr	r1, [pc, #40]	; (800726c <scalbn+0xc0>)
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0c3      	beq.n	80071d0 <scalbn+0x24>
 8007248:	4807      	ldr	r0, [pc, #28]	; (8007268 <scalbn+0xbc>)
 800724a:	4910      	ldr	r1, [pc, #64]	; (800728c <scalbn+0xe0>)
 800724c:	e7c0      	b.n	80071d0 <scalbn+0x24>
 800724e:	4c0d      	ldr	r4, [pc, #52]	; (8007284 <scalbn+0xd8>)
 8007250:	3336      	adds	r3, #54	; 0x36
 8007252:	4022      	ands	r2, r4
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	4313      	orrs	r3, r2
 8007258:	0019      	movs	r1, r3
 800725a:	2200      	movs	r2, #0
 800725c:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <scalbn+0xe4>)
 800725e:	e7d4      	b.n	800720a <scalbn+0x5e>
 8007260:	43500000 	.word	0x43500000
 8007264:	ffff3cb0 	.word	0xffff3cb0
 8007268:	c2f8f359 	.word	0xc2f8f359
 800726c:	01a56e1f 	.word	0x01a56e1f
 8007270:	000007ff 	.word	0x000007ff
 8007274:	000007fe 	.word	0x000007fe
 8007278:	8800759c 	.word	0x8800759c
 800727c:	7e37e43c 	.word	0x7e37e43c
 8007280:	fe37e43c 	.word	0xfe37e43c
 8007284:	800fffff 	.word	0x800fffff
 8007288:	0000c350 	.word	0x0000c350
 800728c:	81a56e1f 	.word	0x81a56e1f
 8007290:	3c900000 	.word	0x3c900000

08007294 <_init>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr

080072a0 <_fini>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr

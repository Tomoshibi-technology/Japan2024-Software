
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd4  08002dd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd4  08002dd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd4  08002dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08002de8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002de8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012308  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  0003233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000354e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f0e  00000000  00000000  000363c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f1a  00000000  00000000  000392d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d2e2  00000000  00000000  0004c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c94d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003954  00000000  00000000  000c9524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d44 	.word	0x08002d44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d44 	.word	0x08002d44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_Z11readCounterv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t readCounter()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  return (m_counter*65535) + TIM3->CNT;
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <_Z11readCounterv+0x28>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	0013      	movs	r3, r2
 800022a:	041b      	lsls	r3, r3, #16
 800022c:	1a9a      	subs	r2, r3, r2
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <_Z11readCounterv+0x2c>)
 8000230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000232:	18d3      	adds	r3, r2, r3
 8000234:	0018      	movs	r0, r3
 8000236:	2300      	movs	r3, #0
 8000238:	0019      	movs	r1, r3
 800023a:	0002      	movs	r2, r0
 800023c:	000b      	movs	r3, r1
}
 800023e:	0010      	movs	r0, r2
 8000240:	0019      	movs	r1, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	200001ac 	.word	0x200001ac
 800024c:	40000400 	.word	0x40000400

08000250 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800025c:	429a      	cmp	r2, r3
 800025e:	d104      	bne.n	800026a <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	1c5a      	adds	r2, r3, #1
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000268:	601a      	str	r2, [r3, #0]
    }
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000074 	.word	0x20000074
 8000278:	200001ac 	.word	0x200001ac

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 fb59 	bl	8000936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f834 	bl	80002f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f982 	bl	8000590 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800028c:	f000 f962 	bl	8000554 <_ZL11MX_DMA_Initv>
  MX_TIM3_Init();
 8000290:	f000 f8c6 	bl	8000420 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8000294:	f000 f878 	bl	8000388 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8000298:	f000 f924 	bl	80004e4 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <main+0x64>)
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fd92 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,  GPIO_PIN_SET);
 80002a4:	23a0      	movs	r3, #160	; 0xa0
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 ff91 	bl	80011d4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    micro_time = readCounter();
 80002b2:	f7ff ffb5 	bl	8000220 <_Z11readCounterv>
 80002b6:	0002      	movs	r2, r0
 80002b8:	000b      	movs	r3, r1
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <main+0x68>)
 80002bc:	601a      	str	r2, [r3, #0]
    dtime = micro_time - pmicro_time;
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <main+0x68>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <main+0x6c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	b21a      	sxth	r2, r3
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <main+0x70>)
 80002d2:	801a      	strh	r2, [r3, #0]

    pmicro_time = micro_time;
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <main+0x68>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <main+0x6c>)
 80002da:	601a      	str	r2, [r3, #0]
    micro_time = readCounter();
 80002dc:	e7e9      	b.n	80002b2 <main+0x36>
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	20000074 	.word	0x20000074
 80002e4:	200001b0 	.word	0x200001b0
 80002e8:	200001b4 	.word	0x200001b4
 80002ec:	200001b8 	.word	0x200001b8

080002f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08d      	sub	sp, #52	; 0x34
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2414      	movs	r4, #20
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	231c      	movs	r3, #28
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fd17 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	003b      	movs	r3, r7
 8000308:	0018      	movs	r0, r3
 800030a:	2314      	movs	r3, #20
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f002 fd10 	bl	8002d34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2202      	movs	r2, #2
 8000318:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000322:	193b      	adds	r3, r7, r4
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0152      	lsls	r2, r2, #5
 8000328:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2240      	movs	r2, #64	; 0x40
 800032e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	f001 f89a 	bl	800146c <HAL_RCC_OscConfig>
 8000338:	0003      	movs	r3, r0
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	4193      	sbcs	r3, r2
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <_Z18SystemClock_Configv+0x58>
  {
    Error_Handler();
 8000344:	f000 f968 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	003b      	movs	r3, r7
 800034a:	2207      	movs	r2, #7
 800034c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	2100      	movs	r1, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fa78 	bl	8001860 <HAL_RCC_ClockConfig>
 8000370:	0003      	movs	r3, r0
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	4193      	sbcs	r3, r2
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <_Z18SystemClock_Configv+0x90>
  {
    Error_Handler();
 800037c:	f000 f94c 	bl	8000618 <Error_Handler>
  }
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b00d      	add	sp, #52	; 0x34
 8000386:	bd90      	pop	{r4, r7, pc}

08000388 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <_ZL12MX_I2C1_Initv+0x90>)
 8000390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 8000394:	4a21      	ldr	r2, [pc, #132]	; (800041c <_ZL12MX_I2C1_Initv+0x94>)
 8000396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 ff23 	bl	8001210 <HAL_I2C_Init>
 80003ca:	0003      	movs	r3, r0
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	4193      	sbcs	r3, r2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 80003d6:	f000 f91f 	bl	8000618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003dc:	2100      	movs	r1, #0
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ffac 	bl	800133c <HAL_I2CEx_ConfigAnalogFilter>
 80003e4:	0003      	movs	r3, r0
 80003e6:	1e5a      	subs	r2, r3, #1
 80003e8:	4193      	sbcs	r3, r2
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 80003f0:	f000 f912 	bl	8000618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <_ZL12MX_I2C1_Initv+0x8c>)
 80003f6:	2100      	movs	r1, #0
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 ffeb 	bl	80013d4 <HAL_I2CEx_ConfigDigitalFilter>
 80003fe:	0003      	movs	r3, r0
 8000400:	1e5a      	subs	r2, r3, #1
 8000402:	4193      	sbcs	r3, r2
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 800040a:	f000 f905 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	40005400 	.word	0x40005400
 800041c:	40000a0b 	.word	0x40000a0b

08000420 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	2310      	movs	r3, #16
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2310      	movs	r3, #16
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 fc7f 	bl	8002d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	0018      	movs	r0, r3
 800043a:	230c      	movs	r3, #12
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f002 fc78 	bl	8002d34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000444:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 8000446:	4a25      	ldr	r2, [pc, #148]	; (80004dc <_ZL12MX_TIM3_Initv+0xbc>)
 8000448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 800044c:	220b      	movs	r2, #11
 800044e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 8000458:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <_ZL12MX_TIM3_Initv+0xc0>)
 800045a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fc54 	bl	8001d18 <HAL_TIM_Base_Init>
 8000470:	0003      	movs	r3, r0
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	4193      	sbcs	r3, r2
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 800047c:	f000 f8cc 	bl	8000618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000480:	2110      	movs	r1, #16
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2280      	movs	r2, #128	; 0x80
 8000486:	0152      	lsls	r2, r2, #5
 8000488:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800048a:	187a      	adds	r2, r7, r1
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fe19 	bl	80020c8 <HAL_TIM_ConfigClockSource>
 8000496:	0003      	movs	r3, r0
 8000498:	1e5a      	subs	r2, r3, #1
 800049a:	4193      	sbcs	r3, r2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80004a2:	f000 f8b9 	bl	8000618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004b2:	1d3a      	adds	r2, r7, #4
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <_ZL12MX_TIM3_Initv+0xb8>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f002 f803 	bl	80024c4 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	0003      	movs	r3, r0
 80004c0:	1e5a      	subs	r2, r3, #1
 80004c2:	4193      	sbcs	r3, r2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80004ca:	f000 f8a5 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b008      	add	sp, #32
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000074 	.word	0x20000074
 80004dc:	40000400 	.word	0x40000400
 80004e0:	0000ffff 	.word	0x0000ffff

080004e4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <_ZL19MX_USART2_UART_Initv+0x6c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 80004f0:	22e1      	movs	r2, #225	; 0xe1
 80004f2:	0252      	lsls	r2, r2, #9
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <_ZL19MX_USART2_UART_Initv+0x68>)
 800052e:	0018      	movs	r0, r3
 8000530:	f002 f842 	bl	80025b8 <HAL_UART_Init>
 8000534:	0003      	movs	r3, r0
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	4193      	sbcs	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000540:	f000 f86a 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	200000c0 	.word	0x200000c0
 8000550:	40004400 	.word	0x40004400

08000554 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <_ZL11MX_DMA_Initv+0x38>)
 800055c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <_ZL11MX_DMA_Initv+0x38>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <_ZL11MX_DMA_Initv+0x38>)
 8000568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2009      	movs	r0, #9
 8000578:	f000 fb04 	bl	8000b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800057c:	2009      	movs	r0, #9
 800057e:	f000 fb16 	bl	8000bae <HAL_NVIC_EnableIRQ>

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	240c      	movs	r4, #12
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fbc7 	bl	8002d34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <_ZL12MX_GPIO_Initv+0x84>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <_ZL12MX_GPIO_Initv+0x84>)
 80005ac:	2102      	movs	r1, #2
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <_ZL12MX_GPIO_Initv+0x84>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	2202      	movs	r2, #2
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <_ZL12MX_GPIO_Initv+0x84>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <_ZL12MX_GPIO_Initv+0x84>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <_ZL12MX_GPIO_Initv+0x84>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005d6:	23a0      	movs	r3, #160	; 0xa0
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fdf8 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2210      	movs	r2, #16
 80005ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fc7a 	bl	8000f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b009      	add	sp, #36	; 0x24
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	e7fe      	b.n	8000620 <Error_Handler+0x8>
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x44>)
 800062c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_MspInit+0x44>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	641a      	str	r2, [r3, #64]	; 0x40
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x44>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x44>)
 8000644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_MspInit+0x44>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0549      	lsls	r1, r1, #21
 800064c:	430a      	orrs	r2, r1
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_MspInit+0x44>)
 8000652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	055b      	lsls	r3, r3, #21
 8000658:	4013      	ands	r3, r2
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b091      	sub	sp, #68	; 0x44
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	232c      	movs	r3, #44	; 0x2c
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	0018      	movs	r0, r3
 800067a:	2314      	movs	r3, #20
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 fb58 	bl	8002d34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	2410      	movs	r4, #16
 8000686:	193b      	adds	r3, r7, r4
 8000688:	0018      	movs	r0, r3
 800068a:	231c      	movs	r3, #28
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f002 fb50 	bl	8002d34 <memset>
  if(hi2c->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <HAL_I2C_MspInit+0xb8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d13d      	bne.n	800071a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2240      	movs	r2, #64	; 0x40
 80006a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fa45 	bl	8001b3c <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006b6:	f7ff ffaf 	bl	8000618 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_I2C_MspInit+0xbc>)
 80006bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_I2C_MspInit+0xbc>)
 80006c0:	2102      	movs	r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_I2C_MspInit+0xbc>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	2202      	movs	r2, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80006d2:	212c      	movs	r1, #44	; 0x2c
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	22c0      	movs	r2, #192	; 0xc0
 80006d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2212      	movs	r2, #18
 80006de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2206      	movs	r2, #6
 80006f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <HAL_I2C_MspInit+0xc0>)
 80006f6:	0019      	movs	r1, r3
 80006f8:	0010      	movs	r0, r2
 80006fa:	f000 fc01 	bl	8000f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_I2C_MspInit+0xbc>)
 8000700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_I2C_MspInit+0xbc>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0389      	lsls	r1, r1, #14
 8000708:	430a      	orrs	r2, r1
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_I2C_MspInit+0xbc>)
 800070e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	039b      	lsls	r3, r3, #14
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b011      	add	sp, #68	; 0x44
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	40005400 	.word	0x40005400
 8000728:	40021000 	.word	0x40021000
 800072c:	50000400 	.word	0x50000400

08000730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <HAL_TIM_Base_MspInit+0x44>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d113      	bne.n	800076a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_TIM_Base_MspInit+0x48>)
 8000744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_TIM_Base_MspInit+0x48>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_TIM_Base_MspInit+0x48>)
 8000750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2010      	movs	r0, #16
 8000760:	f000 fa10 	bl	8000b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000764:	2010      	movs	r0, #16
 8000766:	f000 fa22 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b004      	add	sp, #16
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40000400 	.word	0x40000400
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b08b      	sub	sp, #44	; 0x2c
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	2414      	movs	r4, #20
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	2314      	movs	r3, #20
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f002 fad0 	bl	8002d34 <memset>
  if(huart->Instance==USART2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a30      	ldr	r2, [pc, #192]	; (800085c <HAL_UART_MspInit+0xe0>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d15a      	bne.n	8000854 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <HAL_UART_MspInit+0xe4>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <HAL_UART_MspInit+0xe4>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <HAL_UART_MspInit+0xe4>)
 80007ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <HAL_UART_MspInit+0xe4>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <HAL_UART_MspInit+0xe4>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <HAL_UART_MspInit+0xe4>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2201      	movs	r2, #1
 80007f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	187a      	adds	r2, r7, r1
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fb80 	bl	8000f00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <HAL_UART_MspInit+0xec>)
 8000804:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000808:	2234      	movs	r2, #52	; 0x34
 800080a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_UART_MspInit+0xe8>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_UART_MspInit+0xe8>)
 800082c:	2220      	movs	r2, #32
 800082e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0192      	lsls	r2, r2, #6
 8000836:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_UART_MspInit+0xe8>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f9d4 	bl	8000be8 <HAL_DMA_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000844:	f7ff fee8 	bl	8000618 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_UART_MspInit+0xe8>)
 800084c:	67da      	str	r2, [r3, #124]	; 0x7c
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_UART_MspInit+0xe8>)
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b00b      	add	sp, #44	; 0x2c
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000
 8000864:	20000150 	.word	0x20000150
 8000868:	40020008 	.word	0x40020008

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f8b2 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <DMA1_Channel1_IRQHandler+0x14>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fa2a 	bl	8000cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000150 	.word	0x20000150

080008b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <TIM3_IRQHandler+0x14>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fad2 	bl	8001e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000074 	.word	0x20000074

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <SystemInit+0x14>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	0512      	lsls	r2, r2, #20
 80008d6:	609a      	str	r2, [r3, #8]
#endif
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008ea:	e003      	b.n	80008f4 <LoopCopyDataInit>

080008ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80008ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008f2:	3104      	adds	r1, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <LoopForever+0xa>)
  ldr r3, =_edata
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <LoopForever+0xe>)
  adds r2, r0, r1
 80008f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008fc:	d3f6      	bcc.n	80008ec <CopyDataInit>
  ldr r2, =_sbss
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <LoopForever+0x12>)
  b LoopFillZerobss
 8000900:	e002      	b.n	8000908 <LoopFillZerobss>

08000902 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  str  r3, [r2]
 8000904:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000906:	3204      	adds	r2, #4

08000908 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <LoopForever+0x16>)
  cmp r2, r3
 800090a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800090c:	d3f9      	bcc.n	8000902 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800090e:	f7ff ffdd 	bl	80008cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000912:	f002 f9eb 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fcb1 	bl	800027c <main>

0800091a <LoopForever>:

LoopForever:
    b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000920:	08002ddc 	.word	0x08002ddc
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800092c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000930:	200001c0 	.word	0x200001c0

08000934 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_IRQHandler>

08000936 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2003      	movs	r0, #3
 8000944:	f000 f80e 	bl	8000964 <HAL_InitTick>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d003      	beq.n	8000954 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000954:	f7ff fe66 	bl	8000624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <HAL_InitTick+0x88>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d02b      	beq.n	80009d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_InitTick+0x8c>)
 800097e:	681c      	ldr	r4, [r3, #0]
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_InitTick+0x88>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	0019      	movs	r1, r3
 8000986:	23fa      	movs	r3, #250	; 0xfa
 8000988:	0098      	lsls	r0, r3, #2
 800098a:	f7ff fbbd 	bl	8000108 <__udivsi3>
 800098e:	0003      	movs	r3, r0
 8000990:	0019      	movs	r1, r3
 8000992:	0020      	movs	r0, r4
 8000994:	f7ff fbb8 	bl	8000108 <__udivsi3>
 8000998:	0003      	movs	r3, r0
 800099a:	0018      	movs	r0, r3
 800099c:	f000 f917 	bl	8000bce <HAL_SYSTICK_Config>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d112      	bne.n	80009ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d80a      	bhi.n	80009c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f8e6 	bl	8000b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_InitTick+0x90>)
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e00d      	b.n	80009dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e008      	b.n	80009dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ca:	230f      	movs	r3, #15
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e003      	b.n	80009dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d4:	230f      	movs	r3, #15
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	781b      	ldrb	r3, [r3, #0]
}
 80009e2:	0018      	movs	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b005      	add	sp, #20
 80009e8:	bd90      	pop	{r4, r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <HAL_IncTick+0x18>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_IncTick+0x1c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	18d2      	adds	r2, r2, r3
 8000a06:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_IncTick+0x18>)
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200001bc 	.word	0x200001bc
 8000a14:	20000008 	.word	0x20000008

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200001bc 	.word	0x200001bc

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3e:	d809      	bhi.n	8000a54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	231f      	movs	r3, #31
 8000a48:	401a      	ands	r2, r3
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_EnableIRQ+0x30>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	000a      	movs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b7f      	cmp	r3, #127	; 0x7f
 8000a74:	d828      	bhi.n	8000ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	33c0      	adds	r3, #192	; 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	589b      	ldr	r3, [r3, r2]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	; 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	33c0      	adds	r3, #192	; 0xc0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ac6:	e031      	b.n	8000b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0019      	movs	r1, r3
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3306      	adds	r3, #6
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	3304      	adds	r3, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1dfa      	adds	r2, r7, #7
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	2203      	movs	r2, #3
 8000aea:	400a      	ands	r2, r1
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	21ff      	movs	r1, #255	; 0xff
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	401a      	ands	r2, r3
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0018      	movs	r0, r3
 8000b08:	2303      	movs	r3, #3
 8000b0a:	4003      	ands	r3, r0
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001c      	movs	r4, r3
 8000b18:	230f      	movs	r3, #15
 8000b1a:	4023      	ands	r3, r4
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	3306      	adds	r3, #6
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	18c3      	adds	r3, r0, r3
 8000b28:	3304      	adds	r3, #4
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	045b      	lsls	r3, r3, #17
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d301      	bcc.n	8000b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b50:	2301      	movs	r3, #1
 8000b52:	e010      	b.n	8000b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SysTick_Config+0x44>)
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2103      	movs	r1, #3
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff ff7c 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x44>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	210f      	movs	r1, #15
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff33 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffaf 	bl	8000b3c <SysTick_Config>
 8000bde:	0003      	movs	r3, r0
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e077      	b.n	8000cea <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a3d      	ldr	r2, [pc, #244]	; (8000cf4 <HAL_DMA_Init+0x10c>)
 8000c00:	4694      	mov	ip, r2
 8000c02:	4463      	add	r3, ip
 8000c04:	2114      	movs	r1, #20
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fa7e 	bl	8000108 <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000c0e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2225      	movs	r2, #37	; 0x25
 8000c18:	2102      	movs	r1, #2
 8000c1a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4934      	ldr	r1, [pc, #208]	; (8000cf8 <HAL_DMA_Init+0x110>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6819      	ldr	r1, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 f8fb 	bl	8000e60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	01db      	lsls	r3, r3, #7
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d102      	bne.n	8000c7c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	21ff      	movs	r1, #255	; 0xff
 8000c86:	400a      	ands	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000c92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d011      	beq.n	8000cc0 <HAL_DMA_Init+0xd8>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d80d      	bhi.n	8000cc0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f906 	bl	8000eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	e008      	b.n	8000cd2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2225      	movs	r2, #37	; 0x25
 8000cdc:	2101      	movs	r1, #1
 8000cde:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2224      	movs	r2, #36	; 0x24
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	bffdfff8 	.word	0xbffdfff8
 8000cf8:	ffff800f 	.word	0xffff800f

08000cfc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	221c      	movs	r2, #28
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	d027      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x7a>
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d023      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2220      	movs	r2, #32
 8000d36:	4013      	ands	r3, r2
 8000d38:	d107      	bne.n	8000d4a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2104      	movs	r1, #4
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000d4a:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000d4c:	6859      	ldr	r1, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	221c      	movs	r2, #28
 8000d54:	4013      	ands	r3, r2
 8000d56:	2204      	movs	r2, #4
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d100      	bne.n	8000d6a <HAL_DMA_IRQHandler+0x6e>
 8000d68:	e073      	b.n	8000e52 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	0010      	movs	r0, r2
 8000d72:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d74:	e06d      	b.n	8000e52 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	221c      	movs	r2, #28
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2202      	movs	r2, #2
 8000d80:	409a      	lsls	r2, r3
 8000d82:	0013      	movs	r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4013      	ands	r3, r2
 8000d88:	d02e      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xec>
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d02a      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2220      	movs	r2, #32
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d10b      	bne.n	8000db6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	210a      	movs	r1, #10
 8000daa:	438a      	bics	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2225      	movs	r2, #37	; 0x25
 8000db2:	2101      	movs	r1, #1
 8000db4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000db8:	6859      	ldr	r1, [r3, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	221c      	movs	r2, #28
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d03a      	beq.n	8000e52 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	0010      	movs	r0, r2
 8000de4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000de6:	e034      	b.n	8000e52 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	221c      	movs	r2, #28
 8000dee:	4013      	ands	r3, r2
 8000df0:	2208      	movs	r2, #8
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d02b      	beq.n	8000e54 <HAL_DMA_IRQHandler+0x158>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2208      	movs	r2, #8
 8000e00:	4013      	ands	r3, r2
 8000e02:	d027      	beq.n	8000e54 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	210e      	movs	r1, #14
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	409a      	lsls	r2, r3
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_DMA_IRQHandler+0x160>)
 8000e26:	430a      	orrs	r2, r1
 8000e28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2225      	movs	r2, #37	; 0x25
 8000e34:	2101      	movs	r1, #1
 8000e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2224      	movs	r2, #36	; 0x24
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	0010      	movs	r0, r2
 8000e50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46c0      	nop			; (mov r8, r8)
}
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b004      	add	sp, #16
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40020000 	.word	0x40020000

08000e60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	23ff      	movs	r3, #255	; 0xff
 8000e70:	4013      	ands	r3, r2
 8000e72:	3b08      	subs	r3, #8
 8000e74:	2114      	movs	r1, #20
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff f946 	bl	8000108 <__udivsi3>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000e88:	4694      	mov	ip, r2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	001a      	movs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000e98:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	221c      	movs	r2, #28
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b004      	add	sp, #16
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	10008200 	.word	0x10008200
 8000eb4:	40020880 	.word	0x40020880

08000eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000ece:	4694      	mov	ip, r2
 8000ed0:	4463      	add	r3, ip
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2201      	movs	r2, #1
 8000eea:	409a      	lsls	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	1000823f 	.word	0x1000823f
 8000efc:	40020940 	.word	0x40020940

08000f00 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f0e:	e14d      	b.n	80011ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x28>
 8000f26:	e13e      	b.n	80011a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x38>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d125      	bne.n	8000f84 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	58d3      	ldr	r3, [r2, r3]
 8000f44:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2207      	movs	r2, #7
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	43da      	mvns	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	220f      	movs	r2, #15
 8000f62:	401a      	ands	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	2107      	movs	r1, #7
 8000f68:	400b      	ands	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	6979      	ldr	r1, [r7, #20]
 8000f82:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	0013      	movs	r3, r2
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_GPIO_Init+0xd8>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	2b11      	cmp	r3, #17
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b12      	cmp	r3, #18
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4013      	ands	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	2201      	movs	r2, #1
 8001026:	401a      	ands	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4013      	ands	r3, r2
 8001058:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4313      	orrs	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	055b      	lsls	r3, r3, #21
 800107a:	4013      	ands	r3, r2
 800107c:	d100      	bne.n	8001080 <HAL_GPIO_Init+0x180>
 800107e:	e092      	b.n	80011a6 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3318      	adds	r3, #24
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	589b      	ldr	r3, [r3, r2]
 800108c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2203      	movs	r2, #3
 8001092:	4013      	ands	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	220f      	movs	r2, #15
 8001098:	409a      	lsls	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	43da      	mvns	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	23a0      	movs	r3, #160	; 0xa0
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1d6>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_GPIO_Init+0x2c8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1d2>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <HAL_GPIO_Init+0x2cc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1ce>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <HAL_GPIO_Init+0x2d0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1ca>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x1d8>
 80010d6:	2300      	movs	r3, #0
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	2103      	movs	r1, #3
 80010dc:	400a      	ands	r2, r1
 80010de:	00d2      	lsls	r2, r2, #3
 80010e0:	4093      	lsls	r3, r2
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010e8:	4936      	ldr	r1, [pc, #216]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3318      	adds	r3, #24
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010f6:	4a33      	ldr	r2, [pc, #204]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	58d3      	ldr	r3, [r2, r3]
 80010fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43da      	mvns	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	4013      	ands	r3, r2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800111c:	4929      	ldr	r1, [pc, #164]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 8001126:	2384      	movs	r3, #132	; 0x84
 8001128:	58d3      	ldr	r3, [r2, r3]
 800112a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43da      	mvns	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	4013      	ands	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800114a:	491e      	ldr	r1, [pc, #120]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 800114c:	2284      	movs	r2, #132	; 0x84
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	4013      	ands	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	035b      	lsls	r3, r3, #13
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43da      	mvns	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	039b      	lsls	r3, r3, #14
 8001194:	4013      	ands	r3, r2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	3301      	adds	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	40da      	lsrs	r2, r3
 80011b4:	1e13      	subs	r3, r2, #0
 80011b6:	d000      	beq.n	80011ba <HAL_GPIO_Init+0x2ba>
 80011b8:	e6aa      	b.n	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b006      	add	sp, #24
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021800 	.word	0x40021800
 80011c8:	50000400 	.word	0x50000400
 80011cc:	50000800 	.word	0x50000800
 80011d0:	50001400 	.word	0x50001400

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	0008      	movs	r0, r1
 80011de:	0011      	movs	r1, r2
 80011e0:	1cbb      	adds	r3, r7, #2
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	1c7b      	adds	r3, r7, #1
 80011e8:	1c0a      	adds	r2, r1, #0
 80011ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	1c7b      	adds	r3, r7, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f4:	1cbb      	adds	r3, r7, #2
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	1cbb      	adds	r3, r7, #2
 8001200:	881a      	ldrh	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e082      	b.n	8001328 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2241      	movs	r2, #65	; 0x41
 8001226:	5c9b      	ldrb	r3, [r3, r2]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2240      	movs	r2, #64	; 0x40
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fa17 	bl	800066c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2241      	movs	r2, #65	; 0x41
 8001242:	2124      	movs	r1, #36	; 0x24
 8001244:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	438a      	bics	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_I2C_Init+0x120>)
 8001260:	400a      	ands	r2, r1
 8001262:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4931      	ldr	r1, [pc, #196]	; (8001334 <HAL_I2C_Init+0x124>)
 8001270:	400a      	ands	r2, r1
 8001272:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0209      	lsls	r1, r1, #8
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e007      	b.n	800129e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2184      	movs	r1, #132	; 0x84
 8001298:	0209      	lsls	r1, r1, #8
 800129a:	430a      	orrs	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d104      	bne.n	80012b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	491f      	ldr	r1, [pc, #124]	; (8001338 <HAL_I2C_Init+0x128>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	491a      	ldr	r1, [pc, #104]	; (8001334 <HAL_I2C_Init+0x124>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	431a      	orrs	r2, r3
 80012da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69d9      	ldr	r1, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2241      	movs	r2, #65	; 0x41
 8001314:	2120      	movs	r1, #32
 8001316:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2242      	movs	r2, #66	; 0x42
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	f0ffffff 	.word	0xf0ffffff
 8001334:	ffff7fff 	.word	0xffff7fff
 8001338:	02008000 	.word	0x02008000

0800133c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2241      	movs	r2, #65	; 0x41
 800134a:	5c9b      	ldrb	r3, [r3, r2]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b20      	cmp	r3, #32
 8001350:	d138      	bne.n	80013c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800135c:	2302      	movs	r3, #2
 800135e:	e032      	b.n	80013c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2240      	movs	r2, #64	; 0x40
 8001364:	2101      	movs	r1, #1
 8001366:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2241      	movs	r2, #65	; 0x41
 800136c:	2124      	movs	r1, #36	; 0x24
 800136e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4911      	ldr	r1, [pc, #68]	; (80013d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2101      	movs	r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2241      	movs	r2, #65	; 0x41
 80013b4:	2120      	movs	r1, #32
 80013b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	2100      	movs	r1, #0
 80013be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e000      	b.n	80013c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013c4:	2302      	movs	r3, #2
  }
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	ffffefff 	.word	0xffffefff

080013d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2241      	movs	r2, #65	; 0x41
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d139      	bne.n	800145e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e033      	b.n	8001460 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2240      	movs	r2, #64	; 0x40
 80013fc:	2101      	movs	r1, #1
 80013fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2241      	movs	r2, #65	; 0x41
 8001404:	2124      	movs	r1, #36	; 0x24
 8001406:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2241      	movs	r2, #65	; 0x41
 800144e:	2120      	movs	r1, #32
 8001450:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2240      	movs	r2, #64	; 0x40
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800145e:	2302      	movs	r3, #2
  }
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	fffff0ff 	.word	0xfffff0ff

0800146c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1e5      	b.n	800184a <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	4013      	ands	r3, r2
 8001486:	d100      	bne.n	800148a <HAL_RCC_OscConfig+0x1e>
 8001488:	e06f      	b.n	800156a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148a:	4bc4      	ldr	r3, [pc, #784]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2238      	movs	r2, #56	; 0x38
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	4bc0      	ldr	r3, [pc, #768]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	029b      	lsls	r3, r3, #10
 80014a2:	4013      	ands	r3, r2
 80014a4:	d061      	beq.n	800156a <HAL_RCC_OscConfig+0xfe>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d15d      	bne.n	800156a <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e1cb      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_OscConfig+0x62>
 80014be:	4bb7      	ldr	r3, [pc, #732]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4bb6      	ldr	r3, [pc, #728]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0249      	lsls	r1, r1, #9
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e020      	b.n	8001510 <HAL_RCC_OscConfig+0xa4>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	23a0      	movs	r3, #160	; 0xa0
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d10e      	bne.n	80014f8 <HAL_RCC_OscConfig+0x8c>
 80014da:	4bb0      	ldr	r3, [pc, #704]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4baf      	ldr	r3, [pc, #700]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	02c9      	lsls	r1, r1, #11
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4bac      	ldr	r3, [pc, #688]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4bab      	ldr	r3, [pc, #684]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0249      	lsls	r1, r1, #9
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xa4>
 80014f8:	4ba8      	ldr	r3, [pc, #672]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4ba7      	ldr	r3, [pc, #668]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80014fe:	49a8      	ldr	r1, [pc, #672]	; (80017a0 <HAL_RCC_OscConfig+0x334>)
 8001500:	400a      	ands	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	4ba5      	ldr	r3, [pc, #660]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4ba4      	ldr	r3, [pc, #656]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800150a:	49a6      	ldr	r1, [pc, #664]	; (80017a4 <HAL_RCC_OscConfig+0x338>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d014      	beq.n	8001542 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fa7e 	bl	8000a18 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fa79 	bl	8000a18 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e18a      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001534:	4b99      	ldr	r3, [pc, #612]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0xb6>
 8001540:	e013      	b.n	800156a <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fa69 	bl	8000a18 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fa64 	bl	8000a18 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e175      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	4b8f      	ldr	r3, [pc, #572]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	029b      	lsls	r3, r3, #10
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x10a>
 8001574:	e08c      	b.n	8001690 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2238      	movs	r2, #56	; 0x38
 800157c:	4013      	ands	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d135      	bne.n	80015f2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001586:	4b85      	ldr	r3, [pc, #532]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4013      	ands	r3, r2
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x132>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e155      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a81      	ldr	r2, [pc, #516]	; (80017a8 <HAL_RCC_OscConfig+0x33c>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d112      	bne.n	80015e0 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015ba:	4b78      	ldr	r3, [pc, #480]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x340>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	4b74      	ldr	r3, [pc, #464]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0adb      	lsrs	r3, r3, #11
 80015d4:	2207      	movs	r2, #7
 80015d6:	4013      	ands	r3, r2
 80015d8:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x344>)
 80015da:	40da      	lsrs	r2, r3
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x348>)
 80015de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015e0:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x34c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff f9bd 	bl	8000964 <HAL_InitTick>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d050      	beq.n	8001690 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e12b      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d030      	beq.n	800165c <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6b      	ldr	r2, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x340>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	0049      	lsls	r1, r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f9fc 	bl	8000a18 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff f9f7 	bl	8000a18 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e108      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4013      	ands	r3, r2
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a57      	ldr	r2, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x33c>)
 800164a:	4013      	ands	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	021a      	lsls	r2, r3, #8
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e019      	b.n	8001690 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b4e      	ldr	r3, [pc, #312]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001662:	4956      	ldr	r1, [pc, #344]	; (80017bc <HAL_RCC_OscConfig+0x350>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f9d6 	bl	8000a18 <HAL_GetTick>
 800166c:	0003      	movs	r3, r0
 800166e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff f9d1 	bl	8000a18 <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0e2      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4013      	ands	r3, r2
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2208      	movs	r2, #8
 8001696:	4013      	ands	r3, r2
 8001698:	d047      	beq.n	800172a <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2238      	movs	r2, #56	; 0x38
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b18      	cmp	r3, #24
 80016a4:	d10a      	bne.n	80016bc <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x2be>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d138      	bne.n	800172a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0c6      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d019      	beq.n	80016f8 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80016c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff f9a2 	bl	8000a18 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff f99d 	bl	8000a18 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0ae      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f1      	beq.n	80016da <HAL_RCC_OscConfig+0x26e>
 80016f6:	e018      	b.n	800172a <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80016fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x330>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff f988 	bl	8000a18 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff f983 	bl	8000a18 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e094      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001724:	2202      	movs	r2, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d1f1      	bne.n	800170e <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d100      	bne.n	8001736 <HAL_RCC_OscConfig+0x2ca>
 8001734:	e088      	b.n	8001848 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	230f      	movs	r3, #15
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2238      	movs	r2, #56	; 0x38
 8001744:	4013      	ands	r3, r2
 8001746:	2b20      	cmp	r3, #32
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_OscConfig+0x2ea>
 8001754:	e078      	b.n	8001848 <HAL_RCC_OscConfig+0x3dc>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d000      	beq.n	8001760 <HAL_RCC_OscConfig+0x2f4>
 800175e:	e073      	b.n	8001848 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e072      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x30e>
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x330>)
 800176e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	65da      	str	r2, [r3, #92]	; 0x5c
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0x36c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d11e      	bne.n	80017c0 <HAL_RCC_OscConfig+0x354>
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001788:	2104      	movs	r1, #4
 800178a:	430a      	orrs	r2, r1
 800178c:	65da      	str	r2, [r3, #92]	; 0x5c
 800178e:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001790:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001792:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_RCC_OscConfig+0x330>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	65da      	str	r2, [r3, #92]	; 0x5c
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0x36c>
 800179c:	40021000 	.word	0x40021000
 80017a0:	fffeffff 	.word	0xfffeffff
 80017a4:	fffbffff 	.word	0xfffbffff
 80017a8:	ffff80ff 	.word	0xffff80ff
 80017ac:	ffffc7ff 	.word	0xffffc7ff
 80017b0:	02dc6c00 	.word	0x02dc6c00
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004
 80017bc:	fffffeff 	.word	0xfffffeff
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 80017c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 80017ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	438a      	bics	r2, r1
 80017d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d014      	beq.n	800180a <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f91a 	bl	8000a18 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff f915 	bl	8000a18 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_RCC_OscConfig+0x3ec>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e025      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x37e>
 8001808:	e013      	b.n	8001832 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff f905 	bl	8000a18 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001812:	e009      	b.n	8001828 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff f900 	bl	8000a18 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_RCC_OscConfig+0x3ec>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e010      	b.n	800184a <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001832:	230f      	movs	r3, #15
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 800183e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_RCC_OscConfig+0x3e8>)
 8001842:	4906      	ldr	r1, [pc, #24]	; (800185c <HAL_RCC_OscConfig+0x3f0>)
 8001844:	400a      	ands	r2, r1
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b006      	add	sp, #24
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40021000 	.word	0x40021000
 8001858:	00001388 	.word	0x00001388
 800185c:	efffffff 	.word	0xefffffff

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0e9      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2207      	movs	r2, #7
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d91e      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001894:	f7ff f8c0 	bl	8000a18 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189c:	e009      	b.n	80018b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7ff f8bb 	bl	8000a18 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0ca      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2207      	movs	r2, #7
 80018b8:	4013      	ands	r3, r2
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d017      	beq.n	80018fa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2204      	movs	r2, #4
 80018d0:	4013      	ands	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018d4:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a60      	ldr	r2, [pc, #384]	; (8001a5c <HAL_RCC_ClockConfig+0x1fc>)
 80018da:	401a      	ands	r2, r3
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018de:	21b0      	movs	r1, #176	; 0xb0
 80018e0:	0109      	lsls	r1, r1, #4
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <HAL_RCC_ClockConfig+0x200>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	d055      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001904:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	221c      	movs	r2, #28
 800190a:	4393      	bics	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	029b      	lsls	r3, r3, #10
 8001928:	4013      	ands	r3, r2
 800192a:	d11f      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e08b      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4013      	ands	r3, r2
 8001942:	d113      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e07f      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d106      	bne.n	800195e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d108      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e074      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800195e:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e06d      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2207      	movs	r2, #7
 8001972:	4393      	bics	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001980:	f7ff f84a 	bl	8000a18 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001988:	e009      	b.n	800199e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	f7ff f845 	bl	8000a18 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e054      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2238      	movs	r2, #56	; 0x38
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1ec      	bne.n	800198a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2207      	movs	r2, #7
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d21e      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2207      	movs	r2, #7
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d0:	f7ff f822 	bl	8000a18 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f81d 	bl	8000a18 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e02c      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2207      	movs	r2, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_RCC_ClockConfig+0x204>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a1a:	f000 f82b 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a1e:	0001      	movs	r1, r0
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	220f      	movs	r2, #15
 8001a28:	401a      	ands	r2, r3
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_RCC_ClockConfig+0x208>)
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	58d3      	ldr	r3, [r2, r3]
 8001a30:	221f      	movs	r2, #31
 8001a32:	4013      	ands	r3, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	40da      	lsrs	r2, r3
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_RCC_ClockConfig+0x20c>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_ClockConfig+0x210>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe ff8f 	bl	8000964 <HAL_InitTick>
 8001a46:	0003      	movs	r3, r0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40022000 	.word	0x40022000
 8001a54:	00001388 	.word	0x00001388
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	ffff84ff 	.word	0xffff84ff
 8001a60:	fffff0ff 	.word	0xfffff0ff
 8001a64:	ffff8fff 	.word	0xffff8fff
 8001a68:	08002d5c 	.word	0x08002d5c
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_RCC_GetSysClockFreq+0x78>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2238      	movs	r2, #56	; 0x38
 8001a80:	4013      	ands	r3, r2
 8001a82:	d10f      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_GetSysClockFreq+0x78>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0adb      	lsrs	r3, r3, #11
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4815      	ldr	r0, [pc, #84]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001a9a:	f7fe fb35 	bl	8000108 <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e01e      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_GetSysClockFreq+0x78>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2238      	movs	r2, #56	; 0x38
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x80>)
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_GetSysClockFreq+0x78>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2238      	movs	r2, #56	; 0x38
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d103      	bne.n	8001aca <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_RCC_GetSysClockFreq+0x78>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2238      	movs	r2, #56	; 0x38
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b18      	cmp	r3, #24
 8001ad4:	d103      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ad6:	23fa      	movs	r3, #250	; 0xfa
 8001ad8:	01db      	lsls	r3, r3, #7
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	e001      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001ae2:	687b      	ldr	r3, [r7, #4]
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	02dc6c00 	.word	0x02dc6c00
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001b10:	f7ff fff2 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b14:	0001      	movs	r1, r0
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0b1b      	lsrs	r3, r3, #12
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	401a      	ands	r2, r3
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	58d3      	ldr	r3, [r2, r3]
 8001b26:	221f      	movs	r2, #31
 8001b28:	4013      	ands	r3, r2
 8001b2a:	40d9      	lsrs	r1, r3
 8001b2c:	000b      	movs	r3, r1
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08002d9c 	.word	0x08002d9c

08001b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b44:	2313      	movs	r3, #19
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b4c:	2312      	movs	r3, #18
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b60:	e079      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2011      	movs	r0, #17
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	055b      	lsls	r3, r3, #21
 8001b72:	4013      	ands	r3, r2
 8001b74:	d110      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7a:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0549      	lsls	r1, r1, #21
 8001b80:	430a      	orrs	r2, r1
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b84:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	055b      	lsls	r3, r3, #21
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001b98:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9c:	23c0      	movs	r3, #192	; 0xc0
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d014      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001bb4:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	4a51      	ldr	r2, [pc, #324]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0249      	lsls	r1, r1, #9
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bd2:	494c      	ldr	r1, [pc, #304]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001bd8:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d016      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7fe ff17 	bl	8000a18 <HAL_GetTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001bee:	e00c      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe ff12 	bl	8000a18 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d904      	bls.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001c00:	2313      	movs	r3, #19
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2203      	movs	r2, #3
 8001c06:	701a      	strb	r2, [r3, #0]
          break;
 8001c08:	e004      	b.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0ed      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001c14:	2313      	movs	r3, #19
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	4a37      	ldr	r2, [pc, #220]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c32:	e005      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c34:	2312      	movs	r3, #18
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2213      	movs	r2, #19
 8001c3a:	18ba      	adds	r2, r7, r2
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c40:	2311      	movs	r3, #17
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d105      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c50:	492e      	ldr	r1, [pc, #184]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	2203      	movs	r2, #3
 8001c66:	4393      	bics	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2240      	movs	r2, #64	; 0x40
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	01db      	lsls	r3, r3, #7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d008      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	0899      	lsrs	r1, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da09      	bge.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22e0      	movs	r2, #224	; 0xe0
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001cec:	2312      	movs	r3, #18
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b006      	add	sp, #24
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	fffffcff 	.word	0xfffffcff
 8001d04:	fffeffff 	.word	0xfffeffff
 8001d08:	00001388 	.word	0x00001388
 8001d0c:	efffffff 	.word	0xefffffff
 8001d10:	ffffcfff 	.word	0xffffcfff
 8001d14:	ffff3fff 	.word	0xffff3fff

08001d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e04a      	b.n	8001dc0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	223d      	movs	r2, #61	; 0x3d
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d107      	bne.n	8001d46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	223c      	movs	r2, #60	; 0x3c
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7fe fcf5 	bl	8000730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223d      	movs	r2, #61	; 0x3d
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f000 faab 	bl	80022b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2248      	movs	r2, #72	; 0x48
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	223e      	movs	r2, #62	; 0x3e
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2241      	movs	r2, #65	; 0x41
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2242      	movs	r2, #66	; 0x42
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2243      	movs	r2, #67	; 0x43
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2244      	movs	r2, #68	; 0x44
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2245      	movs	r2, #69	; 0x45
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2246      	movs	r2, #70	; 0x46
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2247      	movs	r2, #71	; 0x47
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223d      	movs	r2, #61	; 0x3d
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	223d      	movs	r2, #61	; 0x3d
 8001dd4:	5c9b      	ldrb	r3, [r3, r2]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e037      	b.n	8001e50 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	223d      	movs	r2, #61	; 0x3d
 8001de4:	2102      	movs	r1, #2
 8001de6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2101      	movs	r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_TIM_Base_Start_IT+0x90>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d004      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x44>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_TIM_Base_Start_IT+0x94>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d116      	bne.n	8001e3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_TIM_Base_Start_IT+0x98>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d016      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x84>
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d011      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e38:	e008      	b.n	8001e4c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e000      	b.n	8001e4e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	00010007 	.word	0x00010007

08001e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d124      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d11d      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4252      	negs	r2, r2
 8001e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f9ec 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e007      	b.n	8001ebe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f9df 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f9eb 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d125      	bne.n	8001f1e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11e      	bne.n	8001f1e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	4252      	negs	r2, r2
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f9bf 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 8001f06:	e007      	b.n	8001f18 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f9b2 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f9be 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d124      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2208      	movs	r2, #8
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11d      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2209      	movs	r2, #9
 8001f40:	4252      	negs	r2, r2
 8001f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2203      	movs	r2, #3
 8001f52:	4013      	ands	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 f993 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 8001f5e:	e007      	b.n	8001f70 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 f986 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f992 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d125      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d11e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2211      	movs	r2, #17
 8001f98:	4252      	negs	r2, r2
 8001f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	23c0      	movs	r3, #192	; 0xc0
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f966 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e007      	b.n	8001fca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f959 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f965 	bl	8002294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d10f      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4252      	negs	r2, r2
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f7fe f929 	bl	8000250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	4013      	ands	r3, r2
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d10f      	bne.n	800202c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	4013      	ands	r3, r2
 8002016:	2b80      	cmp	r3, #128	; 0x80
 8002018:	d108      	bne.n	800202c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2281      	movs	r2, #129	; 0x81
 8002020:	4252      	negs	r2, r2
 8002022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 fab6 	bl	8002598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	401a      	ands	r2, r3
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	429a      	cmp	r2, r3
 800203e:	d10e      	bne.n	800205e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	4013      	ands	r3, r2
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d107      	bne.n	800205e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_TIM_IRQHandler+0x260>)
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 faa5 	bl	80025a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	4013      	ands	r3, r2
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d10f      	bne.n	800208c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	4013      	ands	r3, r2
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d108      	bne.n	800208c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2241      	movs	r2, #65	; 0x41
 8002080:	4252      	negs	r2, r2
 8002082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f90c 	bl	80022a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2220      	movs	r2, #32
 8002094:	4013      	ands	r3, r2
 8002096:	2b20      	cmp	r3, #32
 8002098:	d10f      	bne.n	80020ba <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d108      	bne.n	80020ba <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2221      	movs	r2, #33	; 0x21
 80020ae:	4252      	negs	r2, r2
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fa67 	bl	8002588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	fffffeff 	.word	0xfffffeff

080020c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	230f      	movs	r3, #15
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	223c      	movs	r2, #60	; 0x3c
 80020de:	5c9b      	ldrb	r3, [r3, r2]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_TIM_ConfigClockSource+0x20>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e0bc      	b.n	8002262 <HAL_TIM_ConfigClockSource+0x19a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	223c      	movs	r2, #60	; 0x3c
 80020ec:	2101      	movs	r1, #1
 80020ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	223d      	movs	r2, #61	; 0x3d
 80020f4:	2102      	movs	r1, #2
 80020f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4a59      	ldr	r2, [pc, #356]	; (8002270 <HAL_TIM_ConfigClockSource+0x1a8>)
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	0192      	lsls	r2, r2, #6
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0xde>
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	0192      	lsls	r2, r2, #6
 8002128:	4293      	cmp	r3, r2
 800212a:	d900      	bls.n	800212e <HAL_TIM_ConfigClockSource+0x66>
 800212c:	e088      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	0152      	lsls	r2, r2, #5
 8002132:	4293      	cmp	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_TIM_ConfigClockSource+0x70>
 8002136:	e088      	b.n	800224a <HAL_TIM_ConfigClockSource+0x182>
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0152      	lsls	r2, r2, #5
 800213c:	4293      	cmp	r3, r2
 800213e:	d900      	bls.n	8002142 <HAL_TIM_ConfigClockSource+0x7a>
 8002140:	e07e      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 8002142:	2b70      	cmp	r3, #112	; 0x70
 8002144:	d018      	beq.n	8002178 <HAL_TIM_ConfigClockSource+0xb0>
 8002146:	d900      	bls.n	800214a <HAL_TIM_ConfigClockSource+0x82>
 8002148:	e07a      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 800214a:	2b60      	cmp	r3, #96	; 0x60
 800214c:	d04f      	beq.n	80021ee <HAL_TIM_ConfigClockSource+0x126>
 800214e:	d900      	bls.n	8002152 <HAL_TIM_ConfigClockSource+0x8a>
 8002150:	e076      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 8002152:	2b50      	cmp	r3, #80	; 0x50
 8002154:	d03b      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x106>
 8002156:	d900      	bls.n	800215a <HAL_TIM_ConfigClockSource+0x92>
 8002158:	e072      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d057      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x146>
 800215e:	d900      	bls.n	8002162 <HAL_TIM_ConfigClockSource+0x9a>
 8002160:	e06e      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 8002162:	2b30      	cmp	r3, #48	; 0x30
 8002164:	d063      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x166>
 8002166:	d86b      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 8002168:	2b20      	cmp	r3, #32
 800216a:	d060      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x166>
 800216c:	d868      	bhi.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
 800216e:	2b00      	cmp	r3, #0
 8002170:	d05d      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x166>
 8002172:	2b10      	cmp	r3, #16
 8002174:	d05b      	beq.n	800222e <HAL_TIM_ConfigClockSource+0x166>
 8002176:	e063      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f000 f97c 	bl	8002484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2277      	movs	r2, #119	; 0x77
 8002198:	4313      	orrs	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	609a      	str	r2, [r3, #8]
      break;
 80021a4:	e052      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f000 f965 	bl	8002484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	01c9      	lsls	r1, r1, #7
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
      break;
 80021cc:	e03e      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	001a      	movs	r2, r3
 80021dc:	f000 f8d6 	bl	800238c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2150      	movs	r1, #80	; 0x50
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 f930 	bl	800244c <TIM_ITRx_SetConfig>
      break;
 80021ec:	e02e      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6859      	ldr	r1, [r3, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	001a      	movs	r2, r3
 80021fc:	f000 f8f4 	bl	80023e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2160      	movs	r1, #96	; 0x60
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f920 	bl	800244c <TIM_ITRx_SetConfig>
      break;
 800220c:	e01e      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	001a      	movs	r2, r3
 800221c:	f000 f8b6 	bl	800238c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2140      	movs	r1, #64	; 0x40
 8002226:	0018      	movs	r0, r3
 8002228:	f000 f910 	bl	800244c <TIM_ITRx_SetConfig>
      break;
 800222c:	e00e      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0019      	movs	r1, r3
 8002238:	0010      	movs	r0, r2
 800223a:	f000 f907 	bl	800244c <TIM_ITRx_SetConfig>
      break;
 800223e:	e005      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002240:	230f      	movs	r3, #15
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
      break;
 8002248:	e000      	b.n	800224c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800224a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	223d      	movs	r2, #61	; 0x3d
 8002250:	2101      	movs	r1, #1
 8002252:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	223c      	movs	r2, #60	; 0x3c
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

  return status;
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	ffceff88 	.word	0xffceff88
 8002270:	ffff00ff 	.word	0xffff00ff

08002274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b002      	add	sp, #8
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <TIM_Base_SetConfig+0xc0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0x20>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <TIM_Base_SetConfig+0xc4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d108      	bne.n	80022e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2270      	movs	r2, #112	; 0x70
 80022d8:	4393      	bics	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <TIM_Base_SetConfig+0xc0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00f      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a21      	ldr	r2, [pc, #132]	; (8002378 <TIM_Base_SetConfig+0xc4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00b      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a20      	ldr	r2, [pc, #128]	; (800237c <TIM_Base_SetConfig+0xc8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <TIM_Base_SetConfig+0xcc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <TIM_Base_SetConfig+0x5a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <TIM_Base_SetConfig+0xd0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d108      	bne.n	8002320 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <TIM_Base_SetConfig+0xd4>)
 8002312:	4013      	ands	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	4393      	bics	r3, r2
 8002326:	001a      	movs	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <TIM_Base_SetConfig+0xc0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0xaa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <TIM_Base_SetConfig+0xcc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0xaa>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <TIM_Base_SetConfig+0xd0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d103      	bne.n	8002366 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	615a      	str	r2, [r3, #20]
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400
 800237c:	40002000 	.word	0x40002000
 8002380:	40014400 	.word	0x40014400
 8002384:	40014800 	.word	0x40014800
 8002388:	fffffcff 	.word	0xfffffcff

0800238c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4393      	bics	r3, r2
 80023a6:	001a      	movs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	22f0      	movs	r2, #240	; 0xf0
 80023b6:	4393      	bics	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	220a      	movs	r2, #10
 80023c8:	4393      	bics	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	621a      	str	r2, [r3, #32]
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b006      	add	sp, #24
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	2210      	movs	r2, #16
 80023fa:	4393      	bics	r3, r2
 80023fc:	001a      	movs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <TIM_TI2_ConfigInputStage+0x60>)
 8002412:	4013      	ands	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	031b      	lsls	r3, r3, #12
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	22a0      	movs	r2, #160	; 0xa0
 8002424:	4393      	bics	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	621a      	str	r2, [r3, #32]
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b006      	add	sp, #24
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	ffff0fff 	.word	0xffff0fff

0800244c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <TIM_ITRx_SetConfig+0x34>)
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	2207      	movs	r2, #7
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	ffcfff8f 	.word	0xffcfff8f

08002484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <TIM_ETR_SetConfig+0x3c>)
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	021a      	lsls	r2, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b006      	add	sp, #24
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	ffff00ff 	.word	0xffff00ff

080024c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	223c      	movs	r2, #60	; 0x3c
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d8:	2302      	movs	r3, #2
 80024da:	e04a      	b.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	223c      	movs	r2, #60	; 0x3c
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	223d      	movs	r2, #61	; 0x3d
 80024e8:	2102      	movs	r1, #2
 80024ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2270      	movs	r2, #112	; 0x70
 800251c:	4393      	bics	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10c      	bne.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	4393      	bics	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4313      	orrs	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	223d      	movs	r2, #61	; 0x3d
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	223c      	movs	r2, #60	; 0x3c
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	40012c00 	.word	0x40012c00
 8002580:	ff0fffff 	.word	0xff0fffff
 8002584:	40000400 	.word	0x40000400

08002588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e046      	b.n	8002658 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2284      	movs	r2, #132	; 0x84
 80025ce:	589b      	ldr	r3, [r3, r2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fe f8cc 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2284      	movs	r2, #132	; 0x84
 80025e8:	2124      	movs	r1, #36	; 0x24
 80025ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f830 	bl	8002664 <UART_SetConfig>
 8002604:	0003      	movs	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e024      	b.n	8002658 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 f9a1 	bl	8002960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	490d      	ldr	r1, [pc, #52]	; (8002660 <HAL_UART_Init+0xa8>)
 800262a:	400a      	ands	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	212a      	movs	r1, #42	; 0x2a
 800263a:	438a      	bics	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fa39 	bl	8002ac8 <UART_CheckIdleState>
 8002656:	0003      	movs	r3, r0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	ffffb7ff 	.word	0xffffb7ff

08002664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800266c:	231e      	movs	r3, #30
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4aab      	ldr	r2, [pc, #684]	; (8002940 <UART_SetConfig+0x2dc>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4aa6      	ldr	r2, [pc, #664]	; (8002944 <UART_SetConfig+0x2e0>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a9d      	ldr	r2, [pc, #628]	; (8002948 <UART_SetConfig+0x2e4>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	220f      	movs	r2, #15
 80026e8:	4393      	bics	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a93      	ldr	r2, [pc, #588]	; (800294c <UART_SetConfig+0x2e8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d127      	bne.n	8002752 <UART_SetConfig+0xee>
 8002702:	4b93      	ldr	r3, [pc, #588]	; (8002950 <UART_SetConfig+0x2ec>)
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	2203      	movs	r2, #3
 8002708:	4013      	ands	r3, r2
 800270a:	2b03      	cmp	r3, #3
 800270c:	d017      	beq.n	800273e <UART_SetConfig+0xda>
 800270e:	d81b      	bhi.n	8002748 <UART_SetConfig+0xe4>
 8002710:	2b02      	cmp	r3, #2
 8002712:	d00a      	beq.n	800272a <UART_SetConfig+0xc6>
 8002714:	d818      	bhi.n	8002748 <UART_SetConfig+0xe4>
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <UART_SetConfig+0xbc>
 800271a:	2b01      	cmp	r3, #1
 800271c:	d00a      	beq.n	8002734 <UART_SetConfig+0xd0>
 800271e:	e013      	b.n	8002748 <UART_SetConfig+0xe4>
 8002720:	231f      	movs	r3, #31
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e021      	b.n	800276e <UART_SetConfig+0x10a>
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e01c      	b.n	800276e <UART_SetConfig+0x10a>
 8002734:	231f      	movs	r3, #31
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2204      	movs	r2, #4
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e017      	b.n	800276e <UART_SetConfig+0x10a>
 800273e:	231f      	movs	r3, #31
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2208      	movs	r2, #8
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e012      	b.n	800276e <UART_SetConfig+0x10a>
 8002748:	231f      	movs	r3, #31
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2210      	movs	r2, #16
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e00d      	b.n	800276e <UART_SetConfig+0x10a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7f      	ldr	r2, [pc, #508]	; (8002954 <UART_SetConfig+0x2f0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d104      	bne.n	8002766 <UART_SetConfig+0x102>
 800275c:	231f      	movs	r3, #31
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e003      	b.n	800276e <UART_SetConfig+0x10a>
 8002766:	231f      	movs	r3, #31
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2210      	movs	r2, #16
 800276c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	429a      	cmp	r2, r3
 8002778:	d000      	beq.n	800277c <UART_SetConfig+0x118>
 800277a:	e06f      	b.n	800285c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800277c:	231f      	movs	r3, #31
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d01f      	beq.n	80027c6 <UART_SetConfig+0x162>
 8002786:	dc22      	bgt.n	80027ce <UART_SetConfig+0x16a>
 8002788:	2b04      	cmp	r3, #4
 800278a:	d017      	beq.n	80027bc <UART_SetConfig+0x158>
 800278c:	dc1f      	bgt.n	80027ce <UART_SetConfig+0x16a>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <UART_SetConfig+0x134>
 8002792:	2b02      	cmp	r3, #2
 8002794:	d005      	beq.n	80027a2 <UART_SetConfig+0x13e>
 8002796:	e01a      	b.n	80027ce <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002798:	f7ff f9b8 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 800279c:	0003      	movs	r3, r0
 800279e:	61bb      	str	r3, [r7, #24]
        break;
 80027a0:	e01c      	b.n	80027dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80027a2:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <UART_SetConfig+0x2ec>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2207      	movs	r2, #7
 80027aa:	4013      	ands	r3, r2
 80027ac:	3301      	adds	r3, #1
 80027ae:	0019      	movs	r1, r3
 80027b0:	4869      	ldr	r0, [pc, #420]	; (8002958 <UART_SetConfig+0x2f4>)
 80027b2:	f7fd fca9 	bl	8000108 <__udivsi3>
 80027b6:	0003      	movs	r3, r0
 80027b8:	61bb      	str	r3, [r7, #24]
        break;
 80027ba:	e00f      	b.n	80027dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027bc:	f7ff f95a 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80027c0:	0003      	movs	r3, r0
 80027c2:	61bb      	str	r3, [r7, #24]
        break;
 80027c4:	e00a      	b.n	80027dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	61bb      	str	r3, [r7, #24]
        break;
 80027cc:	e006      	b.n	80027dc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027d2:	231e      	movs	r3, #30
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
        break;
 80027da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d100      	bne.n	80027e4 <UART_SetConfig+0x180>
 80027e2:	e097      	b.n	8002914 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e8:	4b5c      	ldr	r3, [pc, #368]	; (800295c <UART_SetConfig+0x2f8>)
 80027ea:	0052      	lsls	r2, r2, #1
 80027ec:	5ad3      	ldrh	r3, [r2, r3]
 80027ee:	0019      	movs	r1, r3
 80027f0:	69b8      	ldr	r0, [r7, #24]
 80027f2:	f7fd fc89 	bl	8000108 <__udivsi3>
 80027f6:	0003      	movs	r3, r0
 80027f8:	005a      	lsls	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	18d2      	adds	r2, r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0019      	movs	r1, r3
 8002808:	0010      	movs	r0, r2
 800280a:	f7fd fc7d 	bl	8000108 <__udivsi3>
 800280e:	0003      	movs	r3, r0
 8002810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	d91c      	bls.n	8002852 <UART_SetConfig+0x1ee>
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	025b      	lsls	r3, r3, #9
 800281e:	429a      	cmp	r2, r3
 8002820:	d217      	bcs.n	8002852 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	b29a      	uxth	r2, r3
 8002826:	200e      	movs	r0, #14
 8002828:	183b      	adds	r3, r7, r0
 800282a:	210f      	movs	r1, #15
 800282c:	438a      	bics	r2, r1
 800282e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	2207      	movs	r2, #7
 8002838:	4013      	ands	r3, r2
 800283a:	b299      	uxth	r1, r3
 800283c:	183b      	adds	r3, r7, r0
 800283e:	183a      	adds	r2, r7, r0
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	183a      	adds	r2, r7, r0
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e060      	b.n	8002914 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002852:	231e      	movs	r3, #30
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e05b      	b.n	8002914 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800285c:	231f      	movs	r3, #31
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d01f      	beq.n	80028a6 <UART_SetConfig+0x242>
 8002866:	dc22      	bgt.n	80028ae <UART_SetConfig+0x24a>
 8002868:	2b04      	cmp	r3, #4
 800286a:	d017      	beq.n	800289c <UART_SetConfig+0x238>
 800286c:	dc1f      	bgt.n	80028ae <UART_SetConfig+0x24a>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <UART_SetConfig+0x214>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d005      	beq.n	8002882 <UART_SetConfig+0x21e>
 8002876:	e01a      	b.n	80028ae <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002878:	f7ff f948 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 800287c:	0003      	movs	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]
        break;
 8002880:	e01c      	b.n	80028bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002882:	4b33      	ldr	r3, [pc, #204]	; (8002950 <UART_SetConfig+0x2ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2207      	movs	r2, #7
 800288a:	4013      	ands	r3, r2
 800288c:	3301      	adds	r3, #1
 800288e:	0019      	movs	r1, r3
 8002890:	4831      	ldr	r0, [pc, #196]	; (8002958 <UART_SetConfig+0x2f4>)
 8002892:	f7fd fc39 	bl	8000108 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]
        break;
 800289a:	e00f      	b.n	80028bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800289c:	f7ff f8ea 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80028a0:	0003      	movs	r3, r0
 80028a2:	61bb      	str	r3, [r7, #24]
        break;
 80028a4:	e00a      	b.n	80028bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	61bb      	str	r3, [r7, #24]
        break;
 80028ac:	e006      	b.n	80028bc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028b2:	231e      	movs	r3, #30
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
        break;
 80028ba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <UART_SetConfig+0x2f8>)
 80028c8:	0052      	lsls	r2, r2, #1
 80028ca:	5ad3      	ldrh	r3, [r2, r3]
 80028cc:	0019      	movs	r1, r3
 80028ce:	69b8      	ldr	r0, [r7, #24]
 80028d0:	f7fd fc1a 	bl	8000108 <__udivsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	001a      	movs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	18d2      	adds	r2, r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0019      	movs	r1, r3
 80028e6:	0010      	movs	r0, r2
 80028e8:	f7fd fc0e 	bl	8000108 <__udivsi3>
 80028ec:	0003      	movs	r3, r0
 80028ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	d90a      	bls.n	800290c <UART_SetConfig+0x2a8>
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d205      	bcs.n	800290c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	e003      	b.n	8002914 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800290c:	231e      	movs	r3, #30
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	226a      	movs	r2, #106	; 0x6a
 8002918:	2101      	movs	r1, #1
 800291a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2268      	movs	r2, #104	; 0x68
 8002920:	2101      	movs	r1, #1
 8002922:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002930:	231e      	movs	r3, #30
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b008      	add	sp, #32
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	cfff69f3 	.word	0xcfff69f3
 8002944:	ffffcfff 	.word	0xffffcfff
 8002948:	11fff4ff 	.word	0x11fff4ff
 800294c:	40013800 	.word	0x40013800
 8002950:	40021000 	.word	0x40021000
 8002954:	40004400 	.word	0x40004400
 8002958:	02dc6c00 	.word	0x02dc6c00
 800295c:	08002dbc 	.word	0x08002dbc

08002960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	2201      	movs	r2, #1
 800296e:	4013      	ands	r3, r2
 8002970:	d00b      	beq.n	800298a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a4a      	ldr	r2, [pc, #296]	; (8002aa4 <UART_AdvFeatureConfig+0x144>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d00b      	beq.n	80029ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <UART_AdvFeatureConfig+0x148>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	2204      	movs	r2, #4
 80029b2:	4013      	ands	r3, r2
 80029b4:	d00b      	beq.n	80029ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <UART_AdvFeatureConfig+0x14c>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <UART_AdvFeatureConfig+0x150>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2210      	movs	r2, #16
 80029f6:	4013      	ands	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <UART_AdvFeatureConfig+0x154>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	2220      	movs	r2, #32
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <UART_AdvFeatureConfig+0x158>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <UART_AdvFeatureConfig+0x15c>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	035b      	lsls	r3, r3, #13
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d10b      	bne.n	8002a7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <UART_AdvFeatureConfig+0x160>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	4013      	ands	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <UART_AdvFeatureConfig+0x164>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  }
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	fffdffff 	.word	0xfffdffff
 8002aa8:	fffeffff 	.word	0xfffeffff
 8002aac:	fffbffff 	.word	0xfffbffff
 8002ab0:	ffff7fff 	.word	0xffff7fff
 8002ab4:	ffffefff 	.word	0xffffefff
 8002ab8:	ffffdfff 	.word	0xffffdfff
 8002abc:	ffefffff 	.word	0xffefffff
 8002ac0:	ff9fffff 	.word	0xff9fffff
 8002ac4:	fff7ffff 	.word	0xfff7ffff

08002ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	228c      	movs	r2, #140	; 0x8c
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ad8:	f7fd ff9e 	bl	8000a18 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d10c      	bne.n	8002b08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	0391      	lsls	r1, r2, #14
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <UART_CheckIdleState+0x90>)
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f000 f82e 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d001      	beq.n	8002b08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e023      	b.n	8002b50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d10c      	bne.n	8002b30 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	03d1      	lsls	r1, r2, #15
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <UART_CheckIdleState+0x90>)
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f000 f81a 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e00f      	b.n	8002b50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2284      	movs	r2, #132	; 0x84
 8002b34:	2120      	movs	r1, #32
 8002b36:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2288      	movs	r2, #136	; 0x88
 8002b3c:	2120      	movs	r1, #32
 8002b3e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	01ffffff 	.word	0x01ffffff

08002b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b094      	sub	sp, #80	; 0x50
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6c:	e0a7      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b70:	3301      	adds	r3, #1
 8002b72:	d100      	bne.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b74:	e0a3      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7fd ff4f 	bl	8000a18 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d13f      	bne.n	8002c0c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
 8002b96:	2301      	movs	r3, #1
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	494e      	ldr	r1, [pc, #312]	; (8002ce8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	f383 8810 	msr	PRIMASK, r3
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8002bc8:	2301      	movs	r3, #1
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bea:	f383 8810 	msr	PRIMASK, r3
}
 8002bee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2284      	movs	r2, #132	; 0x84
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2288      	movs	r2, #136	; 0x88
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e069      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	d052      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	401a      	ands	r2, r3
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d148      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c36:	f3ef 8310 	mrs	r3, PRIMASK
 8002c3a:	613b      	str	r3, [r7, #16]
  return(result);
 8002c3c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c40:	2301      	movs	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f383 8810 	msr	PRIMASK, r3
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4924      	ldr	r1, [pc, #144]	; (8002ce8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f383 8810 	msr	PRIMASK, r3
}
 8002c66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c68:	f3ef 8310 	mrs	r3, PRIMASK
 8002c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c6e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c72:	2301      	movs	r3, #1
 8002c74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f383 8810 	msr	PRIMASK, r3
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	438a      	bics	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f383 8810 	msr	PRIMASK, r3
}
 8002c98:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2284      	movs	r2, #132	; 0x84
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2288      	movs	r2, #136	; 0x88
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	228c      	movs	r2, #140	; 0x8c
 8002cae:	2120      	movs	r1, #32
 8002cb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e010      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	425a      	negs	r2, r3
 8002cce:	4153      	adcs	r3, r2
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d100      	bne.n	8002cde <UART_WaitOnFlagUntilTimeout+0x182>
 8002cdc:	e747      	b.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b014      	add	sp, #80	; 0x50
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	fffffe5f 	.word	0xfffffe5f

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	2600      	movs	r6, #0
 8002cf0:	4d0c      	ldr	r5, [pc, #48]	; (8002d24 <__libc_init_array+0x38>)
 8002cf2:	4c0d      	ldr	r4, [pc, #52]	; (8002d28 <__libc_init_array+0x3c>)
 8002cf4:	1b64      	subs	r4, r4, r5
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	42a6      	cmp	r6, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	f000 f821 	bl	8002d44 <_init>
 8002d02:	4d0a      	ldr	r5, [pc, #40]	; (8002d2c <__libc_init_array+0x40>)
 8002d04:	4c0a      	ldr	r4, [pc, #40]	; (8002d30 <__libc_init_array+0x44>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	42a6      	cmp	r6, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	00b3      	lsls	r3, r6, #2
 8002d12:	58eb      	ldr	r3, [r5, r3]
 8002d14:	4798      	blx	r3
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	00b3      	lsls	r3, r6, #2
 8002d1c:	58eb      	ldr	r3, [r5, r3]
 8002d1e:	4798      	blx	r3
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08002dd4 	.word	0x08002dd4
 8002d28:	08002dd4 	.word	0x08002dd4
 8002d2c:	08002dd4 	.word	0x08002dd4
 8002d30:	08002dd8 	.word	0x08002dd8

08002d34 <memset>:
 8002d34:	0003      	movs	r3, r0
 8002d36:	1882      	adds	r2, r0, r2
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	7019      	strb	r1, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <_init>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr

08002d50 <_fini>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d56:	bc08      	pop	{r3}
 8002d58:	469e      	mov	lr, r3
 8002d5a:	4770      	bx	lr

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "m_transmit.h"
#include "BNO055.hpp"
#include "move.h"
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_uart5_rx;

/* USER CODE BEGIN PV */
int travel_x, xf;
int travel_y, yf;
M_TRANSMIT odom1(&huart6,0);
M_TRANSMIT odom2(&huart6,1);

uint8_t ready = 0 ;
float rotate;

MOVE motor_A(0, 45);
MOVE motor_B(1, 135);
MOVE motor_C(2, -135);
MOVE motor_D(3, -45);
uint8_t Buf[12];

int go_degree = 90;
int go_speed = 50;
int goal_travel_x = 0;
int goal_travel_y = 0;

uint8_t Error = 0;

uint8_t send_array[10];

double time;
double saved_time = 0;
int cz=0;
double syoshoku = 0;
double lastv = 0;

volatile uint32_t index;
uint8_t rxBuf[128];
int rcvBuf[4], readData;

int mode, clock, hue;
uint8_t array_num = 0;
uint8_t past_array_num = 0;

#define array_amount 10
int coord_array[array_amount][3]={
		{150,0,50},{250,0,50},{60,0,50},{250,0,50},{60,0,50},{160,0,50},{160,30,50},{250,30,50},{60,30,50},{60,0,50}
};
int c_x;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_UART5_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_array(int tx, int cx, int cz, uint8_t r, uint8_t h, uint8_t h2){
	send_array[0]=220;

	if(cx - tx > 50){
		cx = cx -98;
	}else if(cx - tx < -40){
		cx = cx + 110;
	}

	c_x = cx;

	tx += 5000; cx += 5000; cz += 5000;
	uint8_t h_out = h/2.5;
	uint8_t h_out2 = h2/2.5;
	for(int i = 1; i <3 ;i++){
		send_array[i] = tx%100;
		tx = (int)tx/100;
	}
	for(int i = 3; i <5 ;i++){
		send_array[i] = cx%100;
		cx = (int)cx/100;
	}
	for(int i = 5; i <7 ;i++){
		send_array[i] = cz%100;
		cz = (int)cz/100;
	}
	send_array[7] = r;
	if(h_out > 100){h_out = 100;}
	send_array[8] = h_out;
	if(h_out2 > 100){h_out2 = 100;}
	send_array[9] = h_out2;
}

void check_TWEbuf();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

void check_coord(){
	if(travel_x > coord_array[array_num][0]-4 && travel_x < coord_array[array_num][0]+4 &&travel_y > coord_array[array_num][1]-4 &&travel_y < coord_array[array_num][1]+4){
		if(array_num < array_amount){
			array_num += 1 ;
		}
		goal_travel_x = coord_array[array_num][0];
		goal_travel_y = coord_array[array_num][1];
	}
	//array外対応
	if(array_num >= array_amount && mode <= 8){
		go_speed = 50;
		if(travel_x >250){goal_travel_x = 65;}
		else if(travel_x <65){goal_travel_x = 250;}
	}else if(HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)==1 && mode >= 4 && mode <= 8){
		go_speed = coord_array[array_num][2];
	}else if(mode == 9){
		go_speed = 0;
	}else{
		go_speed = 0;
	}
}

void set_and_send_to_motor(){
	motor_A.calcurate(rotate, go_degree, go_speed);
	motor_A.set_array(Buf);
	motor_B.calcurate(rotate, go_degree, go_speed);
	motor_B.set_array(Buf);
	motor_C.calcurate(rotate, go_degree, go_speed);
	motor_C.set_array(Buf);
	motor_D.calcurate(rotate, go_degree, go_speed);
	motor_D.set_array(Buf);
	HAL_UART_Transmit(&huart6, (uint8_t*)&Buf, 12, 5);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART6_UART_Init();
  MX_USART3_UART_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);

  while (!ready) {
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
      ready = 1;
    } else {
      HAL_Delay(100);
    }
  }

  xf = -1*odom1.get_travel();
  if(odom1.get_travel() <=-5000){Error = 1;}
  yf = -1*odom2.get_travel();
  if(odom2.get_travel() <=-5000){Error = 1;}

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);

  HAL_TIM_Base_Start_IT(&htim3);

  HAL_UART_Receive_DMA(&huart5, rxBuf, sizeof(rxBuf));

  goal_travel_x = coord_array[0][0];
  goal_travel_y = coord_array[0][1];
  go_speed = coord_array[0][2];

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  unsigned char address = 0x28;
  BNO055 bno055(hi2c1,address);
  QUATERNION q;
  EULAR e;

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//odometery-----------------------------
    travel_x = -1*odom1.get_travel() - xf;
    travel_y = -1*odom2.get_travel() - yf;

    //bno055--------------------------------
    e = bno055.get_eular();
    rotate = -1*(e.z/3.1415)*180;
    rotate = (int)rotate;

    //direction-----------------------------
    go_degree = atan2((double)goal_travel_x - (double)travel_x, (double)goal_travel_y -(double)(travel_y) )/ PI*180;

    //prepare for transmition---------------

	//coordinate check----------------------
    /*
	check_coord();
	if(array_num==7){
		go_speed = 0;
		if(past_array_num == 6&& array_num ==7){
			for(int i = 150; i<250; i++){
				set_array((-1)*travel_x, (-1)*i, 24, 12+((-1)*travel_y*0.05), hue, (hue + 90)%250);
				HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 10, 100);
				HAL_Delay(20);
			}
		}
		if(mode!=9){go_speed = 50;}
		set_array((-1)*travel_x, (-1)*250, 24, 12+((-1)*travel_y*0.05), hue, (hue + 90)%250);
	}else if(array_num>=8){
		set_array((-1)*travel_x, (-1)*250, 24, 12+((-1)*travel_y*0.05), hue, (hue + 90)%250);
	}else{
		set_array((-1)*travel_x, (-1)*150, 24, 12+((-1)*travel_y*0.05), hue, (hue + 90)%250);
	}
	*/
    set_array((-1)*travel_x, (-1)*0, 24, 12+((-1)*travel_y*0.05), 0, 120);

	//send_data-----------------------------
//
	set_and_send_to_motor();
	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 10, 100);

	//Twelite
	check_TWEbuf();

	//
	past_array_num = array_num;
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 32-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 10000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : READ_Pin */
  GPIO_InitStruct.Pin = READ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(READ_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void check_TWEbuf(){
	index = huart5.hdmarx->Instance->NDTR;//バッファー残容量
 	index = sizeof(rxBuf) - index;//最新の受信データ位置

 	int check_buf_point = index - 10;
 	if(check_buf_point < 0){check_buf_point = check_buf_point + sizeof(rxBuf);}
 	//読み込み済みデータ位置より最新の受信データ位置が前にある時(バッファー内で受信データが一周してた場合)値を補正

	while(1){
		readData = rxBuf[check_buf_point];
		if(readData == 250){
			for(int i=1; i<5; i++){
				int read_buf_point = check_buf_point + i;
				if(read_buf_point>sizeof(rxBuf)-1){read_buf_point = read_buf_point - sizeof(rxBuf);}
				rcvBuf[i-1] = rxBuf[read_buf_point];
			}
			break;
		}
		check_buf_point++;
		if(check_buf_point>sizeof(rxBuf)-1){check_buf_point = check_buf_point - sizeof(rxBuf);}
		if(check_buf_point==index){break;}
	}

 	mode = rcvBuf[0]-5;

	clock = 0;
 	int hyaku = 1;
	for(int i = 2; i >=1 ; i--){
		clock = clock + ((rcvBuf[i]-5)*hyaku);
		hyaku = hyaku*240;
	}

	hue = rcvBuf[3];

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
//    if (htim == &htim3){
//    	time += 0.02;
//		cz = syoshoku * time - (9.8/2) * time*time + 40;
//
//		if (cz <= 5){
//			syoshoku = -lastv;
//		}
//		else{
//			lastv = syoshoku + 9.8 * time;
//		}
//
//
//    	set_array(0, (-1)*-10, cz, 5, 200);
//    	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 9, 100);
//    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

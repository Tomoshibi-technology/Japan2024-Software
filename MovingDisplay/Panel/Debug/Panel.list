
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f44  08003f44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f44  08003f44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f44  08003f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  2000000c  08003f5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08003f5c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010143  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002059  00000000  00000000  00030177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cf3  00000000  00000000  00033be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa7e  00000000  00000000  000498db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a5a  00000000  00000000  00059359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfdb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003068  00000000  00000000  000dfe04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003e60 	.word	0x08003e60

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003e60 	.word	0x08003e60

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	  Neopixel.execute();
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000222:	0018      	movs	r0, r3
 8000224:	f000 fbb5 	bl	8000992 <_ZN7WS2812B7executeEv>
}
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	b002      	add	sp, #8
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200001c0 	.word	0x200001c0

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fca5 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f821 	bl	8000284 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f96b 	bl	800051c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000246:	f000 f943 	bl	80004d0 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800024a:	f000 f909 	bl	8000460 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800024e:	f000 f875 	bl	800033c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  Neopixel.init();
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <main+0x4c>)
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fc37 	bl	8000ac8 <_ZN7WS2812B4initEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Neopixel.set_color(8, 3, 0, 0);
 800025a:	4809      	ldr	r0, [pc, #36]	; (8000280 <main+0x4c>)
 800025c:	2300      	movs	r3, #0
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2300      	movs	r3, #0
 8000262:	2203      	movs	r2, #3
 8000264:	2108      	movs	r1, #8
 8000266:	f000 fb4c 	bl	8000902 <_ZN7WS2812B9set_colorEthhh>
    Neopixel.show();
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <main+0x4c>)
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fb83 	bl	8000978 <_ZN7WS2812B4showEv>
    HAL_Delay(500);
 8000272:	23fa      	movs	r3, #250	; 0xfa
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fd0c 	bl	8000c94 <HAL_Delay>
    Neopixel.set_color(8, 3, 0, 0);
 800027c:	e7ed      	b.n	800025a <main+0x26>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	200001c0 	.word	0x200001c0

08000284 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b093      	sub	sp, #76	; 0x4c
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2414      	movs	r4, #20
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2334      	movs	r3, #52	; 0x34
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f003 fddb 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 fdd4 	bl	8003e50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fa31 	bl	8001714 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2201      	movs	r2, #1
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	22a0      	movs	r2, #160	; 0xa0
 80002bc:	02d2      	lsls	r2, r2, #11
 80002be:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	0021      	movs	r1, r4
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2203      	movs	r2, #3
 80002cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2209      	movs	r2, #9
 80002d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	0292      	lsls	r2, r2, #10
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	05d2      	lsls	r2, r2, #23
 80002e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fa5d 	bl	80017ac <HAL_RCC_OscConfig>
 80002f2:	0003      	movs	r3, r0
 80002f4:	1e5a      	subs	r2, r3, #1
 80002f6:	4193      	sbcs	r3, r2
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80002fe:	f000 f95d 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2202      	movs	r2, #2
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fd54 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000324:	0003      	movs	r3, r0
 8000326:	1e5a      	subs	r2, r3, #1
 8000328:	4193      	sbcs	r3, r2
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000330:	f000 f944 	bl	80005bc <Error_Handler>
  }
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b013      	add	sp, #76	; 0x4c
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08e      	sub	sp, #56	; 0x38
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000342:	2328      	movs	r3, #40	; 0x28
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	0018      	movs	r0, r3
 8000348:	2310      	movs	r3, #16
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f003 fd7f 	bl	8003e50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000352:	231c      	movs	r3, #28
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	0018      	movs	r0, r3
 8000358:	230c      	movs	r3, #12
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f003 fd77 	bl	8003e50 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	231c      	movs	r3, #28
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f003 fd70 	bl	8003e50 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000370:	4b39      	ldr	r3, [pc, #228]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 8000372:	4a3a      	ldr	r2, [pc, #232]	; (800045c <_ZL12MX_TIM3_Initv+0x120>)
 8000374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000376:	4b38      	ldr	r3, [pc, #224]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 8000378:	2203      	movs	r2, #3
 800037a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037c:	4b36      	ldr	r3, [pc, #216]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000382:	4b35      	ldr	r3, [pc, #212]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 8000384:	220e      	movs	r2, #14
 8000386:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000388:	4b33      	ldr	r3, [pc, #204]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038e:	4b32      	ldr	r3, [pc, #200]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000394:	4b30      	ldr	r3, [pc, #192]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 8000396:	0018      	movs	r0, r3
 8000398:	f001 fec0 	bl	800211c <HAL_TIM_Base_Init>
 800039c:	0003      	movs	r3, r0
 800039e:	1e5a      	subs	r2, r3, #1
 80003a0:	4193      	sbcs	r3, r2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80003a8:	f000 f908 	bl	80005bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ac:	2128      	movs	r1, #40	; 0x28
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0152      	lsls	r2, r2, #5
 80003b4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003b6:	187a      	adds	r2, r7, r1
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 80003ba:	0011      	movs	r1, r2
 80003bc:	0018      	movs	r0, r3
 80003be:	f002 fb3d 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 80003c2:	0003      	movs	r3, r0
 80003c4:	1e5a      	subs	r2, r3, #1
 80003c6:	4193      	sbcs	r3, r2
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80003ce:	f000 f8f5 	bl	80005bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 fef9 	bl	80021cc <HAL_TIM_PWM_Init>
 80003da:	0003      	movs	r3, r0
 80003dc:	1e5a      	subs	r2, r3, #1
 80003de:	4193      	sbcs	r3, r2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80003e6:	f000 f8e9 	bl	80005bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ea:	211c      	movs	r1, #28
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003f8:	187a      	adds	r2, r7, r1
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f003 f8ac 	bl	800355c <HAL_TIMEx_MasterConfigSynchronization>
 8000404:	0003      	movs	r3, r0
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	4193      	sbcs	r3, r2
 800040a:	b2db      	uxtb	r3, r3
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000410:	f000 f8d4 	bl	80005bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000414:	003b      	movs	r3, r7
 8000416:	2260      	movs	r2, #96	; 0x60
 8000418:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800041a:	003b      	movs	r3, r7
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000426:	003b      	movs	r3, r7
 8000428:	2204      	movs	r2, #4
 800042a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800042c:	0039      	movs	r1, r7
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 8000430:	2204      	movs	r2, #4
 8000432:	0018      	movs	r0, r3
 8000434:	f002 fa02 	bl	800283c <HAL_TIM_PWM_ConfigChannel>
 8000438:	0003      	movs	r3, r0
 800043a:	1e5a      	subs	r2, r3, #1
 800043c:	4193      	sbcs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8000444:	f000 f8ba 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <_ZL12MX_TIM3_Initv+0x11c>)
 800044a:	0018      	movs	r0, r3
 800044c:	f000 f956 	bl	80006fc <HAL_TIM_MspPostInit>

}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b00e      	add	sp, #56	; 0x38
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000028 	.word	0x20000028
 800045c:	40000400 	.word	0x40000400

08000460 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000466:	4a19      	ldr	r2, [pc, #100]	; (80004cc <_ZL19MX_USART2_UART_Initv+0x6c>)
 8000468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 800046c:	22e1      	movs	r2, #225	; 0xe1
 800046e:	0252      	lsls	r2, r2, #9
 8000470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <_ZL19MX_USART2_UART_Initv+0x68>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f003 f8b8 	bl	8003620 <HAL_UART_Init>
 80004b0:	0003      	movs	r3, r0
 80004b2:	1e5a      	subs	r2, r3, #1
 80004b4:	4193      	sbcs	r3, r2
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 80004bc:	f000 f87e 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	200000d0 	.word	0x200000d0
 80004cc:	40004400 	.word	0x40004400

080004d0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <_ZL11MX_DMA_Initv+0x48>)
 80004d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <_ZL11MX_DMA_Initv+0x48>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	639a      	str	r2, [r3, #56]	; 0x38
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <_ZL11MX_DMA_Initv+0x48>)
 80004e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2009      	movs	r0, #9
 80004f4:	f000 fc9e 	bl	8000e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f8:	2009      	movs	r0, #9
 80004fa:	f000 fcb0 	bl	8000e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	200a      	movs	r0, #10
 8000504:	f000 fc96 	bl	8000e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 fca8 	bl	8000e5e <HAL_NVIC_EnableIRQ>

}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40021000 	.word	0x40021000

0800051c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b089      	sub	sp, #36	; 0x24
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	240c      	movs	r4, #12
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f003 fc8f 	bl	8003e50 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000538:	2104      	movs	r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000542:	2204      	movs	r2, #4
 8000544:	4013      	ands	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 800054c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <_ZL12MX_GPIO_Initv+0x98>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <_ZL12MX_GPIO_Initv+0x9c>)
 800057c:	2200      	movs	r2, #0
 800057e:	2104      	movs	r1, #4
 8000580:	0018      	movs	r0, r3
 8000582:	f001 f8a9 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000586:	0021      	movs	r1, r4
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2204      	movs	r2, #4
 800058c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <_ZL12MX_GPIO_Initv+0x9c>)
 80005a4:	0019      	movs	r1, r3
 80005a6:	0010      	movs	r0, r2
 80005a8:	f000 ff32 	bl	8001410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b009      	add	sp, #36	; 0x24
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	50000400 	.word	0x50000400

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d109      	bne.n	80005ec <_Z41__static_initialization_and_destruction_0ii+0x24>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d105      	bne.n	80005ec <_Z41__static_initialization_and_destruction_0ii+0x24>
WS2812B Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80005e2:	4906      	ldr	r1, [pc, #24]	; (80005fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	f000 f975 	bl	80008d6 <_ZN7WS2812BC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b002      	add	sp, #8
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	0000ffff 	.word	0x0000ffff
 80005f8:	20000074 	.word	0x20000074
 80005fc:	20000028 	.word	0x20000028
 8000600:	200001c0 	.word	0x200001c0

08000604 <_GLOBAL__sub_I_htim3>:
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <_GLOBAL__sub_I_htim3+0x14>)
 800060a:	0019      	movs	r1, r3
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ffdb 	bl	80005c8 <_Z41__static_initialization_and_destruction_0ii>
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	0000ffff 	.word	0x0000ffff

0800061c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_MspInit+0x44>)
 8000624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_MspInit+0x44>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_MspInit+0x44>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_MspInit+0x44>)
 800063c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_MspInit+0x44>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0549      	lsls	r1, r1, #21
 8000644:	430a      	orrs	r2, r1
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_MspInit+0x44>)
 800064a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	055b      	lsls	r3, r3, #21
 8000650:	4013      	ands	r3, r2
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <HAL_TIM_Base_MspInit+0x88>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d136      	bne.n	80006e4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <HAL_TIM_Base_MspInit+0x8c>)
 8000678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <HAL_TIM_Base_MspInit+0x8c>)
 800067c:	2102      	movs	r1, #2
 800067e:	430a      	orrs	r2, r1
 8000680:	63da      	str	r2, [r3, #60]	; 0x3c
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <HAL_TIM_Base_MspInit+0x8c>)
 8000684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000686:	2202      	movs	r2, #2
 8000688:	4013      	ands	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 8000690:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <HAL_TIM_Base_MspInit+0x94>)
 8000692:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 8000696:	2221      	movs	r2, #33	; 0x21
 8000698:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 800069c:	2210      	movs	r2, #16
 800069e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006bc:	2220      	movs	r2, #32
 80006be:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006c2:	22c0      	movs	r2, #192	; 0xc0
 80006c4:	0192      	lsls	r2, r2, #6
 80006c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fbe4 	bl	8000e98 <HAL_DMA_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80006d4:	f7ff ff72 	bl	80005bc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_TIM_Base_MspInit+0x90>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b004      	add	sp, #16
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40000400 	.word	0x40000400
 80006f0:	40021000 	.word	0x40021000
 80006f4:	20000074 	.word	0x20000074
 80006f8:	4002001c 	.word	0x4002001c

080006fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	240c      	movs	r4, #12
 8000706:	193b      	adds	r3, r7, r4
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f003 fb9e 	bl	8003e50 <memset>
  if(htim->Instance==TIM3)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_TIM_MspPostInit+0x70>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d122      	bne.n	8000764 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_TIM_MspPostInit+0x74>)
 8000720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <HAL_TIM_MspPostInit+0x74>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_TIM_MspPostInit+0x74>)
 800072c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2202      	movs	r2, #2
 8000742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2201      	movs	r2, #1
 8000754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	187a      	adds	r2, r7, r1
 8000758:	23a0      	movs	r3, #160	; 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fe56 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b009      	add	sp, #36	; 0x24
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40000400 	.word	0x40000400
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	2414      	movs	r4, #20
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	2314      	movs	r3, #20
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f003 fb62 	bl	8003e50 <memset>
  if(huart->Instance==USART2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <HAL_UART_MspInit+0xe4>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d15b      	bne.n	800084e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <HAL_UART_MspInit+0xe8>)
 8000798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <HAL_UART_MspInit+0xe8>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <HAL_UART_MspInit+0xe8>)
 80007a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <HAL_UART_MspInit+0xe8>)
 80007b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <HAL_UART_MspInit+0xe8>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	430a      	orrs	r2, r1
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <HAL_UART_MspInit+0xe8>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c2:	2201      	movs	r2, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <HAL_UART_MspInit+0xec>)
 80007d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2202      	movs	r2, #2
 80007d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2201      	movs	r2, #1
 80007e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	187a      	adds	r2, r7, r1
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	05db      	lsls	r3, r3, #23
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fe0c 	bl	8001410 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_UART_MspInit+0xf0>)
 80007fa:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_UART_MspInit+0xf4>)
 80007fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000800:	2234      	movs	r2, #52	; 0x34
 8000802:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_UART_MspInit+0xf0>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0xf0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000824:	2220      	movs	r2, #32
 8000826:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_UART_MspInit+0xf0>)
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fb30 	bl	8000e98 <HAL_DMA_Init>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800083c:	f7ff febe 	bl	80005bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_UART_MspInit+0xf0>)
 8000846:	505a      	str	r2, [r3, r1]
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_UART_MspInit+0xf0>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b00b      	add	sp, #44	; 0x2c
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40004400 	.word	0x40004400
 800085c:	40021000 	.word	0x40021000
 8000860:	00008004 	.word	0x00008004
 8000864:	20000164 	.word	0x20000164
 8000868:	40020008 	.word	0x40020008

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f9e4 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <DMA1_Channel1_IRQHandler+0x14>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fc72 	bl	800118c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000164 	.word	0x20000164

080008b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fc66 	bl	800118c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	20000074 	.word	0x20000074

080008cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZN7WS2812BC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812b.h"

WS2812B::WS2812B(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	609a      	str	r2, [r3, #8]
}
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}

08000902 <_ZN7WS2812B9set_colorEthhh>:

void WS2812B::set_color(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8000902:	b590      	push	{r4, r7, lr}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	000c      	movs	r4, r1
 800090c:	0010      	movs	r0, r2
 800090e:	0019      	movs	r1, r3
 8000910:	1cbb      	adds	r3, r7, #2
 8000912:	1c22      	adds	r2, r4, #0
 8000914:	801a      	strh	r2, [r3, #0]
 8000916:	1c7b      	adds	r3, r7, #1
 8000918:	1c02      	adds	r2, r0, #0
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	003b      	movs	r3, r7
 800091e:	1c0a      	adds	r2, r1, #0
 8000920:	701a      	strb	r2, [r3, #0]
	if(PIXEL_NUM<LED_NUM){
 8000922:	1cbb      	adds	r3, r7, #2
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d822      	bhi.n	8000970 <_ZN7WS2812B9set_colorEthhh+0x6e>
		rgb_buf[PIXEL_NUM][0]=green;
 800092a:	1cbb      	adds	r3, r7, #2
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	0013      	movs	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	189b      	adds	r3, r3, r2
 8000936:	18cb      	adds	r3, r1, r3
 8000938:	330c      	adds	r3, #12
 800093a:	003a      	movs	r2, r7
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8000940:	1cbb      	adds	r3, r7, #2
 8000942:	881a      	ldrh	r2, [r3, #0]
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	0013      	movs	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	189b      	adds	r3, r3, r2
 800094c:	18cb      	adds	r3, r1, r3
 800094e:	330d      	adds	r3, #13
 8000950:	1c7a      	adds	r2, r7, #1
 8000952:	7812      	ldrb	r2, [r2, #0]
 8000954:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8000956:	1cbb      	adds	r3, r7, #2
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	0013      	movs	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	189b      	adds	r3, r3, r2
 8000962:	18cb      	adds	r3, r1, r3
 8000964:	330e      	adds	r3, #14
 8000966:	001a      	movs	r2, r3
 8000968:	2318      	movs	r3, #24
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	7013      	strb	r3, [r2, #0]
	}
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}

08000978 <_ZN7WS2812B4showEv>:

void WS2812B::show(){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	23a7      	movs	r3, #167	; 0xa7
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	2101      	movs	r1, #1
 8000988:	54d1      	strb	r1, [r2, r3]
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}

08000992 <_ZN7WS2812B7executeEv>:

void WS2812B::execute(){
 8000992:	b580      	push	{r7, lr}
 8000994:	b088      	sub	sp, #32
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	23a7      	movs	r3, #167	; 0xa7
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	5cd3      	ldrb	r3, [r2, r3]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d000      	beq.n	80009a8 <_ZN7WS2812B7executeEv+0x16>
 80009a6:	e08b      	b.n	8000ac0 <_ZN7WS2812B7executeEv+0x12e>
		if(HDMA->State != HAL_DMA_STATE_READY){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	2225      	movs	r2, #37	; 0x25
 80009ae:	5c9b      	ldrb	r3, [r3, r2]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3b01      	subs	r3, #1
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	4193      	sbcs	r3, r2
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <_ZN7WS2812B7executeEv+0x3c>
			HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0019      	movs	r1, r3
 80009c8:	0010      	movs	r0, r2
 80009ca:	f001 fe4d 	bl	8002668 <HAL_TIM_PWM_Stop_DMA>
		}

		for(int i=0; i<RST; i++){
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	2bdf      	cmp	r3, #223	; 0xdf
 80009d6:	dc0a      	bgt.n	80009ee <_ZN7WS2812B7executeEv+0x5c>
			pwm_buf[i]=0;
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	213c      	movs	r1, #60	; 0x3c
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	18d3      	adds	r3, r2, r3
 80009e0:	185b      	adds	r3, r3, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<RST; i++){
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3301      	adds	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
 80009ec:	e7f1      	b.n	80009d2 <_ZN7WS2812B7executeEv+0x40>
		}

		for(int i=0; i<LED_NUM; i++){
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	dc52      	bgt.n	8000a9e <_ZN7WS2812B7executeEv+0x10c>
			for(int j=0; j<3; j++){
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	dc49      	bgt.n	8000a96 <_ZN7WS2812B7executeEv+0x104>
				for(int k=7; k>=0; k--){
 8000a02:	2307      	movs	r3, #7
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db40      	blt.n	8000a8e <_ZN7WS2812B7executeEv+0xfc>
					int x=(rgb_buf[i][j]>>k)&1;
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	0013      	movs	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	189b      	adds	r3, r3, r2
 8000a16:	18ca      	adds	r2, r1, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	001a      	movs	r2, r3
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	411a      	asrs	r2, r3
 8000a26:	0013      	movs	r3, r2
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d114      	bne.n	8000a5e <_ZN7WS2812B7executeEv+0xcc>
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	0013      	movs	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	189b      	adds	r3, r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	33e0      	adds	r3, #224	; 0xe0
 8000a40:	001a      	movs	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	18d2      	adds	r2, r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	2107      	movs	r1, #7
 8000a4c:	1acb      	subs	r3, r1, r3
 8000a4e:	18d3      	adds	r3, r2, r3
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	213c      	movs	r1, #60	; 0x3c
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	185b      	adds	r3, r3, r1
 8000a58:	220a      	movs	r2, #10
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e013      	b.n	8000a86 <_ZN7WS2812B7executeEv+0xf4>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	0013      	movs	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	33e0      	adds	r3, #224	; 0xe0
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	18d2      	adds	r2, r2, r3
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	2107      	movs	r1, #7
 8000a76:	1acb      	subs	r3, r1, r3
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	213c      	movs	r1, #60	; 0x3c
 8000a7e:	18d3      	adds	r3, r2, r3
 8000a80:	185b      	adds	r3, r3, r1
 8000a82:	2205      	movs	r2, #5
 8000a84:	701a      	strb	r2, [r3, #0]
				for(int k=7; k>=0; k--){
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	e7bb      	b.n	8000a06 <_ZN7WS2812B7executeEv+0x74>
			for(int j=0; j<3; j++){
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e7b2      	b.n	80009fc <_ZN7WS2812B7executeEv+0x6a>
		for(int i=0; i<LED_NUM; i++){
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	e7a9      	b.n	80009f2 <_ZN7WS2812B7executeEv+0x60>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t*)pwm_buf, RST+(LED_NUM*24));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6858      	ldr	r0, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	333c      	adds	r3, #60	; 0x3c
 8000aac:	001a      	movs	r2, r3
 8000aae:	2398      	movs	r3, #152	; 0x98
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	f001 fbeb 	bl	800228c <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	23a7      	movs	r3, #167	; 0xa7
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	2100      	movs	r1, #0
 8000abe:	54d1      	strb	r1, [r2, r3]

	}else{

	}
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b008      	add	sp, #32
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_ZN7WS2812B4initEv>:

void WS2812B::init(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2bdf      	cmp	r3, #223	; 0xdf
 8000ad8:	dc0a      	bgt.n	8000af0 <_ZN7WS2812B4initEv+0x28>
	        pwm_buf[i]=0;
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	213c      	movs	r1, #60	; 0x3c
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	185b      	adds	r3, r3, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<RST; i++){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e7f1      	b.n	8000ad4 <_ZN7WS2812B4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8000af0:	23e0      	movs	r3, #224	; 0xe0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	23c0      	movs	r3, #192	; 0xc0
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	429a      	cmp	r2, r3
 8000afc:	da0a      	bge.n	8000b14 <_ZN7WS2812B4initEv+0x4c>
		pwm_buf[i]=LOW;
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	213c      	movs	r1, #60	; 0x3c
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	185b      	adds	r3, r3, r1
 8000b08:	2205      	movs	r2, #5
 8000b0a:	701a      	strb	r2, [r3, #0]
	for(int i=RST; i<LED_NUM*24; i++){
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	e7ef      	b.n	8000af4 <_ZN7WS2812B4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t*)pwm_buf, RST+(LED_NUM*24));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6858      	ldr	r0, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	333c      	adds	r3, #60	; 0x3c
 8000b22:	001a      	movs	r2, r3
 8000b24:	2398      	movs	r3, #152	; 0x98
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	f001 fbb0 	bl	800228c <HAL_TIM_PWM_Start_DMA>
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b004      	add	sp, #16
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b38:	f7ff fec8 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b62:	f003 f951 	bl	8003e08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b66:	f7ff fb65 	bl	8000234 <main>

08000b6a <LoopForever>:

LoopForever:
  b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	08003f50 	.word	0x08003f50
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	20000464 	.word	0x20000464

08000b84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_Init+0x3c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_Init+0x3c>)
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	0049      	lsls	r1, r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f000 f810 	bl	8000bc8 <HAL_InitTick>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fd32 	bl	800061c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_InitTick+0x88>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d02b      	beq.n	8000c38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_InitTick+0x8c>)
 8000be2:	681c      	ldr	r4, [r3, #0]
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_InitTick+0x88>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	0019      	movs	r1, r3
 8000bea:	23fa      	movs	r3, #250	; 0xfa
 8000bec:	0098      	lsls	r0, r3, #2
 8000bee:	f7ff fa87 	bl	8000100 <__udivsi3>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f7ff fa82 	bl	8000100 <__udivsi3>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f93d 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d112      	bne.n	8000c2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d80a      	bhi.n	8000c24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2301      	movs	r3, #1
 8000c12:	425b      	negs	r3, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 f90c 	bl	8000e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_InitTick+0x90>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	e00d      	b.n	8000c40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e008      	b.n	8000c40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e003      	b.n	8000c40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b005      	add	sp, #20
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	18d2      	adds	r2, r2, r3
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000460 	.word	0x20000460

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000460 	.word	0x20000460

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3301      	adds	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	189b      	adds	r3, r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	f7ff ffe0 	bl	8000c80 <HAL_GetTick>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b004      	add	sp, #16
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000008 	.word	0x20000008

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b7f      	cmp	r3, #127	; 0x7f
 8000cee:	d809      	bhi.n	8000d04 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	231f      	movs	r3, #31
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_EnableIRQ+0x30>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4091      	lsls	r1, r2
 8000d00:	000a      	movs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0002      	movs	r2, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b7f      	cmp	r3, #127	; 0x7f
 8000d24:	d828      	bhi.n	8000d78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <__NVIC_SetPriority+0xd4>)
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	33c0      	adds	r3, #192	; 0xc0
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	589b      	ldr	r3, [r3, r2]
 8000d36:	1dfa      	adds	r2, r7, #7
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	400a      	ands	r2, r1
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	21ff      	movs	r1, #255	; 0xff
 8000d44:	4091      	lsls	r1, r2
 8000d46:	000a      	movs	r2, r1
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	019b      	lsls	r3, r3, #6
 8000d52:	22ff      	movs	r2, #255	; 0xff
 8000d54:	401a      	ands	r2, r3
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	4003      	ands	r3, r0
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	481f      	ldr	r0, [pc, #124]	; (8000de4 <__NVIC_SetPriority+0xd4>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	33c0      	adds	r3, #192	; 0xc0
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d76:	e031      	b.n	8000ddc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <__NVIC_SetPriority+0xd8>)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0019      	movs	r1, r3
 8000d80:	230f      	movs	r3, #15
 8000d82:	400b      	ands	r3, r1
 8000d84:	3b08      	subs	r3, #8
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3306      	adds	r3, #6
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	3304      	adds	r3, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	001c      	movs	r4, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	4023      	ands	r3, r4
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	3306      	adds	r3, #6
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	18c3      	adds	r3, r0, r3
 8000dd8:	3304      	adds	r3, #4
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b003      	add	sp, #12
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	045b      	lsls	r3, r3, #17
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d301      	bcc.n	8000e04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e00:	2301      	movs	r3, #1
 8000e02:	e010      	b.n	8000e26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <SysTick_Config+0x44>)
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	3a01      	subs	r2, #1
 8000e0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	2103      	movs	r1, #3
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff ff7c 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x44>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x44>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	210f      	movs	r1, #15
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	1c02      	adds	r2, r0, #0
 8000e44:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	0002      	movs	r2, r0
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff33 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ffaf 	bl	8000dec <SysTick_Config>
 8000e8e:	0003      	movs	r3, r0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e077      	b.n	8000f9a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <HAL_DMA_Init+0x10c>)
 8000eb0:	4694      	mov	ip, r2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	2114      	movs	r1, #20
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff f922 	bl	8000100 <__udivsi3>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	009a      	lsls	r2, r3, #2
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2225      	movs	r2, #37	; 0x25
 8000ec8:	2102      	movs	r1, #2
 8000eca:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4934      	ldr	r1, [pc, #208]	; (8000fa8 <HAL_DMA_Init+0x110>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6819      	ldr	r1, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 fa2b 	bl	8001370 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	01db      	lsls	r3, r3, #7
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d102      	bne.n	8000f2c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	213f      	movs	r1, #63	; 0x3f
 8000f36:	400a      	ands	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d011      	beq.n	8000f70 <HAL_DMA_Init+0xd8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d80d      	bhi.n	8000f70 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fa36 	bl	80013c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	e008      	b.n	8000f82 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2225      	movs	r2, #37	; 0x25
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2224      	movs	r2, #36	; 0x24
 8000f94:	2100      	movs	r1, #0
 8000f96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	bffdfff8 	.word	0xbffdfff8
 8000fa8:	ffff800f 	.word	0xffff800f

08000fac <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fba:	2317      	movs	r3, #23
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2224      	movs	r2, #36	; 0x24
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <HAL_DMA_Start_IT+0x24>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e06f      	b.n	80010b0 <HAL_DMA_Start_IT+0x104>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2225      	movs	r2, #37	; 0x25
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d157      	bne.n	8001094 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2225      	movs	r2, #37	; 0x25
 8000fe8:	2102      	movs	r1, #2
 8000fea:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	438a      	bics	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f971 	bl	80012f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	2b00      	cmp	r3, #0
 8001014:	d008      	beq.n	8001028 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	210e      	movs	r1, #14
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e00f      	b.n	8001048 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2104      	movs	r1, #4
 8001034:	438a      	bics	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	210a      	movs	r1, #10
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	4013      	ands	r3, r2
 8001054:	d008      	beq.n	8001068 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0049      	lsls	r1, r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0049      	lsls	r1, r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	e00a      	b.n	80010aa <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2224      	movs	r2, #36	; 0x24
 800109e:	2100      	movs	r1, #0
 80010a0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80010a2:	2317      	movs	r3, #23
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80010aa:	2317      	movs	r3, #23
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b006      	add	sp, #24
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c0:	210f      	movs	r1, #15
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2225      	movs	r2, #37	; 0x25
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d006      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2204      	movs	r2, #4
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e049      	b.n	8001176 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	210e      	movs	r1, #14
 80010ee:	438a      	bics	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	438a      	bics	r2, r1
 8001100:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	491d      	ldr	r1, [pc, #116]	; (8001184 <HAL_DMA_Abort_IT+0xcc>)
 800110e:	400a      	ands	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_DMA_Abort_IT+0xd0>)
 8001114:	6859      	ldr	r1, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	221c      	movs	r2, #28
 800111c:	4013      	ands	r3, r2
 800111e:	2201      	movs	r2, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_DMA_Abort_IT+0xd0>)
 8001124:	430a      	orrs	r2, r1
 8001126:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001130:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00c      	beq.n	8001154 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001144:	490f      	ldr	r1, [pc, #60]	; (8001184 <HAL_DMA_Abort_IT+0xcc>)
 8001146:	400a      	ands	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001152:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2225      	movs	r2, #37	; 0x25
 8001158:	2101      	movs	r1, #1
 800115a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	0010      	movs	r0, r2
 8001174:	4798      	blx	r3
    }
  }
  return status;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}
 8001184:	fffffeff 	.word	0xfffffeff
 8001188:	40020000 	.word	0x40020000

0800118c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001194:	4b55      	ldr	r3, [pc, #340]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	221c      	movs	r2, #28
 80011a8:	4013      	ands	r3, r2
 80011aa:	2204      	movs	r2, #4
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	d027      	beq.n	8001206 <HAL_DMA_IRQHandler+0x7a>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2204      	movs	r2, #4
 80011ba:	4013      	ands	r3, r2
 80011bc:	d023      	beq.n	8001206 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2220      	movs	r2, #32
 80011c6:	4013      	ands	r3, r2
 80011c8:	d107      	bne.n	80011da <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2104      	movs	r1, #4
 80011d6:	438a      	bics	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80011da:	4b44      	ldr	r3, [pc, #272]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 80011dc:	6859      	ldr	r1, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	221c      	movs	r2, #28
 80011e4:	4013      	ands	r3, r2
 80011e6:	2204      	movs	r2, #4
 80011e8:	409a      	lsls	r2, r3
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 80011ec:	430a      	orrs	r2, r1
 80011ee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d100      	bne.n	80011fa <HAL_DMA_IRQHandler+0x6e>
 80011f8:	e073      	b.n	80012e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	0010      	movs	r0, r2
 8001202:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001204:	e06d      	b.n	80012e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	221c      	movs	r2, #28
 800120c:	4013      	ands	r3, r2
 800120e:	2202      	movs	r2, #2
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	d02e      	beq.n	8001278 <HAL_DMA_IRQHandler+0xec>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2202      	movs	r2, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d02a      	beq.n	8001278 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2220      	movs	r2, #32
 800122a:	4013      	ands	r3, r2
 800122c:	d10b      	bne.n	8001246 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	210a      	movs	r1, #10
 800123a:	438a      	bics	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2225      	movs	r2, #37	; 0x25
 8001242:	2101      	movs	r1, #1
 8001244:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	221c      	movs	r2, #28
 8001250:	4013      	ands	r3, r2
 8001252:	2202      	movs	r2, #2
 8001254:	409a      	lsls	r2, r3
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	2b00      	cmp	r3, #0
 800126a:	d03a      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	0010      	movs	r0, r2
 8001274:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001276:	e034      	b.n	80012e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	221c      	movs	r2, #28
 800127e:	4013      	ands	r3, r2
 8001280:	2208      	movs	r2, #8
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	d02b      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x158>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2208      	movs	r2, #8
 8001290:	4013      	ands	r3, r2
 8001292:	d027      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	210e      	movs	r1, #14
 80012a0:	438a      	bics	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	221c      	movs	r2, #28
 80012ae:	4013      	ands	r3, r2
 80012b0:	2201      	movs	r2, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_DMA_IRQHandler+0x160>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2225      	movs	r2, #37	; 0x25
 80012c4:	2101      	movs	r1, #1
 80012c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	2100      	movs	r1, #0
 80012ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	0010      	movs	r0, r2
 80012e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46c0      	nop			; (mov r8, r8)
}
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40020000 	.word	0x40020000

080012f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001306:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001318:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <DMA_SetConfig+0x7c>)
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	221c      	movs	r2, #28
 8001324:	4013      	ands	r3, r2
 8001326:	2201      	movs	r2, #1
 8001328:	409a      	lsls	r2, r3
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <DMA_SetConfig+0x7c>)
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b10      	cmp	r3, #16
 800133e:	d108      	bne.n	8001352 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001350:	e007      	b.n	8001362 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40020000 	.word	0x40020000

08001370 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001380:	4694      	mov	ip, r2
 8001382:	4463      	add	r3, ip
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	001a      	movs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	001a      	movs	r2, r3
 8001392:	23ff      	movs	r3, #255	; 0xff
 8001394:	4013      	ands	r3, r2
 8001396:	3b08      	subs	r3, #8
 8001398:	2114      	movs	r1, #20
 800139a:	0018      	movs	r0, r3
 800139c:	f7fe feb0 	bl	8000100 <__udivsi3>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80013a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	221f      	movs	r2, #31
 80013ae:	4013      	ands	r3, r2
 80013b0:	2201      	movs	r2, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b004      	add	sp, #16
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	10008200 	.word	0x10008200
 80013c4:	40020880 	.word	0x40020880

080013c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	223f      	movs	r2, #63	; 0x3f
 80013d6:	4013      	ands	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80013de:	4694      	mov	ip, r2
 80013e0:	4463      	add	r3, ip
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	001a      	movs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	4013      	ands	r3, r2
 80013f8:	2201      	movs	r2, #1
 80013fa:	409a      	lsls	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b004      	add	sp, #16
 8001406:	bd80      	pop	{r7, pc}
 8001408:	1000823f 	.word	0x1000823f
 800140c:	40020940 	.word	0x40020940

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e147      	b.n	80016b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4091      	lsls	r1, r2
 800142a:	000a      	movs	r2, r1
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d100      	bne.n	8001438 <HAL_GPIO_Init+0x28>
 8001436:	e138      	b.n	80016aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	4013      	ands	r3, r2
 8001440:	2b01      	cmp	r3, #1
 8001442:	d005      	beq.n	8001450 <HAL_GPIO_Init+0x40>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	4013      	ands	r3, r2
 800144c:	2b02      	cmp	r3, #2
 800144e:	d130      	bne.n	80014b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	409a      	lsls	r2, r3
 800145e:	0013      	movs	r3, r2
 8001460:	43da      	mvns	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	409a      	lsls	r2, r3
 8001472:	0013      	movs	r3, r2
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001486:	2201      	movs	r2, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	2201      	movs	r2, #1
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d017      	beq.n	80014ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	43da      	mvns	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d123      	bne.n	8001542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	58d3      	ldr	r3, [r2, r3]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2207      	movs	r2, #7
 800150c:	4013      	ands	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2107      	movs	r1, #7
 8001526:	400b      	ands	r3, r1
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	6939      	ldr	r1, [r7, #16]
 8001540:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	401a      	ands	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	029b      	lsls	r3, r3, #10
 800157e:	4013      	ands	r3, r2
 8001580:	d100      	bne.n	8001584 <HAL_GPIO_Init+0x174>
 8001582:	e092      	b.n	80016aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001584:	4a50      	ldr	r2, [pc, #320]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3318      	adds	r3, #24
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	589b      	ldr	r3, [r3, r2]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2203      	movs	r2, #3
 8001596:	4013      	ands	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	220f      	movs	r2, #15
 800159c:	409a      	lsls	r2, r3
 800159e:	0013      	movs	r3, r2
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	23a0      	movs	r3, #160	; 0xa0
 80015ac:	05db      	lsls	r3, r3, #23
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x1ca>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_GPIO_Init+0x2bc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x1c6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <HAL_GPIO_Init+0x2c0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x1c2>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <HAL_GPIO_Init+0x2c4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x1be>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x1cc>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x1cc>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x1cc>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x1cc>
 80015da:	2300      	movs	r3, #0
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	2103      	movs	r1, #3
 80015e0:	400a      	ands	r2, r1
 80015e2:	00d2      	lsls	r2, r2, #3
 80015e4:	4093      	lsls	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015ec:	4936      	ldr	r1, [pc, #216]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3318      	adds	r3, #24
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43da      	mvns	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	035b      	lsls	r3, r3, #13
 8001612:	4013      	ands	r3, r2
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	039b      	lsls	r3, r3, #14
 800163c:	4013      	ands	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001650:	2384      	movs	r3, #132	; 0x84
 8001652:	58d3      	ldr	r3, [r2, r3]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	029b      	lsls	r3, r3, #10
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001674:	4914      	ldr	r1, [pc, #80]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 8001676:	2284      	movs	r2, #132	; 0x84
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	58d3      	ldr	r3, [r2, r3]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a2:	4909      	ldr	r1, [pc, #36]	; (80016c8 <HAL_GPIO_Init+0x2b8>)
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	40da      	lsrs	r2, r3
 80016b8:	1e13      	subs	r3, r2, #0
 80016ba:	d000      	beq.n	80016be <HAL_GPIO_Init+0x2ae>
 80016bc:	e6b0      	b.n	8001420 <HAL_GPIO_Init+0x10>
  }
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b006      	add	sp, #24
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021800 	.word	0x40021800
 80016cc:	50000400 	.word	0x50000400
 80016d0:	50000800 	.word	0x50000800
 80016d4:	50000c00 	.word	0x50000c00

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	0008      	movs	r0, r1
 80016e2:	0011      	movs	r1, r2
 80016e4:	1cbb      	adds	r3, r7, #2
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	1c7b      	adds	r3, r7, #1
 80016ec:	1c0a      	adds	r2, r1, #0
 80016ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f0:	1c7b      	adds	r3, r7, #1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f8:	1cbb      	adds	r3, r7, #2
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001702:	1cbb      	adds	r3, r7, #2
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001722:	4013      	ands	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d11f      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	0013      	movs	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	189b      	adds	r3, r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001746:	0018      	movs	r0, r3
 8001748:	f7fe fcda 	bl	8000100 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001752:	e008      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3b01      	subs	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e001      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e009      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	401a      	ands	r2, r3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	429a      	cmp	r2, r3
 8001776:	d0ed      	beq.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	40007000 	.word	0x40007000
 8001788:	fffff9ff 	.word	0xfffff9ff
 800178c:	20000000 	.word	0x20000000
 8001790:	000f4240 	.word	0x000f4240

08001794 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	23e0      	movs	r3, #224	; 0xe0
 800179e:	01db      	lsls	r3, r3, #7
 80017a0:	4013      	ands	r3, r2
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e2f3      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d100      	bne.n	80017ca <HAL_RCC_OscConfig+0x1e>
 80017c8:	e07c      	b.n	80018c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ca:	4bc3      	ldr	r3, [pc, #780]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2238      	movs	r2, #56	; 0x38
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d4:	4bc0      	ldr	r3, [pc, #768]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2203      	movs	r2, #3
 80017da:	4013      	ands	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x3e>
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d002      	beq.n	80017f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4bb9      	ldr	r3, [pc, #740]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	4013      	ands	r3, r2
 80017fa:	d062      	beq.n	80018c2 <HAL_RCC_OscConfig+0x116>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d15e      	bne.n	80018c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e2ce      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x78>
 8001814:	4bb0      	ldr	r3, [pc, #704]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4baf      	ldr	r3, [pc, #700]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0249      	lsls	r1, r1, #9
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e020      	b.n	8001866 <HAL_RCC_OscConfig+0xba>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	23a0      	movs	r3, #160	; 0xa0
 800182a:	02db      	lsls	r3, r3, #11
 800182c:	429a      	cmp	r2, r3
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0xa2>
 8001830:	4ba9      	ldr	r3, [pc, #676]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	02c9      	lsls	r1, r1, #11
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	4ba6      	ldr	r3, [pc, #664]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4ba5      	ldr	r3, [pc, #660]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0249      	lsls	r1, r1, #9
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e00b      	b.n	8001866 <HAL_RCC_OscConfig+0xba>
 800184e:	4ba2      	ldr	r3, [pc, #648]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4ba1      	ldr	r3, [pc, #644]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001854:	49a1      	ldr	r1, [pc, #644]	; (8001adc <HAL_RCC_OscConfig+0x330>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	4b9f      	ldr	r3, [pc, #636]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001860:	499f      	ldr	r1, [pc, #636]	; (8001ae0 <HAL_RCC_OscConfig+0x334>)
 8001862:	400a      	ands	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d014      	beq.n	8001898 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff fa07 	bl	8000c80 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fa02 	bl	8000c80 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e28d      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b93      	ldr	r3, [pc, #588]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	4013      	ands	r3, r2
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xcc>
 8001896:	e015      	b.n	80018c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f9f2 	bl	8000c80 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a2:	f7ff f9ed 	bl	8000c80 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e278      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b4:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0xf6>
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d100      	bne.n	80018d0 <HAL_RCC_OscConfig+0x124>
 80018ce:	e099      	b.n	8001a04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d0:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2238      	movs	r2, #56	; 0x38
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2203      	movs	r2, #3
 80018e0:	4013      	ands	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0x144>
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d002      	beq.n	80018f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d135      	bne.n	8001962 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f6:	4b78      	ldr	r3, [pc, #480]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x162>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e24b      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	4b72      	ldr	r3, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a74      	ldr	r2, [pc, #464]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	021a      	lsls	r2, r3, #8
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d112      	bne.n	8001950 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800192a:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x33c>)
 8001930:	4013      	ands	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800193e:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0adb      	lsrs	r3, r3, #11
 8001944:	2207      	movs	r2, #7
 8001946:	4013      	ands	r3, r2
 8001948:	4a68      	ldr	r2, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x340>)
 800194a:	40da      	lsrs	r2, r3
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <HAL_RCC_OscConfig+0x344>)
 800194e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_OscConfig+0x348>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0018      	movs	r0, r3
 8001956:	f7ff f937 	bl	8000bc8 <HAL_InitTick>
 800195a:	1e03      	subs	r3, r0, #0
 800195c:	d051      	beq.n	8001a02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e221      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d030      	beq.n	80019cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5e      	ldr	r2, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x33c>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800197e:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0049      	lsls	r1, r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f978 	bl	8000c80 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff f973 	bl	8000c80 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1fe      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_RCC_OscConfig+0x338>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	4949      	ldr	r1, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x34c>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f952 	bl	8000c80 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f94d 	bl	8000c80 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1d8      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x236>
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d047      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b18      	cmp	r3, #24
 8001a18:	d10a      	bne.n	8001a30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d03c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d138      	bne.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e1ba      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d019      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff f91c 	bl	8000c80 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f917 	bl	8000c80 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1a2      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0f1      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2a2>
 8001a6a:	e018      	b.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	438a      	bics	r2, r1
 8001a76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f902 	bl	8000c80 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff f8fd 	bl	8000c80 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e188      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d1f1      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2fe>
 8001aa8:	e0c6      	b.n	8001c38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	231f      	movs	r3, #31
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2238      	movs	r2, #56	; 0x38
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d11e      	bne.n	8001afc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x31e>
 8001ac8:	e0b6      	b.n	8001c38 <HAL_RCC_OscConfig+0x48c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d000      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x328>
 8001ad2:	e0b1      	b.n	8001c38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e166      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	fffeffff 	.word	0xfffeffff
 8001ae0:	fffbffff 	.word	0xfffbffff
 8001ae4:	ffff80ff 	.word	0xffff80ff
 8001ae8:	ffffc7ff 	.word	0xffffc7ff
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004
 8001af8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001afc:	4bac      	ldr	r3, [pc, #688]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	055b      	lsls	r3, r3, #21
 8001b04:	4013      	ands	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_OscConfig+0x360>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x362>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d011      	beq.n	8001b36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4ba7      	ldr	r3, [pc, #668]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b16:	4ba6      	ldr	r3, [pc, #664]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0549      	lsls	r1, r1, #21
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b20:	4ba3      	ldr	r3, [pc, #652]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b2e:	231f      	movs	r3, #31
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b36:	4b9f      	ldr	r3, [pc, #636]	; (8001db4 <HAL_RCC_OscConfig+0x608>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d11a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b42:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <HAL_RCC_OscConfig+0x608>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <HAL_RCC_OscConfig+0x608>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0049      	lsls	r1, r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f896 	bl	8000c80 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff f891 	bl	8000c80 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e11c      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCC_OscConfig+0x608>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3e2>
 8001b80:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b84:	4b8a      	ldr	r3, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b8c:	e01c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x41c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x404>
 8001b96:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9a:	4b85      	ldr	r3, [pc, #532]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ba2:	4b83      	ldr	r3, [pc, #524]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0x41c>
 8001bb0:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001bb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb4:	4b7e      	ldr	r3, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	438a      	bics	r2, r1
 8001bba:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bbc:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc0:	4b7b      	ldr	r3, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d014      	beq.n	8001bfa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f856 	bl	8000c80 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f851 	bl	8000c80 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a74      	ldr	r2, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x60c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0db      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bee:	4b70      	ldr	r3, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x42e>
 8001bf8:	e013      	b.n	8001c22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f841 	bl	8000c80 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c02:	e009      	b.n	8001c18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f7ff f83c 	bl	8000c80 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	4a6a      	ldr	r2, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x60c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0c6      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c18:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c22:	231f      	movs	r3, #31
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c2c:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c30:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c32:	4962      	ldr	r1, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x610>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d100      	bne.n	8001c42 <HAL_RCC_OscConfig+0x496>
 8001c40:	e0b0      	b.n	8001da4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c42:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2238      	movs	r2, #56	; 0x38
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d100      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4a4>
 8001c4e:	e078      	b.n	8001d42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d153      	bne.n	8001d00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b54      	ldr	r3, [pc, #336]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c5e:	4958      	ldr	r1, [pc, #352]	; (8001dc0 <HAL_RCC_OscConfig+0x614>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f80c 	bl	8000c80 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff f807 	bl	8000c80 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e092      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	049b      	lsls	r3, r3, #18
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8c:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a4c      	ldr	r2, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x618>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0449      	lsls	r1, r1, #17
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cc8:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	0549      	lsls	r1, r1, #21
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd6:	f7fe ffd3 	bl	8000c80 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7fe ffce 	bl	8000c80 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e059      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	049b      	lsls	r3, r3, #18
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x534>
 8001cfe:	e051      	b.n	8001da4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001d06:	492e      	ldr	r1, [pc, #184]	; (8001dc0 <HAL_RCC_OscConfig+0x614>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe ffb8 	bl	8000c80 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ffb3 	bl	8000c80 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e03e      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	049b      	lsls	r3, r3, #18
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001d3a:	4923      	ldr	r1, [pc, #140]	; (8001dc8 <HAL_RCC_OscConfig+0x61c>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	e030      	b.n	8001da4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e02b      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_OscConfig+0x604>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2203      	movs	r2, #3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11e      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2270      	movs	r2, #112	; 0x70
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d117      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	23fe      	movs	r3, #254	; 0xfe
 8001d74:	01db      	lsls	r3, r3, #7
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d10e      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	23f8      	movs	r3, #248	; 0xf8
 8001d86:	039b      	lsls	r3, r3, #14
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	0f5b      	lsrs	r3, r3, #29
 8001d96:	075a      	lsls	r2, r3, #29
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b008      	add	sp, #32
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
 8001db8:	00001388 	.word	0x00001388
 8001dbc:	efffffff 	.word	0xefffffff
 8001dc0:	feffffff 	.word	0xfeffffff
 8001dc4:	1fc1808c 	.word	0x1fc1808c
 8001dc8:	effefffc 	.word	0xeffefffc

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0e9      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2207      	movs	r2, #7
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d91e      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2207      	movs	r2, #7
 8001df4:	4393      	bics	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e00:	f7fe ff3e 	bl	8000c80 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0a:	f7fe ff39 	bl	8000c80 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0ca      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2207      	movs	r2, #7
 8001e24:	4013      	ands	r3, r2
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2202      	movs	r2, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d006      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e40:	4b60      	ldr	r3, [pc, #384]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e46:	21e0      	movs	r1, #224	; 0xe0
 8001e48:	01c9      	lsls	r1, r1, #7
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4a5d      	ldr	r2, [pc, #372]	; (8001fc8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d057      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d12b      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e097      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	049b      	lsls	r3, r3, #18
 8001e94:	4013      	ands	r3, r2
 8001e96:	d11f      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e08b      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4013      	ands	r3, r2
 8001eae:	d113      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e07f      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e074      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e06d      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ed8:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2207      	movs	r2, #7
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eec:	f7fe fec8 	bl	8000c80 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef4:	e009      	b.n	8001f0a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef6:	f7fe fec3 	bl	8000c80 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e054      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	401a      	ands	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1ec      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2207      	movs	r2, #7
 8001f22:	4013      	ands	r3, r2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d21e      	bcs.n	8001f68 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2207      	movs	r2, #7
 8001f30:	4393      	bics	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fea0 	bl	8000c80 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f46:	f7fe fe9b 	bl	8000c80 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e02c      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4013      	ands	r3, r2
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_RCC_ClockConfig+0x200>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f86:	f000 f829 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f8a:	0001      	movs	r1, r0
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	220f      	movs	r2, #15
 8001f94:	401a      	ands	r2, r3
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x204>)
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	58d3      	ldr	r3, [r2, r3]
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	40da      	lsrs	r2, r3
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x208>)
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x20c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7fe fe0b 	bl	8000bc8 <HAL_InitTick>
 8001fb2:	0003      	movs	r3, r0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b004      	add	sp, #16
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	00001388 	.word	0x00001388
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	fffff0ff 	.word	0xfffff0ff
 8001fcc:	ffff8fff 	.word	0xffff8fff
 8001fd0:	08003e78 	.word	0x08003e78
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2238      	movs	r2, #56	; 0x38
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d10f      	bne.n	800200c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0adb      	lsrs	r3, r3, #11
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	0013      	movs	r3, r2
 8001ffc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	4835      	ldr	r0, [pc, #212]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002002:	f7fe f87d 	bl	8000100 <__udivsi3>
 8002006:	0003      	movs	r3, r0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e05d      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2238      	movs	r2, #56	; 0x38
 8002012:	4013      	ands	r3, r2
 8002014:	2b08      	cmp	r3, #8
 8002016:	d102      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e054      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201e:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2238      	movs	r2, #56	; 0x38
 8002024:	4013      	ands	r3, r2
 8002026:	2b10      	cmp	r3, #16
 8002028:	d138      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800202a:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2203      	movs	r2, #3
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	2207      	movs	r2, #7
 800203c:	4013      	ands	r3, r2
 800203e:	3301      	adds	r3, #1
 8002040:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d10d      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	4823      	ldr	r0, [pc, #140]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800204c:	f7fe f858 	bl	8000100 <__udivsi3>
 8002050:	0003      	movs	r3, r0
 8002052:	0019      	movs	r1, r3
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	227f      	movs	r2, #127	; 0x7f
 800205c:	4013      	ands	r3, r2
 800205e:	434b      	muls	r3, r1
 8002060:	617b      	str	r3, [r7, #20]
        break;
 8002062:	e00d      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002068:	f7fe f84a 	bl	8000100 <__udivsi3>
 800206c:	0003      	movs	r3, r0
 800206e:	0019      	movs	r1, r3
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	227f      	movs	r2, #127	; 0x7f
 8002078:	4013      	ands	r3, r2
 800207a:	434b      	muls	r3, r1
 800207c:	617b      	str	r3, [r7, #20]
        break;
 800207e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0f5b      	lsrs	r3, r3, #29
 8002086:	2207      	movs	r2, #7
 8002088:	4013      	ands	r3, r2
 800208a:	3301      	adds	r3, #1
 800208c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	6978      	ldr	r0, [r7, #20]
 8002092:	f7fe f835 	bl	8000100 <__udivsi3>
 8002096:	0003      	movs	r3, r0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e015      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2238      	movs	r2, #56	; 0x38
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d103      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2238      	movs	r2, #56	; 0x38
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b18      	cmp	r3, #24
 80020ba:	d103      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020bc:	23fa      	movs	r3, #250	; 0xfa
 80020be:	01db      	lsls	r3, r3, #7
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e001      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020c8:	693b      	ldr	r3, [r7, #16]
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b006      	add	sp, #24
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40021000 	.word	0x40021000
 80020d8:	00f42400 	.word	0x00f42400

080020dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <HAL_RCC_GetHCLKFreq+0x10>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020f4:	f7ff fff2 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020f8:	0004      	movs	r4, r0
 80020fa:	f7ff fb4b 	bl	8001794 <LL_RCC_GetAPB1Prescaler>
 80020fe:	0003      	movs	r3, r0
 8002100:	0b1a      	lsrs	r2, r3, #12
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	58d3      	ldr	r3, [r2, r3]
 8002108:	221f      	movs	r2, #31
 800210a:	4013      	ands	r3, r2
 800210c:	40dc      	lsrs	r4, r3
 800210e:	0023      	movs	r3, r4
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	08003eb8 	.word	0x08003eb8

0800211c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e04a      	b.n	80021c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	223d      	movs	r2, #61	; 0x3d
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	223c      	movs	r2, #60	; 0x3c
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fa8d 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	223d      	movs	r2, #61	; 0x3d
 800214e:	2102      	movs	r1, #2
 8002150:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	0019      	movs	r1, r3
 800215c:	0010      	movs	r0, r2
 800215e:	f000 fe27 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2248      	movs	r2, #72	; 0x48
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223e      	movs	r2, #62	; 0x3e
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	223f      	movs	r2, #63	; 0x3f
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2241      	movs	r2, #65	; 0x41
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2242      	movs	r2, #66	; 0x42
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2243      	movs	r2, #67	; 0x43
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2244      	movs	r2, #68	; 0x44
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2245      	movs	r2, #69	; 0x45
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2246      	movs	r2, #70	; 0x46
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2247      	movs	r2, #71	; 0x47
 80021b6:	2101      	movs	r1, #1
 80021b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	223d      	movs	r2, #61	; 0x3d
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e04a      	b.n	8002274 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	223d      	movs	r2, #61	; 0x3d
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	223c      	movs	r2, #60	; 0x3c
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f841 	bl	800227c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	223d      	movs	r2, #61	; 0x3d
 80021fe:	2102      	movs	r1, #2
 8002200:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	0019      	movs	r1, r3
 800220c:	0010      	movs	r0, r2
 800220e:	f000 fdcf 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2248      	movs	r2, #72	; 0x48
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223e      	movs	r2, #62	; 0x3e
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	223f      	movs	r2, #63	; 0x3f
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2241      	movs	r2, #65	; 0x41
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2242      	movs	r2, #66	; 0x42
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2243      	movs	r2, #67	; 0x43
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2244      	movs	r2, #68	; 0x44
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2245      	movs	r2, #69	; 0x45
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2246      	movs	r2, #70	; 0x46
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2247      	movs	r2, #71	; 0x47
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223d      	movs	r2, #61	; 0x3d
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	001a      	movs	r2, r3
 800229a:	1cbb      	adds	r3, r7, #2
 800229c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229e:	2317      	movs	r3, #23
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <HAL_TIM_PWM_Start_DMA+0x32>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	223e      	movs	r2, #62	; 0x3e
 80022b0:	5c9b      	ldrb	r3, [r3, r2]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3b02      	subs	r3, #2
 80022b6:	425a      	negs	r2, r3
 80022b8:	4153      	adcs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e037      	b.n	800232e <HAL_TIM_PWM_Start_DMA+0xa2>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d108      	bne.n	80022d6 <HAL_TIM_PWM_Start_DMA+0x4a>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	223f      	movs	r2, #63	; 0x3f
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3b02      	subs	r3, #2
 80022ce:	425a      	negs	r2, r3
 80022d0:	4153      	adcs	r3, r2
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	e02b      	b.n	800232e <HAL_TIM_PWM_Start_DMA+0xa2>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d108      	bne.n	80022ee <HAL_TIM_PWM_Start_DMA+0x62>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	5c9b      	ldrb	r3, [r3, r2]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3b02      	subs	r3, #2
 80022e6:	425a      	negs	r2, r3
 80022e8:	4153      	adcs	r3, r2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	e01f      	b.n	800232e <HAL_TIM_PWM_Start_DMA+0xa2>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	d108      	bne.n	8002306 <HAL_TIM_PWM_Start_DMA+0x7a>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2241      	movs	r2, #65	; 0x41
 80022f8:	5c9b      	ldrb	r3, [r3, r2]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3b02      	subs	r3, #2
 80022fe:	425a      	negs	r2, r3
 8002300:	4153      	adcs	r3, r2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e013      	b.n	800232e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b10      	cmp	r3, #16
 800230a:	d108      	bne.n	800231e <HAL_TIM_PWM_Start_DMA+0x92>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2242      	movs	r2, #66	; 0x42
 8002310:	5c9b      	ldrb	r3, [r3, r2]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3b02      	subs	r3, #2
 8002316:	425a      	negs	r2, r3
 8002318:	4153      	adcs	r3, r2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	e007      	b.n	800232e <HAL_TIM_PWM_Start_DMA+0xa2>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2243      	movs	r2, #67	; 0x43
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3b02      	subs	r3, #2
 8002328:	425a      	negs	r2, r3
 800232a:	4153      	adcs	r3, r2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e183      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <HAL_TIM_PWM_Start_DMA+0xc2>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	223e      	movs	r2, #62	; 0x3e
 8002340:	5c9b      	ldrb	r3, [r3, r2]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	425a      	negs	r2, r3
 8002348:	4153      	adcs	r3, r2
 800234a:	b2db      	uxtb	r3, r3
 800234c:	e037      	b.n	80023be <HAL_TIM_PWM_Start_DMA+0x132>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d108      	bne.n	8002366 <HAL_TIM_PWM_Start_DMA+0xda>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	223f      	movs	r2, #63	; 0x3f
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	425a      	negs	r2, r3
 8002360:	4153      	adcs	r3, r2
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e02b      	b.n	80023be <HAL_TIM_PWM_Start_DMA+0x132>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d108      	bne.n	800237e <HAL_TIM_PWM_Start_DMA+0xf2>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	425a      	negs	r2, r3
 8002378:	4153      	adcs	r3, r2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e01f      	b.n	80023be <HAL_TIM_PWM_Start_DMA+0x132>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d108      	bne.n	8002396 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2241      	movs	r2, #65	; 0x41
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	425a      	negs	r2, r3
 8002390:	4153      	adcs	r3, r2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e013      	b.n	80023be <HAL_TIM_PWM_Start_DMA+0x132>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b10      	cmp	r3, #16
 800239a:	d108      	bne.n	80023ae <HAL_TIM_PWM_Start_DMA+0x122>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2242      	movs	r2, #66	; 0x42
 80023a0:	5c9b      	ldrb	r3, [r3, r2]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	425a      	negs	r2, r3
 80023a8:	4153      	adcs	r3, r2
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	e007      	b.n	80023be <HAL_TIM_PWM_Start_DMA+0x132>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2243      	movs	r2, #67	; 0x43
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	425a      	negs	r2, r3
 80023ba:	4153      	adcs	r3, r2
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d035      	beq.n	800242e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_TIM_PWM_Start_DMA+0x144>
 80023c8:	1cbb      	adds	r3, r7, #2
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e134      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_TIM_PWM_Start_DMA+0x158>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	223e      	movs	r2, #62	; 0x3e
 80023de:	2102      	movs	r1, #2
 80023e0:	5499      	strb	r1, [r3, r2]
 80023e2:	e026      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d104      	bne.n	80023f4 <HAL_TIM_PWM_Start_DMA+0x168>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	223f      	movs	r2, #63	; 0x3f
 80023ee:	2102      	movs	r1, #2
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	e01e      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d104      	bne.n	8002404 <HAL_TIM_PWM_Start_DMA+0x178>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2102      	movs	r1, #2
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	e016      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d104      	bne.n	8002414 <HAL_TIM_PWM_Start_DMA+0x188>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2241      	movs	r2, #65	; 0x41
 800240e:	2102      	movs	r1, #2
 8002410:	5499      	strb	r1, [r3, r2]
 8002412:	e00e      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d104      	bne.n	8002424 <HAL_TIM_PWM_Start_DMA+0x198>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2242      	movs	r2, #66	; 0x42
 800241e:	2102      	movs	r1, #2
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	e006      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2243      	movs	r2, #67	; 0x43
 8002428:	2102      	movs	r1, #2
 800242a:	5499      	strb	r1, [r3, r2]
 800242c:	e001      	b.n	8002432 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e105      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	d100      	bne.n	800243a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002438:	e080      	b.n	800253c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b0c      	cmp	r3, #12
 800243e:	d900      	bls.n	8002442 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002440:	e0a1      	b.n	8002586 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d054      	beq.n	80024f2 <HAL_TIM_PWM_Start_DMA+0x266>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b08      	cmp	r3, #8
 800244c:	d900      	bls.n	8002450 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800244e:	e09a      	b.n	8002586 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d025      	beq.n	80024a8 <HAL_TIM_PWM_Start_DMA+0x21c>
 800245c:	e093      	b.n	8002586 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	4a79      	ldr	r2, [pc, #484]	; (8002648 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	4a78      	ldr	r2, [pc, #480]	; (800264c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800246c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002474:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3334      	adds	r3, #52	; 0x34
 8002482:	001a      	movs	r2, r3
 8002484:	1cbb      	adds	r3, r7, #2
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	f7fe fd90 	bl	8000fac <HAL_DMA_Start_IT>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d001      	beq.n	8002494 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0d4      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0089      	lsls	r1, r1, #2
 80024a2:	430a      	orrs	r2, r1
 80024a4:	60da      	str	r2, [r3, #12]
      break;
 80024a6:	e073      	b.n	8002590 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	4a64      	ldr	r2, [pc, #400]	; (8002650 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3338      	adds	r3, #56	; 0x38
 80024cc:	001a      	movs	r2, r3
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f7fe fd6b 	bl	8000fac <HAL_DMA_Start_IT>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d001      	beq.n	80024de <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0af      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	00c9      	lsls	r1, r1, #3
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
      break;
 80024f0:	e04e      	b.n	8002590 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	4a54      	ldr	r2, [pc, #336]	; (8002648 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	4a53      	ldr	r2, [pc, #332]	; (800264c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002500:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	333c      	adds	r3, #60	; 0x3c
 8002516:	001a      	movs	r2, r3
 8002518:	1cbb      	adds	r3, r7, #2
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f7fe fd46 	bl	8000fac <HAL_DMA_Start_IT>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e08a      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	0109      	lsls	r1, r1, #4
 8002536:	430a      	orrs	r2, r1
 8002538:	60da      	str	r2, [r3, #12]
      break;
 800253a:	e029      	b.n	8002590 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a41      	ldr	r2, [pc, #260]	; (8002648 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4a40      	ldr	r2, [pc, #256]	; (800264c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800254a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4a3f      	ldr	r2, [pc, #252]	; (8002650 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3340      	adds	r3, #64	; 0x40
 8002560:	001a      	movs	r2, r3
 8002562:	1cbb      	adds	r3, r7, #2
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f7fe fd21 	bl	8000fac <HAL_DMA_Start_IT>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d001      	beq.n	8002572 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e065      	b.n	800263e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0149      	lsls	r1, r1, #5
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]
      break;
 8002584:	e004      	b.n	8002590 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002586:	2317      	movs	r3, #23
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
      break;
 800258e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002590:	2317      	movs	r3, #23
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d14e      	bne.n	8002638 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	2201      	movs	r2, #1
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 ffb6 	bl	8003514 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a28      	ldr	r2, [pc, #160]	; (8002658 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_Start_DMA+0x33e>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_TIM_PWM_Start_DMA+0x340>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0209      	lsls	r1, r1, #8
 80025de:	430a      	orrs	r2, r1
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d116      	bne.n	8002624 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d016      	beq.n	8002636 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	429a      	cmp	r2, r3
 8002610:	d011      	beq.n	8002636 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	e008      	b.n	8002636 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e000      	b.n	8002638 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002636:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002638:	2317      	movs	r3, #23
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b006      	add	sp, #24
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	08002c9d 	.word	0x08002c9d
 800264c:	08002d47 	.word	0x08002d47
 8002650:	08002c09 	.word	0x08002c09
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40014400 	.word	0x40014400
 800265c:	40014800 	.word	0x40014800
 8002660:	40000400 	.word	0x40000400
 8002664:	00010007 	.word	0x00010007

08002668 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	230f      	movs	r3, #15
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d039      	beq.n	80026f4 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d844      	bhi.n	8002710 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d025      	beq.n	80026d8 <HAL_TIM_PWM_Stop_DMA+0x70>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b08      	cmp	r3, #8
 8002690:	d83e      	bhi.n	8002710 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00e      	beq.n	80026bc <HAL_TIM_PWM_Stop_DMA+0x54>
 800269e:	e037      	b.n	8002710 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	495a      	ldr	r1, [pc, #360]	; (8002814 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7fe fcff 	bl	80010b8 <HAL_DMA_Abort_IT>
      break;
 80026ba:	e02e      	b.n	800271a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4954      	ldr	r1, [pc, #336]	; (8002818 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe fcf1 	bl	80010b8 <HAL_DMA_Abort_IT>
      break;
 80026d6:	e020      	b.n	800271a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	494e      	ldr	r1, [pc, #312]	; (800281c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80026e4:	400a      	ands	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe fce3 	bl	80010b8 <HAL_DMA_Abort_IT>
      break;
 80026f2:	e012      	b.n	800271a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4948      	ldr	r1, [pc, #288]	; (8002820 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002700:	400a      	ands	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	0018      	movs	r0, r3
 800270a:	f7fe fcd5 	bl	80010b8 <HAL_DMA_Abort_IT>
      break;
 800270e:	e004      	b.n	800271a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
      break;
 8002718:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800271a:	230f      	movs	r3, #15
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d000      	beq.n	8002726 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002724:	e06e      	b.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	0018      	movs	r0, r3
 8002730:	f000 fef0 	bl	8003514 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_TIM_PWM_Stop_DMA+0xea>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a37      	ldr	r2, [pc, #220]	; (800282c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4a33      	ldr	r2, [pc, #204]	; (8002830 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002764:	4013      	ands	r3, r2
 8002766:	d10d      	bne.n	8002784 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a31      	ldr	r2, [pc, #196]	; (8002834 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002770:	4013      	ands	r3, r2
 8002772:	d107      	bne.n	8002784 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	492e      	ldr	r1, [pc, #184]	; (8002838 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002780:	400a      	ands	r2, r1
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800278c:	4013      	ands	r3, r2
 800278e:	d10d      	bne.n	80027ac <HAL_TIM_PWM_Stop_DMA+0x144>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002798:	4013      	ands	r3, r2
 800279a:	d107      	bne.n	80027ac <HAL_TIM_PWM_Stop_DMA+0x144>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_TIM_PWM_Stop_DMA+0x154>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	223e      	movs	r2, #62	; 0x3e
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	e023      	b.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d104      	bne.n	80027cc <HAL_TIM_PWM_Stop_DMA+0x164>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	e01b      	b.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d104      	bne.n	80027dc <HAL_TIM_PWM_Stop_DMA+0x174>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2240      	movs	r2, #64	; 0x40
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	e013      	b.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d104      	bne.n	80027ec <HAL_TIM_PWM_Stop_DMA+0x184>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2241      	movs	r2, #65	; 0x41
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
 80027ea:	e00b      	b.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d104      	bne.n	80027fc <HAL_TIM_PWM_Stop_DMA+0x194>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2242      	movs	r2, #66	; 0x42
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	e003      	b.n	8002804 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2243      	movs	r2, #67	; 0x43
 8002800:	2101      	movs	r1, #1
 8002802:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002804:	230f      	movs	r3, #15
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	fffffdff 	.word	0xfffffdff
 8002818:	fffffbff 	.word	0xfffffbff
 800281c:	fffff7ff 	.word	0xfffff7ff
 8002820:	ffffefff 	.word	0xffffefff
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40014400 	.word	0x40014400
 800282c:	40014800 	.word	0x40014800
 8002830:	00001111 	.word	0x00001111
 8002834:	00000444 	.word	0x00000444
 8002838:	ffff7fff 	.word	0xffff7fff

0800283c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2317      	movs	r3, #23
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	223c      	movs	r2, #60	; 0x3c
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_TIM_PWM_ConfigChannel+0x22>
 800285a:	2302      	movs	r3, #2
 800285c:	e0e5      	b.n	8002a2a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	223c      	movs	r2, #60	; 0x3c
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b14      	cmp	r3, #20
 800286a:	d900      	bls.n	800286e <HAL_TIM_PWM_ConfigChannel+0x32>
 800286c:	e0d1      	b.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	009a      	lsls	r2, r3, #2
 8002872:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002874:	18d3      	adds	r3, r2, r3
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fb0e 	bl	8002ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2108      	movs	r1, #8
 8002894:	430a      	orrs	r2, r1
 8002896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2104      	movs	r1, #4
 80028a4:	438a      	bics	r2, r1
 80028a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6999      	ldr	r1, [r3, #24]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	619a      	str	r2, [r3, #24]
      break;
 80028ba:	e0af      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 fb6d 	bl	8002fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0109      	lsls	r1, r1, #4
 80028d8:	430a      	orrs	r2, r1
 80028da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4954      	ldr	r1, [pc, #336]	; (8002a38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6999      	ldr	r1, [r3, #24]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	021a      	lsls	r2, r3, #8
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	619a      	str	r2, [r3, #24]
      break;
 8002900:	e08c      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fbc8 	bl	80030a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2108      	movs	r1, #8
 800291c:	430a      	orrs	r2, r1
 800291e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2104      	movs	r1, #4
 800292c:	438a      	bics	r2, r1
 800292e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69d9      	ldr	r1, [r3, #28]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	61da      	str	r2, [r3, #28]
      break;
 8002942:	e06b      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	0011      	movs	r1, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f000 fc29 	bl	80031a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0109      	lsls	r1, r1, #4
 8002960:	430a      	orrs	r2, r1
 8002962:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4932      	ldr	r1, [pc, #200]	; (8002a38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002970:	400a      	ands	r2, r1
 8002972:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69d9      	ldr	r1, [r3, #28]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
      break;
 8002988:	e048      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	0011      	movs	r1, r2
 8002992:	0018      	movs	r0, r3
 8002994:	f000 fc6a 	bl	800326c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2108      	movs	r1, #8
 80029a4:	430a      	orrs	r2, r1
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2104      	movs	r1, #4
 80029b4:	438a      	bics	r2, r1
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029ca:	e027      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	0011      	movs	r1, r2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 fca3 	bl	8003320 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	0109      	lsls	r1, r1, #4
 80029e8:	430a      	orrs	r2, r1
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4910      	ldr	r1, [pc, #64]	; (8002a38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	021a      	lsls	r2, r3, #8
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a10:	e004      	b.n	8002a1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
      break;
 8002a1a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	223c      	movs	r2, #60	; 0x3c
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

  return status;
 8002a24:	2317      	movs	r3, #23
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b006      	add	sp, #24
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	08003ed8 	.word	0x08003ed8
 8002a38:	fffffbff 	.word	0xfffffbff

08002a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	230f      	movs	r3, #15
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	223c      	movs	r2, #60	; 0x3c
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_TIM_ConfigClockSource+0x20>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0bc      	b.n	8002bd6 <HAL_TIM_ConfigClockSource+0x19a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	223c      	movs	r2, #60	; 0x3c
 8002a60:	2101      	movs	r1, #1
 8002a62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	223d      	movs	r2, #61	; 0x3d
 8002a68:	2102      	movs	r1, #2
 8002a6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4a5a      	ldr	r2, [pc, #360]	; (8002be0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4a59      	ldr	r2, [pc, #356]	; (8002be4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0192      	lsls	r2, r2, #6
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0xde>
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	0192      	lsls	r2, r2, #6
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d900      	bls.n	8002aa2 <HAL_TIM_ConfigClockSource+0x66>
 8002aa0:	e088      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	0152      	lsls	r2, r2, #5
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d100      	bne.n	8002aac <HAL_TIM_ConfigClockSource+0x70>
 8002aaa:	e088      	b.n	8002bbe <HAL_TIM_ConfigClockSource+0x182>
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	0152      	lsls	r2, r2, #5
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d900      	bls.n	8002ab6 <HAL_TIM_ConfigClockSource+0x7a>
 8002ab4:	e07e      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ab6:	2b70      	cmp	r3, #112	; 0x70
 8002ab8:	d018      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0xb0>
 8002aba:	d900      	bls.n	8002abe <HAL_TIM_ConfigClockSource+0x82>
 8002abc:	e07a      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002abe:	2b60      	cmp	r3, #96	; 0x60
 8002ac0:	d04f      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x126>
 8002ac2:	d900      	bls.n	8002ac6 <HAL_TIM_ConfigClockSource+0x8a>
 8002ac4:	e076      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ac6:	2b50      	cmp	r3, #80	; 0x50
 8002ac8:	d03b      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x106>
 8002aca:	d900      	bls.n	8002ace <HAL_TIM_ConfigClockSource+0x92>
 8002acc:	e072      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d057      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x146>
 8002ad2:	d900      	bls.n	8002ad6 <HAL_TIM_ConfigClockSource+0x9a>
 8002ad4:	e06e      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ad6:	2b30      	cmp	r3, #48	; 0x30
 8002ad8:	d063      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x166>
 8002ada:	d86b      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d060      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x166>
 8002ae0:	d868      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d05d      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x166>
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d05b      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x166>
 8002aea:	e063      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f000 fcea 	bl	80034d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2277      	movs	r2, #119	; 0x77
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]
      break;
 8002b18:	e052      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f000 fcd3 	bl	80034d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	01c9      	lsls	r1, r1, #7
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
      break;
 8002b40:	e03e      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	f000 fc44 	bl	80033dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2150      	movs	r1, #80	; 0x50
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fc9e 	bl	800349c <TIM_ITRx_SetConfig>
      break;
 8002b60:	e02e      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	001a      	movs	r2, r3
 8002b70:	f000 fc62 	bl	8003438 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2160      	movs	r1, #96	; 0x60
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fc8e 	bl	800349c <TIM_ITRx_SetConfig>
      break;
 8002b80:	e01e      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	001a      	movs	r2, r3
 8002b90:	f000 fc24 	bl	80033dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fc7e 	bl	800349c <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e00e      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f000 fc75 	bl	800349c <TIM_ITRx_SetConfig>
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
      break;
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bbe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	223d      	movs	r2, #61	; 0x3d
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	223c      	movs	r2, #60	; 0x3c
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]

  return status;
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	ffceff88 	.word	0xffceff88
 8002be4:	ffff00ff 	.word	0xffff00ff

08002be8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d107      	bne.n	8002c30 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	223e      	movs	r2, #62	; 0x3e
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]
 8002c2e:	e02a      	b.n	8002c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d107      	bne.n	8002c4a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	223f      	movs	r2, #63	; 0x3f
 8002c44:	2101      	movs	r1, #1
 8002c46:	5499      	strb	r1, [r3, r2]
 8002c48:	e01d      	b.n	8002c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d107      	bne.n	8002c64 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2204      	movs	r2, #4
 8002c58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2240      	movs	r2, #64	; 0x40
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	e010      	b.n	8002c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d107      	bne.n	8002c7e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2241      	movs	r2, #65	; 0x41
 8002c78:	2101      	movs	r1, #1
 8002c7a:	5499      	strb	r1, [r3, r2]
 8002c7c:	e003      	b.n	8002c86 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	223d      	movs	r2, #61	; 0x3d
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff ffb5 	bl	8002bf8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d10b      	bne.n	8002ccc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d136      	bne.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	223e      	movs	r2, #62	; 0x3e
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	e031      	b.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d10b      	bne.n	8002cee <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d125      	bne.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	223f      	movs	r2, #63	; 0x3f
 8002ce8:	2101      	movs	r1, #1
 8002cea:	5499      	strb	r1, [r3, r2]
 8002cec:	e020      	b.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d10b      	bne.n	8002d10 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d114      	bne.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]
 8002d0e:	e00f      	b.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10a      	bne.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2241      	movs	r2, #65	; 0x41
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7fd fa70 	bl	8000218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d103      	bne.n	8002d66 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	771a      	strb	r2, [r3, #28]
 8002d64:	e019      	b.n	8002d9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d103      	bne.n	8002d78 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2202      	movs	r2, #2
 8002d74:	771a      	strb	r2, [r3, #28]
 8002d76:	e010      	b.n	8002d9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d103      	bne.n	8002d8a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2204      	movs	r2, #4
 8002d86:	771a      	strb	r2, [r3, #28]
 8002d88:	e007      	b.n	8002d9a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d102      	bne.n	8002d9a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2208      	movs	r2, #8
 8002d98:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff ff23 	bl	8002be8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <TIM_Base_SetConfig+0xdc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0x20>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a31      	ldr	r2, [pc, #196]	; (8002e90 <TIM_Base_SetConfig+0xe0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2270      	movs	r2, #112	; 0x70
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a29      	ldr	r2, [pc, #164]	; (8002e8c <TIM_Base_SetConfig+0xdc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00f      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <TIM_Base_SetConfig+0xe0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <TIM_Base_SetConfig+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <TIM_Base_SetConfig+0xe8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_Base_SetConfig+0x5a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <TIM_Base_SetConfig+0xec>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <TIM_Base_SetConfig+0xf0>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	4393      	bics	r3, r2
 8002e22:	001a      	movs	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <TIM_Base_SetConfig+0xdc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <TIM_Base_SetConfig+0xe8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0xaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <TIM_Base_SetConfig+0xec>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d103      	bne.n	8002e62 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]
  }
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40002000 	.word	0x40002000
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800
 8002ea0:	fffffcff 	.word	0xfffffcff

08002ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4393      	bics	r3, r2
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a2e      	ldr	r2, [pc, #184]	; (8002f8c <TIM_OC1_SetConfig+0xe8>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	4393      	bics	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2202      	movs	r2, #2
 8002eec:	4393      	bics	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <TIM_OC1_SetConfig+0xec>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <TIM_OC1_SetConfig+0x6e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <TIM_OC1_SetConfig+0xf0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_OC1_SetConfig+0x6e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <TIM_OC1_SetConfig+0xf4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10c      	bne.n	8002f2c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2208      	movs	r2, #8
 8002f16:	4393      	bics	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2204      	movs	r2, #4
 8002f28:	4393      	bics	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <TIM_OC1_SetConfig+0xec>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_OC1_SetConfig+0xa0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <TIM_OC1_SetConfig+0xf0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_OC1_SetConfig+0xa0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <TIM_OC1_SetConfig+0xf4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <TIM_OC1_SetConfig+0xf8>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <TIM_OC1_SetConfig+0xfc>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b006      	add	sp, #24
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	fffeff8f 	.word	0xfffeff8f
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800
 8002f9c:	fffffeff 	.word	0xfffffeff
 8002fa0:	fffffdff 	.word	0xfffffdff

08002fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	4393      	bics	r3, r2
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <TIM_OC2_SetConfig+0xe0>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <TIM_OC2_SetConfig+0xe4>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2220      	movs	r2, #32
 8002fee:	4393      	bics	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <TIM_OC2_SetConfig+0xe8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10d      	bne.n	8003022 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	4393      	bics	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2240      	movs	r2, #64	; 0x40
 800301e:	4393      	bics	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <TIM_OC2_SetConfig+0xe8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <TIM_OC2_SetConfig+0x96>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <TIM_OC2_SetConfig+0xec>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d003      	beq.n	800303a <TIM_OC2_SetConfig+0x96>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a17      	ldr	r2, [pc, #92]	; (8003094 <TIM_OC2_SetConfig+0xf0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d113      	bne.n	8003062 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <TIM_OC2_SetConfig+0xf4>)
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <TIM_OC2_SetConfig+0xf8>)
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	621a      	str	r2, [r3, #32]
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b006      	add	sp, #24
 8003082:	bd80      	pop	{r7, pc}
 8003084:	feff8fff 	.word	0xfeff8fff
 8003088:	fffffcff 	.word	0xfffffcff
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014400 	.word	0x40014400
 8003094:	40014800 	.word	0x40014800
 8003098:	fffffbff 	.word	0xfffffbff
 800309c:	fffff7ff 	.word	0xfffff7ff

080030a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a31      	ldr	r2, [pc, #196]	; (800317c <TIM_OC3_SetConfig+0xdc>)
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <TIM_OC3_SetConfig+0xe0>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2203      	movs	r2, #3
 80030d4:	4393      	bics	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <TIM_OC3_SetConfig+0xe4>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a23      	ldr	r2, [pc, #140]	; (8003188 <TIM_OC3_SetConfig+0xe8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10d      	bne.n	800311a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <TIM_OC3_SetConfig+0xec>)
 8003102:	4013      	ands	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <TIM_OC3_SetConfig+0xf0>)
 8003116:	4013      	ands	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <TIM_OC3_SetConfig+0xe8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <TIM_OC3_SetConfig+0x92>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <TIM_OC3_SetConfig+0xf4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_OC3_SetConfig+0x92>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <TIM_OC3_SetConfig+0xf8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d113      	bne.n	800315a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <TIM_OC3_SetConfig+0xfc>)
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <TIM_OC3_SetConfig+0x100>)
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b006      	add	sp, #24
 800317a:	bd80      	pop	{r7, pc}
 800317c:	fffffeff 	.word	0xfffffeff
 8003180:	fffeff8f 	.word	0xfffeff8f
 8003184:	fffffdff 	.word	0xfffffdff
 8003188:	40012c00 	.word	0x40012c00
 800318c:	fffff7ff 	.word	0xfffff7ff
 8003190:	fffffbff 	.word	0xfffffbff
 8003194:	40014400 	.word	0x40014400
 8003198:	40014800 	.word	0x40014800
 800319c:	ffffefff 	.word	0xffffefff
 80031a0:	ffffdfff 	.word	0xffffdfff

080031a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a24      	ldr	r2, [pc, #144]	; (800324c <TIM_OC4_SetConfig+0xa8>)
 80031ba:	401a      	ands	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a20      	ldr	r2, [pc, #128]	; (8003250 <TIM_OC4_SetConfig+0xac>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <TIM_OC4_SetConfig+0xb0>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <TIM_OC4_SetConfig+0xb4>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	031b      	lsls	r3, r3, #12
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <TIM_OC4_SetConfig+0xb8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_OC4_SetConfig+0x70>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <TIM_OC4_SetConfig+0xbc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_OC4_SetConfig+0x70>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a15      	ldr	r2, [pc, #84]	; (8003264 <TIM_OC4_SetConfig+0xc0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d109      	bne.n	8003228 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4a14      	ldr	r2, [pc, #80]	; (8003268 <TIM_OC4_SetConfig+0xc4>)
 8003218:	4013      	ands	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b006      	add	sp, #24
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	ffffefff 	.word	0xffffefff
 8003250:	feff8fff 	.word	0xfeff8fff
 8003254:	fffffcff 	.word	0xfffffcff
 8003258:	ffffdfff 	.word	0xffffdfff
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	ffffbfff 	.word	0xffffbfff

0800326c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a21      	ldr	r2, [pc, #132]	; (8003308 <TIM_OC5_SetConfig+0x9c>)
 8003282:	401a      	ands	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a1d      	ldr	r2, [pc, #116]	; (800330c <TIM_OC5_SetConfig+0xa0>)
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <TIM_OC5_SetConfig+0xa4>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <TIM_OC5_SetConfig+0xa8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_OC5_SetConfig+0x66>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <TIM_OC5_SetConfig+0xac>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_OC5_SetConfig+0x66>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <TIM_OC5_SetConfig+0xb0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d109      	bne.n	80032e6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <TIM_OC5_SetConfig+0x9c>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	621a      	str	r2, [r3, #32]
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b006      	add	sp, #24
 8003306:	bd80      	pop	{r7, pc}
 8003308:	fffeffff 	.word	0xfffeffff
 800330c:	fffeff8f 	.word	0xfffeff8f
 8003310:	fffdffff 	.word	0xfffdffff
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800

08003320 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <TIM_OC6_SetConfig+0xa0>)
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <TIM_OC6_SetConfig+0xa4>)
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <TIM_OC6_SetConfig+0xa8>)
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	051b      	lsls	r3, r3, #20
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <TIM_OC6_SetConfig+0xac>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_OC6_SetConfig+0x68>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <TIM_OC6_SetConfig+0xb0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_OC6_SetConfig+0x68>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <TIM_OC6_SetConfig+0xb4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d109      	bne.n	800339c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <TIM_OC6_SetConfig+0xb8>)
 800338c:	4013      	ands	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b006      	add	sp, #24
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	ffefffff 	.word	0xffefffff
 80033c4:	feff8fff 	.word	0xfeff8fff
 80033c8:	ffdfffff 	.word	0xffdfffff
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40014400 	.word	0x40014400
 80033d4:	40014800 	.word	0x40014800
 80033d8:	fffbffff 	.word	0xfffbffff

080033dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4393      	bics	r3, r2
 80033f6:	001a      	movs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	22f0      	movs	r2, #240	; 0xf0
 8003406:	4393      	bics	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	220a      	movs	r2, #10
 8003418:	4393      	bics	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b006      	add	sp, #24
 8003436:	bd80      	pop	{r7, pc}

08003438 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	2210      	movs	r2, #16
 8003450:	4393      	bics	r3, r2
 8003452:	001a      	movs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <TIM_TI2_ConfigInputStage+0x60>)
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	031b      	lsls	r3, r3, #12
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	22a0      	movs	r2, #160	; 0xa0
 8003474:	4393      	bics	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b006      	add	sp, #24
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	ffff0fff 	.word	0xffff0fff

0800349c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <TIM_ITRx_SetConfig+0x34>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	2207      	movs	r2, #7
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	ffcfff8f 	.word	0xffcfff8f

080034d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <TIM_ETR_SetConfig+0x3c>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	021a      	lsls	r2, r3, #8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b006      	add	sp, #24
 800350e:	bd80      	pop	{r7, pc}
 8003510:	ffff00ff 	.word	0xffff00ff

08003514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	221f      	movs	r2, #31
 8003524:	4013      	ands	r3, r2
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	0013      	movs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	43d2      	mvns	r2, r2
 8003536:	401a      	ands	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	211f      	movs	r1, #31
 8003544:	400b      	ands	r3, r1
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4099      	lsls	r1, r3
 800354a:	000b      	movs	r3, r1
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b006      	add	sp, #24
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	223c      	movs	r2, #60	; 0x3c
 800356a:	5c9b      	ldrb	r3, [r3, r2]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003570:	2302      	movs	r3, #2
 8003572:	e04a      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	223c      	movs	r2, #60	; 0x3c
 8003578:	2101      	movs	r1, #1
 800357a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	223d      	movs	r2, #61	; 0x3d
 8003580:	2102      	movs	r1, #2
 8003582:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2270      	movs	r2, #112	; 0x70
 80035b4:	4393      	bics	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	4393      	bics	r3, r2
 80035e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	223d      	movs	r2, #61	; 0x3d
 80035fc:	2101      	movs	r1, #1
 80035fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	223c      	movs	r2, #60	; 0x3c
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	40012c00 	.word	0x40012c00
 8003618:	ff0fffff 	.word	0xff0fffff
 800361c:	40000400 	.word	0x40000400

08003620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e046      	b.n	80036c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2288      	movs	r2, #136	; 0x88
 8003636:	589b      	ldr	r3, [r3, r2]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2284      	movs	r2, #132	; 0x84
 8003640:	2100      	movs	r1, #0
 8003642:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f7fd f894 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2288      	movs	r2, #136	; 0x88
 8003650:	2124      	movs	r1, #36	; 0x24
 8003652:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	438a      	bics	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 f996 	bl	80039a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 f828 	bl	80036cc <UART_SetConfig>
 800367c:	0003      	movs	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e01c      	b.n	80036c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	490d      	ldr	r1, [pc, #52]	; (80036c8 <HAL_UART_Init+0xa8>)
 8003692:	400a      	ands	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	212a      	movs	r1, #42	; 0x2a
 80036a2:	438a      	bics	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f000 fa25 	bl	8003b08 <UART_CheckIdleState>
 80036be:	0003      	movs	r3, r0
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	ffffb7ff 	.word	0xffffb7ff

080036cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d4:	231a      	movs	r3, #26
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4aa1      	ldr	r2, [pc, #644]	; (8003980 <UART_SetConfig+0x2b4>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	0019      	movs	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a9c      	ldr	r2, [pc, #624]	; (8003984 <UART_SetConfig+0x2b8>)
 8003712:	4013      	ands	r3, r2
 8003714:	0019      	movs	r1, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	4313      	orrs	r3, r2
 8003730:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a93      	ldr	r2, [pc, #588]	; (8003988 <UART_SetConfig+0x2bc>)
 800373a:	4013      	ands	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	220f      	movs	r2, #15
 8003750:	4393      	bics	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a89      	ldr	r2, [pc, #548]	; (800398c <UART_SetConfig+0x2c0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d127      	bne.n	80037ba <UART_SetConfig+0xee>
 800376a:	4b89      	ldr	r3, [pc, #548]	; (8003990 <UART_SetConfig+0x2c4>)
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	2203      	movs	r2, #3
 8003770:	4013      	ands	r3, r2
 8003772:	2b03      	cmp	r3, #3
 8003774:	d017      	beq.n	80037a6 <UART_SetConfig+0xda>
 8003776:	d81b      	bhi.n	80037b0 <UART_SetConfig+0xe4>
 8003778:	2b02      	cmp	r3, #2
 800377a:	d00a      	beq.n	8003792 <UART_SetConfig+0xc6>
 800377c:	d818      	bhi.n	80037b0 <UART_SetConfig+0xe4>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <UART_SetConfig+0xbc>
 8003782:	2b01      	cmp	r3, #1
 8003784:	d00a      	beq.n	800379c <UART_SetConfig+0xd0>
 8003786:	e013      	b.n	80037b0 <UART_SetConfig+0xe4>
 8003788:	231b      	movs	r3, #27
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e021      	b.n	80037d6 <UART_SetConfig+0x10a>
 8003792:	231b      	movs	r3, #27
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2202      	movs	r2, #2
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e01c      	b.n	80037d6 <UART_SetConfig+0x10a>
 800379c:	231b      	movs	r3, #27
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2204      	movs	r2, #4
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e017      	b.n	80037d6 <UART_SetConfig+0x10a>
 80037a6:	231b      	movs	r3, #27
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2208      	movs	r2, #8
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e012      	b.n	80037d6 <UART_SetConfig+0x10a>
 80037b0:	231b      	movs	r3, #27
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2210      	movs	r2, #16
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e00d      	b.n	80037d6 <UART_SetConfig+0x10a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a75      	ldr	r2, [pc, #468]	; (8003994 <UART_SetConfig+0x2c8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d104      	bne.n	80037ce <UART_SetConfig+0x102>
 80037c4:	231b      	movs	r3, #27
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e003      	b.n	80037d6 <UART_SetConfig+0x10a>
 80037ce:	231b      	movs	r3, #27
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2210      	movs	r2, #16
 80037d4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	429a      	cmp	r2, r3
 80037e0:	d000      	beq.n	80037e4 <UART_SetConfig+0x118>
 80037e2:	e065      	b.n	80038b0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80037e4:	231b      	movs	r3, #27
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d015      	beq.n	800381a <UART_SetConfig+0x14e>
 80037ee:	dc18      	bgt.n	8003822 <UART_SetConfig+0x156>
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d00d      	beq.n	8003810 <UART_SetConfig+0x144>
 80037f4:	dc15      	bgt.n	8003822 <UART_SetConfig+0x156>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <UART_SetConfig+0x134>
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d005      	beq.n	800380a <UART_SetConfig+0x13e>
 80037fe:	e010      	b.n	8003822 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe fc76 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003804:	0003      	movs	r3, r0
 8003806:	617b      	str	r3, [r7, #20]
        break;
 8003808:	e012      	b.n	8003830 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <UART_SetConfig+0x2cc>)
 800380c:	617b      	str	r3, [r7, #20]
        break;
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003810:	f7fe fbe4 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003814:	0003      	movs	r3, r0
 8003816:	617b      	str	r3, [r7, #20]
        break;
 8003818:	e00a      	b.n	8003830 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	617b      	str	r3, [r7, #20]
        break;
 8003820:	e006      	b.n	8003830 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003826:	231a      	movs	r3, #26
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
        break;
 800382e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d100      	bne.n	8003838 <UART_SetConfig+0x16c>
 8003836:	e08d      	b.n	8003954 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <UART_SetConfig+0x2d0>)
 800383e:	0052      	lsls	r2, r2, #1
 8003840:	5ad3      	ldrh	r3, [r2, r3]
 8003842:	0019      	movs	r1, r3
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7fc fc5b 	bl	8000100 <__udivsi3>
 800384a:	0003      	movs	r3, r0
 800384c:	005a      	lsls	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	18d2      	adds	r2, r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0019      	movs	r1, r3
 800385c:	0010      	movs	r0, r2
 800385e:	f7fc fc4f 	bl	8000100 <__udivsi3>
 8003862:	0003      	movs	r3, r0
 8003864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d91c      	bls.n	80038a6 <UART_SetConfig+0x1da>
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	025b      	lsls	r3, r3, #9
 8003872:	429a      	cmp	r2, r3
 8003874:	d217      	bcs.n	80038a6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	b29a      	uxth	r2, r3
 800387a:	200e      	movs	r0, #14
 800387c:	183b      	adds	r3, r7, r0
 800387e:	210f      	movs	r1, #15
 8003880:	438a      	bics	r2, r1
 8003882:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	2207      	movs	r2, #7
 800388c:	4013      	ands	r3, r2
 800388e:	b299      	uxth	r1, r3
 8003890:	183b      	adds	r3, r7, r0
 8003892:	183a      	adds	r2, r7, r0
 8003894:	8812      	ldrh	r2, [r2, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	183a      	adds	r2, r7, r0
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e056      	b.n	8003954 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80038a6:	231a      	movs	r3, #26
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e051      	b.n	8003954 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038b0:	231b      	movs	r3, #27
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d015      	beq.n	80038e6 <UART_SetConfig+0x21a>
 80038ba:	dc18      	bgt.n	80038ee <UART_SetConfig+0x222>
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00d      	beq.n	80038dc <UART_SetConfig+0x210>
 80038c0:	dc15      	bgt.n	80038ee <UART_SetConfig+0x222>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <UART_SetConfig+0x200>
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d005      	beq.n	80038d6 <UART_SetConfig+0x20a>
 80038ca:	e010      	b.n	80038ee <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7fe fc10 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80038d0:	0003      	movs	r3, r0
 80038d2:	617b      	str	r3, [r7, #20]
        break;
 80038d4:	e012      	b.n	80038fc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d6:	4b30      	ldr	r3, [pc, #192]	; (8003998 <UART_SetConfig+0x2cc>)
 80038d8:	617b      	str	r3, [r7, #20]
        break;
 80038da:	e00f      	b.n	80038fc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038dc:	f7fe fb7e 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80038e0:	0003      	movs	r3, r0
 80038e2:	617b      	str	r3, [r7, #20]
        break;
 80038e4:	e00a      	b.n	80038fc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	617b      	str	r3, [r7, #20]
        break;
 80038ec:	e006      	b.n	80038fc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038f2:	231a      	movs	r3, #26
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
        break;
 80038fa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d028      	beq.n	8003954 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <UART_SetConfig+0x2d0>)
 8003908:	0052      	lsls	r2, r2, #1
 800390a:	5ad3      	ldrh	r3, [r2, r3]
 800390c:	0019      	movs	r1, r3
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7fc fbf6 	bl	8000100 <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	001a      	movs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	18d2      	adds	r2, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0019      	movs	r1, r3
 8003926:	0010      	movs	r0, r2
 8003928:	f7fc fbea 	bl	8000100 <__udivsi3>
 800392c:	0003      	movs	r3, r0
 800392e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	d90a      	bls.n	800394c <UART_SetConfig+0x280>
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	025b      	lsls	r3, r3, #9
 800393c:	429a      	cmp	r2, r3
 800393e:	d205      	bcs.n	800394c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	e003      	b.n	8003954 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800394c:	231a      	movs	r3, #26
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	226a      	movs	r2, #106	; 0x6a
 8003958:	2101      	movs	r1, #1
 800395a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2268      	movs	r2, #104	; 0x68
 8003960:	2101      	movs	r1, #1
 8003962:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003970:	231a      	movs	r3, #26
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	781b      	ldrb	r3, [r3, #0]
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b008      	add	sp, #32
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	cfff69f3 	.word	0xcfff69f3
 8003984:	ffffcfff 	.word	0xffffcfff
 8003988:	11fff4ff 	.word	0x11fff4ff
 800398c:	40013800 	.word	0x40013800
 8003990:	40021000 	.word	0x40021000
 8003994:	40004400 	.word	0x40004400
 8003998:	00f42400 	.word	0x00f42400
 800399c:	08003f2c 	.word	0x08003f2c

080039a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	2208      	movs	r2, #8
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00b      	beq.n	80039ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a4a      	ldr	r2, [pc, #296]	; (8003ae4 <UART_AdvFeatureConfig+0x144>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	2201      	movs	r2, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	d00b      	beq.n	80039ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a43      	ldr	r2, [pc, #268]	; (8003ae8 <UART_AdvFeatureConfig+0x148>)
 80039dc:	4013      	ands	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	2202      	movs	r2, #2
 80039f2:	4013      	ands	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <UART_AdvFeatureConfig+0x14c>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2204      	movs	r2, #4
 8003a14:	4013      	ands	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a34      	ldr	r2, [pc, #208]	; (8003af0 <UART_AdvFeatureConfig+0x150>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	2210      	movs	r2, #16
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <UART_AdvFeatureConfig+0x154>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	2220      	movs	r2, #32
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <UART_AdvFeatureConfig+0x158>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	2240      	movs	r2, #64	; 0x40
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <UART_AdvFeatureConfig+0x15c>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	035b      	lsls	r3, r3, #13
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d10b      	bne.n	8003aba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <UART_AdvFeatureConfig+0x160>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <UART_AdvFeatureConfig+0x164>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	ffff7fff 	.word	0xffff7fff
 8003ae8:	fffdffff 	.word	0xfffdffff
 8003aec:	fffeffff 	.word	0xfffeffff
 8003af0:	fffbffff 	.word	0xfffbffff
 8003af4:	ffffefff 	.word	0xffffefff
 8003af8:	ffffdfff 	.word	0xffffdfff
 8003afc:	ffefffff 	.word	0xffefffff
 8003b00:	ff9fffff 	.word	0xff9fffff
 8003b04:	fff7ffff 	.word	0xfff7ffff

08003b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b092      	sub	sp, #72	; 0x48
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2290      	movs	r2, #144	; 0x90
 8003b14:	2100      	movs	r1, #0
 8003b16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b18:	f7fd f8b2 	bl	8000c80 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d12d      	bne.n	8003b8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	0391      	lsls	r1, r2, #14
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4a47      	ldr	r2, [pc, #284]	; (8003c54 <UART_CheckIdleState+0x14c>)
 8003b38:	9200      	str	r2, [sp, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f000 f88e 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d022      	beq.n	8003b8a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b44:	f3ef 8310 	mrs	r3, PRIMASK
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b4e:	2301      	movs	r3, #1
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	438a      	bics	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2288      	movs	r2, #136	; 0x88
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2284      	movs	r2, #132	; 0x84
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e060      	b.n	8003c4c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2204      	movs	r2, #4
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d146      	bne.n	8003c26 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	03d1      	lsls	r1, r2, #15
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4a2c      	ldr	r2, [pc, #176]	; (8003c54 <UART_CheckIdleState+0x14c>)
 8003ba2:	9200      	str	r2, [sp, #0]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f000 f859 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d03b      	beq.n	8003c26 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	2301      	movs	r3, #1
 8003bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4922      	ldr	r1, [pc, #136]	; (8003c58 <UART_CheckIdleState+0x150>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003be6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	438a      	bics	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	228c      	movs	r2, #140	; 0x8c
 8003c16:	2120      	movs	r1, #32
 8003c18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2284      	movs	r2, #132	; 0x84
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e012      	b.n	8003c4c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2288      	movs	r2, #136	; 0x88
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	228c      	movs	r2, #140	; 0x8c
 8003c32:	2120      	movs	r1, #32
 8003c34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2284      	movs	r2, #132	; 0x84
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b010      	add	sp, #64	; 0x40
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	01ffffff 	.word	0x01ffffff
 8003c58:	fffffedf 	.word	0xfffffedf

08003c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	e051      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	3301      	adds	r3, #1
 8003c72:	d04e      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7fd f804 	bl	8000c80 <HAL_GetTick>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e051      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	4013      	ands	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d038      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d035      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2208      	movs	r2, #8
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d111      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 f83c 	bl	8003d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2290      	movs	r2, #144	; 0x90
 8003cc8:	2108      	movs	r1, #8
 8003cca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2284      	movs	r2, #132	; 0x84
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e02c      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d112      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 f81f 	bl	8003d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2290      	movs	r2, #144	; 0x90
 8003d02:	2120      	movs	r1, #32
 8003d04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2284      	movs	r2, #132	; 0x84
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e00f      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	425a      	negs	r2, r3
 8003d22:	4153      	adcs	r3, r2
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	001a      	movs	r2, r3
 8003d28:	1dfb      	adds	r3, r7, #7
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d09e      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	; 0x38
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d44:	f3ef 8310 	mrs	r3, PRIMASK
 8003d48:	617b      	str	r3, [r7, #20]
  return(result);
 8003d4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f383 8810 	msr	PRIMASK, r3
}
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4926      	ldr	r1, [pc, #152]	; (8003e00 <UART_EndRxTransfer+0xc4>)
 8003d66:	400a      	ands	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d76:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d80:	2301      	movs	r3, #1
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <UART_EndRxTransfer+0xc8>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	f383 8810 	msr	PRIMASK, r3
}
 8003da6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d118      	bne.n	8003de2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db0:	f3ef 8310 	mrs	r3, PRIMASK
 8003db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dba:	2301      	movs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	228c      	movs	r2, #140	; 0x8c
 8003de6:	2120      	movs	r1, #32
 8003de8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b00e      	add	sp, #56	; 0x38
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	fffffedf 	.word	0xfffffedf
 8003e04:	effffffe 	.word	0xeffffffe

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	4d0c      	ldr	r5, [pc, #48]	; (8003e40 <__libc_init_array+0x38>)
 8003e0e:	4c0d      	ldr	r4, [pc, #52]	; (8003e44 <__libc_init_array+0x3c>)
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	2600      	movs	r6, #0
 8003e1a:	f000 f821 	bl	8003e60 <_init>
 8003e1e:	4d0a      	ldr	r5, [pc, #40]	; (8003e48 <__libc_init_array+0x40>)
 8003e20:	4c0a      	ldr	r4, [pc, #40]	; (8003e4c <__libc_init_array+0x44>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	00b3      	lsls	r3, r6, #2
 8003e2e:	58eb      	ldr	r3, [r5, r3]
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	00b3      	lsls	r3, r6, #2
 8003e38:	58eb      	ldr	r3, [r5, r3]
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08003f44 	.word	0x08003f44
 8003e44:	08003f44 	.word	0x08003f44
 8003e48:	08003f44 	.word	0x08003f44
 8003e4c:	08003f4c 	.word	0x08003f4c

08003e50 <memset>:
 8003e50:	0003      	movs	r3, r0
 8003e52:	1882      	adds	r2, r0, r2
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	7019      	strb	r1, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <_init>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr

08003e6c <_fini>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr

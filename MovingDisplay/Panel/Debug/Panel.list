
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004058  08004058  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004058  08004058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  2000000c  08004070  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f8c  08004070  00020f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239d  00000000  00000000  00031009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00034160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f11  00000000  00000000  00034e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010279  00000000  00000000  0004ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bd5  00000000  00000000  0005afda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1baf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003158  00000000  00000000  000e1c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003f74 	.word	0x08003f74

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003f74 	.word	0x08003f74

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <_ZN3LEDC1EP7WS2812B>:
#include "led.h"

LED::LED(WS2812B* neopixel){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
}
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	0018      	movs	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	b002      	add	sp, #8
 8000230:	bd80      	pop	{r7, pc}

08000232 <_ZN3LED4initEv>:

void LED::init(){
 8000232:	b580      	push	{r7, lr}
 8000234:	b082      	sub	sp, #8
 8000236:	af00      	add	r7, sp, #0
 8000238:	6078      	str	r0, [r7, #4]
    NEOPIXEL->init();
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fcec 	bl	8000c1c <_ZN7WS2812B4initEv>
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}

0800024c <_ZN3LED4showEiii>:

void LED::show(int travel_x, int circle_x, int circle_z){
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	603b      	str	r3, [r7, #0]
    for(int px=0; px<16; px++){
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	2b0f      	cmp	r3, #15
 8000262:	dc21      	bgt.n	80002a8 <_ZN3LED4showEiii+0x5c>
        for(int pz=0; pz<16; pz++){
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	69bb      	ldr	r3, [r7, #24]
 800026a:	2b0f      	cmp	r3, #15
 800026c:	dc18      	bgt.n	80002a0 <_ZN3LED4showEiii+0x54>
            int x = PANEL_START_X + travel_x;
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	617b      	str	r3, [r7, #20]
            int z = PANEL_START_Z;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]

            set_under();
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	0018      	movs	r0, r3
 800027a:	f000 f82b 	bl	80002d4 <_ZN3LED9set_underEv>
            // set_circle(x, z, circle_x, circle_z);
            set_color(change_coord_to_num(px, pz));
 800027e:	69ba      	ldr	r2, [r7, #24]
 8000280:	69f9      	ldr	r1, [r7, #28]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	0018      	movs	r0, r3
 8000286:	f000 f850 	bl	800032a <_ZN3LED19change_coord_to_numEii>
 800028a:	0003      	movs	r3, r0
 800028c:	b29a      	uxth	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0011      	movs	r1, r2
 8000292:	0018      	movs	r0, r3
 8000294:	f000 f82f 	bl	80002f6 <_ZN3LED9set_colorEt>
        for(int pz=0; pz<16; pz++){
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	3301      	adds	r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
 800029e:	e7e3      	b.n	8000268 <_ZN3LED4showEiii+0x1c>
    for(int px=0; px<16; px++){
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	e7da      	b.n	800025e <_ZN3LED4showEiii+0x12>
        }
    }
    NEOPIXEL->show();
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fc07 	bl	8000ac0 <_ZN7WS2812B4showEv>
}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b008      	add	sp, #32
 80002b8:	bd80      	pop	{r7, pc}

080002ba <_ZN3LED19execute_NPX_executeEv>:

void LED::execute_NPX_execute(){
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
    NEOPIXEL->execute();
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fc08 	bl	8000adc <_ZN7WS2812B7executeEv>
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <_ZN3LED9set_underEv>:

void LED::set_under(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
    red = 0;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	711a      	strb	r2, [r3, #4]
    blue = 3;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2203      	movs	r2, #3
 80002e6:	719a      	strb	r2, [r3, #6]
    green = 1;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2201      	movs	r2, #1
 80002ec:	715a      	strb	r2, [r3, #5]
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <_ZN3LED9set_colorEt>:

void LED::set_color(uint16_t pixel_num){
 80002f6:	b5b0      	push	{r4, r5, r7, lr}
 80002f8:	b084      	sub	sp, #16
 80002fa:	af02      	add	r7, sp, #8
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	000a      	movs	r2, r1
 8000300:	1cbb      	adds	r3, r7, #2
 8000302:	801a      	strh	r2, [r3, #0]
    NEOPIXEL->set_color(pixel_num, red, blue, green);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791c      	ldrb	r4, [r3, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	799d      	ldrb	r5, [r3, #6]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	795b      	ldrb	r3, [r3, #5]
 8000314:	1cba      	adds	r2, r7, #2
 8000316:	8811      	ldrh	r1, [r2, #0]
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	002b      	movs	r3, r5
 800031c:	0022      	movs	r2, r4
 800031e:	f000 fb94 	bl	8000a4a <_ZN7WS2812B9set_colorEthhh>
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bdb0      	pop	{r4, r5, r7, pc}

0800032a <_ZN3LED19change_coord_to_numEii>:

int LED::change_coord_to_num(int px, int pz){
 800032a:	b580      	push	{r7, lr}
 800032c:	b086      	sub	sp, #24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
    int return_pixel_num = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

    if(pz%2 == 0){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2201      	movs	r2, #1
 800033e:	4013      	ands	r3, r2
 8000340:	d105      	bne.n	800034e <_ZN3LED19change_coord_to_numEii+0x24>
        return_pixel_num = pz*16 + px;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	011b      	lsls	r3, r3, #4
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	18d3      	adds	r3, r2, r3
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	e006      	b.n	800035c <_ZN3LED19change_coord_to_numEii+0x32>
    }
    else{
        return_pixel_num = pz*16 + 15 - px;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	330f      	adds	r3, #15
 8000354:	001a      	movs	r2, r3
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	617b      	str	r3, [r7, #20]
    }

    return return_pixel_num;
 800035c:	697b      	ldr	r3, [r7, #20]
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b006      	add	sp, #24
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	  // Neopixel.execute();
    led.execute_NPX_execute();
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000372:	0018      	movs	r0, r3
 8000374:	f7ff ffa1 	bl	80002ba <_ZN3LED19execute_NPX_executeEv>
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000f80 	.word	0x20000f80

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000388:	f000 fcac 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038c:	f000 f816 	bl	80003bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000390:	f000 f960 	bl	8000654 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000394:	f000 f938 	bl	8000608 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000398:	f000 f8fe 	bl	8000598 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800039c:	f000 f86a 	bl	8000474 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  // Neopixel.init();
  led.init();
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <main+0x34>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f7ff ff45 	bl	8000232 <_ZN3LED4initEv>

    /* USER CODE BEGIN 3 */
    // Neopixel.set_color(8, 3, 0, 0);
    // Neopixel.show();
    // HAL_Delay(500);
    led.show(0,0,0);
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <main+0x34>)
 80003aa:	2300      	movs	r3, #0
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	f7ff ff4c 	bl	800024c <_ZN3LED4showEiii>
 80003b4:	e7f8      	b.n	80003a8 <main+0x24>
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000f80 	.word	0x20000f80

080003bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b093      	sub	sp, #76	; 0x4c
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	2414      	movs	r4, #20
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	2334      	movs	r3, #52	; 0x34
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f003 fdc9 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	0018      	movs	r0, r3
 80003d6:	2310      	movs	r3, #16
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f003 fdc2 	bl	8003f64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fa1f 	bl	8001828 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	2201      	movs	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	22a0      	movs	r2, #160	; 0xa0
 80003f4:	02d2      	lsls	r2, r2, #11
 80003f6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f8:	0021      	movs	r1, r4
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2202      	movs	r2, #2
 80003fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2203      	movs	r2, #3
 8000404:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2209      	movs	r2, #9
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	0292      	lsls	r2, r2, #10
 8000418:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	05d2      	lsls	r2, r2, #23
 8000420:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	187b      	adds	r3, r7, r1
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fa4b 	bl	80018c0 <HAL_RCC_OscConfig>
 800042a:	0003      	movs	r3, r0
 800042c:	1e5a      	subs	r2, r3, #1
 800042e:	4193      	sbcs	r3, r2
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8000436:	f000 f95d 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2207      	movs	r2, #7
 800043e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2202      	movs	r2, #2
 8000444:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2101      	movs	r1, #1
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fd42 	bl	8001ee0 <HAL_RCC_ClockConfig>
 800045c:	0003      	movs	r3, r0
 800045e:	1e5a      	subs	r2, r3, #1
 8000460:	4193      	sbcs	r3, r2
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000468:	f000 f944 	bl	80006f4 <Error_Handler>
  }
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b013      	add	sp, #76	; 0x4c
 8000472:	bd90      	pop	{r4, r7, pc}

08000474 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08e      	sub	sp, #56	; 0x38
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	2328      	movs	r3, #40	; 0x28
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	0018      	movs	r0, r3
 8000480:	2310      	movs	r3, #16
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f003 fd6d 	bl	8003f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048a:	231c      	movs	r3, #28
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	0018      	movs	r0, r3
 8000490:	230c      	movs	r3, #12
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f003 fd65 	bl	8003f64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	231c      	movs	r3, #28
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f003 fd5e 	bl	8003f64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004aa:	4a3a      	ldr	r2, [pc, #232]	; (8000594 <_ZL12MX_TIM3_Initv+0x120>)
 80004ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 80004ae:	4b38      	ldr	r3, [pc, #224]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004b0:	2203      	movs	r2, #3
 80004b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b4:	4b36      	ldr	r3, [pc, #216]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 80004ba:	4b35      	ldr	r3, [pc, #212]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004bc:	220e      	movs	r2, #14
 80004be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c0:	4b33      	ldr	r3, [pc, #204]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 feae 	bl	8002230 <HAL_TIM_Base_Init>
 80004d4:	0003      	movs	r3, r0
 80004d6:	1e5a      	subs	r2, r3, #1
 80004d8:	4193      	sbcs	r3, r2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80004e0:	f000 f908 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	2128      	movs	r1, #40	; 0x28
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0152      	lsls	r2, r2, #5
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ee:	187a      	adds	r2, r7, r1
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 fb2b 	bl	8002b50 <HAL_TIM_ConfigClockSource>
 80004fa:	0003      	movs	r3, r0
 80004fc:	1e5a      	subs	r2, r3, #1
 80004fe:	4193      	sbcs	r3, r2
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000506:	f000 f8f5 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fee7 	bl	80022e0 <HAL_TIM_PWM_Init>
 8000512:	0003      	movs	r3, r0
 8000514:	1e5a      	subs	r2, r3, #1
 8000516:	4193      	sbcs	r3, r2
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800051e:	f000 f8e9 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	211c      	movs	r1, #28
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000530:	187a      	adds	r2, r7, r1
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f003 f89a 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	0003      	movs	r3, r0
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4193      	sbcs	r3, r2
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000548:	f000 f8d4 	bl	80006f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054c:	003b      	movs	r3, r7
 800054e:	2260      	movs	r2, #96	; 0x60
 8000550:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000552:	003b      	movs	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000558:	003b      	movs	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800055e:	003b      	movs	r3, r7
 8000560:	2204      	movs	r2, #4
 8000562:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000564:	0039      	movs	r1, r7
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 8000568:	2204      	movs	r2, #4
 800056a:	0018      	movs	r0, r3
 800056c:	f002 f9f0 	bl	8002950 <HAL_TIM_PWM_ConfigChannel>
 8000570:	0003      	movs	r3, r0
 8000572:	1e5a      	subs	r2, r3, #1
 8000574:	4193      	sbcs	r3, r2
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 800057c:	f000 f8ba 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <_ZL12MX_TIM3_Initv+0x11c>)
 8000582:	0018      	movs	r0, r3
 8000584:	f000 f95e 	bl	8000844 <HAL_TIM_MspPostInit>

}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b00e      	add	sp, #56	; 0x38
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000028 	.word	0x20000028
 8000594:	40000400 	.word	0x40000400

08000598 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 800059e:	4a19      	ldr	r2, [pc, #100]	; (8000604 <_ZL19MX_USART2_UART_Initv+0x6c>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005a4:	22e1      	movs	r2, #225	; 0xe1
 80005a6:	0252      	lsls	r2, r2, #9
 80005a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_ZL19MX_USART2_UART_Initv+0x68>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 f8a6 	bl	8003734 <HAL_UART_Init>
 80005e8:	0003      	movs	r3, r0
 80005ea:	1e5a      	subs	r2, r3, #1
 80005ec:	4193      	sbcs	r3, r2
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 80005f4:	f000 f87e 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	200000d0 	.word	0x200000d0
 8000604:	40004400 	.word	0x40004400

08000608 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <_ZL11MX_DMA_Initv+0x48>)
 8000610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <_ZL11MX_DMA_Initv+0x48>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	639a      	str	r2, [r3, #56]	; 0x38
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <_ZL11MX_DMA_Initv+0x48>)
 800061c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2009      	movs	r0, #9
 800062c:	f000 fc8c 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000630:	2009      	movs	r0, #9
 8000632:	f000 fc9e 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200a      	movs	r0, #10
 800063c:	f000 fc84 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fc96 	bl	8000f72 <HAL_NVIC_EnableIRQ>

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	240c      	movs	r4, #12
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2314      	movs	r3, #20
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 fc7d 	bl	8003f64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 8000670:	2104      	movs	r1, #4
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	2204      	movs	r2, #4
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 80006a0:	2102      	movs	r1, #2
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <_ZL12MX_GPIO_Initv+0x98>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006aa:	2202      	movs	r2, #2
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f897 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006be:	0021      	movs	r1, r4
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2204      	movs	r2, #4
 80006c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006dc:	0019      	movs	r1, r3
 80006de:	0010      	movs	r0, r2
 80006e0:	f000 ff20 	bl	8001524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b009      	add	sp, #36	; 0x24
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	50000400 	.word	0x50000400

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d10f      	bne.n	8000730 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d10b      	bne.n	8000730 <_Z41__static_initialization_and_destruction_0ii+0x30>
WS2812B Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800071e:	2204      	movs	r2, #4
 8000720:	f000 f97d 	bl	8000a1e <_ZN7WS2812BC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000728:	0011      	movs	r1, r2
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fd74 	bl	8000218 <_ZN3LEDC1EP7WS2812B>
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	0000ffff 	.word	0x0000ffff
 800073c:	20000074 	.word	0x20000074
 8000740:	20000028 	.word	0x20000028
 8000744:	200001c0 	.word	0x200001c0
 8000748:	20000f80 	.word	0x20000f80

0800074c <_GLOBAL__sub_I_htim3>:
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <_GLOBAL__sub_I_htim3+0x14>)
 8000752:	0019      	movs	r1, r3
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ffd3 	bl	8000700 <_Z41__static_initialization_and_destruction_0ii>
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	0000ffff 	.word	0x0000ffff

08000764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	641a      	str	r2, [r3, #64]	; 0x40
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0549      	lsls	r1, r1, #21
 800078c:	430a      	orrs	r2, r1
 800078e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_MspInit+0x44>)
 8000792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	055b      	lsls	r3, r3, #21
 8000798:	4013      	ands	r3, r2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <HAL_TIM_Base_MspInit+0x88>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d136      	bne.n	800082c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <HAL_TIM_Base_MspInit+0x8c>)
 80007c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <HAL_TIM_Base_MspInit+0x8c>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <HAL_TIM_Base_MspInit+0x8c>)
 80007cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_TIM_Base_MspInit+0x94>)
 80007da:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007de:	2221      	movs	r2, #33	; 0x21
 80007e0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007e4:	2210      	movs	r2, #16
 80007e6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 8000804:	2220      	movs	r2, #32
 8000806:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 800080a:	22c0      	movs	r2, #192	; 0xc0
 800080c:	0192      	lsls	r2, r2, #6
 800080e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fbca 	bl	8000fac <HAL_DMA_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800081c:	f7ff ff6a 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_TIM_Base_MspInit+0x90>)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40000400 	.word	0x40000400
 8000838:	40021000 	.word	0x40021000
 800083c:	20000074 	.word	0x20000074
 8000840:	4002001c 	.word	0x4002001c

08000844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	240c      	movs	r4, #12
 800084e:	193b      	adds	r3, r7, r4
 8000850:	0018      	movs	r0, r3
 8000852:	2314      	movs	r3, #20
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 fb84 	bl	8003f64 <memset>
  if(htim->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <HAL_TIM_MspPostInit+0x70>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d122      	bne.n	80008ac <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_TIM_MspPostInit+0x74>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_TIM_MspPostInit+0x74>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_TIM_MspPostInit+0x74>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800087e:	0021      	movs	r1, r4
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2202      	movs	r2, #2
 800088a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	187a      	adds	r2, r7, r1
 80008a0:	23a0      	movs	r3, #160	; 0xa0
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fe3c 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b009      	add	sp, #36	; 0x24
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	40000400 	.word	0x40000400
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b08b      	sub	sp, #44	; 0x2c
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	2414      	movs	r4, #20
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 fb48 	bl	8003f64 <memset>
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <HAL_UART_MspInit+0xe4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d15b      	bne.n	8000996 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 80008e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0289      	lsls	r1, r1, #10
 80008e8:	430a      	orrs	r2, r1
 80008ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 80008ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	029b      	lsls	r3, r3, #10
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000900:	2101      	movs	r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000912:	0021      	movs	r1, r4
 8000914:	187b      	adds	r3, r7, r1
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2202      	movs	r2, #2
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	187a      	adds	r2, r7, r1
 8000934:	23a0      	movs	r3, #160	; 0xa0
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fdf2 	bl	8001524 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000942:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0xf4>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000948:	2234      	movs	r2, #52	; 0x34
 800094a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0xf0>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0xf0>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_UART_MspInit+0xf0>)
 800096c:	2220      	movs	r2, #32
 800096e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	0192      	lsls	r2, r2, #6
 8000976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_UART_MspInit+0xf0>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fb16 	bl	8000fac <HAL_DMA_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000984:	f7ff feb6 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_UART_MspInit+0xf0>)
 800098e:	505a      	str	r2, [r3, r1]
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_UART_MspInit+0xf0>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b00b      	add	sp, #44	; 0x2c
 800099c:	bd90      	pop	{r4, r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	00008004 	.word	0x00008004
 80009ac:	20000164 	.word	0x20000164
 80009b0:	40020008 	.word	0x40020008

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f9ee 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <DMA1_Channel1_IRQHandler+0x14>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fc58 	bl	80012a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000164 	.word	0x20000164

080009fc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fc4c 	bl	80012a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000074 	.word	0x20000074

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_ZN7WS2812BC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812b.h"

WS2812B::WS2812B(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	609a      	str	r2, [r3, #8]
}
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b004      	add	sp, #16
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN7WS2812B9set_colorEthhh>:

void WS2812B::set_color(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8000a4a:	b590      	push	{r4, r7, lr}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	000c      	movs	r4, r1
 8000a54:	0010      	movs	r0, r2
 8000a56:	0019      	movs	r1, r3
 8000a58:	1cbb      	adds	r3, r7, #2
 8000a5a:	1c22      	adds	r2, r4, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	1c7b      	adds	r3, r7, #1
 8000a60:	1c02      	adds	r2, r0, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	003b      	movs	r3, r7
 8000a66:	1c0a      	adds	r2, r1, #0
 8000a68:	701a      	strb	r2, [r3, #0]
	if(PIXEL_NUM<LED_NUM){
 8000a6a:	1cbb      	adds	r3, r7, #2
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a70:	d822      	bhi.n	8000ab8 <_ZN7WS2812B9set_colorEthhh+0x6e>
		rgb_buf[PIXEL_NUM][0]=green;
 8000a72:	1cbb      	adds	r3, r7, #2
 8000a74:	881a      	ldrh	r2, [r3, #0]
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	0013      	movs	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	18cb      	adds	r3, r1, r3
 8000a80:	330c      	adds	r3, #12
 8000a82:	003a      	movs	r2, r7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8000a88:	1cbb      	adds	r3, r7, #2
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	0013      	movs	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	189b      	adds	r3, r3, r2
 8000a94:	18cb      	adds	r3, r1, r3
 8000a96:	330d      	adds	r3, #13
 8000a98:	1c7a      	adds	r2, r7, #1
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8000a9e:	1cbb      	adds	r3, r7, #2
 8000aa0:	881a      	ldrh	r2, [r3, #0]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	189b      	adds	r3, r3, r2
 8000aaa:	18cb      	adds	r3, r1, r3
 8000aac:	330e      	adds	r3, #14
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2318      	movs	r3, #24
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	7013      	strb	r3, [r2, #0]
	}
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b003      	add	sp, #12
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <_ZN7WS2812B4showEv>:

void WS2812B::show(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <_ZN7WS2812B4showEv+0x18>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	5499      	strb	r1, [r3, r2]
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	00000dbe 	.word	0x00000dbe

08000adc <_ZN7WS2812B7executeEv>:

void WS2812B::execute(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <_ZN7WS2812B7executeEv+0x138>)
 8000ae8:	5c9b      	ldrb	r3, [r3, r2]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d000      	beq.n	8000af0 <_ZN7WS2812B7executeEv+0x14>
 8000aee:	e08d      	b.n	8000c0c <_ZN7WS2812B7executeEv+0x130>
		if(HDMA->State != HAL_DMA_STATE_READY){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2225      	movs	r2, #37	; 0x25
 8000af6:	5c9b      	ldrb	r3, [r3, r2]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	3b01      	subs	r3, #1
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	4193      	sbcs	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d007      	beq.n	8000b16 <_ZN7WS2812B7executeEv+0x3a>
			HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f001 fe33 	bl	800277c <HAL_TIM_PWM_Stop_DMA>
		}

		for(int i=0; i<RST; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2b31      	cmp	r3, #49	; 0x31
 8000b1e:	dc0b      	bgt.n	8000b38 <_ZN7WS2812B7executeEv+0x5c>
			pwm_buf[i]=0;
 8000b20:	6879      	ldr	r1, [r7, #4]
 8000b22:	23c6      	movs	r3, #198	; 0xc6
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	188a      	adds	r2, r1, r2
 8000b2a:	18d3      	adds	r3, r2, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<RST; i++){
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	3301      	adds	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
 8000b36:	e7f0      	b.n	8000b1a <_ZN7WS2812B7executeEv+0x3e>
		}

		for(int i=0; i<LED_NUM; i++){
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b40:	dc54      	bgt.n	8000bec <_ZN7WS2812B7executeEv+0x110>
			for(int j=0; j<3; j++){
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	dc4b      	bgt.n	8000be4 <_ZN7WS2812B7executeEv+0x108>
				for(int k=7; k>=0; k--){
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db42      	blt.n	8000bdc <_ZN7WS2812B7executeEv+0x100>
					int x=(rgb_buf[i][j]>>k)&1;
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	189b      	adds	r3, r3, r2
 8000b60:	18ca      	adds	r2, r1, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	330c      	adds	r3, #12
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	411a      	asrs	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d115      	bne.n	8000baa <_ZN7WS2812B7executeEv+0xce>
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	0013      	movs	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	3332      	adds	r3, #50	; 0x32
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	18d2      	adds	r2, r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2107      	movs	r1, #7
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	18d2      	adds	r2, r2, r3
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	23c6      	movs	r3, #198	; 0xc6
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	188a      	adds	r2, r1, r2
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	220a      	movs	r2, #10
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e014      	b.n	8000bd4 <_ZN7WS2812B7executeEv+0xf8>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	0013      	movs	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	3332      	adds	r3, #50	; 0x32
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	18d2      	adds	r2, r2, r3
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	1acb      	subs	r3, r1, r3
 8000bc4:	18d2      	adds	r2, r2, r3
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	23c6      	movs	r3, #198	; 0xc6
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	188a      	adds	r2, r1, r2
 8000bce:	18d3      	adds	r3, r2, r3
 8000bd0:	2205      	movs	r2, #5
 8000bd2:	701a      	strb	r2, [r3, #0]
				for(int k=7; k>=0; k--){
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	e7b9      	b.n	8000b50 <_ZN7WS2812B7executeEv+0x74>
			for(int j=0; j<3; j++){
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e7b0      	b.n	8000b46 <_ZN7WS2812B7executeEv+0x6a>
		for(int i=0; i<LED_NUM; i++){
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	3301      	adds	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	e7a7      	b.n	8000b3c <_ZN7WS2812B7executeEv+0x60>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t*)pwm_buf, RST+(LED_NUM*24));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6858      	ldr	r0, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	338d      	adds	r3, #141	; 0x8d
 8000bfa:	33ff      	adds	r3, #255	; 0xff
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <_ZN7WS2812B7executeEv+0x13c>)
 8000c00:	f001 fbce 	bl	80023a0 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <_ZN7WS2812B7executeEv+0x138>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	5499      	strb	r1, [r3, r2]

	}else{

	}
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b008      	add	sp, #32
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	00000dbe 	.word	0x00000dbe
 8000c18:	00000c32 	.word	0x00000c32

08000c1c <_ZN7WS2812B4initEv>:

void WS2812B::init(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b31      	cmp	r3, #49	; 0x31
 8000c2c:	dc0b      	bgt.n	8000c46 <_ZN7WS2812B4initEv+0x2a>
	        pwm_buf[i]=0;
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	23c6      	movs	r3, #198	; 0xc6
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	188a      	adds	r2, r1, r2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<RST; i++){
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e7f0      	b.n	8000c28 <_ZN7WS2812B4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8000c46:	2332      	movs	r3, #50	; 0x32
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	429a      	cmp	r2, r3
 8000c52:	da0b      	bge.n	8000c6c <_ZN7WS2812B4initEv+0x50>
		pwm_buf[i]=LOW;
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	23c6      	movs	r3, #198	; 0xc6
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	188a      	adds	r2, r1, r2
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	2205      	movs	r2, #5
 8000c62:	701a      	strb	r2, [r3, #0]
	for(int i=RST; i<LED_NUM*24; i++){
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	e7ee      	b.n	8000c4a <_ZN7WS2812B4initEv+0x2e>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t*)pwm_buf, RST+(LED_NUM*24));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6858      	ldr	r0, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	0019      	movs	r1, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	338d      	adds	r3, #141	; 0x8d
 8000c7a:	33ff      	adds	r3, #255	; 0xff
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <_ZN7WS2812B4initEv+0x70>)
 8000c80:	f001 fb8e 	bl	80023a0 <HAL_TIM_PWM_Start_DMA>
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	00000c32 	.word	0x00000c32

08000c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	f7ff febe 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cbe:	f003 f92d 	bl	8003f1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cc2:	f7ff fb5f 	bl	8000384 <main>

08000cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd4:	08004064 	.word	0x08004064
  ldr r2, =_sbss
 8000cd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cdc:	20000f8c 	.word	0x20000f8c

08000ce0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x3c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Init+0x3c>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0049      	lsls	r1, r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f000 f810 	bl	8000d24 <HAL_InitTick>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e001      	b.n	8000d14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fd28 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_InitTick+0x88>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d02b      	beq.n	8000d94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_InitTick+0x8c>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_InitTick+0x88>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	0019      	movs	r1, r3
 8000d46:	23fa      	movs	r3, #250	; 0xfa
 8000d48:	0098      	lsls	r0, r3, #2
 8000d4a:	f7ff f9d9 	bl	8000100 <__udivsi3>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0019      	movs	r1, r3
 8000d52:	0020      	movs	r0, r4
 8000d54:	f7ff f9d4 	bl	8000100 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 f919 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d112      	bne.n	8000d8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d80a      	bhi.n	8000d80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
 8000d70:	2200      	movs	r2, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f8e8 	bl	8000f48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_InitTick+0x90>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e00d      	b.n	8000d9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e008      	b.n	8000d9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e003      	b.n	8000d9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b005      	add	sp, #20
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	18d2      	adds	r2, r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000f88 	.word	0x20000f88

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000f88 	.word	0x20000f88

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d809      	bhi.n	8000e18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	231f      	movs	r3, #31
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_EnableIRQ+0x30>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	4091      	lsls	r1, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b7f      	cmp	r3, #127	; 0x7f
 8000e38:	d828      	bhi.n	8000e8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	33c0      	adds	r3, #192	; 0xc0
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	589b      	ldr	r3, [r3, r2]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e8a:	e031      	b.n	8000ef0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0019      	movs	r1, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	400b      	ands	r3, r1
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3306      	adds	r3, #6
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	2203      	movs	r2, #3
 8000eae:	400a      	ands	r2, r1
 8000eb0:	00d2      	lsls	r2, r2, #3
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4003      	ands	r3, r0
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	001c      	movs	r4, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	4023      	ands	r3, r4
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	3306      	adds	r3, #6
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	18c3      	adds	r3, r0, r3
 8000eec:	3304      	adds	r3, #4
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	045b      	lsls	r3, r3, #17
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d301      	bcc.n	8000f18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f14:	2301      	movs	r3, #1
 8000f16:	e010      	b.n	8000f3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SysTick_Config+0x44>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff ff7c 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x44>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x44>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	210f      	movs	r1, #15
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	1c02      	adds	r2, r0, #0
 8000f58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	0002      	movs	r2, r0
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff33 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ffaf 	bl	8000f00 <SysTick_Config>
 8000fa2:	0003      	movs	r3, r0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e077      	b.n	80010ae <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <HAL_DMA_Init+0x10c>)
 8000fc4:	4694      	mov	ip, r2
 8000fc6:	4463      	add	r3, ip
 8000fc8:	2114      	movs	r1, #20
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff f898 	bl	8000100 <__udivsi3>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	009a      	lsls	r2, r3, #2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2225      	movs	r2, #37	; 0x25
 8000fdc:	2102      	movs	r1, #2
 8000fde:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4934      	ldr	r1, [pc, #208]	; (80010bc <HAL_DMA_Init+0x110>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0018      	movs	r0, r3
 800102a:	f000 fa2b 	bl	8001484 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	01db      	lsls	r3, r3, #7
 8001036:	429a      	cmp	r2, r3
 8001038:	d102      	bne.n	8001040 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	213f      	movs	r1, #63	; 0x3f
 800104a:	400a      	ands	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001056:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d011      	beq.n	8001084 <HAL_DMA_Init+0xd8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d80d      	bhi.n	8001084 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fa36 	bl	80014dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	e008      	b.n	8001096 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2225      	movs	r2, #37	; 0x25
 80010a0:	2101      	movs	r1, #1
 80010a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	; 0x24
 80010a8:	2100      	movs	r1, #0
 80010aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	bffdfff8 	.word	0xbffdfff8
 80010bc:	ffff800f 	.word	0xffff800f

080010c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2317      	movs	r3, #23
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2224      	movs	r2, #36	; 0x24
 80010da:	5c9b      	ldrb	r3, [r3, r2]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_DMA_Start_IT+0x24>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e06f      	b.n	80011c4 <HAL_DMA_Start_IT+0x104>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2101      	movs	r1, #1
 80010ea:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2225      	movs	r2, #37	; 0x25
 80010f0:	5c9b      	ldrb	r3, [r3, r2]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d157      	bne.n	80011a8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2225      	movs	r2, #37	; 0x25
 80010fc:	2102      	movs	r1, #2
 80010fe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	438a      	bics	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f971 	bl	8001404 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	210e      	movs	r1, #14
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e00f      	b.n	800115c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2104      	movs	r1, #4
 8001148:	438a      	bics	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	210a      	movs	r1, #10
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	025b      	lsls	r3, r3, #9
 8001166:	4013      	ands	r3, r2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0049      	lsls	r1, r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0049      	lsls	r1, r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00a      	b.n	80011be <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2224      	movs	r2, #36	; 0x24
 80011b2:	2100      	movs	r1, #0
 80011b4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80011b6:	2317      	movs	r3, #23
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011be:	2317      	movs	r3, #23
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	781b      	ldrb	r3, [r3, #0]
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b006      	add	sp, #24
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d4:	210f      	movs	r1, #15
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2225      	movs	r2, #37	; 0x25
 80011e0:	5c9b      	ldrb	r3, [r3, r2]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d006      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2204      	movs	r2, #4
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e049      	b.n	800128a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	210e      	movs	r1, #14
 8001202:	438a      	bics	r2, r1
 8001204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	438a      	bics	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	491d      	ldr	r1, [pc, #116]	; (8001298 <HAL_DMA_Abort_IT+0xcc>)
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_DMA_Abort_IT+0xd0>)
 8001228:	6859      	ldr	r1, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	221c      	movs	r2, #28
 8001230:	4013      	ands	r3, r2
 8001232:	2201      	movs	r2, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_DMA_Abort_IT+0xd0>)
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001244:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001258:	490f      	ldr	r1, [pc, #60]	; (8001298 <HAL_DMA_Abort_IT+0xcc>)
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001266:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2225      	movs	r2, #37	; 0x25
 800126c:	2101      	movs	r1, #1
 800126e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	0010      	movs	r0, r2
 8001288:	4798      	blx	r3
    }
  }
  return status;
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b004      	add	sp, #16
 8001296:	bd80      	pop	{r7, pc}
 8001298:	fffffeff 	.word	0xfffffeff
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80012a8:	4b55      	ldr	r3, [pc, #340]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	221c      	movs	r2, #28
 80012bc:	4013      	ands	r3, r2
 80012be:	2204      	movs	r2, #4
 80012c0:	409a      	lsls	r2, r3
 80012c2:	0013      	movs	r3, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	d027      	beq.n	800131a <HAL_DMA_IRQHandler+0x7a>
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2204      	movs	r2, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d023      	beq.n	800131a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2220      	movs	r2, #32
 80012da:	4013      	ands	r3, r2
 80012dc:	d107      	bne.n	80012ee <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2104      	movs	r1, #4
 80012ea:	438a      	bics	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 80012f0:	6859      	ldr	r1, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	221c      	movs	r2, #28
 80012f8:	4013      	ands	r3, r2
 80012fa:	2204      	movs	r2, #4
 80012fc:	409a      	lsls	r2, r3
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	2b00      	cmp	r3, #0
 800130a:	d100      	bne.n	800130e <HAL_DMA_IRQHandler+0x6e>
 800130c:	e073      	b.n	80013f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	0010      	movs	r0, r2
 8001316:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001318:	e06d      	b.n	80013f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	221c      	movs	r2, #28
 8001320:	4013      	ands	r3, r2
 8001322:	2202      	movs	r2, #2
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4013      	ands	r3, r2
 800132c:	d02e      	beq.n	800138c <HAL_DMA_IRQHandler+0xec>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d02a      	beq.n	800138c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2220      	movs	r2, #32
 800133e:	4013      	ands	r3, r2
 8001340:	d10b      	bne.n	800135a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	210a      	movs	r1, #10
 800134e:	438a      	bics	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2225      	movs	r2, #37	; 0x25
 8001356:	2101      	movs	r1, #1
 8001358:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 800135c:	6859      	ldr	r1, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	221c      	movs	r2, #28
 8001364:	4013      	ands	r3, r2
 8001366:	2202      	movs	r2, #2
 8001368:	409a      	lsls	r2, r3
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03a      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	0010      	movs	r0, r2
 8001388:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800138a:	e034      	b.n	80013f6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	221c      	movs	r2, #28
 8001392:	4013      	ands	r3, r2
 8001394:	2208      	movs	r2, #8
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	d02b      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x158>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2208      	movs	r2, #8
 80013a4:	4013      	ands	r3, r2
 80013a6:	d027      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	210e      	movs	r1, #14
 80013b4:	438a      	bics	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	221c      	movs	r2, #28
 80013c2:	4013      	ands	r3, r2
 80013c4:	2201      	movs	r2, #1
 80013c6:	409a      	lsls	r2, r3
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_DMA_IRQHandler+0x160>)
 80013ca:	430a      	orrs	r2, r1
 80013cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2225      	movs	r2, #37	; 0x25
 80013d8:	2101      	movs	r1, #1
 80013da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	2100      	movs	r1, #0
 80013e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	0010      	movs	r0, r2
 80013f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46c0      	nop			; (mov r8, r8)
}
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020000 	.word	0x40020000

08001404 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800141a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800142c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <DMA_SetConfig+0x7c>)
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	221c      	movs	r2, #28
 8001438:	4013      	ands	r3, r2
 800143a:	2201      	movs	r2, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <DMA_SetConfig+0x7c>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b10      	cmp	r3, #16
 8001452:	d108      	bne.n	8001466 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001464:	e007      	b.n	8001476 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	60da      	str	r2, [r3, #12]
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40020000 	.word	0x40020000

08001484 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001494:	4694      	mov	ip, r2
 8001496:	4463      	add	r3, ip
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	001a      	movs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	001a      	movs	r2, r3
 80014a6:	23ff      	movs	r3, #255	; 0xff
 80014a8:	4013      	ands	r3, r2
 80014aa:	3b08      	subs	r3, #8
 80014ac:	2114      	movs	r1, #20
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe fe26 	bl	8000100 <__udivsi3>
 80014b4:	0003      	movs	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80014bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	221f      	movs	r2, #31
 80014c2:	4013      	ands	r3, r2
 80014c4:	2201      	movs	r2, #1
 80014c6:	409a      	lsls	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b004      	add	sp, #16
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	10008200 	.word	0x10008200
 80014d8:	40020880 	.word	0x40020880

080014dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	223f      	movs	r2, #63	; 0x3f
 80014ea:	4013      	ands	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014f2:	4694      	mov	ip, r2
 80014f4:	4463      	add	r3, ip
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	001a      	movs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001502:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3b01      	subs	r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	4013      	ands	r3, r2
 800150c:	2201      	movs	r2, #1
 800150e:	409a      	lsls	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}
 800151c:	1000823f 	.word	0x1000823f
 8001520:	40020940 	.word	0x40020940

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e147      	b.n	80017c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d100      	bne.n	800154c <HAL_GPIO_Init+0x28>
 800154a:	e138      	b.n	80017be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	4013      	ands	r3, r2
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	4013      	ands	r3, r2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	2201      	movs	r2, #1
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	4013      	ands	r3, r2
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	58d3      	ldr	r3, [r2, r3]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2207      	movs	r2, #7
 8001620:	4013      	ands	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2107      	movs	r1, #7
 800163a:	400b      	ands	r3, r1
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	6939      	ldr	r1, [r7, #16]
 8001654:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	401a      	ands	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d100      	bne.n	8001698 <HAL_GPIO_Init+0x174>
 8001696:	e092      	b.n	80017be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3318      	adds	r3, #24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	589b      	ldr	r3, [r3, r2]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2203      	movs	r2, #3
 80016aa:	4013      	ands	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	220f      	movs	r2, #15
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x1ca>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x2bc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x1c6>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2c0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x1c2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x1be>
 80016de:	2303      	movs	r3, #3
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016ee:	2300      	movs	r3, #0
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	2103      	movs	r1, #3
 80016f4:	400a      	ands	r2, r1
 80016f6:	00d2      	lsls	r2, r2, #3
 80016f8:	4093      	lsls	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001700:	4936      	ldr	r1, [pc, #216]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3318      	adds	r3, #24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43da      	mvns	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	035b      	lsls	r3, r3, #13
 8001726:	4013      	ands	r3, r2
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	039b      	lsls	r3, r3, #14
 8001750:	4013      	ands	r3, r2
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001764:	2384      	movs	r3, #132	; 0x84
 8001766:	58d3      	ldr	r3, [r2, r3]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001788:	4914      	ldr	r1, [pc, #80]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800178a:	2284      	movs	r2, #132	; 0x84
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	58d3      	ldr	r3, [r2, r3]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4013      	ands	r3, r2
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b6:	4909      	ldr	r1, [pc, #36]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	40da      	lsrs	r2, r3
 80017cc:	1e13      	subs	r3, r2, #0
 80017ce:	d000      	beq.n	80017d2 <HAL_GPIO_Init+0x2ae>
 80017d0:	e6b0      	b.n	8001534 <HAL_GPIO_Init+0x10>
  }
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b006      	add	sp, #24
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021800 	.word	0x40021800
 80017e0:	50000400 	.word	0x50000400
 80017e4:	50000800 	.word	0x50000800
 80017e8:	50000c00 	.word	0x50000c00

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	0008      	movs	r0, r1
 80017f6:	0011      	movs	r1, r2
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	1c02      	adds	r2, r0, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1c7b      	adds	r3, r7, #1
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	1c7b      	adds	r3, r7, #1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180c:	1cbb      	adds	r3, r7, #2
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001836:	4013      	ands	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d11f      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	0013      	movs	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	189b      	adds	r3, r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4912      	ldr	r1, [pc, #72]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800185a:	0018      	movs	r0, r3
 800185c:	f7fe fc50 	bl	8000100 <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001866:	e008      	b.n	800187a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e001      	b.n	800187a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e009      	b.n	800188e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	401a      	ands	r2, r3
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	429a      	cmp	r2, r3
 800188a:	d0ed      	beq.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40007000 	.word	0x40007000
 800189c:	fffff9ff 	.word	0xfffff9ff
 80018a0:	20000000 	.word	0x20000000
 80018a4:	000f4240 	.word	0x000f4240

080018a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	23e0      	movs	r3, #224	; 0xe0
 80018b2:	01db      	lsls	r3, r3, #7
 80018b4:	4013      	ands	r3, r2
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e2f3      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4013      	ands	r3, r2
 80018da:	d100      	bne.n	80018de <HAL_RCC_OscConfig+0x1e>
 80018dc:	e07c      	b.n	80019d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018de:	4bc3      	ldr	r3, [pc, #780]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2238      	movs	r2, #56	; 0x38
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e8:	4bc0      	ldr	r3, [pc, #768]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4013      	ands	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b10      	cmp	r3, #16
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x3e>
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d002      	beq.n	8001904 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d10b      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4bb9      	ldr	r3, [pc, #740]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d062      	beq.n	80019d6 <HAL_RCC_OscConfig+0x116>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d15e      	bne.n	80019d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e2ce      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x78>
 8001928:	4bb0      	ldr	r3, [pc, #704]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4baf      	ldr	r3, [pc, #700]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0249      	lsls	r1, r1, #9
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e020      	b.n	800197a <HAL_RCC_OscConfig+0xba>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	23a0      	movs	r3, #160	; 0xa0
 800193e:	02db      	lsls	r3, r3, #11
 8001940:	429a      	cmp	r2, r3
 8001942:	d10e      	bne.n	8001962 <HAL_RCC_OscConfig+0xa2>
 8001944:	4ba9      	ldr	r3, [pc, #676]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4ba8      	ldr	r3, [pc, #672]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	02c9      	lsls	r1, r1, #11
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	4ba6      	ldr	r3, [pc, #664]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4ba5      	ldr	r3, [pc, #660]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0249      	lsls	r1, r1, #9
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0xba>
 8001962:	4ba2      	ldr	r3, [pc, #648]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4ba1      	ldr	r3, [pc, #644]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001968:	49a1      	ldr	r1, [pc, #644]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800196a:	400a      	ands	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4b9f      	ldr	r3, [pc, #636]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b9e      	ldr	r3, [pc, #632]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001974:	499f      	ldr	r1, [pc, #636]	; (8001bf4 <HAL_RCC_OscConfig+0x334>)
 8001976:	400a      	ands	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d014      	beq.n	80019ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff fa2b 	bl	8000ddc <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fa26 	bl	8000ddc <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e28d      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	4b93      	ldr	r3, [pc, #588]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	029b      	lsls	r3, r3, #10
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xcc>
 80019aa:	e015      	b.n	80019d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa16 	bl	8000ddc <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff fa11 	bl	8000ddc <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e278      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0xf6>
 80019d4:	e000      	b.n	80019d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d100      	bne.n	80019e4 <HAL_RCC_OscConfig+0x124>
 80019e2:	e099      	b.n	8001b18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e4:	4b81      	ldr	r3, [pc, #516]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2238      	movs	r2, #56	; 0x38
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2203      	movs	r2, #3
 80019f4:	4013      	ands	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_OscConfig+0x144>
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d002      	beq.n	8001a0a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d135      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0a:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4013      	ands	r3, r2
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x162>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e24b      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a74      	ldr	r2, [pc, #464]	; (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	021a      	lsls	r2, r3, #8
 8001a32:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a34:	430a      	orrs	r2, r1
 8001a36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a3e:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6e      	ldr	r2, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a52:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0adb      	lsrs	r3, r3, #11
 8001a58:	2207      	movs	r2, #7
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x340>)
 8001a5e:	40da      	lsrs	r2, r3
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x344>)
 8001a62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x348>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff f95b 	bl	8000d24 <HAL_InitTick>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d051      	beq.n	8001b16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e221      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d030      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <HAL_RCC_OscConfig+0x33c>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b55      	ldr	r3, [pc, #340]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	0049      	lsls	r1, r1, #1
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f99c 	bl	8000ddc <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f997 	bl	8000ddc <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1fe      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_RCC_OscConfig+0x338>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	021a      	lsls	r2, r3, #8
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	e01b      	b.n	8001b18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ae0:	4b42      	ldr	r3, [pc, #264]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	4949      	ldr	r1, [pc, #292]	; (8001c0c <HAL_RCC_OscConfig+0x34c>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f976 	bl	8000ddc <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af6:	f7ff f971 	bl	8000ddc <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1d8      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x236>
 8001b14:	e000      	b.n	8001b18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d047      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2238      	movs	r2, #56	; 0x38
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b18      	cmp	r3, #24
 8001b2c:	d10a      	bne.n	8001b44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d03c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d138      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e1ba      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d019      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f940 	bl	8000ddc <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f93b 	bl	8000ddc <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1a2      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d0f1      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2a2>
 8001b7e:	e018      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	438a      	bics	r2, r1
 8001b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f926 	bl	8000ddc <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff f921 	bl	8000ddc <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e188      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d1f1      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2fe>
 8001bbc:	e0c6      	b.n	8001d4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bbe:	231f      	movs	r3, #31
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2238      	movs	r2, #56	; 0x38
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d11e      	bne.n	8001c10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d100      	bne.n	8001bde <HAL_RCC_OscConfig+0x31e>
 8001bdc:	e0b6      	b.n	8001d4c <HAL_RCC_OscConfig+0x48c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d000      	beq.n	8001be8 <HAL_RCC_OscConfig+0x328>
 8001be6:	e0b1      	b.n	8001d4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e166      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	fffeffff 	.word	0xfffeffff
 8001bf4:	fffbffff 	.word	0xfffbffff
 8001bf8:	ffff80ff 	.word	0xffff80ff
 8001bfc:	ffffc7ff 	.word	0xffffc7ff
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c10:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x360>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x362>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d011      	beq.n	8001c4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4ba7      	ldr	r3, [pc, #668]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2a:	4ba6      	ldr	r3, [pc, #664]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0549      	lsls	r1, r1, #21
 8001c30:	430a      	orrs	r2, r1
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c34:	4ba3      	ldr	r3, [pc, #652]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	055b      	lsls	r3, r3, #21
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c42:	231f      	movs	r3, #31
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b9f      	ldr	r3, [pc, #636]	; (8001ec8 <HAL_RCC_OscConfig+0x608>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c56:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x608>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b9b      	ldr	r3, [pc, #620]	; (8001ec8 <HAL_RCC_OscConfig+0x608>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0049      	lsls	r1, r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f8ba 	bl	8000ddc <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7ff f8b5 	bl	8000ddc <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e11c      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b91      	ldr	r3, [pc, #580]	; (8001ec8 <HAL_RCC_OscConfig+0x608>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3e2>
 8001c94:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c98:	4b8a      	ldr	r3, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x41c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x404>
 8001caa:	4b86      	ldr	r3, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb6:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cba:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x41c>
 8001cc4:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd0:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	438a      	bics	r2, r1
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d014      	beq.n	8001d0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f87a 	bl	8000ddc <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cec:	e009      	b.n	8001d02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff f875 	bl	8000ddc <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4a74      	ldr	r2, [pc, #464]	; (8001ecc <HAL_RCC_OscConfig+0x60c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0db      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x42e>
 8001d0c:	e013      	b.n	8001d36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f865 	bl	8000ddc <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d16:	e009      	b.n	8001d2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7ff f860 	bl	8000ddc <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x60c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0c6      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2202      	movs	r2, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d44:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d46:	4962      	ldr	r1, [pc, #392]	; (8001ed0 <HAL_RCC_OscConfig+0x610>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x496>
 8001d54:	e0b0      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2238      	movs	r2, #56	; 0x38
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4a4>
 8001d62:	e078      	b.n	8001e56 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d153      	bne.n	8001e14 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d72:	4958      	ldr	r1, [pc, #352]	; (8001ed4 <HAL_RCC_OscConfig+0x614>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff f830 	bl	8000ddc <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff f82b 	bl	8000ddc <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e092      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	049b      	lsls	r3, r3, #18
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <HAL_RCC_OscConfig+0x618>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0449      	lsls	r1, r1, #17
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ddc:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0549      	lsls	r1, r1, #21
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7fe fff7 	bl	8000ddc <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe fff2 	bl	8000ddc <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e059      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	049b      	lsls	r3, r3, #18
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x534>
 8001e12:	e051      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e1a:	492e      	ldr	r1, [pc, #184]	; (8001ed4 <HAL_RCC_OscConfig+0x614>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ffdc 	bl	8000ddc <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe ffd7 	bl	8000ddc <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e03e      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	049b      	lsls	r3, r3, #18
 8001e44:	4013      	ands	r3, r2
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e4e:	4923      	ldr	r1, [pc, #140]	; (8001edc <HAL_RCC_OscConfig+0x61c>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	e030      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e02b      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x604>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d11e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2270      	movs	r2, #112	; 0x70
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d117      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	23fe      	movs	r3, #254	; 0xfe
 8001e88:	01db      	lsls	r3, r3, #7
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d10e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	23f8      	movs	r3, #248	; 0xf8
 8001e9a:	039b      	lsls	r3, r3, #14
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	0f5b      	lsrs	r3, r3, #29
 8001eaa:	075a      	lsls	r2, r3, #29
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b008      	add	sp, #32
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	00001388 	.word	0x00001388
 8001ed0:	efffffff 	.word	0xefffffff
 8001ed4:	feffffff 	.word	0xfeffffff
 8001ed8:	1fc1808c 	.word	0x1fc1808c
 8001edc:	effefffc 	.word	0xeffefffc

08001ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0e9      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4013      	ands	r3, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d91e      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	4b70      	ldr	r3, [pc, #448]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f14:	f7fe ff62 	bl	8000ddc <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f1c:	e009      	b.n	8001f32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7fe ff5d 	bl	8000ddc <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a6a      	ldr	r2, [pc, #424]	; (80020d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e0ca      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f32:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2207      	movs	r2, #7
 8001f38:	4013      	ands	r3, r2
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	4013      	ands	r3, r2
 8001f52:	d006      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f54:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	21e0      	movs	r1, #224	; 0xe0
 8001f5c:	01c9      	lsls	r1, r1, #7
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f62:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_RCC_ClockConfig+0x1fc>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d057      	beq.n	8002030 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	029b      	lsls	r3, r3, #10
 8001f90:	4013      	ands	r3, r2
 8001f92:	d12b      	bne.n	8001fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e097      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa0:	4b4d      	ldr	r3, [pc, #308]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	049b      	lsls	r3, r3, #18
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d11f      	bne.n	8001fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e08b      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d113      	bne.n	8001fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e07f      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e074      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e06d      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002000:	f7fe feec 	bl	8000ddc <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002008:	e009      	b.n	800201e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200a:	f7fe fee7 	bl	8000ddc <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e054      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2238      	movs	r2, #56	; 0x38
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	429a      	cmp	r2, r3
 800202e:	d1ec      	bne.n	800200a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2207      	movs	r2, #7
 8002036:	4013      	ands	r3, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d21e      	bcs.n	800207c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2207      	movs	r2, #7
 8002044:	4393      	bics	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002050:	f7fe fec4 	bl	8000ddc <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002058:	e009      	b.n	800206e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205a:	f7fe febf 	bl	8000ddc <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_RCC_ClockConfig+0x1f4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e02c      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2207      	movs	r2, #7
 8002074:	4013      	ands	r3, r2
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2204      	movs	r2, #4
 8002082:	4013      	ands	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <HAL_RCC_ClockConfig+0x200>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800209a:	f000 f829 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 800209e:	0001      	movs	r1, r0
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCC_ClockConfig+0x1f8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	220f      	movs	r2, #15
 80020a8:	401a      	ands	r2, r3
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x204>)
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	58d3      	ldr	r3, [r2, r3]
 80020b0:	221f      	movs	r2, #31
 80020b2:	4013      	ands	r3, r2
 80020b4:	000a      	movs	r2, r1
 80020b6:	40da      	lsrs	r2, r3
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x208>)
 80020ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x20c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fe2f 	bl	8000d24 <HAL_InitTick>
 80020c6:	0003      	movs	r3, r0
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b004      	add	sp, #16
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	00001388 	.word	0x00001388
 80020d8:	40021000 	.word	0x40021000
 80020dc:	fffff0ff 	.word	0xfffff0ff
 80020e0:	ffff8fff 	.word	0xffff8fff
 80020e4:	08003f8c 	.word	0x08003f8c
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2238      	movs	r2, #56	; 0x38
 80020fc:	4013      	ands	r3, r2
 80020fe:	d10f      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002100:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0adb      	lsrs	r3, r3, #11
 8002106:	2207      	movs	r2, #7
 8002108:	4013      	ands	r3, r2
 800210a:	2201      	movs	r2, #1
 800210c:	409a      	lsls	r2, r3
 800210e:	0013      	movs	r3, r2
 8002110:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	4835      	ldr	r0, [pc, #212]	; (80021ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002116:	f7fd fff3 	bl	8000100 <__udivsi3>
 800211a:	0003      	movs	r3, r0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	e05d      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2238      	movs	r2, #56	; 0x38
 8002126:	4013      	ands	r3, r2
 8002128:	2b08      	cmp	r3, #8
 800212a:	d102      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	e054      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2238      	movs	r2, #56	; 0x38
 8002138:	4013      	ands	r3, r2
 800213a:	2b10      	cmp	r3, #16
 800213c:	d138      	bne.n	80021b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	2207      	movs	r2, #7
 8002150:	4013      	ands	r3, r2
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	4823      	ldr	r0, [pc, #140]	; (80021ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002160:	f7fd ffce 	bl	8000100 <__udivsi3>
 8002164:	0003      	movs	r3, r0
 8002166:	0019      	movs	r1, r3
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	227f      	movs	r2, #127	; 0x7f
 8002170:	4013      	ands	r3, r2
 8002172:	434b      	muls	r3, r1
 8002174:	617b      	str	r3, [r7, #20]
        break;
 8002176:	e00d      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	481c      	ldr	r0, [pc, #112]	; (80021ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800217c:	f7fd ffc0 	bl	8000100 <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	0019      	movs	r1, r3
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	227f      	movs	r2, #127	; 0x7f
 800218c:	4013      	ands	r3, r2
 800218e:	434b      	muls	r3, r1
 8002190:	617b      	str	r3, [r7, #20]
        break;
 8002192:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0f5b      	lsrs	r3, r3, #29
 800219a:	2207      	movs	r2, #7
 800219c:	4013      	ands	r3, r2
 800219e:	3301      	adds	r3, #1
 80021a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	6978      	ldr	r0, [r7, #20]
 80021a6:	f7fd ffab 	bl	8000100 <__udivsi3>
 80021aa:	0003      	movs	r3, r0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	e015      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2238      	movs	r2, #56	; 0x38
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d103      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2238      	movs	r2, #56	; 0x38
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b18      	cmp	r3, #24
 80021ce:	d103      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021d0:	23fa      	movs	r3, #250	; 0xfa
 80021d2:	01db      	lsls	r3, r3, #7
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e001      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021dc:	693b      	ldr	r3, [r7, #16]
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000
 80021ec:	00f42400 	.word	0x00f42400

080021f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_RCC_GetHCLKFreq+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002208:	f7ff fff2 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800220c:	0004      	movs	r4, r0
 800220e:	f7ff fb4b 	bl	80018a8 <LL_RCC_GetAPB1Prescaler>
 8002212:	0003      	movs	r3, r0
 8002214:	0b1a      	lsrs	r2, r3, #12
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	58d3      	ldr	r3, [r2, r3]
 800221c:	221f      	movs	r2, #31
 800221e:	4013      	ands	r3, r2
 8002220:	40dc      	lsrs	r4, r3
 8002222:	0023      	movs	r3, r4
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bdb0      	pop	{r4, r5, r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	08003fcc 	.word	0x08003fcc

08002230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e04a      	b.n	80022d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	223d      	movs	r2, #61	; 0x3d
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	223c      	movs	r2, #60	; 0x3c
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f7fe faa7 	bl	80007ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	223d      	movs	r2, #61	; 0x3d
 8002262:	2102      	movs	r1, #2
 8002264:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	0019      	movs	r1, r3
 8002270:	0010      	movs	r0, r2
 8002272:	f000 fe27 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2248      	movs	r2, #72	; 0x48
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	223e      	movs	r2, #62	; 0x3e
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223f      	movs	r2, #63	; 0x3f
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2241      	movs	r2, #65	; 0x41
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2242      	movs	r2, #66	; 0x42
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2243      	movs	r2, #67	; 0x43
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2244      	movs	r2, #68	; 0x44
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2245      	movs	r2, #69	; 0x45
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2246      	movs	r2, #70	; 0x46
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2247      	movs	r2, #71	; 0x47
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223d      	movs	r2, #61	; 0x3d
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e04a      	b.n	8002388 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223d      	movs	r2, #61	; 0x3d
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d107      	bne.n	800230e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	223c      	movs	r2, #60	; 0x3c
 8002302:	2100      	movs	r1, #0
 8002304:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f841 	bl	8002390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223d      	movs	r2, #61	; 0x3d
 8002312:	2102      	movs	r1, #2
 8002314:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	0019      	movs	r1, r3
 8002320:	0010      	movs	r0, r2
 8002322:	f000 fdcf 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2248      	movs	r2, #72	; 0x48
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	223e      	movs	r2, #62	; 0x3e
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	223f      	movs	r2, #63	; 0x3f
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2240      	movs	r2, #64	; 0x40
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2241      	movs	r2, #65	; 0x41
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2242      	movs	r2, #66	; 0x42
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2243      	movs	r2, #67	; 0x43
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2244      	movs	r2, #68	; 0x44
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2245      	movs	r2, #69	; 0x45
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2246      	movs	r2, #70	; 0x46
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2247      	movs	r2, #71	; 0x47
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	223d      	movs	r2, #61	; 0x3d
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	001a      	movs	r2, r3
 80023ae:	1cbb      	adds	r3, r7, #2
 80023b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2317      	movs	r3, #23
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_TIM_PWM_Start_DMA+0x32>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	223e      	movs	r2, #62	; 0x3e
 80023c4:	5c9b      	ldrb	r3, [r3, r2]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3b02      	subs	r3, #2
 80023ca:	425a      	negs	r2, r3
 80023cc:	4153      	adcs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e037      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0xa2>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d108      	bne.n	80023ea <HAL_TIM_PWM_Start_DMA+0x4a>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	223f      	movs	r2, #63	; 0x3f
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3b02      	subs	r3, #2
 80023e2:	425a      	negs	r2, r3
 80023e4:	4153      	adcs	r3, r2
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e02b      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0xa2>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d108      	bne.n	8002402 <HAL_TIM_PWM_Start_DMA+0x62>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3b02      	subs	r3, #2
 80023fa:	425a      	negs	r2, r3
 80023fc:	4153      	adcs	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e01f      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d108      	bne.n	800241a <HAL_TIM_PWM_Start_DMA+0x7a>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2241      	movs	r2, #65	; 0x41
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3b02      	subs	r3, #2
 8002412:	425a      	negs	r2, r3
 8002414:	4153      	adcs	r3, r2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e013      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0xa2>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b10      	cmp	r3, #16
 800241e:	d108      	bne.n	8002432 <HAL_TIM_PWM_Start_DMA+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2242      	movs	r2, #66	; 0x42
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3b02      	subs	r3, #2
 800242a:	425a      	negs	r2, r3
 800242c:	4153      	adcs	r3, r2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	e007      	b.n	8002442 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2243      	movs	r2, #67	; 0x43
 8002436:	5c9b      	ldrb	r3, [r3, r2]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3b02      	subs	r3, #2
 800243c:	425a      	negs	r2, r3
 800243e:	4153      	adcs	r3, r2
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
 8002448:	e183      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	223e      	movs	r2, #62	; 0x3e
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	425a      	negs	r2, r3
 800245c:	4153      	adcs	r3, r2
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e037      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x132>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d108      	bne.n	800247a <HAL_TIM_PWM_Start_DMA+0xda>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	223f      	movs	r2, #63	; 0x3f
 800246c:	5c9b      	ldrb	r3, [r3, r2]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	425a      	negs	r2, r3
 8002474:	4153      	adcs	r3, r2
 8002476:	b2db      	uxtb	r3, r3
 8002478:	e02b      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x132>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d108      	bne.n	8002492 <HAL_TIM_PWM_Start_DMA+0xf2>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	5c9b      	ldrb	r3, [r3, r2]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	425a      	negs	r2, r3
 800248c:	4153      	adcs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e01f      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x132>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d108      	bne.n	80024aa <HAL_TIM_PWM_Start_DMA+0x10a>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2241      	movs	r2, #65	; 0x41
 800249c:	5c9b      	ldrb	r3, [r3, r2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	425a      	negs	r2, r3
 80024a4:	4153      	adcs	r3, r2
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e013      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x132>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d108      	bne.n	80024c2 <HAL_TIM_PWM_Start_DMA+0x122>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2242      	movs	r2, #66	; 0x42
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	425a      	negs	r2, r3
 80024bc:	4153      	adcs	r3, r2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	e007      	b.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x132>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2243      	movs	r2, #67	; 0x43
 80024c6:	5c9b      	ldrb	r3, [r3, r2]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	425a      	negs	r2, r3
 80024ce:	4153      	adcs	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d035      	beq.n	8002542 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_TIM_PWM_Start_DMA+0x144>
 80024dc:	1cbb      	adds	r3, r7, #2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e134      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_TIM_PWM_Start_DMA+0x158>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	223e      	movs	r2, #62	; 0x3e
 80024f2:	2102      	movs	r1, #2
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d104      	bne.n	8002508 <HAL_TIM_PWM_Start_DMA+0x168>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	2102      	movs	r1, #2
 8002504:	5499      	strb	r1, [r3, r2]
 8002506:	e01e      	b.n	8002546 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d104      	bne.n	8002518 <HAL_TIM_PWM_Start_DMA+0x178>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2240      	movs	r2, #64	; 0x40
 8002512:	2102      	movs	r1, #2
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	e016      	b.n	8002546 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d104      	bne.n	8002528 <HAL_TIM_PWM_Start_DMA+0x188>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2241      	movs	r2, #65	; 0x41
 8002522:	2102      	movs	r1, #2
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	e00e      	b.n	8002546 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b10      	cmp	r3, #16
 800252c:	d104      	bne.n	8002538 <HAL_TIM_PWM_Start_DMA+0x198>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2242      	movs	r2, #66	; 0x42
 8002532:	2102      	movs	r1, #2
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	e006      	b.n	8002546 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2243      	movs	r2, #67	; 0x43
 800253c:	2102      	movs	r1, #2
 800253e:	5499      	strb	r1, [r3, r2]
 8002540:	e001      	b.n	8002546 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e105      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d100      	bne.n	800254e <HAL_TIM_PWM_Start_DMA+0x1ae>
 800254c:	e080      	b.n	8002650 <HAL_TIM_PWM_Start_DMA+0x2b0>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d900      	bls.n	8002556 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002554:	e0a1      	b.n	800269a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d054      	beq.n	8002606 <HAL_TIM_PWM_Start_DMA+0x266>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b08      	cmp	r3, #8
 8002560:	d900      	bls.n	8002564 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002562:	e09a      	b.n	800269a <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d025      	beq.n	80025bc <HAL_TIM_PWM_Start_DMA+0x21c>
 8002570:	e093      	b.n	800269a <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	4a79      	ldr	r2, [pc, #484]	; (800275c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	4a78      	ldr	r2, [pc, #480]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002580:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002588:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3334      	adds	r3, #52	; 0x34
 8002596:	001a      	movs	r2, r3
 8002598:	1cbb      	adds	r3, r7, #2
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	f7fe fd90 	bl	80010c0 <HAL_DMA_Start_IT>
 80025a0:	1e03      	subs	r3, r0, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d4      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0089      	lsls	r1, r1, #2
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
      break;
 80025ba:	e073      	b.n	80026a4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	4a66      	ldr	r2, [pc, #408]	; (800275c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	4a64      	ldr	r2, [pc, #400]	; (8002764 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3338      	adds	r3, #56	; 0x38
 80025e0:	001a      	movs	r2, r3
 80025e2:	1cbb      	adds	r3, r7, #2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f7fe fd6b 	bl	80010c0 <HAL_DMA_Start_IT>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0af      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	00c9      	lsls	r1, r1, #3
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]
      break;
 8002604:	e04e      	b.n	80026a4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	4a54      	ldr	r2, [pc, #336]	; (800275c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	4a53      	ldr	r2, [pc, #332]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002614:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800261c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	001a      	movs	r2, r3
 800262c:	1cbb      	adds	r3, r7, #2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	f7fe fd46 	bl	80010c0 <HAL_DMA_Start_IT>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d001      	beq.n	800263c <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e08a      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0109      	lsls	r1, r1, #4
 800264a:	430a      	orrs	r2, r1
 800264c:	60da      	str	r2, [r3, #12]
      break;
 800264e:	e029      	b.n	80026a4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a41      	ldr	r2, [pc, #260]	; (800275c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	4a40      	ldr	r2, [pc, #256]	; (8002760 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800265e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a3f      	ldr	r2, [pc, #252]	; (8002764 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002666:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3340      	adds	r3, #64	; 0x40
 8002674:	001a      	movs	r2, r3
 8002676:	1cbb      	adds	r3, r7, #2
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	f7fe fd21 	bl	80010c0 <HAL_DMA_Start_IT>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e065      	b.n	8002752 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0149      	lsls	r1, r1, #5
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
      break;
 8002698:	e004      	b.n	80026a4 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 800269a:	2317      	movs	r3, #23
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
      break;
 80026a2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80026a4:	2317      	movs	r3, #23
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d14e      	bne.n	800274c <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	2201      	movs	r2, #1
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 ffb6 	bl	8003628 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a29      	ldr	r2, [pc, #164]	; (8002768 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_TIM_PWM_Start_DMA+0x33a>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d004      	beq.n	80026da <HAL_TIM_PWM_Start_DMA+0x33a>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_Start_DMA+0x33e>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_TIM_PWM_Start_DMA+0x340>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	0209      	lsls	r1, r1, #8
 80026f2:	430a      	orrs	r2, r1
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_TIM_PWM_Start_DMA+0x36a>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d116      	bne.n	8002738 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d016      	beq.n	800274a <HAL_TIM_PWM_Start_DMA+0x3aa>
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	025b      	lsls	r3, r3, #9
 8002722:	429a      	cmp	r2, r3
 8002724:	d011      	beq.n	800274a <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	e008      	b.n	800274a <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2101      	movs	r1, #1
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e000      	b.n	800274c <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800274c:	2317      	movs	r3, #23
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	781b      	ldrb	r3, [r3, #0]
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b006      	add	sp, #24
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	08002db1 	.word	0x08002db1
 8002760:	08002e5b 	.word	0x08002e5b
 8002764:	08002d1d 	.word	0x08002d1d
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800
 8002774:	40000400 	.word	0x40000400
 8002778:	00010007 	.word	0x00010007

0800277c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	230f      	movs	r3, #15
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d039      	beq.n	8002808 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d844      	bhi.n	8002824 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d025      	beq.n	80027ec <HAL_TIM_PWM_Stop_DMA+0x70>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d83e      	bhi.n	8002824 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_PWM_Stop_DMA+0x38>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d00e      	beq.n	80027d0 <HAL_TIM_PWM_Stop_DMA+0x54>
 80027b2:	e037      	b.n	8002824 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	495a      	ldr	r1, [pc, #360]	; (8002928 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7fe fcff 	bl	80011cc <HAL_DMA_Abort_IT>
      break;
 80027ce:	e02e      	b.n	800282e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4954      	ldr	r1, [pc, #336]	; (800292c <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80027dc:	400a      	ands	r2, r1
 80027de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe fcf1 	bl	80011cc <HAL_DMA_Abort_IT>
      break;
 80027ea:	e020      	b.n	800282e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	494e      	ldr	r1, [pc, #312]	; (8002930 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	0018      	movs	r0, r3
 8002802:	f7fe fce3 	bl	80011cc <HAL_DMA_Abort_IT>
      break;
 8002806:	e012      	b.n	800282e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4948      	ldr	r1, [pc, #288]	; (8002934 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002814:	400a      	ands	r2, r1
 8002816:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe fcd5 	bl	80011cc <HAL_DMA_Abort_IT>
      break;
 8002822:	e004      	b.n	800282e <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002824:	230f      	movs	r3, #15
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
      break;
 800282c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800282e:	230f      	movs	r3, #15
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d000      	beq.n	800283a <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002838:	e06e      	b.n	8002918 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fef0 	bl	8003628 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a39      	ldr	r2, [pc, #228]	; (800293c <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIM_PWM_Stop_DMA+0xea>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a37      	ldr	r2, [pc, #220]	; (8002940 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_Stop_DMA+0xee>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_TIM_PWM_Stop_DMA+0xf0>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002878:	4013      	ands	r3, r2
 800287a:	d10d      	bne.n	8002898 <HAL_TIM_PWM_Stop_DMA+0x11c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a31      	ldr	r2, [pc, #196]	; (8002948 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002884:	4013      	ands	r3, r2
 8002886:	d107      	bne.n	8002898 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	492e      	ldr	r1, [pc, #184]	; (800294c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002894:	400a      	ands	r2, r1
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	d10d      	bne.n	80028c0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a27      	ldr	r2, [pc, #156]	; (8002948 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	438a      	bics	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d104      	bne.n	80028d0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	223e      	movs	r2, #62	; 0x3e
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]
 80028ce:	e023      	b.n	8002918 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d104      	bne.n	80028e0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223f      	movs	r2, #63	; 0x3f
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
 80028de:	e01b      	b.n	8002918 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d104      	bne.n	80028f0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
 80028ee:	e013      	b.n	8002918 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d104      	bne.n	8002900 <HAL_TIM_PWM_Stop_DMA+0x184>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2241      	movs	r2, #65	; 0x41
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]
 80028fe:	e00b      	b.n	8002918 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b10      	cmp	r3, #16
 8002904:	d104      	bne.n	8002910 <HAL_TIM_PWM_Stop_DMA+0x194>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2242      	movs	r2, #66	; 0x42
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
 800290e:	e003      	b.n	8002918 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2243      	movs	r2, #67	; 0x43
 8002914:	2101      	movs	r1, #1
 8002916:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002918:	230f      	movs	r3, #15
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	fffffdff 	.word	0xfffffdff
 800292c:	fffffbff 	.word	0xfffffbff
 8002930:	fffff7ff 	.word	0xfffff7ff
 8002934:	ffffefff 	.word	0xffffefff
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40014400 	.word	0x40014400
 8002940:	40014800 	.word	0x40014800
 8002944:	00001111 	.word	0x00001111
 8002948:	00000444 	.word	0x00000444
 800294c:	ffff7fff 	.word	0xffff7fff

08002950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2317      	movs	r3, #23
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	223c      	movs	r2, #60	; 0x3c
 8002968:	5c9b      	ldrb	r3, [r3, r2]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_TIM_PWM_ConfigChannel+0x22>
 800296e:	2302      	movs	r3, #2
 8002970:	e0e5      	b.n	8002b3e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	223c      	movs	r2, #60	; 0x3c
 8002976:	2101      	movs	r1, #1
 8002978:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b14      	cmp	r3, #20
 800297e:	d900      	bls.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002980:	e0d1      	b.n	8002b26 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fb0e 	bl	8002fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2108      	movs	r1, #8
 80029a8:	430a      	orrs	r2, r1
 80029aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2104      	movs	r1, #4
 80029b8:	438a      	bics	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6999      	ldr	r1, [r3, #24]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	619a      	str	r2, [r3, #24]
      break;
 80029ce:	e0af      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fb6d 	bl	80030b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	0109      	lsls	r1, r1, #4
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4954      	ldr	r1, [pc, #336]	; (8002b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6999      	ldr	r1, [r3, #24]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	619a      	str	r2, [r3, #24]
      break;
 8002a14:	e08c      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	0011      	movs	r1, r2
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fbc8 	bl	80031b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2108      	movs	r1, #8
 8002a30:	430a      	orrs	r2, r1
 8002a32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69d9      	ldr	r1, [r3, #28]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      break;
 8002a56:	e06b      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fc29 	bl	80032b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0109      	lsls	r1, r1, #4
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4932      	ldr	r1, [pc, #200]	; (8002b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69d9      	ldr	r1, [r3, #28]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	61da      	str	r2, [r3, #28]
      break;
 8002a9c:	e048      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	0011      	movs	r1, r2
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fc6a 	bl	8003380 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	438a      	bics	r2, r1
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ade:	e027      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	0011      	movs	r1, r2
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fca3 	bl	8003434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0109      	lsls	r1, r1, #4
 8002afc:	430a      	orrs	r2, r1
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4910      	ldr	r1, [pc, #64]	; (8002b4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	021a      	lsls	r2, r3, #8
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b24:	e004      	b.n	8002b30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002b26:	2317      	movs	r3, #23
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
      break;
 8002b2e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	223c      	movs	r2, #60	; 0x3c
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

  return status;
 8002b38:	2317      	movs	r3, #23
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b006      	add	sp, #24
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	08003fec 	.word	0x08003fec
 8002b4c:	fffffbff 	.word	0xfffffbff

08002b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	230f      	movs	r3, #15
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	223c      	movs	r2, #60	; 0x3c
 8002b66:	5c9b      	ldrb	r3, [r3, r2]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x20>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0bc      	b.n	8002cea <HAL_TIM_ConfigClockSource+0x19a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	223c      	movs	r2, #60	; 0x3c
 8002b74:	2101      	movs	r1, #1
 8002b76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	223d      	movs	r2, #61	; 0x3d
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4a59      	ldr	r2, [pc, #356]	; (8002cf8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	0192      	lsls	r2, r2, #6
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d040      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xde>
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	0192      	lsls	r2, r2, #6
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d900      	bls.n	8002bb6 <HAL_TIM_ConfigClockSource+0x66>
 8002bb4:	e088      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	0152      	lsls	r2, r2, #5
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d100      	bne.n	8002bc0 <HAL_TIM_ConfigClockSource+0x70>
 8002bbe:	e088      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x182>
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	0152      	lsls	r2, r2, #5
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d900      	bls.n	8002bca <HAL_TIM_ConfigClockSource+0x7a>
 8002bc8:	e07e      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bca:	2b70      	cmp	r3, #112	; 0x70
 8002bcc:	d018      	beq.n	8002c00 <HAL_TIM_ConfigClockSource+0xb0>
 8002bce:	d900      	bls.n	8002bd2 <HAL_TIM_ConfigClockSource+0x82>
 8002bd0:	e07a      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bd2:	2b60      	cmp	r3, #96	; 0x60
 8002bd4:	d04f      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x126>
 8002bd6:	d900      	bls.n	8002bda <HAL_TIM_ConfigClockSource+0x8a>
 8002bd8:	e076      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bda:	2b50      	cmp	r3, #80	; 0x50
 8002bdc:	d03b      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x106>
 8002bde:	d900      	bls.n	8002be2 <HAL_TIM_ConfigClockSource+0x92>
 8002be0:	e072      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d057      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x146>
 8002be6:	d900      	bls.n	8002bea <HAL_TIM_ConfigClockSource+0x9a>
 8002be8:	e06e      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bea:	2b30      	cmp	r3, #48	; 0x30
 8002bec:	d063      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x166>
 8002bee:	d86b      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d060      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x166>
 8002bf4:	d868      	bhi.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d05d      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x166>
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d05b      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x166>
 8002bfe:	e063      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f000 fcea 	bl	80035e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2277      	movs	r2, #119	; 0x77
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
      break;
 8002c2c:	e052      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f000 fcd3 	bl	80035e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	01c9      	lsls	r1, r1, #7
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]
      break;
 8002c54:	e03e      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	001a      	movs	r2, r3
 8002c64:	f000 fc44 	bl	80034f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2150      	movs	r1, #80	; 0x50
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fc9e 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e02e      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	001a      	movs	r2, r3
 8002c84:	f000 fc62 	bl	800354c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2160      	movs	r1, #96	; 0x60
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fc8e 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e01e      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	f000 fc24 	bl	80034f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 fc7e 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e00e      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	f000 fc75 	bl	80035b0 <TIM_ITRx_SetConfig>
      break;
 8002cc6:	e005      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002cc8:	230f      	movs	r3, #15
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
      break;
 8002cd0:	e000      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cd2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223d      	movs	r2, #61	; 0x3d
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	223c      	movs	r2, #60	; 0x3c
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	ffceff88 	.word	0xffceff88
 8002cf8:	ffff00ff 	.word	0xffff00ff

08002cfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	223e      	movs	r2, #62	; 0x3e
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]
 8002d42:	e02a      	b.n	8002d9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d107      	bne.n	8002d5e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	223f      	movs	r2, #63	; 0x3f
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5499      	strb	r1, [r3, r2]
 8002d5c:	e01d      	b.n	8002d9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
 8002d76:	e010      	b.n	8002d9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d107      	bne.n	8002d92 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2208      	movs	r2, #8
 8002d86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2241      	movs	r2, #65	; 0x41
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	5499      	strb	r1, [r3, r2]
 8002d90:	e003      	b.n	8002d9a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	223d      	movs	r2, #61	; 0x3d
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff ffb5 	bl	8002d0c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d10b      	bne.n	8002de0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d136      	bne.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	223e      	movs	r2, #62	; 0x3e
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]
 8002dde:	e031      	b.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d10b      	bne.n	8002e02 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d125      	bne.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	223f      	movs	r2, #63	; 0x3f
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	5499      	strb	r1, [r3, r2]
 8002e00:	e020      	b.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d10b      	bne.n	8002e24 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d114      	bne.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	e00f      	b.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d10a      	bne.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2208      	movs	r2, #8
 8002e32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2241      	movs	r2, #65	; 0x41
 8002e40:	2101      	movs	r1, #1
 8002e42:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7fd fa8e 	bl	8000368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	771a      	strb	r2, [r3, #28]
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d103      	bne.n	8002e7a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]
 8002e78:	e019      	b.n	8002eae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d103      	bne.n	8002e8c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	771a      	strb	r2, [r3, #28]
 8002e8a:	e010      	b.n	8002eae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d103      	bne.n	8002e9e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	771a      	strb	r2, [r3, #28]
 8002e9c:	e007      	b.n	8002eae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d102      	bne.n	8002eae <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2208      	movs	r2, #8
 8002eac:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff ff23 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b004      	add	sp, #16
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a32      	ldr	r2, [pc, #200]	; (8002fa0 <TIM_Base_SetConfig+0xdc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x20>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a31      	ldr	r2, [pc, #196]	; (8002fa4 <TIM_Base_SetConfig+0xe0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2270      	movs	r2, #112	; 0x70
 8002ee8:	4393      	bics	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <TIM_Base_SetConfig+0xdc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00f      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <TIM_Base_SetConfig+0xe0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <TIM_Base_SetConfig+0xe4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <TIM_Base_SetConfig+0xe8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_Base_SetConfig+0x5a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <TIM_Base_SetConfig+0xec>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <TIM_Base_SetConfig+0xf0>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	4393      	bics	r3, r2
 8002f36:	001a      	movs	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <TIM_Base_SetConfig+0xdc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <TIM_Base_SetConfig+0xaa>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a12      	ldr	r2, [pc, #72]	; (8002fac <TIM_Base_SetConfig+0xe8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0xaa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <TIM_Base_SetConfig+0xec>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d103      	bne.n	8002f76 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4393      	bics	r3, r2
 8002f90:	001a      	movs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	611a      	str	r2, [r3, #16]
  }
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40002000 	.word	0x40002000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800
 8002fb4:	fffffcff 	.word	0xfffffcff

08002fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4393      	bics	r3, r2
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a2e      	ldr	r2, [pc, #184]	; (80030a0 <TIM_OC1_SetConfig+0xe8>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2203      	movs	r2, #3
 8002fee:	4393      	bics	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4393      	bics	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <TIM_OC1_SetConfig+0xec>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <TIM_OC1_SetConfig+0x6e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <TIM_OC1_SetConfig+0xf0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d003      	beq.n	8003026 <TIM_OC1_SetConfig+0x6e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <TIM_OC1_SetConfig+0xf4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10c      	bne.n	8003040 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2208      	movs	r2, #8
 800302a:	4393      	bics	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2204      	movs	r2, #4
 800303c:	4393      	bics	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <TIM_OC1_SetConfig+0xec>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <TIM_OC1_SetConfig+0xa0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <TIM_OC1_SetConfig+0xf0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_OC1_SetConfig+0xa0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <TIM_OC1_SetConfig+0xf4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <TIM_OC1_SetConfig+0xf8>)
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <TIM_OC1_SetConfig+0xfc>)
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b006      	add	sp, #24
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	fffeff8f 	.word	0xfffeff8f
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40014400 	.word	0x40014400
 80030ac:	40014800 	.word	0x40014800
 80030b0:	fffffeff 	.word	0xfffffeff
 80030b4:	fffffdff 	.word	0xfffffdff

080030b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2210      	movs	r2, #16
 80030ce:	4393      	bics	r3, r2
 80030d0:	001a      	movs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <TIM_OC2_SetConfig+0xe0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <TIM_OC2_SetConfig+0xe4>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2220      	movs	r2, #32
 8003102:	4393      	bics	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <TIM_OC2_SetConfig+0xe8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10d      	bne.n	8003136 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	4393      	bics	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	4393      	bics	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <TIM_OC2_SetConfig+0xe8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <TIM_OC2_SetConfig+0x96>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <TIM_OC2_SetConfig+0xec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_OC2_SetConfig+0x96>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <TIM_OC2_SetConfig+0xf0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d113      	bne.n	8003176 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4a16      	ldr	r2, [pc, #88]	; (80031ac <TIM_OC2_SetConfig+0xf4>)
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <TIM_OC2_SetConfig+0xf8>)
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}
 8003198:	feff8fff 	.word	0xfeff8fff
 800319c:	fffffcff 	.word	0xfffffcff
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	fffffbff 	.word	0xfffffbff
 80031b0:	fffff7ff 	.word	0xfffff7ff

080031b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <TIM_OC3_SetConfig+0xdc>)
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <TIM_OC3_SetConfig+0xe0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2203      	movs	r2, #3
 80031e8:	4393      	bics	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <TIM_OC3_SetConfig+0xe4>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <TIM_OC3_SetConfig+0xe8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10d      	bne.n	800322e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <TIM_OC3_SetConfig+0xec>)
 8003216:	4013      	ands	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <TIM_OC3_SetConfig+0xf0>)
 800322a:	4013      	ands	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <TIM_OC3_SetConfig+0xe8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_OC3_SetConfig+0x92>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <TIM_OC3_SetConfig+0xf4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_OC3_SetConfig+0x92>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <TIM_OC3_SetConfig+0xf8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d113      	bne.n	800326e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <TIM_OC3_SetConfig+0xfc>)
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <TIM_OC3_SetConfig+0x100>)
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b006      	add	sp, #24
 800328e:	bd80      	pop	{r7, pc}
 8003290:	fffffeff 	.word	0xfffffeff
 8003294:	fffeff8f 	.word	0xfffeff8f
 8003298:	fffffdff 	.word	0xfffffdff
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	fffff7ff 	.word	0xfffff7ff
 80032a4:	fffffbff 	.word	0xfffffbff
 80032a8:	40014400 	.word	0x40014400
 80032ac:	40014800 	.word	0x40014800
 80032b0:	ffffefff 	.word	0xffffefff
 80032b4:	ffffdfff 	.word	0xffffdfff

080032b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <TIM_OC4_SetConfig+0xa8>)
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a20      	ldr	r2, [pc, #128]	; (8003364 <TIM_OC4_SetConfig+0xac>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <TIM_OC4_SetConfig+0xb0>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <TIM_OC4_SetConfig+0xb4>)
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <TIM_OC4_SetConfig+0xb8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_OC4_SetConfig+0x70>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <TIM_OC4_SetConfig+0xbc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC4_SetConfig+0x70>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <TIM_OC4_SetConfig+0xc0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d109      	bne.n	800333c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <TIM_OC4_SetConfig+0xc4>)
 800332c:	4013      	ands	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	ffffefff 	.word	0xffffefff
 8003364:	feff8fff 	.word	0xfeff8fff
 8003368:	fffffcff 	.word	0xfffffcff
 800336c:	ffffdfff 	.word	0xffffdfff
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800
 800337c:	ffffbfff 	.word	0xffffbfff

08003380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a21      	ldr	r2, [pc, #132]	; (800341c <TIM_OC5_SetConfig+0x9c>)
 8003396:	401a      	ands	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <TIM_OC5_SetConfig+0xa0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <TIM_OC5_SetConfig+0xa4>)
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <TIM_OC5_SetConfig+0xa8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_OC5_SetConfig+0x66>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <TIM_OC5_SetConfig+0xac>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_OC5_SetConfig+0x66>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <TIM_OC5_SetConfig+0xb0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d109      	bne.n	80033fa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <TIM_OC5_SetConfig+0x9c>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b006      	add	sp, #24
 800341a:	bd80      	pop	{r7, pc}
 800341c:	fffeffff 	.word	0xfffeffff
 8003420:	fffeff8f 	.word	0xfffeff8f
 8003424:	fffdffff 	.word	0xfffdffff
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40014400 	.word	0x40014400
 8003430:	40014800 	.word	0x40014800

08003434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <TIM_OC6_SetConfig+0xa0>)
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <TIM_OC6_SetConfig+0xa4>)
 8003460:	4013      	ands	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <TIM_OC6_SetConfig+0xa8>)
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	051b      	lsls	r3, r3, #20
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <TIM_OC6_SetConfig+0xac>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <TIM_OC6_SetConfig+0x68>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <TIM_OC6_SetConfig+0xb0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_OC6_SetConfig+0x68>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <TIM_OC6_SetConfig+0xb4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d109      	bne.n	80034b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	4a13      	ldr	r2, [pc, #76]	; (80034ec <TIM_OC6_SetConfig+0xb8>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	029b      	lsls	r3, r3, #10
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b006      	add	sp, #24
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	ffefffff 	.word	0xffefffff
 80034d8:	feff8fff 	.word	0xfeff8fff
 80034dc:	ffdfffff 	.word	0xffdfffff
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800
 80034ec:	fffbffff 	.word	0xfffbffff

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	2201      	movs	r2, #1
 8003508:	4393      	bics	r3, r2
 800350a:	001a      	movs	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	22f0      	movs	r2, #240	; 0xf0
 800351a:	4393      	bics	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	220a      	movs	r2, #10
 800352c:	4393      	bics	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b006      	add	sp, #24
 800354a:	bd80      	pop	{r7, pc}

0800354c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	2210      	movs	r2, #16
 8003564:	4393      	bics	r3, r2
 8003566:	001a      	movs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <TIM_TI2_ConfigInputStage+0x60>)
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	22a0      	movs	r2, #160	; 0xa0
 8003588:	4393      	bics	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b006      	add	sp, #24
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	ffff0fff 	.word	0xffff0fff

080035b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <TIM_ITRx_SetConfig+0x34>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	2207      	movs	r2, #7
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	ffcfff8f 	.word	0xffcfff8f

080035e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <TIM_ETR_SetConfig+0x3c>)
 8003600:	4013      	ands	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	431a      	orrs	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b006      	add	sp, #24
 8003622:	bd80      	pop	{r7, pc}
 8003624:	ffff00ff 	.word	0xffff00ff

08003628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	221f      	movs	r2, #31
 8003638:	4013      	ands	r3, r2
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	43d2      	mvns	r2, r2
 800364a:	401a      	ands	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	211f      	movs	r1, #31
 8003658:	400b      	ands	r3, r1
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4099      	lsls	r1, r3
 800365e:	000b      	movs	r3, r1
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b006      	add	sp, #24
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	; 0x3c
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e04a      	b.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	223c      	movs	r2, #60	; 0x3c
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	223d      	movs	r2, #61	; 0x3d
 8003694:	2102      	movs	r1, #2
 8003696:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d108      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2270      	movs	r2, #112	; 0x70
 80036c8:	4393      	bics	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a11      	ldr	r2, [pc, #68]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a10      	ldr	r2, [pc, #64]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10c      	bne.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	4393      	bics	r3, r2
 80036f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4313      	orrs	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	223d      	movs	r2, #61	; 0x3d
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223c      	movs	r2, #60	; 0x3c
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	0018      	movs	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	b004      	add	sp, #16
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40012c00 	.word	0x40012c00
 800372c:	ff0fffff 	.word	0xff0fffff
 8003730:	40000400 	.word	0x40000400

08003734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e046      	b.n	80037d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2288      	movs	r2, #136	; 0x88
 800374a:	589b      	ldr	r3, [r3, r2]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2284      	movs	r2, #132	; 0x84
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd f8ae 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2288      	movs	r2, #136	; 0x88
 8003764:	2124      	movs	r1, #36	; 0x24
 8003766:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2101      	movs	r1, #1
 8003774:	438a      	bics	r2, r1
 8003776:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	0018      	movs	r0, r3
 8003784:	f000 f996 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f828 	bl	80037e0 <UART_SetConfig>
 8003790:	0003      	movs	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e01c      	b.n	80037d4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	490d      	ldr	r1, [pc, #52]	; (80037dc <HAL_UART_Init+0xa8>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	212a      	movs	r1, #42	; 0x2a
 80037b6:	438a      	bics	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 fa25 	bl	8003c1c <UART_CheckIdleState>
 80037d2:	0003      	movs	r3, r0
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	ffffb7ff 	.word	0xffffb7ff

080037e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e8:	231a      	movs	r3, #26
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4313      	orrs	r3, r2
 8003806:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4aa1      	ldr	r2, [pc, #644]	; (8003a94 <UART_SetConfig+0x2b4>)
 8003810:	4013      	ands	r3, r2
 8003812:	0019      	movs	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a9c      	ldr	r2, [pc, #624]	; (8003a98 <UART_SetConfig+0x2b8>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	4313      	orrs	r3, r2
 8003844:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a93      	ldr	r2, [pc, #588]	; (8003a9c <UART_SetConfig+0x2bc>)
 800384e:	4013      	ands	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	220f      	movs	r2, #15
 8003864:	4393      	bics	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a89      	ldr	r2, [pc, #548]	; (8003aa0 <UART_SetConfig+0x2c0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d127      	bne.n	80038ce <UART_SetConfig+0xee>
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <UART_SetConfig+0x2c4>)
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2203      	movs	r2, #3
 8003884:	4013      	ands	r3, r2
 8003886:	2b03      	cmp	r3, #3
 8003888:	d017      	beq.n	80038ba <UART_SetConfig+0xda>
 800388a:	d81b      	bhi.n	80038c4 <UART_SetConfig+0xe4>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d00a      	beq.n	80038a6 <UART_SetConfig+0xc6>
 8003890:	d818      	bhi.n	80038c4 <UART_SetConfig+0xe4>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <UART_SetConfig+0xbc>
 8003896:	2b01      	cmp	r3, #1
 8003898:	d00a      	beq.n	80038b0 <UART_SetConfig+0xd0>
 800389a:	e013      	b.n	80038c4 <UART_SetConfig+0xe4>
 800389c:	231b      	movs	r3, #27
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e021      	b.n	80038ea <UART_SetConfig+0x10a>
 80038a6:	231b      	movs	r3, #27
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e01c      	b.n	80038ea <UART_SetConfig+0x10a>
 80038b0:	231b      	movs	r3, #27
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e017      	b.n	80038ea <UART_SetConfig+0x10a>
 80038ba:	231b      	movs	r3, #27
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2208      	movs	r2, #8
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e012      	b.n	80038ea <UART_SetConfig+0x10a>
 80038c4:	231b      	movs	r3, #27
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2210      	movs	r2, #16
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e00d      	b.n	80038ea <UART_SetConfig+0x10a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	; (8003aa8 <UART_SetConfig+0x2c8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d104      	bne.n	80038e2 <UART_SetConfig+0x102>
 80038d8:	231b      	movs	r3, #27
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e003      	b.n	80038ea <UART_SetConfig+0x10a>
 80038e2:	231b      	movs	r3, #27
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	2210      	movs	r2, #16
 80038e8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d000      	beq.n	80038f8 <UART_SetConfig+0x118>
 80038f6:	e065      	b.n	80039c4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80038f8:	231b      	movs	r3, #27
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d015      	beq.n	800392e <UART_SetConfig+0x14e>
 8003902:	dc18      	bgt.n	8003936 <UART_SetConfig+0x156>
 8003904:	2b04      	cmp	r3, #4
 8003906:	d00d      	beq.n	8003924 <UART_SetConfig+0x144>
 8003908:	dc15      	bgt.n	8003936 <UART_SetConfig+0x156>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <UART_SetConfig+0x134>
 800390e:	2b02      	cmp	r3, #2
 8003910:	d005      	beq.n	800391e <UART_SetConfig+0x13e>
 8003912:	e010      	b.n	8003936 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe fc76 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003918:	0003      	movs	r3, r0
 800391a:	617b      	str	r3, [r7, #20]
        break;
 800391c:	e012      	b.n	8003944 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <UART_SetConfig+0x2cc>)
 8003920:	617b      	str	r3, [r7, #20]
        break;
 8003922:	e00f      	b.n	8003944 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003924:	f7fe fbe4 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8003928:	0003      	movs	r3, r0
 800392a:	617b      	str	r3, [r7, #20]
        break;
 800392c:	e00a      	b.n	8003944 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	617b      	str	r3, [r7, #20]
        break;
 8003934:	e006      	b.n	8003944 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800393a:	231a      	movs	r3, #26
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
        break;
 8003942:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d100      	bne.n	800394c <UART_SetConfig+0x16c>
 800394a:	e08d      	b.n	8003a68 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003950:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <UART_SetConfig+0x2d0>)
 8003952:	0052      	lsls	r2, r2, #1
 8003954:	5ad3      	ldrh	r3, [r2, r3]
 8003956:	0019      	movs	r1, r3
 8003958:	6978      	ldr	r0, [r7, #20]
 800395a:	f7fc fbd1 	bl	8000100 <__udivsi3>
 800395e:	0003      	movs	r3, r0
 8003960:	005a      	lsls	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	18d2      	adds	r2, r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0019      	movs	r1, r3
 8003970:	0010      	movs	r0, r2
 8003972:	f7fc fbc5 	bl	8000100 <__udivsi3>
 8003976:	0003      	movs	r3, r0
 8003978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d91c      	bls.n	80039ba <UART_SetConfig+0x1da>
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	429a      	cmp	r2, r3
 8003988:	d217      	bcs.n	80039ba <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	b29a      	uxth	r2, r3
 800398e:	200e      	movs	r0, #14
 8003990:	183b      	adds	r3, r7, r0
 8003992:	210f      	movs	r1, #15
 8003994:	438a      	bics	r2, r1
 8003996:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	2207      	movs	r2, #7
 80039a0:	4013      	ands	r3, r2
 80039a2:	b299      	uxth	r1, r3
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	183a      	adds	r2, r7, r0
 80039a8:	8812      	ldrh	r2, [r2, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	183a      	adds	r2, r7, r0
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	60da      	str	r2, [r3, #12]
 80039b8:	e056      	b.n	8003a68 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80039ba:	231a      	movs	r3, #26
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e051      	b.n	8003a68 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c4:	231b      	movs	r3, #27
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d015      	beq.n	80039fa <UART_SetConfig+0x21a>
 80039ce:	dc18      	bgt.n	8003a02 <UART_SetConfig+0x222>
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d00d      	beq.n	80039f0 <UART_SetConfig+0x210>
 80039d4:	dc15      	bgt.n	8003a02 <UART_SetConfig+0x222>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <UART_SetConfig+0x200>
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d005      	beq.n	80039ea <UART_SetConfig+0x20a>
 80039de:	e010      	b.n	8003a02 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe fc10 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80039e4:	0003      	movs	r3, r0
 80039e6:	617b      	str	r3, [r7, #20]
        break;
 80039e8:	e012      	b.n	8003a10 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <UART_SetConfig+0x2cc>)
 80039ec:	617b      	str	r3, [r7, #20]
        break;
 80039ee:	e00f      	b.n	8003a10 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f0:	f7fe fb7e 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80039f4:	0003      	movs	r3, r0
 80039f6:	617b      	str	r3, [r7, #20]
        break;
 80039f8:	e00a      	b.n	8003a10 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	617b      	str	r3, [r7, #20]
        break;
 8003a00:	e006      	b.n	8003a10 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a06:	231a      	movs	r3, #26
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
        break;
 8003a0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1a:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <UART_SetConfig+0x2d0>)
 8003a1c:	0052      	lsls	r2, r2, #1
 8003a1e:	5ad3      	ldrh	r3, [r2, r3]
 8003a20:	0019      	movs	r1, r3
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7fc fb6c 	bl	8000100 <__udivsi3>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	18d2      	adds	r2, r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0019      	movs	r1, r3
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	f7fc fb60 	bl	8000100 <__udivsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	d90a      	bls.n	8003a60 <UART_SetConfig+0x280>
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	025b      	lsls	r3, r3, #9
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d205      	bcs.n	8003a60 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	e003      	b.n	8003a68 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003a60:	231a      	movs	r3, #26
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	226a      	movs	r2, #106	; 0x6a
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2268      	movs	r2, #104	; 0x68
 8003a74:	2101      	movs	r1, #1
 8003a76:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a84:	231a      	movs	r3, #26
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	781b      	ldrb	r3, [r3, #0]
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b008      	add	sp, #32
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	cfff69f3 	.word	0xcfff69f3
 8003a98:	ffffcfff 	.word	0xffffcfff
 8003a9c:	11fff4ff 	.word	0x11fff4ff
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	08004040 	.word	0x08004040

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a4a      	ldr	r2, [pc, #296]	; (8003bf8 <UART_AdvFeatureConfig+0x144>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4a43      	ldr	r2, [pc, #268]	; (8003bfc <UART_AdvFeatureConfig+0x148>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <UART_AdvFeatureConfig+0x14c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	2204      	movs	r2, #4
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <UART_AdvFeatureConfig+0x150>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	2210      	movs	r2, #16
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <UART_AdvFeatureConfig+0x154>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	4a25      	ldr	r2, [pc, #148]	; (8003c0c <UART_AdvFeatureConfig+0x158>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	2240      	movs	r2, #64	; 0x40
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d01d      	beq.n	8003bce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <UART_AdvFeatureConfig+0x15c>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	035b      	lsls	r3, r3, #13
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d10b      	bne.n	8003bce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <UART_AdvFeatureConfig+0x160>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <UART_AdvFeatureConfig+0x164>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	ffff7fff 	.word	0xffff7fff
 8003bfc:	fffdffff 	.word	0xfffdffff
 8003c00:	fffeffff 	.word	0xfffeffff
 8003c04:	fffbffff 	.word	0xfffbffff
 8003c08:	ffffefff 	.word	0xffffefff
 8003c0c:	ffffdfff 	.word	0xffffdfff
 8003c10:	ffefffff 	.word	0xffefffff
 8003c14:	ff9fffff 	.word	0xff9fffff
 8003c18:	fff7ffff 	.word	0xfff7ffff

08003c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b092      	sub	sp, #72	; 0x48
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2290      	movs	r2, #144	; 0x90
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c2c:	f7fd f8d6 	bl	8000ddc <HAL_GetTick>
 8003c30:	0003      	movs	r3, r0
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d12d      	bne.n	8003c9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	0391      	lsls	r1, r2, #14
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <UART_CheckIdleState+0x14c>)
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f000 f88e 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d022      	beq.n	8003c9e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c62:	2301      	movs	r3, #1
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2288      	movs	r2, #136	; 0x88
 8003c8e:	2120      	movs	r1, #32
 8003c90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2284      	movs	r2, #132	; 0x84
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e060      	b.n	8003d60 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d146      	bne.n	8003d3a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cae:	2280      	movs	r2, #128	; 0x80
 8003cb0:	03d1      	lsls	r1, r2, #15
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <UART_CheckIdleState+0x14c>)
 8003cb6:	9200      	str	r2, [sp, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f000 f859 	bl	8003d70 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	1e03      	subs	r3, r0, #0
 8003cc0:	d03b      	beq.n	8003d3a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4922      	ldr	r1, [pc, #136]	; (8003d6c <UART_CheckIdleState+0x150>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	438a      	bics	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	228c      	movs	r2, #140	; 0x8c
 8003d2a:	2120      	movs	r1, #32
 8003d2c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2284      	movs	r2, #132	; 0x84
 8003d32:	2100      	movs	r1, #0
 8003d34:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e012      	b.n	8003d60 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2288      	movs	r2, #136	; 0x88
 8003d3e:	2120      	movs	r1, #32
 8003d40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	228c      	movs	r2, #140	; 0x8c
 8003d46:	2120      	movs	r1, #32
 8003d48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2284      	movs	r2, #132	; 0x84
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b010      	add	sp, #64	; 0x40
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	01ffffff 	.word	0x01ffffff
 8003d6c:	fffffedf 	.word	0xfffffedf

08003d70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	1dfb      	adds	r3, r7, #7
 8003d7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d80:	e051      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3301      	adds	r3, #1
 8003d86:	d04e      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d88:	f7fd f828 	bl	8000ddc <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e051      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2204      	movs	r2, #4
 8003daa:	4013      	ands	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d038      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d035      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d111      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 f83c 	bl	8003e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2290      	movs	r2, #144	; 0x90
 8003ddc:	2108      	movs	r1, #8
 8003dde:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2284      	movs	r2, #132	; 0x84
 8003de4:	2100      	movs	r1, #0
 8003de6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e02c      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	401a      	ands	r2, r3
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d112      	bne.n	8003e26 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	0112      	lsls	r2, r2, #4
 8003e08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 f81f 	bl	8003e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2290      	movs	r2, #144	; 0x90
 8003e16:	2120      	movs	r1, #32
 8003e18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2284      	movs	r2, #132	; 0x84
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e00f      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	425a      	negs	r2, r3
 8003e36:	4153      	adcs	r3, r2
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	1dfb      	adds	r3, r7, #7
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d09e      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08e      	sub	sp, #56	; 0x38
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e58:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4926      	ldr	r1, [pc, #152]	; (8003f14 <UART_EndRxTransfer+0xc4>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	623b      	str	r3, [r7, #32]
  return(result);
 8003e90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
 8003e94:	2301      	movs	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	491b      	ldr	r1, [pc, #108]	; (8003f18 <UART_EndRxTransfer+0xc8>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d118      	bne.n	8003ef6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	2301      	movs	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f383 8810 	msr	PRIMASK, r3
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	438a      	bics	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	228c      	movs	r2, #140	; 0x8c
 8003efa:	2120      	movs	r1, #32
 8003efc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b00e      	add	sp, #56	; 0x38
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	fffffedf 	.word	0xfffffedf
 8003f18:	effffffe 	.word	0xeffffffe

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	2600      	movs	r6, #0
 8003f20:	4d0c      	ldr	r5, [pc, #48]	; (8003f54 <__libc_init_array+0x38>)
 8003f22:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	42a6      	cmp	r6, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	2600      	movs	r6, #0
 8003f2e:	f000 f821 	bl	8003f74 <_init>
 8003f32:	4d0a      	ldr	r5, [pc, #40]	; (8003f5c <__libc_init_array+0x40>)
 8003f34:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <__libc_init_array+0x44>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	42a6      	cmp	r6, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	00b3      	lsls	r3, r6, #2
 8003f42:	58eb      	ldr	r3, [r5, r3]
 8003f44:	4798      	blx	r3
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	00b3      	lsls	r3, r6, #2
 8003f4c:	58eb      	ldr	r3, [r5, r3]
 8003f4e:	4798      	blx	r3
 8003f50:	3601      	adds	r6, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08004058 	.word	0x08004058
 8003f58:	08004058 	.word	0x08004058
 8003f5c:	08004058 	.word	0x08004058
 8003f60:	08004060 	.word	0x08004060

08003f64 <memset>:
 8003f64:	0003      	movs	r3, r0
 8003f66:	1882      	adds	r2, r0, r2
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	7019      	strb	r1, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <_init>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr

08003f80 <_fini>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr

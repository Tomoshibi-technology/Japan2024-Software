
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ba0  08006ba0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ba0  08006ba0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  2000000c  08006bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08006bb8  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014187  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255e  00000000  00000000  000341bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00037508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001743b  00000000  00000000  00038228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011192  00000000  00000000  0004f663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c736  00000000  00000000  000607f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecf2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003598  00000000  00000000  000ecf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006698 	.word	0x08006698

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08006698 	.word	0x08006698

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 fa3d 	bl	80006a0 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f9c9 	bl	80005c8 <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 fa2f 	bl	80006a0 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fa25 	bl	80006a0 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f9d5 	bl	8000614 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f9cb 	bl	8000614 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_fadd>:
 800028c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028e:	46c6      	mov	lr, r8
 8000290:	0243      	lsls	r3, r0, #9
 8000292:	0a5b      	lsrs	r3, r3, #9
 8000294:	024e      	lsls	r6, r1, #9
 8000296:	0045      	lsls	r5, r0, #1
 8000298:	004f      	lsls	r7, r1, #1
 800029a:	00da      	lsls	r2, r3, #3
 800029c:	0fc4      	lsrs	r4, r0, #31
 800029e:	469c      	mov	ip, r3
 80002a0:	0a70      	lsrs	r0, r6, #9
 80002a2:	4690      	mov	r8, r2
 80002a4:	b500      	push	{lr}
 80002a6:	0e2d      	lsrs	r5, r5, #24
 80002a8:	0e3f      	lsrs	r7, r7, #24
 80002aa:	0fc9      	lsrs	r1, r1, #31
 80002ac:	09b6      	lsrs	r6, r6, #6
 80002ae:	428c      	cmp	r4, r1
 80002b0:	d04b      	beq.n	800034a <__aeabi_fadd+0xbe>
 80002b2:	1bea      	subs	r2, r5, r7
 80002b4:	2a00      	cmp	r2, #0
 80002b6:	dd36      	ble.n	8000326 <__aeabi_fadd+0x9a>
 80002b8:	2f00      	cmp	r7, #0
 80002ba:	d061      	beq.n	8000380 <__aeabi_fadd+0xf4>
 80002bc:	2dff      	cmp	r5, #255	; 0xff
 80002be:	d100      	bne.n	80002c2 <__aeabi_fadd+0x36>
 80002c0:	e0ad      	b.n	800041e <__aeabi_fadd+0x192>
 80002c2:	2380      	movs	r3, #128	; 0x80
 80002c4:	04db      	lsls	r3, r3, #19
 80002c6:	431e      	orrs	r6, r3
 80002c8:	2a1b      	cmp	r2, #27
 80002ca:	dc00      	bgt.n	80002ce <__aeabi_fadd+0x42>
 80002cc:	e0d3      	b.n	8000476 <__aeabi_fadd+0x1ea>
 80002ce:	2001      	movs	r0, #1
 80002d0:	4643      	mov	r3, r8
 80002d2:	1a18      	subs	r0, r3, r0
 80002d4:	0143      	lsls	r3, r0, #5
 80002d6:	d400      	bmi.n	80002da <__aeabi_fadd+0x4e>
 80002d8:	e08c      	b.n	80003f4 <__aeabi_fadd+0x168>
 80002da:	0180      	lsls	r0, r0, #6
 80002dc:	0987      	lsrs	r7, r0, #6
 80002de:	0038      	movs	r0, r7
 80002e0:	f001 f970 	bl	80015c4 <__clzsi2>
 80002e4:	3805      	subs	r0, #5
 80002e6:	4087      	lsls	r7, r0
 80002e8:	4285      	cmp	r5, r0
 80002ea:	dc00      	bgt.n	80002ee <__aeabi_fadd+0x62>
 80002ec:	e0b6      	b.n	800045c <__aeabi_fadd+0x1d0>
 80002ee:	1a2d      	subs	r5, r5, r0
 80002f0:	48b3      	ldr	r0, [pc, #716]	; (80005c0 <__aeabi_fadd+0x334>)
 80002f2:	4038      	ands	r0, r7
 80002f4:	0743      	lsls	r3, r0, #29
 80002f6:	d004      	beq.n	8000302 <__aeabi_fadd+0x76>
 80002f8:	230f      	movs	r3, #15
 80002fa:	4003      	ands	r3, r0
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	d000      	beq.n	8000302 <__aeabi_fadd+0x76>
 8000300:	3004      	adds	r0, #4
 8000302:	0143      	lsls	r3, r0, #5
 8000304:	d400      	bmi.n	8000308 <__aeabi_fadd+0x7c>
 8000306:	e078      	b.n	80003fa <__aeabi_fadd+0x16e>
 8000308:	1c6a      	adds	r2, r5, #1
 800030a:	2dfe      	cmp	r5, #254	; 0xfe
 800030c:	d065      	beq.n	80003da <__aeabi_fadd+0x14e>
 800030e:	0180      	lsls	r0, r0, #6
 8000310:	0a43      	lsrs	r3, r0, #9
 8000312:	469c      	mov	ip, r3
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	4663      	mov	r3, ip
 8000318:	05d0      	lsls	r0, r2, #23
 800031a:	4318      	orrs	r0, r3
 800031c:	07e4      	lsls	r4, r4, #31
 800031e:	4320      	orrs	r0, r4
 8000320:	bc80      	pop	{r7}
 8000322:	46b8      	mov	r8, r7
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2a00      	cmp	r2, #0
 8000328:	d035      	beq.n	8000396 <__aeabi_fadd+0x10a>
 800032a:	1b7a      	subs	r2, r7, r5
 800032c:	2d00      	cmp	r5, #0
 800032e:	d000      	beq.n	8000332 <__aeabi_fadd+0xa6>
 8000330:	e0af      	b.n	8000492 <__aeabi_fadd+0x206>
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d100      	bne.n	800033a <__aeabi_fadd+0xae>
 8000338:	e0a7      	b.n	800048a <__aeabi_fadd+0x1fe>
 800033a:	1e53      	subs	r3, r2, #1
 800033c:	2a01      	cmp	r2, #1
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0xb6>
 8000340:	e12f      	b.n	80005a2 <__aeabi_fadd+0x316>
 8000342:	2aff      	cmp	r2, #255	; 0xff
 8000344:	d069      	beq.n	800041a <__aeabi_fadd+0x18e>
 8000346:	001a      	movs	r2, r3
 8000348:	e0aa      	b.n	80004a0 <__aeabi_fadd+0x214>
 800034a:	1be9      	subs	r1, r5, r7
 800034c:	2900      	cmp	r1, #0
 800034e:	dd70      	ble.n	8000432 <__aeabi_fadd+0x1a6>
 8000350:	2f00      	cmp	r7, #0
 8000352:	d037      	beq.n	80003c4 <__aeabi_fadd+0x138>
 8000354:	2dff      	cmp	r5, #255	; 0xff
 8000356:	d062      	beq.n	800041e <__aeabi_fadd+0x192>
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	04db      	lsls	r3, r3, #19
 800035c:	431e      	orrs	r6, r3
 800035e:	291b      	cmp	r1, #27
 8000360:	dc00      	bgt.n	8000364 <__aeabi_fadd+0xd8>
 8000362:	e0b0      	b.n	80004c6 <__aeabi_fadd+0x23a>
 8000364:	2001      	movs	r0, #1
 8000366:	4440      	add	r0, r8
 8000368:	0143      	lsls	r3, r0, #5
 800036a:	d543      	bpl.n	80003f4 <__aeabi_fadd+0x168>
 800036c:	3501      	adds	r5, #1
 800036e:	2dff      	cmp	r5, #255	; 0xff
 8000370:	d033      	beq.n	80003da <__aeabi_fadd+0x14e>
 8000372:	2301      	movs	r3, #1
 8000374:	4a93      	ldr	r2, [pc, #588]	; (80005c4 <__aeabi_fadd+0x338>)
 8000376:	4003      	ands	r3, r0
 8000378:	0840      	lsrs	r0, r0, #1
 800037a:	4010      	ands	r0, r2
 800037c:	4318      	orrs	r0, r3
 800037e:	e7b9      	b.n	80002f4 <__aeabi_fadd+0x68>
 8000380:	2e00      	cmp	r6, #0
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0xfa>
 8000384:	e083      	b.n	800048e <__aeabi_fadd+0x202>
 8000386:	1e51      	subs	r1, r2, #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0x102>
 800038c:	e0d8      	b.n	8000540 <__aeabi_fadd+0x2b4>
 800038e:	2aff      	cmp	r2, #255	; 0xff
 8000390:	d045      	beq.n	800041e <__aeabi_fadd+0x192>
 8000392:	000a      	movs	r2, r1
 8000394:	e798      	b.n	80002c8 <__aeabi_fadd+0x3c>
 8000396:	27fe      	movs	r7, #254	; 0xfe
 8000398:	1c6a      	adds	r2, r5, #1
 800039a:	4217      	tst	r7, r2
 800039c:	d000      	beq.n	80003a0 <__aeabi_fadd+0x114>
 800039e:	e086      	b.n	80004ae <__aeabi_fadd+0x222>
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d000      	beq.n	80003a6 <__aeabi_fadd+0x11a>
 80003a4:	e0b7      	b.n	8000516 <__aeabi_fadd+0x28a>
 80003a6:	4643      	mov	r3, r8
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d100      	bne.n	80003ae <__aeabi_fadd+0x122>
 80003ac:	e0f3      	b.n	8000596 <__aeabi_fadd+0x30a>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d0b0      	beq.n	8000316 <__aeabi_fadd+0x8a>
 80003b4:	1b98      	subs	r0, r3, r6
 80003b6:	0143      	lsls	r3, r0, #5
 80003b8:	d400      	bmi.n	80003bc <__aeabi_fadd+0x130>
 80003ba:	e0fa      	b.n	80005b2 <__aeabi_fadd+0x326>
 80003bc:	4643      	mov	r3, r8
 80003be:	000c      	movs	r4, r1
 80003c0:	1af0      	subs	r0, r6, r3
 80003c2:	e797      	b.n	80002f4 <__aeabi_fadd+0x68>
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0x13e>
 80003c8:	e0c8      	b.n	800055c <__aeabi_fadd+0x2d0>
 80003ca:	1e4a      	subs	r2, r1, #1
 80003cc:	2901      	cmp	r1, #1
 80003ce:	d100      	bne.n	80003d2 <__aeabi_fadd+0x146>
 80003d0:	e0ae      	b.n	8000530 <__aeabi_fadd+0x2a4>
 80003d2:	29ff      	cmp	r1, #255	; 0xff
 80003d4:	d023      	beq.n	800041e <__aeabi_fadd+0x192>
 80003d6:	0011      	movs	r1, r2
 80003d8:	e7c1      	b.n	800035e <__aeabi_fadd+0xd2>
 80003da:	2300      	movs	r3, #0
 80003dc:	22ff      	movs	r2, #255	; 0xff
 80003de:	469c      	mov	ip, r3
 80003e0:	e799      	b.n	8000316 <__aeabi_fadd+0x8a>
 80003e2:	21fe      	movs	r1, #254	; 0xfe
 80003e4:	1c6a      	adds	r2, r5, #1
 80003e6:	4211      	tst	r1, r2
 80003e8:	d077      	beq.n	80004da <__aeabi_fadd+0x24e>
 80003ea:	2aff      	cmp	r2, #255	; 0xff
 80003ec:	d0f5      	beq.n	80003da <__aeabi_fadd+0x14e>
 80003ee:	0015      	movs	r5, r2
 80003f0:	4446      	add	r6, r8
 80003f2:	0870      	lsrs	r0, r6, #1
 80003f4:	0743      	lsls	r3, r0, #29
 80003f6:	d000      	beq.n	80003fa <__aeabi_fadd+0x16e>
 80003f8:	e77e      	b.n	80002f8 <__aeabi_fadd+0x6c>
 80003fa:	08c3      	lsrs	r3, r0, #3
 80003fc:	2dff      	cmp	r5, #255	; 0xff
 80003fe:	d00e      	beq.n	800041e <__aeabi_fadd+0x192>
 8000400:	025b      	lsls	r3, r3, #9
 8000402:	0a5b      	lsrs	r3, r3, #9
 8000404:	469c      	mov	ip, r3
 8000406:	b2ea      	uxtb	r2, r5
 8000408:	e785      	b.n	8000316 <__aeabi_fadd+0x8a>
 800040a:	2e00      	cmp	r6, #0
 800040c:	d007      	beq.n	800041e <__aeabi_fadd+0x192>
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	03d2      	lsls	r2, r2, #15
 8000412:	4213      	tst	r3, r2
 8000414:	d003      	beq.n	800041e <__aeabi_fadd+0x192>
 8000416:	4210      	tst	r0, r2
 8000418:	d101      	bne.n	800041e <__aeabi_fadd+0x192>
 800041a:	000c      	movs	r4, r1
 800041c:	0003      	movs	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0db      	beq.n	80003da <__aeabi_fadd+0x14e>
 8000422:	2080      	movs	r0, #128	; 0x80
 8000424:	03c0      	lsls	r0, r0, #15
 8000426:	4318      	orrs	r0, r3
 8000428:	0240      	lsls	r0, r0, #9
 800042a:	0a43      	lsrs	r3, r0, #9
 800042c:	469c      	mov	ip, r3
 800042e:	22ff      	movs	r2, #255	; 0xff
 8000430:	e771      	b.n	8000316 <__aeabi_fadd+0x8a>
 8000432:	2900      	cmp	r1, #0
 8000434:	d0d5      	beq.n	80003e2 <__aeabi_fadd+0x156>
 8000436:	1b7a      	subs	r2, r7, r5
 8000438:	2d00      	cmp	r5, #0
 800043a:	d160      	bne.n	80004fe <__aeabi_fadd+0x272>
 800043c:	4643      	mov	r3, r8
 800043e:	2b00      	cmp	r3, #0
 8000440:	d024      	beq.n	800048c <__aeabi_fadd+0x200>
 8000442:	1e53      	subs	r3, r2, #1
 8000444:	2a01      	cmp	r2, #1
 8000446:	d073      	beq.n	8000530 <__aeabi_fadd+0x2a4>
 8000448:	2aff      	cmp	r2, #255	; 0xff
 800044a:	d0e7      	beq.n	800041c <__aeabi_fadd+0x190>
 800044c:	001a      	movs	r2, r3
 800044e:	2a1b      	cmp	r2, #27
 8000450:	dc00      	bgt.n	8000454 <__aeabi_fadd+0x1c8>
 8000452:	e085      	b.n	8000560 <__aeabi_fadd+0x2d4>
 8000454:	2001      	movs	r0, #1
 8000456:	003d      	movs	r5, r7
 8000458:	1980      	adds	r0, r0, r6
 800045a:	e785      	b.n	8000368 <__aeabi_fadd+0xdc>
 800045c:	2320      	movs	r3, #32
 800045e:	003a      	movs	r2, r7
 8000460:	1b45      	subs	r5, r0, r5
 8000462:	0038      	movs	r0, r7
 8000464:	3501      	adds	r5, #1
 8000466:	40ea      	lsrs	r2, r5
 8000468:	1b5d      	subs	r5, r3, r5
 800046a:	40a8      	lsls	r0, r5
 800046c:	1e43      	subs	r3, r0, #1
 800046e:	4198      	sbcs	r0, r3
 8000470:	2500      	movs	r5, #0
 8000472:	4310      	orrs	r0, r2
 8000474:	e73e      	b.n	80002f4 <__aeabi_fadd+0x68>
 8000476:	2320      	movs	r3, #32
 8000478:	0030      	movs	r0, r6
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	0031      	movs	r1, r6
 800047e:	4098      	lsls	r0, r3
 8000480:	40d1      	lsrs	r1, r2
 8000482:	1e43      	subs	r3, r0, #1
 8000484:	4198      	sbcs	r0, r3
 8000486:	4308      	orrs	r0, r1
 8000488:	e722      	b.n	80002d0 <__aeabi_fadd+0x44>
 800048a:	000c      	movs	r4, r1
 800048c:	0003      	movs	r3, r0
 800048e:	0015      	movs	r5, r2
 8000490:	e7b4      	b.n	80003fc <__aeabi_fadd+0x170>
 8000492:	2fff      	cmp	r7, #255	; 0xff
 8000494:	d0c1      	beq.n	800041a <__aeabi_fadd+0x18e>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	4640      	mov	r0, r8
 800049a:	04db      	lsls	r3, r3, #19
 800049c:	4318      	orrs	r0, r3
 800049e:	4680      	mov	r8, r0
 80004a0:	2a1b      	cmp	r2, #27
 80004a2:	dd51      	ble.n	8000548 <__aeabi_fadd+0x2bc>
 80004a4:	2001      	movs	r0, #1
 80004a6:	000c      	movs	r4, r1
 80004a8:	003d      	movs	r5, r7
 80004aa:	1a30      	subs	r0, r6, r0
 80004ac:	e712      	b.n	80002d4 <__aeabi_fadd+0x48>
 80004ae:	4643      	mov	r3, r8
 80004b0:	1b9f      	subs	r7, r3, r6
 80004b2:	017b      	lsls	r3, r7, #5
 80004b4:	d42b      	bmi.n	800050e <__aeabi_fadd+0x282>
 80004b6:	2f00      	cmp	r7, #0
 80004b8:	d000      	beq.n	80004bc <__aeabi_fadd+0x230>
 80004ba:	e710      	b.n	80002de <__aeabi_fadd+0x52>
 80004bc:	2300      	movs	r3, #0
 80004be:	2400      	movs	r4, #0
 80004c0:	2200      	movs	r2, #0
 80004c2:	469c      	mov	ip, r3
 80004c4:	e727      	b.n	8000316 <__aeabi_fadd+0x8a>
 80004c6:	2320      	movs	r3, #32
 80004c8:	0032      	movs	r2, r6
 80004ca:	0030      	movs	r0, r6
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	1a59      	subs	r1, r3, r1
 80004d0:	4088      	lsls	r0, r1
 80004d2:	1e43      	subs	r3, r0, #1
 80004d4:	4198      	sbcs	r0, r3
 80004d6:	4310      	orrs	r0, r2
 80004d8:	e745      	b.n	8000366 <__aeabi_fadd+0xda>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d14a      	bne.n	8000574 <__aeabi_fadd+0x2e8>
 80004de:	4643      	mov	r3, r8
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d063      	beq.n	80005ac <__aeabi_fadd+0x320>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x260>
 80004ea:	e714      	b.n	8000316 <__aeabi_fadd+0x8a>
 80004ec:	0030      	movs	r0, r6
 80004ee:	4440      	add	r0, r8
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x26a>
 80004f4:	e77e      	b.n	80003f4 <__aeabi_fadd+0x168>
 80004f6:	4b32      	ldr	r3, [pc, #200]	; (80005c0 <__aeabi_fadd+0x334>)
 80004f8:	3501      	adds	r5, #1
 80004fa:	4018      	ands	r0, r3
 80004fc:	e77a      	b.n	80003f4 <__aeabi_fadd+0x168>
 80004fe:	2fff      	cmp	r7, #255	; 0xff
 8000500:	d08c      	beq.n	800041c <__aeabi_fadd+0x190>
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	4641      	mov	r1, r8
 8000506:	04db      	lsls	r3, r3, #19
 8000508:	4319      	orrs	r1, r3
 800050a:	4688      	mov	r8, r1
 800050c:	e79f      	b.n	800044e <__aeabi_fadd+0x1c2>
 800050e:	4643      	mov	r3, r8
 8000510:	000c      	movs	r4, r1
 8000512:	1af7      	subs	r7, r6, r3
 8000514:	e6e3      	b.n	80002de <__aeabi_fadd+0x52>
 8000516:	4642      	mov	r2, r8
 8000518:	2a00      	cmp	r2, #0
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x292>
 800051c:	e775      	b.n	800040a <__aeabi_fadd+0x17e>
 800051e:	2e00      	cmp	r6, #0
 8000520:	d000      	beq.n	8000524 <__aeabi_fadd+0x298>
 8000522:	e77a      	b.n	800041a <__aeabi_fadd+0x18e>
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	03db      	lsls	r3, r3, #15
 8000528:	2400      	movs	r4, #0
 800052a:	469c      	mov	ip, r3
 800052c:	22ff      	movs	r2, #255	; 0xff
 800052e:	e6f2      	b.n	8000316 <__aeabi_fadd+0x8a>
 8000530:	0030      	movs	r0, r6
 8000532:	4440      	add	r0, r8
 8000534:	2501      	movs	r5, #1
 8000536:	0143      	lsls	r3, r0, #5
 8000538:	d400      	bmi.n	800053c <__aeabi_fadd+0x2b0>
 800053a:	e75b      	b.n	80003f4 <__aeabi_fadd+0x168>
 800053c:	2502      	movs	r5, #2
 800053e:	e718      	b.n	8000372 <__aeabi_fadd+0xe6>
 8000540:	4643      	mov	r3, r8
 8000542:	2501      	movs	r5, #1
 8000544:	1b98      	subs	r0, r3, r6
 8000546:	e6c5      	b.n	80002d4 <__aeabi_fadd+0x48>
 8000548:	2320      	movs	r3, #32
 800054a:	4644      	mov	r4, r8
 800054c:	4640      	mov	r0, r8
 800054e:	40d4      	lsrs	r4, r2
 8000550:	1a9a      	subs	r2, r3, r2
 8000552:	4090      	lsls	r0, r2
 8000554:	1e43      	subs	r3, r0, #1
 8000556:	4198      	sbcs	r0, r3
 8000558:	4320      	orrs	r0, r4
 800055a:	e7a4      	b.n	80004a6 <__aeabi_fadd+0x21a>
 800055c:	000d      	movs	r5, r1
 800055e:	e74d      	b.n	80003fc <__aeabi_fadd+0x170>
 8000560:	2320      	movs	r3, #32
 8000562:	4641      	mov	r1, r8
 8000564:	4640      	mov	r0, r8
 8000566:	40d1      	lsrs	r1, r2
 8000568:	1a9a      	subs	r2, r3, r2
 800056a:	4090      	lsls	r0, r2
 800056c:	1e43      	subs	r3, r0, #1
 800056e:	4198      	sbcs	r0, r3
 8000570:	4308      	orrs	r0, r1
 8000572:	e770      	b.n	8000456 <__aeabi_fadd+0x1ca>
 8000574:	4642      	mov	r2, r8
 8000576:	2a00      	cmp	r2, #0
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x2f0>
 800057a:	e74f      	b.n	800041c <__aeabi_fadd+0x190>
 800057c:	2e00      	cmp	r6, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x2f6>
 8000580:	e74d      	b.n	800041e <__aeabi_fadd+0x192>
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	03d2      	lsls	r2, r2, #15
 8000586:	4213      	tst	r3, r2
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x300>
 800058a:	e748      	b.n	800041e <__aeabi_fadd+0x192>
 800058c:	4210      	tst	r0, r2
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0x306>
 8000590:	e745      	b.n	800041e <__aeabi_fadd+0x192>
 8000592:	0003      	movs	r3, r0
 8000594:	e743      	b.n	800041e <__aeabi_fadd+0x192>
 8000596:	2e00      	cmp	r6, #0
 8000598:	d090      	beq.n	80004bc <__aeabi_fadd+0x230>
 800059a:	000c      	movs	r4, r1
 800059c:	4684      	mov	ip, r0
 800059e:	2200      	movs	r2, #0
 80005a0:	e6b9      	b.n	8000316 <__aeabi_fadd+0x8a>
 80005a2:	4643      	mov	r3, r8
 80005a4:	000c      	movs	r4, r1
 80005a6:	1af0      	subs	r0, r6, r3
 80005a8:	3501      	adds	r5, #1
 80005aa:	e693      	b.n	80002d4 <__aeabi_fadd+0x48>
 80005ac:	4684      	mov	ip, r0
 80005ae:	2200      	movs	r2, #0
 80005b0:	e6b1      	b.n	8000316 <__aeabi_fadd+0x8a>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x32c>
 80005b6:	e71d      	b.n	80003f4 <__aeabi_fadd+0x168>
 80005b8:	2300      	movs	r3, #0
 80005ba:	2400      	movs	r4, #0
 80005bc:	469c      	mov	ip, r3
 80005be:	e6aa      	b.n	8000316 <__aeabi_fadd+0x8a>
 80005c0:	fbffffff 	.word	0xfbffffff
 80005c4:	7dffffff 	.word	0x7dffffff

080005c8 <__eqsf2>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	0042      	lsls	r2, r0, #1
 80005cc:	0245      	lsls	r5, r0, #9
 80005ce:	024e      	lsls	r6, r1, #9
 80005d0:	004c      	lsls	r4, r1, #1
 80005d2:	0fc3      	lsrs	r3, r0, #31
 80005d4:	0a6d      	lsrs	r5, r5, #9
 80005d6:	2001      	movs	r0, #1
 80005d8:	0e12      	lsrs	r2, r2, #24
 80005da:	0a76      	lsrs	r6, r6, #9
 80005dc:	0e24      	lsrs	r4, r4, #24
 80005de:	0fc9      	lsrs	r1, r1, #31
 80005e0:	2aff      	cmp	r2, #255	; 0xff
 80005e2:	d006      	beq.n	80005f2 <__eqsf2+0x2a>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d003      	beq.n	80005f0 <__eqsf2+0x28>
 80005e8:	42a2      	cmp	r2, r4
 80005ea:	d101      	bne.n	80005f0 <__eqsf2+0x28>
 80005ec:	42b5      	cmp	r5, r6
 80005ee:	d006      	beq.n	80005fe <__eqsf2+0x36>
 80005f0:	bd70      	pop	{r4, r5, r6, pc}
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d1fc      	bne.n	80005f0 <__eqsf2+0x28>
 80005f6:	2cff      	cmp	r4, #255	; 0xff
 80005f8:	d1fa      	bne.n	80005f0 <__eqsf2+0x28>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d1f8      	bne.n	80005f0 <__eqsf2+0x28>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d006      	beq.n	8000610 <__eqsf2+0x48>
 8000602:	2001      	movs	r0, #1
 8000604:	2a00      	cmp	r2, #0
 8000606:	d1f3      	bne.n	80005f0 <__eqsf2+0x28>
 8000608:	0028      	movs	r0, r5
 800060a:	1e43      	subs	r3, r0, #1
 800060c:	4198      	sbcs	r0, r3
 800060e:	e7ef      	b.n	80005f0 <__eqsf2+0x28>
 8000610:	2000      	movs	r0, #0
 8000612:	e7ed      	b.n	80005f0 <__eqsf2+0x28>

08000614 <__gesf2>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	0042      	lsls	r2, r0, #1
 8000618:	0245      	lsls	r5, r0, #9
 800061a:	024e      	lsls	r6, r1, #9
 800061c:	004c      	lsls	r4, r1, #1
 800061e:	0fc3      	lsrs	r3, r0, #31
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e12      	lsrs	r2, r2, #24
 8000624:	0a76      	lsrs	r6, r6, #9
 8000626:	0e24      	lsrs	r4, r4, #24
 8000628:	0fc8      	lsrs	r0, r1, #31
 800062a:	2aff      	cmp	r2, #255	; 0xff
 800062c:	d01b      	beq.n	8000666 <__gesf2+0x52>
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d00e      	beq.n	8000650 <__gesf2+0x3c>
 8000632:	2a00      	cmp	r2, #0
 8000634:	d11b      	bne.n	800066e <__gesf2+0x5a>
 8000636:	2c00      	cmp	r4, #0
 8000638:	d101      	bne.n	800063e <__gesf2+0x2a>
 800063a:	2e00      	cmp	r6, #0
 800063c:	d01c      	beq.n	8000678 <__gesf2+0x64>
 800063e:	2d00      	cmp	r5, #0
 8000640:	d00c      	beq.n	800065c <__gesf2+0x48>
 8000642:	4283      	cmp	r3, r0
 8000644:	d01c      	beq.n	8000680 <__gesf2+0x6c>
 8000646:	2102      	movs	r1, #2
 8000648:	1e58      	subs	r0, r3, #1
 800064a:	4008      	ands	r0, r1
 800064c:	3801      	subs	r0, #1
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	2e00      	cmp	r6, #0
 8000652:	d122      	bne.n	800069a <__gesf2+0x86>
 8000654:	2a00      	cmp	r2, #0
 8000656:	d1f4      	bne.n	8000642 <__gesf2+0x2e>
 8000658:	2d00      	cmp	r5, #0
 800065a:	d1f2      	bne.n	8000642 <__gesf2+0x2e>
 800065c:	2800      	cmp	r0, #0
 800065e:	d1f6      	bne.n	800064e <__gesf2+0x3a>
 8000660:	2001      	movs	r0, #1
 8000662:	4240      	negs	r0, r0
 8000664:	e7f3      	b.n	800064e <__gesf2+0x3a>
 8000666:	2d00      	cmp	r5, #0
 8000668:	d117      	bne.n	800069a <__gesf2+0x86>
 800066a:	2cff      	cmp	r4, #255	; 0xff
 800066c:	d0f0      	beq.n	8000650 <__gesf2+0x3c>
 800066e:	2c00      	cmp	r4, #0
 8000670:	d1e7      	bne.n	8000642 <__gesf2+0x2e>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d1e5      	bne.n	8000642 <__gesf2+0x2e>
 8000676:	e7e6      	b.n	8000646 <__gesf2+0x32>
 8000678:	2000      	movs	r0, #0
 800067a:	2d00      	cmp	r5, #0
 800067c:	d0e7      	beq.n	800064e <__gesf2+0x3a>
 800067e:	e7e2      	b.n	8000646 <__gesf2+0x32>
 8000680:	42a2      	cmp	r2, r4
 8000682:	dc05      	bgt.n	8000690 <__gesf2+0x7c>
 8000684:	dbea      	blt.n	800065c <__gesf2+0x48>
 8000686:	42b5      	cmp	r5, r6
 8000688:	d802      	bhi.n	8000690 <__gesf2+0x7c>
 800068a:	d3e7      	bcc.n	800065c <__gesf2+0x48>
 800068c:	2000      	movs	r0, #0
 800068e:	e7de      	b.n	800064e <__gesf2+0x3a>
 8000690:	4243      	negs	r3, r0
 8000692:	4158      	adcs	r0, r3
 8000694:	0040      	lsls	r0, r0, #1
 8000696:	3801      	subs	r0, #1
 8000698:	e7d9      	b.n	800064e <__gesf2+0x3a>
 800069a:	2002      	movs	r0, #2
 800069c:	4240      	negs	r0, r0
 800069e:	e7d6      	b.n	800064e <__gesf2+0x3a>

080006a0 <__lesf2>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	0042      	lsls	r2, r0, #1
 80006a4:	0245      	lsls	r5, r0, #9
 80006a6:	024e      	lsls	r6, r1, #9
 80006a8:	004c      	lsls	r4, r1, #1
 80006aa:	0fc3      	lsrs	r3, r0, #31
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	0e12      	lsrs	r2, r2, #24
 80006b0:	0a76      	lsrs	r6, r6, #9
 80006b2:	0e24      	lsrs	r4, r4, #24
 80006b4:	0fc8      	lsrs	r0, r1, #31
 80006b6:	2aff      	cmp	r2, #255	; 0xff
 80006b8:	d00b      	beq.n	80006d2 <__lesf2+0x32>
 80006ba:	2cff      	cmp	r4, #255	; 0xff
 80006bc:	d00d      	beq.n	80006da <__lesf2+0x3a>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d11f      	bne.n	8000702 <__lesf2+0x62>
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d116      	bne.n	80006f4 <__lesf2+0x54>
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d114      	bne.n	80006f4 <__lesf2+0x54>
 80006ca:	2000      	movs	r0, #0
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d010      	beq.n	80006f2 <__lesf2+0x52>
 80006d0:	e009      	b.n	80006e6 <__lesf2+0x46>
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d10c      	bne.n	80006f0 <__lesf2+0x50>
 80006d6:	2cff      	cmp	r4, #255	; 0xff
 80006d8:	d113      	bne.n	8000702 <__lesf2+0x62>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d108      	bne.n	80006f0 <__lesf2+0x50>
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d008      	beq.n	80006f4 <__lesf2+0x54>
 80006e2:	4283      	cmp	r3, r0
 80006e4:	d012      	beq.n	800070c <__lesf2+0x6c>
 80006e6:	2102      	movs	r1, #2
 80006e8:	1e58      	subs	r0, r3, #1
 80006ea:	4008      	ands	r0, r1
 80006ec:	3801      	subs	r0, #1
 80006ee:	e000      	b.n	80006f2 <__lesf2+0x52>
 80006f0:	2002      	movs	r0, #2
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d1f4      	bne.n	80006e2 <__lesf2+0x42>
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d1fa      	bne.n	80006f2 <__lesf2+0x52>
 80006fc:	2001      	movs	r0, #1
 80006fe:	4240      	negs	r0, r0
 8000700:	e7f7      	b.n	80006f2 <__lesf2+0x52>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d1ed      	bne.n	80006e2 <__lesf2+0x42>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d1eb      	bne.n	80006e2 <__lesf2+0x42>
 800070a:	e7ec      	b.n	80006e6 <__lesf2+0x46>
 800070c:	42a2      	cmp	r2, r4
 800070e:	dc05      	bgt.n	800071c <__lesf2+0x7c>
 8000710:	dbf2      	blt.n	80006f8 <__lesf2+0x58>
 8000712:	42b5      	cmp	r5, r6
 8000714:	d802      	bhi.n	800071c <__lesf2+0x7c>
 8000716:	d3ef      	bcc.n	80006f8 <__lesf2+0x58>
 8000718:	2000      	movs	r0, #0
 800071a:	e7ea      	b.n	80006f2 <__lesf2+0x52>
 800071c:	4243      	negs	r3, r0
 800071e:	4158      	adcs	r0, r3
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	3801      	subs	r0, #1
 8000724:	e7e5      	b.n	80006f2 <__lesf2+0x52>
 8000726:	46c0      	nop			; (mov r8, r8)

08000728 <__aeabi_fmul>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	464f      	mov	r7, r9
 800072c:	4646      	mov	r6, r8
 800072e:	46d6      	mov	lr, sl
 8000730:	0244      	lsls	r4, r0, #9
 8000732:	0045      	lsls	r5, r0, #1
 8000734:	b5c0      	push	{r6, r7, lr}
 8000736:	0a64      	lsrs	r4, r4, #9
 8000738:	1c0f      	adds	r7, r1, #0
 800073a:	0e2d      	lsrs	r5, r5, #24
 800073c:	0fc6      	lsrs	r6, r0, #31
 800073e:	2d00      	cmp	r5, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fmul+0x1c>
 8000742:	e08d      	b.n	8000860 <__aeabi_fmul+0x138>
 8000744:	2dff      	cmp	r5, #255	; 0xff
 8000746:	d100      	bne.n	800074a <__aeabi_fmul+0x22>
 8000748:	e092      	b.n	8000870 <__aeabi_fmul+0x148>
 800074a:	2300      	movs	r3, #0
 800074c:	2080      	movs	r0, #128	; 0x80
 800074e:	4699      	mov	r9, r3
 8000750:	469a      	mov	sl, r3
 8000752:	00e4      	lsls	r4, r4, #3
 8000754:	04c0      	lsls	r0, r0, #19
 8000756:	4304      	orrs	r4, r0
 8000758:	3d7f      	subs	r5, #127	; 0x7f
 800075a:	0278      	lsls	r0, r7, #9
 800075c:	0a43      	lsrs	r3, r0, #9
 800075e:	4698      	mov	r8, r3
 8000760:	007b      	lsls	r3, r7, #1
 8000762:	0e1b      	lsrs	r3, r3, #24
 8000764:	0fff      	lsrs	r7, r7, #31
 8000766:	2b00      	cmp	r3, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fmul+0x44>
 800076a:	e070      	b.n	800084e <__aeabi_fmul+0x126>
 800076c:	2bff      	cmp	r3, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fmul+0x4a>
 8000770:	e086      	b.n	8000880 <__aeabi_fmul+0x158>
 8000772:	4642      	mov	r2, r8
 8000774:	00d0      	lsls	r0, r2, #3
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	3b7f      	subs	r3, #127	; 0x7f
 800077a:	18ed      	adds	r5, r5, r3
 800077c:	2300      	movs	r3, #0
 800077e:	04d2      	lsls	r2, r2, #19
 8000780:	4302      	orrs	r2, r0
 8000782:	4690      	mov	r8, r2
 8000784:	469c      	mov	ip, r3
 8000786:	0031      	movs	r1, r6
 8000788:	464b      	mov	r3, r9
 800078a:	4079      	eors	r1, r7
 800078c:	1c68      	adds	r0, r5, #1
 800078e:	2b0f      	cmp	r3, #15
 8000790:	d81c      	bhi.n	80007cc <__aeabi_fmul+0xa4>
 8000792:	4a76      	ldr	r2, [pc, #472]	; (800096c <__aeabi_fmul+0x244>)
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	58d3      	ldr	r3, [r2, r3]
 8000798:	469f      	mov	pc, r3
 800079a:	0039      	movs	r1, r7
 800079c:	4644      	mov	r4, r8
 800079e:	46e2      	mov	sl, ip
 80007a0:	4653      	mov	r3, sl
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d00f      	beq.n	80007c6 <__aeabi_fmul+0x9e>
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d100      	bne.n	80007ac <__aeabi_fmul+0x84>
 80007aa:	e0d7      	b.n	800095c <__aeabi_fmul+0x234>
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d137      	bne.n	8000820 <__aeabi_fmul+0xf8>
 80007b0:	2000      	movs	r0, #0
 80007b2:	2400      	movs	r4, #0
 80007b4:	05c0      	lsls	r0, r0, #23
 80007b6:	4320      	orrs	r0, r4
 80007b8:	07c9      	lsls	r1, r1, #31
 80007ba:	4308      	orrs	r0, r1
 80007bc:	bce0      	pop	{r5, r6, r7}
 80007be:	46ba      	mov	sl, r7
 80007c0:	46b1      	mov	r9, r6
 80007c2:	46a8      	mov	r8, r5
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	20ff      	movs	r0, #255	; 0xff
 80007c8:	2400      	movs	r4, #0
 80007ca:	e7f3      	b.n	80007b4 <__aeabi_fmul+0x8c>
 80007cc:	0c26      	lsrs	r6, r4, #16
 80007ce:	0424      	lsls	r4, r4, #16
 80007d0:	0c22      	lsrs	r2, r4, #16
 80007d2:	4644      	mov	r4, r8
 80007d4:	0424      	lsls	r4, r4, #16
 80007d6:	0c24      	lsrs	r4, r4, #16
 80007d8:	4643      	mov	r3, r8
 80007da:	0027      	movs	r7, r4
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	4357      	muls	r7, r2
 80007e0:	4374      	muls	r4, r6
 80007e2:	435a      	muls	r2, r3
 80007e4:	435e      	muls	r6, r3
 80007e6:	1912      	adds	r2, r2, r4
 80007e8:	0c3b      	lsrs	r3, r7, #16
 80007ea:	189b      	adds	r3, r3, r2
 80007ec:	429c      	cmp	r4, r3
 80007ee:	d903      	bls.n	80007f8 <__aeabi_fmul+0xd0>
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0252      	lsls	r2, r2, #9
 80007f4:	4694      	mov	ip, r2
 80007f6:	4466      	add	r6, ip
 80007f8:	043f      	lsls	r7, r7, #16
 80007fa:	041a      	lsls	r2, r3, #16
 80007fc:	0c3f      	lsrs	r7, r7, #16
 80007fe:	19d2      	adds	r2, r2, r7
 8000800:	0194      	lsls	r4, r2, #6
 8000802:	1e67      	subs	r7, r4, #1
 8000804:	41bc      	sbcs	r4, r7
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	0e92      	lsrs	r2, r2, #26
 800080a:	199b      	adds	r3, r3, r6
 800080c:	4314      	orrs	r4, r2
 800080e:	019b      	lsls	r3, r3, #6
 8000810:	431c      	orrs	r4, r3
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	d400      	bmi.n	8000818 <__aeabi_fmul+0xf0>
 8000816:	e09b      	b.n	8000950 <__aeabi_fmul+0x228>
 8000818:	2301      	movs	r3, #1
 800081a:	0862      	lsrs	r2, r4, #1
 800081c:	401c      	ands	r4, r3
 800081e:	4314      	orrs	r4, r2
 8000820:	0002      	movs	r2, r0
 8000822:	327f      	adds	r2, #127	; 0x7f
 8000824:	2a00      	cmp	r2, #0
 8000826:	dd64      	ble.n	80008f2 <__aeabi_fmul+0x1ca>
 8000828:	0763      	lsls	r3, r4, #29
 800082a:	d004      	beq.n	8000836 <__aeabi_fmul+0x10e>
 800082c:	230f      	movs	r3, #15
 800082e:	4023      	ands	r3, r4
 8000830:	2b04      	cmp	r3, #4
 8000832:	d000      	beq.n	8000836 <__aeabi_fmul+0x10e>
 8000834:	3404      	adds	r4, #4
 8000836:	0123      	lsls	r3, r4, #4
 8000838:	d503      	bpl.n	8000842 <__aeabi_fmul+0x11a>
 800083a:	0002      	movs	r2, r0
 800083c:	4b4c      	ldr	r3, [pc, #304]	; (8000970 <__aeabi_fmul+0x248>)
 800083e:	3280      	adds	r2, #128	; 0x80
 8000840:	401c      	ands	r4, r3
 8000842:	2afe      	cmp	r2, #254	; 0xfe
 8000844:	dcbf      	bgt.n	80007c6 <__aeabi_fmul+0x9e>
 8000846:	01a4      	lsls	r4, r4, #6
 8000848:	0a64      	lsrs	r4, r4, #9
 800084a:	b2d0      	uxtb	r0, r2
 800084c:	e7b2      	b.n	80007b4 <__aeabi_fmul+0x8c>
 800084e:	4643      	mov	r3, r8
 8000850:	2b00      	cmp	r3, #0
 8000852:	d13d      	bne.n	80008d0 <__aeabi_fmul+0x1a8>
 8000854:	464a      	mov	r2, r9
 8000856:	3301      	adds	r3, #1
 8000858:	431a      	orrs	r2, r3
 800085a:	4691      	mov	r9, r2
 800085c:	469c      	mov	ip, r3
 800085e:	e792      	b.n	8000786 <__aeabi_fmul+0x5e>
 8000860:	2c00      	cmp	r4, #0
 8000862:	d129      	bne.n	80008b8 <__aeabi_fmul+0x190>
 8000864:	2304      	movs	r3, #4
 8000866:	4699      	mov	r9, r3
 8000868:	3b03      	subs	r3, #3
 800086a:	2500      	movs	r5, #0
 800086c:	469a      	mov	sl, r3
 800086e:	e774      	b.n	800075a <__aeabi_fmul+0x32>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d11b      	bne.n	80008ac <__aeabi_fmul+0x184>
 8000874:	2308      	movs	r3, #8
 8000876:	4699      	mov	r9, r3
 8000878:	3b06      	subs	r3, #6
 800087a:	25ff      	movs	r5, #255	; 0xff
 800087c:	469a      	mov	sl, r3
 800087e:	e76c      	b.n	800075a <__aeabi_fmul+0x32>
 8000880:	4643      	mov	r3, r8
 8000882:	35ff      	adds	r5, #255	; 0xff
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10b      	bne.n	80008a0 <__aeabi_fmul+0x178>
 8000888:	2302      	movs	r3, #2
 800088a:	464a      	mov	r2, r9
 800088c:	431a      	orrs	r2, r3
 800088e:	4691      	mov	r9, r2
 8000890:	469c      	mov	ip, r3
 8000892:	e778      	b.n	8000786 <__aeabi_fmul+0x5e>
 8000894:	4653      	mov	r3, sl
 8000896:	0031      	movs	r1, r6
 8000898:	2b02      	cmp	r3, #2
 800089a:	d000      	beq.n	800089e <__aeabi_fmul+0x176>
 800089c:	e783      	b.n	80007a6 <__aeabi_fmul+0x7e>
 800089e:	e792      	b.n	80007c6 <__aeabi_fmul+0x9e>
 80008a0:	2303      	movs	r3, #3
 80008a2:	464a      	mov	r2, r9
 80008a4:	431a      	orrs	r2, r3
 80008a6:	4691      	mov	r9, r2
 80008a8:	469c      	mov	ip, r3
 80008aa:	e76c      	b.n	8000786 <__aeabi_fmul+0x5e>
 80008ac:	230c      	movs	r3, #12
 80008ae:	4699      	mov	r9, r3
 80008b0:	3b09      	subs	r3, #9
 80008b2:	25ff      	movs	r5, #255	; 0xff
 80008b4:	469a      	mov	sl, r3
 80008b6:	e750      	b.n	800075a <__aeabi_fmul+0x32>
 80008b8:	0020      	movs	r0, r4
 80008ba:	f000 fe83 	bl	80015c4 <__clzsi2>
 80008be:	2576      	movs	r5, #118	; 0x76
 80008c0:	1f43      	subs	r3, r0, #5
 80008c2:	409c      	lsls	r4, r3
 80008c4:	2300      	movs	r3, #0
 80008c6:	426d      	negs	r5, r5
 80008c8:	4699      	mov	r9, r3
 80008ca:	469a      	mov	sl, r3
 80008cc:	1a2d      	subs	r5, r5, r0
 80008ce:	e744      	b.n	800075a <__aeabi_fmul+0x32>
 80008d0:	4640      	mov	r0, r8
 80008d2:	f000 fe77 	bl	80015c4 <__clzsi2>
 80008d6:	4642      	mov	r2, r8
 80008d8:	1f43      	subs	r3, r0, #5
 80008da:	409a      	lsls	r2, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	1a2d      	subs	r5, r5, r0
 80008e0:	4690      	mov	r8, r2
 80008e2:	469c      	mov	ip, r3
 80008e4:	3d76      	subs	r5, #118	; 0x76
 80008e6:	e74e      	b.n	8000786 <__aeabi_fmul+0x5e>
 80008e8:	2480      	movs	r4, #128	; 0x80
 80008ea:	2100      	movs	r1, #0
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	03e4      	lsls	r4, r4, #15
 80008f0:	e760      	b.n	80007b4 <__aeabi_fmul+0x8c>
 80008f2:	2301      	movs	r3, #1
 80008f4:	1a9b      	subs	r3, r3, r2
 80008f6:	2b1b      	cmp	r3, #27
 80008f8:	dd00      	ble.n	80008fc <__aeabi_fmul+0x1d4>
 80008fa:	e759      	b.n	80007b0 <__aeabi_fmul+0x88>
 80008fc:	0022      	movs	r2, r4
 80008fe:	309e      	adds	r0, #158	; 0x9e
 8000900:	40da      	lsrs	r2, r3
 8000902:	4084      	lsls	r4, r0
 8000904:	0013      	movs	r3, r2
 8000906:	1e62      	subs	r2, r4, #1
 8000908:	4194      	sbcs	r4, r2
 800090a:	431c      	orrs	r4, r3
 800090c:	0763      	lsls	r3, r4, #29
 800090e:	d004      	beq.n	800091a <__aeabi_fmul+0x1f2>
 8000910:	230f      	movs	r3, #15
 8000912:	4023      	ands	r3, r4
 8000914:	2b04      	cmp	r3, #4
 8000916:	d000      	beq.n	800091a <__aeabi_fmul+0x1f2>
 8000918:	3404      	adds	r4, #4
 800091a:	0163      	lsls	r3, r4, #5
 800091c:	d51a      	bpl.n	8000954 <__aeabi_fmul+0x22c>
 800091e:	2001      	movs	r0, #1
 8000920:	2400      	movs	r4, #0
 8000922:	e747      	b.n	80007b4 <__aeabi_fmul+0x8c>
 8000924:	2080      	movs	r0, #128	; 0x80
 8000926:	03c0      	lsls	r0, r0, #15
 8000928:	4204      	tst	r4, r0
 800092a:	d009      	beq.n	8000940 <__aeabi_fmul+0x218>
 800092c:	4643      	mov	r3, r8
 800092e:	4203      	tst	r3, r0
 8000930:	d106      	bne.n	8000940 <__aeabi_fmul+0x218>
 8000932:	4644      	mov	r4, r8
 8000934:	4304      	orrs	r4, r0
 8000936:	0264      	lsls	r4, r4, #9
 8000938:	0039      	movs	r1, r7
 800093a:	20ff      	movs	r0, #255	; 0xff
 800093c:	0a64      	lsrs	r4, r4, #9
 800093e:	e739      	b.n	80007b4 <__aeabi_fmul+0x8c>
 8000940:	2080      	movs	r0, #128	; 0x80
 8000942:	03c0      	lsls	r0, r0, #15
 8000944:	4304      	orrs	r4, r0
 8000946:	0264      	lsls	r4, r4, #9
 8000948:	0031      	movs	r1, r6
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	0a64      	lsrs	r4, r4, #9
 800094e:	e731      	b.n	80007b4 <__aeabi_fmul+0x8c>
 8000950:	0028      	movs	r0, r5
 8000952:	e765      	b.n	8000820 <__aeabi_fmul+0xf8>
 8000954:	01a4      	lsls	r4, r4, #6
 8000956:	2000      	movs	r0, #0
 8000958:	0a64      	lsrs	r4, r4, #9
 800095a:	e72b      	b.n	80007b4 <__aeabi_fmul+0x8c>
 800095c:	2080      	movs	r0, #128	; 0x80
 800095e:	03c0      	lsls	r0, r0, #15
 8000960:	4304      	orrs	r4, r0
 8000962:	0264      	lsls	r4, r4, #9
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	0a64      	lsrs	r4, r4, #9
 8000968:	e724      	b.n	80007b4 <__aeabi_fmul+0x8c>
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	080066b0 	.word	0x080066b0
 8000970:	f7ffffff 	.word	0xf7ffffff

08000974 <__aeabi_fsub>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	46ce      	mov	lr, r9
 8000978:	4647      	mov	r7, r8
 800097a:	0243      	lsls	r3, r0, #9
 800097c:	0a5b      	lsrs	r3, r3, #9
 800097e:	024e      	lsls	r6, r1, #9
 8000980:	00da      	lsls	r2, r3, #3
 8000982:	4694      	mov	ip, r2
 8000984:	0a72      	lsrs	r2, r6, #9
 8000986:	4691      	mov	r9, r2
 8000988:	0045      	lsls	r5, r0, #1
 800098a:	004a      	lsls	r2, r1, #1
 800098c:	b580      	push	{r7, lr}
 800098e:	0e2d      	lsrs	r5, r5, #24
 8000990:	001f      	movs	r7, r3
 8000992:	0fc4      	lsrs	r4, r0, #31
 8000994:	0e12      	lsrs	r2, r2, #24
 8000996:	0fc9      	lsrs	r1, r1, #31
 8000998:	09b6      	lsrs	r6, r6, #6
 800099a:	2aff      	cmp	r2, #255	; 0xff
 800099c:	d05b      	beq.n	8000a56 <__aeabi_fsub+0xe2>
 800099e:	2001      	movs	r0, #1
 80009a0:	4041      	eors	r1, r0
 80009a2:	428c      	cmp	r4, r1
 80009a4:	d039      	beq.n	8000a1a <__aeabi_fsub+0xa6>
 80009a6:	1aa8      	subs	r0, r5, r2
 80009a8:	2800      	cmp	r0, #0
 80009aa:	dd5a      	ble.n	8000a62 <__aeabi_fsub+0xee>
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	d06a      	beq.n	8000a86 <__aeabi_fsub+0x112>
 80009b0:	2dff      	cmp	r5, #255	; 0xff
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fsub+0x42>
 80009b4:	e0d9      	b.n	8000b6a <__aeabi_fsub+0x1f6>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	04d2      	lsls	r2, r2, #19
 80009ba:	4316      	orrs	r6, r2
 80009bc:	281b      	cmp	r0, #27
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x4e>
 80009c0:	e0e9      	b.n	8000b96 <__aeabi_fsub+0x222>
 80009c2:	2001      	movs	r0, #1
 80009c4:	4663      	mov	r3, ip
 80009c6:	1a18      	subs	r0, r3, r0
 80009c8:	0143      	lsls	r3, r0, #5
 80009ca:	d400      	bmi.n	80009ce <__aeabi_fsub+0x5a>
 80009cc:	e0b4      	b.n	8000b38 <__aeabi_fsub+0x1c4>
 80009ce:	0180      	lsls	r0, r0, #6
 80009d0:	0987      	lsrs	r7, r0, #6
 80009d2:	0038      	movs	r0, r7
 80009d4:	f000 fdf6 	bl	80015c4 <__clzsi2>
 80009d8:	3805      	subs	r0, #5
 80009da:	4087      	lsls	r7, r0
 80009dc:	4285      	cmp	r5, r0
 80009de:	dc00      	bgt.n	80009e2 <__aeabi_fsub+0x6e>
 80009e0:	e0cc      	b.n	8000b7c <__aeabi_fsub+0x208>
 80009e2:	1a2d      	subs	r5, r5, r0
 80009e4:	48b5      	ldr	r0, [pc, #724]	; (8000cbc <__aeabi_fsub+0x348>)
 80009e6:	4038      	ands	r0, r7
 80009e8:	0743      	lsls	r3, r0, #29
 80009ea:	d004      	beq.n	80009f6 <__aeabi_fsub+0x82>
 80009ec:	230f      	movs	r3, #15
 80009ee:	4003      	ands	r3, r0
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d000      	beq.n	80009f6 <__aeabi_fsub+0x82>
 80009f4:	3004      	adds	r0, #4
 80009f6:	0143      	lsls	r3, r0, #5
 80009f8:	d400      	bmi.n	80009fc <__aeabi_fsub+0x88>
 80009fa:	e0a0      	b.n	8000b3e <__aeabi_fsub+0x1ca>
 80009fc:	1c6a      	adds	r2, r5, #1
 80009fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fsub+0x90>
 8000a02:	e08d      	b.n	8000b20 <__aeabi_fsub+0x1ac>
 8000a04:	0180      	lsls	r0, r0, #6
 8000a06:	0a47      	lsrs	r7, r0, #9
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	05d0      	lsls	r0, r2, #23
 8000a0c:	4338      	orrs	r0, r7
 8000a0e:	07e4      	lsls	r4, r4, #31
 8000a10:	4320      	orrs	r0, r4
 8000a12:	bcc0      	pop	{r6, r7}
 8000a14:	46b9      	mov	r9, r7
 8000a16:	46b0      	mov	r8, r6
 8000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1a:	1aa8      	subs	r0, r5, r2
 8000a1c:	4680      	mov	r8, r0
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	dd45      	ble.n	8000aae <__aeabi_fsub+0x13a>
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	d070      	beq.n	8000b08 <__aeabi_fsub+0x194>
 8000a26:	2dff      	cmp	r5, #255	; 0xff
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fsub+0xb8>
 8000a2a:	e09e      	b.n	8000b6a <__aeabi_fsub+0x1f6>
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	04db      	lsls	r3, r3, #19
 8000a30:	431e      	orrs	r6, r3
 8000a32:	4643      	mov	r3, r8
 8000a34:	2b1b      	cmp	r3, #27
 8000a36:	dc00      	bgt.n	8000a3a <__aeabi_fsub+0xc6>
 8000a38:	e0d2      	b.n	8000be0 <__aeabi_fsub+0x26c>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	4460      	add	r0, ip
 8000a3e:	0143      	lsls	r3, r0, #5
 8000a40:	d57a      	bpl.n	8000b38 <__aeabi_fsub+0x1c4>
 8000a42:	3501      	adds	r5, #1
 8000a44:	2dff      	cmp	r5, #255	; 0xff
 8000a46:	d06b      	beq.n	8000b20 <__aeabi_fsub+0x1ac>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	4a9d      	ldr	r2, [pc, #628]	; (8000cc0 <__aeabi_fsub+0x34c>)
 8000a4c:	4003      	ands	r3, r0
 8000a4e:	0840      	lsrs	r0, r0, #1
 8000a50:	4010      	ands	r0, r2
 8000a52:	4318      	orrs	r0, r3
 8000a54:	e7c8      	b.n	80009e8 <__aeabi_fsub+0x74>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d020      	beq.n	8000a9c <__aeabi_fsub+0x128>
 8000a5a:	428c      	cmp	r4, r1
 8000a5c:	d023      	beq.n	8000aa6 <__aeabi_fsub+0x132>
 8000a5e:	0028      	movs	r0, r5
 8000a60:	38ff      	subs	r0, #255	; 0xff
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d039      	beq.n	8000ada <__aeabi_fsub+0x166>
 8000a66:	1b57      	subs	r7, r2, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fsub+0xfa>
 8000a6c:	e09d      	b.n	8000baa <__aeabi_fsub+0x236>
 8000a6e:	4663      	mov	r3, ip
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fsub+0x102>
 8000a74:	e0db      	b.n	8000c2e <__aeabi_fsub+0x2ba>
 8000a76:	1e7b      	subs	r3, r7, #1
 8000a78:	2f01      	cmp	r7, #1
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_fsub+0x10a>
 8000a7c:	e10d      	b.n	8000c9a <__aeabi_fsub+0x326>
 8000a7e:	2fff      	cmp	r7, #255	; 0xff
 8000a80:	d071      	beq.n	8000b66 <__aeabi_fsub+0x1f2>
 8000a82:	001f      	movs	r7, r3
 8000a84:	e098      	b.n	8000bb8 <__aeabi_fsub+0x244>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fsub+0x118>
 8000a8a:	e0a7      	b.n	8000bdc <__aeabi_fsub+0x268>
 8000a8c:	1e42      	subs	r2, r0, #1
 8000a8e:	2801      	cmp	r0, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x120>
 8000a92:	e0e6      	b.n	8000c62 <__aeabi_fsub+0x2ee>
 8000a94:	28ff      	cmp	r0, #255	; 0xff
 8000a96:	d068      	beq.n	8000b6a <__aeabi_fsub+0x1f6>
 8000a98:	0010      	movs	r0, r2
 8000a9a:	e78f      	b.n	80009bc <__aeabi_fsub+0x48>
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4041      	eors	r1, r0
 8000aa0:	42a1      	cmp	r1, r4
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_fsub+0x132>
 8000aa4:	e77f      	b.n	80009a6 <__aeabi_fsub+0x32>
 8000aa6:	20ff      	movs	r0, #255	; 0xff
 8000aa8:	4240      	negs	r0, r0
 8000aaa:	4680      	mov	r8, r0
 8000aac:	44a8      	add	r8, r5
 8000aae:	4640      	mov	r0, r8
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d038      	beq.n	8000b26 <__aeabi_fsub+0x1b2>
 8000ab4:	1b51      	subs	r1, r2, r5
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fsub+0x148>
 8000aba:	e0ae      	b.n	8000c1a <__aeabi_fsub+0x2a6>
 8000abc:	2aff      	cmp	r2, #255	; 0xff
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fsub+0x14e>
 8000ac0:	e0df      	b.n	8000c82 <__aeabi_fsub+0x30e>
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	4660      	mov	r0, ip
 8000ac6:	04db      	lsls	r3, r3, #19
 8000ac8:	4318      	orrs	r0, r3
 8000aca:	4684      	mov	ip, r0
 8000acc:	291b      	cmp	r1, #27
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_fsub+0x15e>
 8000ad0:	e0d9      	b.n	8000c86 <__aeabi_fsub+0x312>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	0015      	movs	r5, r2
 8000ad6:	1980      	adds	r0, r0, r6
 8000ad8:	e7b1      	b.n	8000a3e <__aeabi_fsub+0xca>
 8000ada:	20fe      	movs	r0, #254	; 0xfe
 8000adc:	1c6a      	adds	r2, r5, #1
 8000ade:	4210      	tst	r0, r2
 8000ae0:	d171      	bne.n	8000bc6 <__aeabi_fsub+0x252>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fsub+0x174>
 8000ae6:	e0a6      	b.n	8000c36 <__aeabi_fsub+0x2c2>
 8000ae8:	4663      	mov	r3, ip
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_fsub+0x17c>
 8000aee:	e0d9      	b.n	8000ca4 <__aeabi_fsub+0x330>
 8000af0:	2200      	movs	r2, #0
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x184>
 8000af6:	e788      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000af8:	1b98      	subs	r0, r3, r6
 8000afa:	0143      	lsls	r3, r0, #5
 8000afc:	d400      	bmi.n	8000b00 <__aeabi_fsub+0x18c>
 8000afe:	e0e1      	b.n	8000cc4 <__aeabi_fsub+0x350>
 8000b00:	4663      	mov	r3, ip
 8000b02:	000c      	movs	r4, r1
 8000b04:	1af0      	subs	r0, r6, r3
 8000b06:	e76f      	b.n	80009e8 <__aeabi_fsub+0x74>
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fsub+0x19a>
 8000b0c:	e0b7      	b.n	8000c7e <__aeabi_fsub+0x30a>
 8000b0e:	0002      	movs	r2, r0
 8000b10:	3a01      	subs	r2, #1
 8000b12:	2801      	cmp	r0, #1
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0x1a4>
 8000b16:	e09c      	b.n	8000c52 <__aeabi_fsub+0x2de>
 8000b18:	28ff      	cmp	r0, #255	; 0xff
 8000b1a:	d026      	beq.n	8000b6a <__aeabi_fsub+0x1f6>
 8000b1c:	4690      	mov	r8, r2
 8000b1e:	e788      	b.n	8000a32 <__aeabi_fsub+0xbe>
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	2700      	movs	r7, #0
 8000b24:	e771      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000b26:	20fe      	movs	r0, #254	; 0xfe
 8000b28:	1c6a      	adds	r2, r5, #1
 8000b2a:	4210      	tst	r0, r2
 8000b2c:	d064      	beq.n	8000bf8 <__aeabi_fsub+0x284>
 8000b2e:	2aff      	cmp	r2, #255	; 0xff
 8000b30:	d0f6      	beq.n	8000b20 <__aeabi_fsub+0x1ac>
 8000b32:	0015      	movs	r5, r2
 8000b34:	4466      	add	r6, ip
 8000b36:	0870      	lsrs	r0, r6, #1
 8000b38:	0743      	lsls	r3, r0, #29
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_fsub+0x1ca>
 8000b3c:	e756      	b.n	80009ec <__aeabi_fsub+0x78>
 8000b3e:	08c3      	lsrs	r3, r0, #3
 8000b40:	2dff      	cmp	r5, #255	; 0xff
 8000b42:	d012      	beq.n	8000b6a <__aeabi_fsub+0x1f6>
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	0a5f      	lsrs	r7, r3, #9
 8000b48:	b2ea      	uxtb	r2, r5
 8000b4a:	e75e      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fsub+0x1e0>
 8000b52:	e096      	b.n	8000c82 <__aeabi_fsub+0x30e>
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d008      	beq.n	8000b6a <__aeabi_fsub+0x1f6>
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	03d2      	lsls	r2, r2, #15
 8000b5c:	4213      	tst	r3, r2
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_fsub+0x1f6>
 8000b60:	4648      	mov	r0, r9
 8000b62:	4210      	tst	r0, r2
 8000b64:	d101      	bne.n	8000b6a <__aeabi_fsub+0x1f6>
 8000b66:	000c      	movs	r4, r1
 8000b68:	464b      	mov	r3, r9
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0d8      	beq.n	8000b20 <__aeabi_fsub+0x1ac>
 8000b6e:	2780      	movs	r7, #128	; 0x80
 8000b70:	03ff      	lsls	r7, r7, #15
 8000b72:	431f      	orrs	r7, r3
 8000b74:	027f      	lsls	r7, r7, #9
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	0a7f      	lsrs	r7, r7, #9
 8000b7a:	e746      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	003a      	movs	r2, r7
 8000b80:	1b45      	subs	r5, r0, r5
 8000b82:	0038      	movs	r0, r7
 8000b84:	3501      	adds	r5, #1
 8000b86:	40ea      	lsrs	r2, r5
 8000b88:	1b5d      	subs	r5, r3, r5
 8000b8a:	40a8      	lsls	r0, r5
 8000b8c:	1e43      	subs	r3, r0, #1
 8000b8e:	4198      	sbcs	r0, r3
 8000b90:	2500      	movs	r5, #0
 8000b92:	4310      	orrs	r0, r2
 8000b94:	e728      	b.n	80009e8 <__aeabi_fsub+0x74>
 8000b96:	2320      	movs	r3, #32
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	0032      	movs	r2, r6
 8000b9c:	409e      	lsls	r6, r3
 8000b9e:	40c2      	lsrs	r2, r0
 8000ba0:	0030      	movs	r0, r6
 8000ba2:	1e43      	subs	r3, r0, #1
 8000ba4:	4198      	sbcs	r0, r3
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	e70c      	b.n	80009c4 <__aeabi_fsub+0x50>
 8000baa:	2aff      	cmp	r2, #255	; 0xff
 8000bac:	d0db      	beq.n	8000b66 <__aeabi_fsub+0x1f2>
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	04db      	lsls	r3, r3, #19
 8000bb4:	4318      	orrs	r0, r3
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	2f1b      	cmp	r7, #27
 8000bba:	dd56      	ble.n	8000c6a <__aeabi_fsub+0x2f6>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	0015      	movs	r5, r2
 8000bc2:	1a30      	subs	r0, r6, r0
 8000bc4:	e700      	b.n	80009c8 <__aeabi_fsub+0x54>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1b9f      	subs	r7, r3, r6
 8000bca:	017b      	lsls	r3, r7, #5
 8000bcc:	d43d      	bmi.n	8000c4a <__aeabi_fsub+0x2d6>
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_fsub+0x260>
 8000bd2:	e6fe      	b.n	80009d2 <__aeabi_fsub+0x5e>
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2700      	movs	r7, #0
 8000bda:	e716      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000bdc:	0005      	movs	r5, r0
 8000bde:	e7af      	b.n	8000b40 <__aeabi_fsub+0x1cc>
 8000be0:	0032      	movs	r2, r6
 8000be2:	4643      	mov	r3, r8
 8000be4:	4641      	mov	r1, r8
 8000be6:	40da      	lsrs	r2, r3
 8000be8:	2320      	movs	r3, #32
 8000bea:	1a5b      	subs	r3, r3, r1
 8000bec:	409e      	lsls	r6, r3
 8000bee:	0030      	movs	r0, r6
 8000bf0:	1e43      	subs	r3, r0, #1
 8000bf2:	4198      	sbcs	r0, r3
 8000bf4:	4310      	orrs	r0, r2
 8000bf6:	e721      	b.n	8000a3c <__aeabi_fsub+0xc8>
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1a7      	bne.n	8000b4c <__aeabi_fsub+0x1d8>
 8000bfc:	4663      	mov	r3, ip
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d059      	beq.n	8000cb6 <__aeabi_fsub+0x342>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x296>
 8000c08:	e6ff      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000c0a:	0030      	movs	r0, r6
 8000c0c:	4460      	add	r0, ip
 8000c0e:	0143      	lsls	r3, r0, #5
 8000c10:	d592      	bpl.n	8000b38 <__aeabi_fsub+0x1c4>
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <__aeabi_fsub+0x348>)
 8000c14:	3501      	adds	r5, #1
 8000c16:	4018      	ands	r0, r3
 8000c18:	e78e      	b.n	8000b38 <__aeabi_fsub+0x1c4>
 8000c1a:	4663      	mov	r3, ip
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d047      	beq.n	8000cb0 <__aeabi_fsub+0x33c>
 8000c20:	1e4b      	subs	r3, r1, #1
 8000c22:	2901      	cmp	r1, #1
 8000c24:	d015      	beq.n	8000c52 <__aeabi_fsub+0x2de>
 8000c26:	29ff      	cmp	r1, #255	; 0xff
 8000c28:	d02b      	beq.n	8000c82 <__aeabi_fsub+0x30e>
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	e74e      	b.n	8000acc <__aeabi_fsub+0x158>
 8000c2e:	000c      	movs	r4, r1
 8000c30:	464b      	mov	r3, r9
 8000c32:	003d      	movs	r5, r7
 8000c34:	e784      	b.n	8000b40 <__aeabi_fsub+0x1cc>
 8000c36:	4662      	mov	r2, ip
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d18b      	bne.n	8000b54 <__aeabi_fsub+0x1e0>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d192      	bne.n	8000b66 <__aeabi_fsub+0x1f2>
 8000c40:	2780      	movs	r7, #128	; 0x80
 8000c42:	2400      	movs	r4, #0
 8000c44:	22ff      	movs	r2, #255	; 0xff
 8000c46:	03ff      	lsls	r7, r7, #15
 8000c48:	e6df      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000c4a:	4663      	mov	r3, ip
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	1af7      	subs	r7, r6, r3
 8000c50:	e6bf      	b.n	80009d2 <__aeabi_fsub+0x5e>
 8000c52:	0030      	movs	r0, r6
 8000c54:	4460      	add	r0, ip
 8000c56:	2501      	movs	r5, #1
 8000c58:	0143      	lsls	r3, r0, #5
 8000c5a:	d400      	bmi.n	8000c5e <__aeabi_fsub+0x2ea>
 8000c5c:	e76c      	b.n	8000b38 <__aeabi_fsub+0x1c4>
 8000c5e:	2502      	movs	r5, #2
 8000c60:	e6f2      	b.n	8000a48 <__aeabi_fsub+0xd4>
 8000c62:	4663      	mov	r3, ip
 8000c64:	2501      	movs	r5, #1
 8000c66:	1b98      	subs	r0, r3, r6
 8000c68:	e6ae      	b.n	80009c8 <__aeabi_fsub+0x54>
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	4660      	mov	r0, ip
 8000c70:	40fc      	lsrs	r4, r7
 8000c72:	1bdf      	subs	r7, r3, r7
 8000c74:	40b8      	lsls	r0, r7
 8000c76:	1e43      	subs	r3, r0, #1
 8000c78:	4198      	sbcs	r0, r3
 8000c7a:	4320      	orrs	r0, r4
 8000c7c:	e79f      	b.n	8000bbe <__aeabi_fsub+0x24a>
 8000c7e:	0005      	movs	r5, r0
 8000c80:	e75e      	b.n	8000b40 <__aeabi_fsub+0x1cc>
 8000c82:	464b      	mov	r3, r9
 8000c84:	e771      	b.n	8000b6a <__aeabi_fsub+0x1f6>
 8000c86:	2320      	movs	r3, #32
 8000c88:	4665      	mov	r5, ip
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	40cd      	lsrs	r5, r1
 8000c8e:	1a59      	subs	r1, r3, r1
 8000c90:	4088      	lsls	r0, r1
 8000c92:	1e43      	subs	r3, r0, #1
 8000c94:	4198      	sbcs	r0, r3
 8000c96:	4328      	orrs	r0, r5
 8000c98:	e71c      	b.n	8000ad4 <__aeabi_fsub+0x160>
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	000c      	movs	r4, r1
 8000c9e:	2501      	movs	r5, #1
 8000ca0:	1af0      	subs	r0, r6, r3
 8000ca2:	e691      	b.n	80009c8 <__aeabi_fsub+0x54>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d095      	beq.n	8000bd4 <__aeabi_fsub+0x260>
 8000ca8:	000c      	movs	r4, r1
 8000caa:	464f      	mov	r7, r9
 8000cac:	2200      	movs	r2, #0
 8000cae:	e6ac      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	000d      	movs	r5, r1
 8000cb4:	e744      	b.n	8000b40 <__aeabi_fsub+0x1cc>
 8000cb6:	464f      	mov	r7, r9
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e6a6      	b.n	8000a0a <__aeabi_fsub+0x96>
 8000cbc:	fbffffff 	.word	0xfbffffff
 8000cc0:	7dffffff 	.word	0x7dffffff
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d000      	beq.n	8000cca <__aeabi_fsub+0x356>
 8000cc8:	e736      	b.n	8000b38 <__aeabi_fsub+0x1c4>
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2700      	movs	r7, #0
 8000cce:	e69c      	b.n	8000a0a <__aeabi_fsub+0x96>

08000cd0 <__aeabi_f2iz>:
 8000cd0:	0241      	lsls	r1, r0, #9
 8000cd2:	0042      	lsls	r2, r0, #1
 8000cd4:	0fc3      	lsrs	r3, r0, #31
 8000cd6:	0a49      	lsrs	r1, r1, #9
 8000cd8:	2000      	movs	r0, #0
 8000cda:	0e12      	lsrs	r2, r2, #24
 8000cdc:	2a7e      	cmp	r2, #126	; 0x7e
 8000cde:	dd03      	ble.n	8000ce8 <__aeabi_f2iz+0x18>
 8000ce0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ce2:	dd02      	ble.n	8000cea <__aeabi_f2iz+0x1a>
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <__aeabi_f2iz+0x3c>)
 8000ce6:	1898      	adds	r0, r3, r2
 8000ce8:	4770      	bx	lr
 8000cea:	2080      	movs	r0, #128	; 0x80
 8000cec:	0400      	lsls	r0, r0, #16
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	2a95      	cmp	r2, #149	; 0x95
 8000cf2:	dc07      	bgt.n	8000d04 <__aeabi_f2iz+0x34>
 8000cf4:	2096      	movs	r0, #150	; 0x96
 8000cf6:	1a82      	subs	r2, r0, r2
 8000cf8:	40d1      	lsrs	r1, r2
 8000cfa:	4248      	negs	r0, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f3      	bne.n	8000ce8 <__aeabi_f2iz+0x18>
 8000d00:	0008      	movs	r0, r1
 8000d02:	e7f1      	b.n	8000ce8 <__aeabi_f2iz+0x18>
 8000d04:	3a96      	subs	r2, #150	; 0x96
 8000d06:	4091      	lsls	r1, r2
 8000d08:	e7f7      	b.n	8000cfa <__aeabi_f2iz+0x2a>
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	7fffffff 	.word	0x7fffffff

08000d10 <__aeabi_i2f>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d013      	beq.n	8000d3e <__aeabi_i2f+0x2e>
 8000d16:	17c3      	asrs	r3, r0, #31
 8000d18:	18c6      	adds	r6, r0, r3
 8000d1a:	405e      	eors	r6, r3
 8000d1c:	0fc4      	lsrs	r4, r0, #31
 8000d1e:	0030      	movs	r0, r6
 8000d20:	f000 fc50 	bl	80015c4 <__clzsi2>
 8000d24:	239e      	movs	r3, #158	; 0x9e
 8000d26:	0005      	movs	r5, r0
 8000d28:	1a1b      	subs	r3, r3, r0
 8000d2a:	2b96      	cmp	r3, #150	; 0x96
 8000d2c:	dc0f      	bgt.n	8000d4e <__aeabi_i2f+0x3e>
 8000d2e:	2808      	cmp	r0, #8
 8000d30:	dd01      	ble.n	8000d36 <__aeabi_i2f+0x26>
 8000d32:	3d08      	subs	r5, #8
 8000d34:	40ae      	lsls	r6, r5
 8000d36:	0276      	lsls	r6, r6, #9
 8000d38:	0a76      	lsrs	r6, r6, #9
 8000d3a:	b2d8      	uxtb	r0, r3
 8000d3c:	e002      	b.n	8000d44 <__aeabi_i2f+0x34>
 8000d3e:	2400      	movs	r4, #0
 8000d40:	2000      	movs	r0, #0
 8000d42:	2600      	movs	r6, #0
 8000d44:	05c0      	lsls	r0, r0, #23
 8000d46:	4330      	orrs	r0, r6
 8000d48:	07e4      	lsls	r4, r4, #31
 8000d4a:	4320      	orrs	r0, r4
 8000d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d4e:	2b99      	cmp	r3, #153	; 0x99
 8000d50:	dd0c      	ble.n	8000d6c <__aeabi_i2f+0x5c>
 8000d52:	2205      	movs	r2, #5
 8000d54:	0031      	movs	r1, r6
 8000d56:	1a12      	subs	r2, r2, r0
 8000d58:	40d1      	lsrs	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	0030      	movs	r0, r6
 8000d60:	311b      	adds	r1, #27
 8000d62:	4088      	lsls	r0, r1
 8000d64:	1e41      	subs	r1, r0, #1
 8000d66:	4188      	sbcs	r0, r1
 8000d68:	4302      	orrs	r2, r0
 8000d6a:	0016      	movs	r6, r2
 8000d6c:	2d05      	cmp	r5, #5
 8000d6e:	dc12      	bgt.n	8000d96 <__aeabi_i2f+0x86>
 8000d70:	0031      	movs	r1, r6
 8000d72:	4f0d      	ldr	r7, [pc, #52]	; (8000da8 <__aeabi_i2f+0x98>)
 8000d74:	4039      	ands	r1, r7
 8000d76:	0772      	lsls	r2, r6, #29
 8000d78:	d009      	beq.n	8000d8e <__aeabi_i2f+0x7e>
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	4030      	ands	r0, r6
 8000d7e:	2804      	cmp	r0, #4
 8000d80:	d005      	beq.n	8000d8e <__aeabi_i2f+0x7e>
 8000d82:	3104      	adds	r1, #4
 8000d84:	014a      	lsls	r2, r1, #5
 8000d86:	d502      	bpl.n	8000d8e <__aeabi_i2f+0x7e>
 8000d88:	239f      	movs	r3, #159	; 0x9f
 8000d8a:	4039      	ands	r1, r7
 8000d8c:	1b5b      	subs	r3, r3, r5
 8000d8e:	0189      	lsls	r1, r1, #6
 8000d90:	0a4e      	lsrs	r6, r1, #9
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	e7d6      	b.n	8000d44 <__aeabi_i2f+0x34>
 8000d96:	1f6a      	subs	r2, r5, #5
 8000d98:	4096      	lsls	r6, r2
 8000d9a:	0031      	movs	r1, r6
 8000d9c:	4f02      	ldr	r7, [pc, #8]	; (8000da8 <__aeabi_i2f+0x98>)
 8000d9e:	4039      	ands	r1, r7
 8000da0:	0772      	lsls	r2, r6, #29
 8000da2:	d0f4      	beq.n	8000d8e <__aeabi_i2f+0x7e>
 8000da4:	e7e9      	b.n	8000d7a <__aeabi_i2f+0x6a>
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	fbffffff 	.word	0xfbffffff

08000dac <__aeabi_dadd>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	464f      	mov	r7, r9
 8000db0:	4646      	mov	r6, r8
 8000db2:	46d6      	mov	lr, sl
 8000db4:	000d      	movs	r5, r1
 8000db6:	0004      	movs	r4, r0
 8000db8:	b5c0      	push	{r6, r7, lr}
 8000dba:	001f      	movs	r7, r3
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0328      	lsls	r0, r5, #12
 8000dc0:	0f62      	lsrs	r2, r4, #29
 8000dc2:	0a40      	lsrs	r0, r0, #9
 8000dc4:	4310      	orrs	r0, r2
 8000dc6:	007a      	lsls	r2, r7, #1
 8000dc8:	0d52      	lsrs	r2, r2, #21
 8000dca:	00e3      	lsls	r3, r4, #3
 8000dcc:	033c      	lsls	r4, r7, #12
 8000dce:	4691      	mov	r9, r2
 8000dd0:	0a64      	lsrs	r4, r4, #9
 8000dd2:	0ffa      	lsrs	r2, r7, #31
 8000dd4:	0f4f      	lsrs	r7, r1, #29
 8000dd6:	006e      	lsls	r6, r5, #1
 8000dd8:	4327      	orrs	r7, r4
 8000dda:	4692      	mov	sl, r2
 8000ddc:	46b8      	mov	r8, r7
 8000dde:	0d76      	lsrs	r6, r6, #21
 8000de0:	0fed      	lsrs	r5, r5, #31
 8000de2:	00c9      	lsls	r1, r1, #3
 8000de4:	4295      	cmp	r5, r2
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x3e>
 8000de8:	e099      	b.n	8000f1e <__aeabi_dadd+0x172>
 8000dea:	464c      	mov	r4, r9
 8000dec:	1b34      	subs	r4, r6, r4
 8000dee:	46a4      	mov	ip, r4
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	dc00      	bgt.n	8000df6 <__aeabi_dadd+0x4a>
 8000df4:	e07c      	b.n	8000ef0 <__aeabi_dadd+0x144>
 8000df6:	464a      	mov	r2, r9
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x52>
 8000dfc:	e0b8      	b.n	8000f70 <__aeabi_dadd+0x1c4>
 8000dfe:	4ac5      	ldr	r2, [pc, #788]	; (8001114 <__aeabi_dadd+0x368>)
 8000e00:	4296      	cmp	r6, r2
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x5a>
 8000e04:	e11c      	b.n	8001040 <__aeabi_dadd+0x294>
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	003c      	movs	r4, r7
 8000e0a:	0412      	lsls	r2, r2, #16
 8000e0c:	4314      	orrs	r4, r2
 8000e0e:	46a0      	mov	r8, r4
 8000e10:	4662      	mov	r2, ip
 8000e12:	2a38      	cmp	r2, #56	; 0x38
 8000e14:	dd00      	ble.n	8000e18 <__aeabi_dadd+0x6c>
 8000e16:	e161      	b.n	80010dc <__aeabi_dadd+0x330>
 8000e18:	2a1f      	cmp	r2, #31
 8000e1a:	dd00      	ble.n	8000e1e <__aeabi_dadd+0x72>
 8000e1c:	e1cc      	b.n	80011b8 <__aeabi_dadd+0x40c>
 8000e1e:	4664      	mov	r4, ip
 8000e20:	2220      	movs	r2, #32
 8000e22:	1b12      	subs	r2, r2, r4
 8000e24:	4644      	mov	r4, r8
 8000e26:	4094      	lsls	r4, r2
 8000e28:	000f      	movs	r7, r1
 8000e2a:	46a1      	mov	r9, r4
 8000e2c:	4664      	mov	r4, ip
 8000e2e:	4091      	lsls	r1, r2
 8000e30:	40e7      	lsrs	r7, r4
 8000e32:	464c      	mov	r4, r9
 8000e34:	1e4a      	subs	r2, r1, #1
 8000e36:	4191      	sbcs	r1, r2
 8000e38:	433c      	orrs	r4, r7
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	4321      	orrs	r1, r4
 8000e3e:	4664      	mov	r4, ip
 8000e40:	40e2      	lsrs	r2, r4
 8000e42:	1a80      	subs	r0, r0, r2
 8000e44:	1a5c      	subs	r4, r3, r1
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	419b      	sbcs	r3, r3
 8000e4a:	425f      	negs	r7, r3
 8000e4c:	1bc7      	subs	r7, r0, r7
 8000e4e:	023b      	lsls	r3, r7, #8
 8000e50:	d400      	bmi.n	8000e54 <__aeabi_dadd+0xa8>
 8000e52:	e0d0      	b.n	8000ff6 <__aeabi_dadd+0x24a>
 8000e54:	027f      	lsls	r7, r7, #9
 8000e56:	0a7f      	lsrs	r7, r7, #9
 8000e58:	2f00      	cmp	r7, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dadd+0xb2>
 8000e5c:	e0ff      	b.n	800105e <__aeabi_dadd+0x2b2>
 8000e5e:	0038      	movs	r0, r7
 8000e60:	f000 fbb0 	bl	80015c4 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	3908      	subs	r1, #8
 8000e68:	2320      	movs	r3, #32
 8000e6a:	0022      	movs	r2, r4
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	408f      	lsls	r7, r1
 8000e70:	40da      	lsrs	r2, r3
 8000e72:	408c      	lsls	r4, r1
 8000e74:	4317      	orrs	r7, r2
 8000e76:	42b1      	cmp	r1, r6
 8000e78:	da00      	bge.n	8000e7c <__aeabi_dadd+0xd0>
 8000e7a:	e0ff      	b.n	800107c <__aeabi_dadd+0x2d0>
 8000e7c:	1b89      	subs	r1, r1, r6
 8000e7e:	1c4b      	adds	r3, r1, #1
 8000e80:	2b1f      	cmp	r3, #31
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_dadd+0xda>
 8000e84:	e0a8      	b.n	8000fd8 <__aeabi_dadd+0x22c>
 8000e86:	2220      	movs	r2, #32
 8000e88:	0039      	movs	r1, r7
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	0020      	movs	r0, r4
 8000e8e:	4094      	lsls	r4, r2
 8000e90:	4091      	lsls	r1, r2
 8000e92:	40d8      	lsrs	r0, r3
 8000e94:	1e62      	subs	r2, r4, #1
 8000e96:	4194      	sbcs	r4, r2
 8000e98:	40df      	lsrs	r7, r3
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4301      	orrs	r1, r0
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	0763      	lsls	r3, r4, #29
 8000ea2:	d009      	beq.n	8000eb8 <__aeabi_dadd+0x10c>
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	4023      	ands	r3, r4
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d005      	beq.n	8000eb8 <__aeabi_dadd+0x10c>
 8000eac:	1d23      	adds	r3, r4, #4
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	41a4      	sbcs	r4, r4
 8000eb2:	4264      	negs	r4, r4
 8000eb4:	193f      	adds	r7, r7, r4
 8000eb6:	001c      	movs	r4, r3
 8000eb8:	023b      	lsls	r3, r7, #8
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_dadd+0x112>
 8000ebc:	e09e      	b.n	8000ffc <__aeabi_dadd+0x250>
 8000ebe:	4b95      	ldr	r3, [pc, #596]	; (8001114 <__aeabi_dadd+0x368>)
 8000ec0:	3601      	adds	r6, #1
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_dadd+0x11c>
 8000ec6:	e0b7      	b.n	8001038 <__aeabi_dadd+0x28c>
 8000ec8:	4a93      	ldr	r2, [pc, #588]	; (8001118 <__aeabi_dadd+0x36c>)
 8000eca:	08e4      	lsrs	r4, r4, #3
 8000ecc:	4017      	ands	r7, r2
 8000ece:	077b      	lsls	r3, r7, #29
 8000ed0:	0571      	lsls	r1, r6, #21
 8000ed2:	027f      	lsls	r7, r7, #9
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	0b3f      	lsrs	r7, r7, #12
 8000ed8:	0d4a      	lsrs	r2, r1, #21
 8000eda:	0512      	lsls	r2, r2, #20
 8000edc:	433a      	orrs	r2, r7
 8000ede:	07ed      	lsls	r5, r5, #31
 8000ee0:	432a      	orrs	r2, r5
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	bce0      	pop	{r5, r6, r7}
 8000ee8:	46ba      	mov	sl, r7
 8000eea:	46b1      	mov	r9, r6
 8000eec:	46a8      	mov	r8, r5
 8000eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d04b      	beq.n	8000f8c <__aeabi_dadd+0x1e0>
 8000ef4:	464c      	mov	r4, r9
 8000ef6:	1ba4      	subs	r4, r4, r6
 8000ef8:	46a4      	mov	ip, r4
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dadd+0x154>
 8000efe:	e123      	b.n	8001148 <__aeabi_dadd+0x39c>
 8000f00:	0004      	movs	r4, r0
 8000f02:	431c      	orrs	r4, r3
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dadd+0x15c>
 8000f06:	e1af      	b.n	8001268 <__aeabi_dadd+0x4bc>
 8000f08:	4662      	mov	r2, ip
 8000f0a:	1e54      	subs	r4, r2, #1
 8000f0c:	2a01      	cmp	r2, #1
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dadd+0x166>
 8000f10:	e215      	b.n	800133e <__aeabi_dadd+0x592>
 8000f12:	4d80      	ldr	r5, [pc, #512]	; (8001114 <__aeabi_dadd+0x368>)
 8000f14:	45ac      	cmp	ip, r5
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dadd+0x16e>
 8000f18:	e1c8      	b.n	80012ac <__aeabi_dadd+0x500>
 8000f1a:	46a4      	mov	ip, r4
 8000f1c:	e11b      	b.n	8001156 <__aeabi_dadd+0x3aa>
 8000f1e:	464a      	mov	r2, r9
 8000f20:	1ab2      	subs	r2, r6, r2
 8000f22:	4694      	mov	ip, r2
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_dadd+0x17e>
 8000f28:	e0ac      	b.n	8001084 <__aeabi_dadd+0x2d8>
 8000f2a:	464a      	mov	r2, r9
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d043      	beq.n	8000fb8 <__aeabi_dadd+0x20c>
 8000f30:	4a78      	ldr	r2, [pc, #480]	; (8001114 <__aeabi_dadd+0x368>)
 8000f32:	4296      	cmp	r6, r2
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dadd+0x18c>
 8000f36:	e1af      	b.n	8001298 <__aeabi_dadd+0x4ec>
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	003c      	movs	r4, r7
 8000f3c:	0412      	lsls	r2, r2, #16
 8000f3e:	4314      	orrs	r4, r2
 8000f40:	46a0      	mov	r8, r4
 8000f42:	4662      	mov	r2, ip
 8000f44:	2a38      	cmp	r2, #56	; 0x38
 8000f46:	dc67      	bgt.n	8001018 <__aeabi_dadd+0x26c>
 8000f48:	2a1f      	cmp	r2, #31
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_dadd+0x1a2>
 8000f4c:	e15f      	b.n	800120e <__aeabi_dadd+0x462>
 8000f4e:	4647      	mov	r7, r8
 8000f50:	3a20      	subs	r2, #32
 8000f52:	40d7      	lsrs	r7, r2
 8000f54:	4662      	mov	r2, ip
 8000f56:	2a20      	cmp	r2, #32
 8000f58:	d005      	beq.n	8000f66 <__aeabi_dadd+0x1ba>
 8000f5a:	4664      	mov	r4, ip
 8000f5c:	2240      	movs	r2, #64	; 0x40
 8000f5e:	1b12      	subs	r2, r2, r4
 8000f60:	4644      	mov	r4, r8
 8000f62:	4094      	lsls	r4, r2
 8000f64:	4321      	orrs	r1, r4
 8000f66:	1e4a      	subs	r2, r1, #1
 8000f68:	4191      	sbcs	r1, r2
 8000f6a:	000c      	movs	r4, r1
 8000f6c:	433c      	orrs	r4, r7
 8000f6e:	e057      	b.n	8001020 <__aeabi_dadd+0x274>
 8000f70:	003a      	movs	r2, r7
 8000f72:	430a      	orrs	r2, r1
 8000f74:	d100      	bne.n	8000f78 <__aeabi_dadd+0x1cc>
 8000f76:	e105      	b.n	8001184 <__aeabi_dadd+0x3d8>
 8000f78:	0022      	movs	r2, r4
 8000f7a:	3a01      	subs	r2, #1
 8000f7c:	2c01      	cmp	r4, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x1d6>
 8000f80:	e182      	b.n	8001288 <__aeabi_dadd+0x4dc>
 8000f82:	4c64      	ldr	r4, [pc, #400]	; (8001114 <__aeabi_dadd+0x368>)
 8000f84:	45a4      	cmp	ip, r4
 8000f86:	d05b      	beq.n	8001040 <__aeabi_dadd+0x294>
 8000f88:	4694      	mov	ip, r2
 8000f8a:	e741      	b.n	8000e10 <__aeabi_dadd+0x64>
 8000f8c:	4c63      	ldr	r4, [pc, #396]	; (800111c <__aeabi_dadd+0x370>)
 8000f8e:	1c77      	adds	r7, r6, #1
 8000f90:	4227      	tst	r7, r4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_dadd+0x1ea>
 8000f94:	e0c4      	b.n	8001120 <__aeabi_dadd+0x374>
 8000f96:	0004      	movs	r4, r0
 8000f98:	431c      	orrs	r4, r3
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_dadd+0x1f4>
 8000f9e:	e169      	b.n	8001274 <__aeabi_dadd+0x4c8>
 8000fa0:	2c00      	cmp	r4, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x1fa>
 8000fa4:	e1bf      	b.n	8001326 <__aeabi_dadd+0x57a>
 8000fa6:	4644      	mov	r4, r8
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	d000      	beq.n	8000fae <__aeabi_dadd+0x202>
 8000fac:	e1d0      	b.n	8001350 <__aeabi_dadd+0x5a4>
 8000fae:	0742      	lsls	r2, r0, #29
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	08c0      	lsrs	r0, r0, #3
 8000fb6:	e029      	b.n	800100c <__aeabi_dadd+0x260>
 8000fb8:	003a      	movs	r2, r7
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x214>
 8000fbe:	e170      	b.n	80012a2 <__aeabi_dadd+0x4f6>
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	4664      	mov	r4, ip
 8000fc4:	3a01      	subs	r2, #1
 8000fc6:	2c01      	cmp	r4, #1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dadd+0x220>
 8000fca:	e0e0      	b.n	800118e <__aeabi_dadd+0x3e2>
 8000fcc:	4c51      	ldr	r4, [pc, #324]	; (8001114 <__aeabi_dadd+0x368>)
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x228>
 8000fd2:	e161      	b.n	8001298 <__aeabi_dadd+0x4ec>
 8000fd4:	4694      	mov	ip, r2
 8000fd6:	e7b4      	b.n	8000f42 <__aeabi_dadd+0x196>
 8000fd8:	003a      	movs	r2, r7
 8000fda:	391f      	subs	r1, #31
 8000fdc:	40ca      	lsrs	r2, r1
 8000fde:	0011      	movs	r1, r2
 8000fe0:	2b20      	cmp	r3, #32
 8000fe2:	d003      	beq.n	8000fec <__aeabi_dadd+0x240>
 8000fe4:	2240      	movs	r2, #64	; 0x40
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	409f      	lsls	r7, r3
 8000fea:	433c      	orrs	r4, r7
 8000fec:	1e63      	subs	r3, r4, #1
 8000fee:	419c      	sbcs	r4, r3
 8000ff0:	2700      	movs	r7, #0
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	430c      	orrs	r4, r1
 8000ff6:	0763      	lsls	r3, r4, #29
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_dadd+0x250>
 8000ffa:	e753      	b.n	8000ea4 <__aeabi_dadd+0xf8>
 8000ffc:	46b4      	mov	ip, r6
 8000ffe:	08e4      	lsrs	r4, r4, #3
 8001000:	077b      	lsls	r3, r7, #29
 8001002:	4323      	orrs	r3, r4
 8001004:	08f8      	lsrs	r0, r7, #3
 8001006:	4a43      	ldr	r2, [pc, #268]	; (8001114 <__aeabi_dadd+0x368>)
 8001008:	4594      	cmp	ip, r2
 800100a:	d01d      	beq.n	8001048 <__aeabi_dadd+0x29c>
 800100c:	4662      	mov	r2, ip
 800100e:	0307      	lsls	r7, r0, #12
 8001010:	0552      	lsls	r2, r2, #21
 8001012:	0b3f      	lsrs	r7, r7, #12
 8001014:	0d52      	lsrs	r2, r2, #21
 8001016:	e760      	b.n	8000eda <__aeabi_dadd+0x12e>
 8001018:	4644      	mov	r4, r8
 800101a:	430c      	orrs	r4, r1
 800101c:	1e62      	subs	r2, r4, #1
 800101e:	4194      	sbcs	r4, r2
 8001020:	18e4      	adds	r4, r4, r3
 8001022:	429c      	cmp	r4, r3
 8001024:	419b      	sbcs	r3, r3
 8001026:	425f      	negs	r7, r3
 8001028:	183f      	adds	r7, r7, r0
 800102a:	023b      	lsls	r3, r7, #8
 800102c:	d5e3      	bpl.n	8000ff6 <__aeabi_dadd+0x24a>
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <__aeabi_dadd+0x368>)
 8001030:	3601      	adds	r6, #1
 8001032:	429e      	cmp	r6, r3
 8001034:	d000      	beq.n	8001038 <__aeabi_dadd+0x28c>
 8001036:	e0b5      	b.n	80011a4 <__aeabi_dadd+0x3f8>
 8001038:	0032      	movs	r2, r6
 800103a:	2700      	movs	r7, #0
 800103c:	2300      	movs	r3, #0
 800103e:	e74c      	b.n	8000eda <__aeabi_dadd+0x12e>
 8001040:	0742      	lsls	r2, r0, #29
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	4313      	orrs	r3, r2
 8001046:	08c0      	lsrs	r0, r0, #3
 8001048:	001a      	movs	r2, r3
 800104a:	4302      	orrs	r2, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_dadd+0x2a4>
 800104e:	e1e1      	b.n	8001414 <__aeabi_dadd+0x668>
 8001050:	2780      	movs	r7, #128	; 0x80
 8001052:	033f      	lsls	r7, r7, #12
 8001054:	4307      	orrs	r7, r0
 8001056:	033f      	lsls	r7, r7, #12
 8001058:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <__aeabi_dadd+0x368>)
 800105a:	0b3f      	lsrs	r7, r7, #12
 800105c:	e73d      	b.n	8000eda <__aeabi_dadd+0x12e>
 800105e:	0020      	movs	r0, r4
 8001060:	f000 fab0 	bl	80015c4 <__clzsi2>
 8001064:	0001      	movs	r1, r0
 8001066:	3118      	adds	r1, #24
 8001068:	291f      	cmp	r1, #31
 800106a:	dc00      	bgt.n	800106e <__aeabi_dadd+0x2c2>
 800106c:	e6fc      	b.n	8000e68 <__aeabi_dadd+0xbc>
 800106e:	3808      	subs	r0, #8
 8001070:	4084      	lsls	r4, r0
 8001072:	0027      	movs	r7, r4
 8001074:	2400      	movs	r4, #0
 8001076:	42b1      	cmp	r1, r6
 8001078:	db00      	blt.n	800107c <__aeabi_dadd+0x2d0>
 800107a:	e6ff      	b.n	8000e7c <__aeabi_dadd+0xd0>
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <__aeabi_dadd+0x36c>)
 800107e:	1a76      	subs	r6, r6, r1
 8001080:	4017      	ands	r7, r2
 8001082:	e70d      	b.n	8000ea0 <__aeabi_dadd+0xf4>
 8001084:	2a00      	cmp	r2, #0
 8001086:	d02f      	beq.n	80010e8 <__aeabi_dadd+0x33c>
 8001088:	464a      	mov	r2, r9
 800108a:	1b92      	subs	r2, r2, r6
 800108c:	4694      	mov	ip, r2
 800108e:	2e00      	cmp	r6, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_dadd+0x2e8>
 8001092:	e0ad      	b.n	80011f0 <__aeabi_dadd+0x444>
 8001094:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <__aeabi_dadd+0x368>)
 8001096:	4591      	cmp	r9, r2
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x2f0>
 800109a:	e10f      	b.n	80012bc <__aeabi_dadd+0x510>
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0412      	lsls	r2, r2, #16
 80010a0:	4310      	orrs	r0, r2
 80010a2:	4662      	mov	r2, ip
 80010a4:	2a38      	cmp	r2, #56	; 0x38
 80010a6:	dd00      	ble.n	80010aa <__aeabi_dadd+0x2fe>
 80010a8:	e10f      	b.n	80012ca <__aeabi_dadd+0x51e>
 80010aa:	2a1f      	cmp	r2, #31
 80010ac:	dd00      	ble.n	80010b0 <__aeabi_dadd+0x304>
 80010ae:	e180      	b.n	80013b2 <__aeabi_dadd+0x606>
 80010b0:	4664      	mov	r4, ip
 80010b2:	2220      	movs	r2, #32
 80010b4:	001e      	movs	r6, r3
 80010b6:	1b12      	subs	r2, r2, r4
 80010b8:	4667      	mov	r7, ip
 80010ba:	0004      	movs	r4, r0
 80010bc:	4093      	lsls	r3, r2
 80010be:	4094      	lsls	r4, r2
 80010c0:	40fe      	lsrs	r6, r7
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	4193      	sbcs	r3, r2
 80010c6:	40f8      	lsrs	r0, r7
 80010c8:	4334      	orrs	r4, r6
 80010ca:	431c      	orrs	r4, r3
 80010cc:	4480      	add	r8, r0
 80010ce:	1864      	adds	r4, r4, r1
 80010d0:	428c      	cmp	r4, r1
 80010d2:	41bf      	sbcs	r7, r7
 80010d4:	427f      	negs	r7, r7
 80010d6:	464e      	mov	r6, r9
 80010d8:	4447      	add	r7, r8
 80010da:	e7a6      	b.n	800102a <__aeabi_dadd+0x27e>
 80010dc:	4642      	mov	r2, r8
 80010de:	430a      	orrs	r2, r1
 80010e0:	0011      	movs	r1, r2
 80010e2:	1e4a      	subs	r2, r1, #1
 80010e4:	4191      	sbcs	r1, r2
 80010e6:	e6ad      	b.n	8000e44 <__aeabi_dadd+0x98>
 80010e8:	4c0c      	ldr	r4, [pc, #48]	; (800111c <__aeabi_dadd+0x370>)
 80010ea:	1c72      	adds	r2, r6, #1
 80010ec:	4222      	tst	r2, r4
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dadd+0x346>
 80010f0:	e0a1      	b.n	8001236 <__aeabi_dadd+0x48a>
 80010f2:	0002      	movs	r2, r0
 80010f4:	431a      	orrs	r2, r3
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d000      	beq.n	80010fc <__aeabi_dadd+0x350>
 80010fa:	e0fa      	b.n	80012f2 <__aeabi_dadd+0x546>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_dadd+0x356>
 8001100:	e145      	b.n	800138e <__aeabi_dadd+0x5e2>
 8001102:	003a      	movs	r2, r7
 8001104:	430a      	orrs	r2, r1
 8001106:	d000      	beq.n	800110a <__aeabi_dadd+0x35e>
 8001108:	e146      	b.n	8001398 <__aeabi_dadd+0x5ec>
 800110a:	0742      	lsls	r2, r0, #29
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	4313      	orrs	r3, r2
 8001110:	08c0      	lsrs	r0, r0, #3
 8001112:	e77b      	b.n	800100c <__aeabi_dadd+0x260>
 8001114:	000007ff 	.word	0x000007ff
 8001118:	ff7fffff 	.word	0xff7fffff
 800111c:	000007fe 	.word	0x000007fe
 8001120:	4647      	mov	r7, r8
 8001122:	1a5c      	subs	r4, r3, r1
 8001124:	1bc2      	subs	r2, r0, r7
 8001126:	42a3      	cmp	r3, r4
 8001128:	41bf      	sbcs	r7, r7
 800112a:	427f      	negs	r7, r7
 800112c:	46b9      	mov	r9, r7
 800112e:	0017      	movs	r7, r2
 8001130:	464a      	mov	r2, r9
 8001132:	1abf      	subs	r7, r7, r2
 8001134:	023a      	lsls	r2, r7, #8
 8001136:	d500      	bpl.n	800113a <__aeabi_dadd+0x38e>
 8001138:	e08d      	b.n	8001256 <__aeabi_dadd+0x4aa>
 800113a:	0023      	movs	r3, r4
 800113c:	433b      	orrs	r3, r7
 800113e:	d000      	beq.n	8001142 <__aeabi_dadd+0x396>
 8001140:	e68a      	b.n	8000e58 <__aeabi_dadd+0xac>
 8001142:	2000      	movs	r0, #0
 8001144:	2500      	movs	r5, #0
 8001146:	e761      	b.n	800100c <__aeabi_dadd+0x260>
 8001148:	4cb4      	ldr	r4, [pc, #720]	; (800141c <__aeabi_dadd+0x670>)
 800114a:	45a1      	cmp	r9, r4
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x3a4>
 800114e:	e0ad      	b.n	80012ac <__aeabi_dadd+0x500>
 8001150:	2480      	movs	r4, #128	; 0x80
 8001152:	0424      	lsls	r4, r4, #16
 8001154:	4320      	orrs	r0, r4
 8001156:	4664      	mov	r4, ip
 8001158:	2c38      	cmp	r4, #56	; 0x38
 800115a:	dc3d      	bgt.n	80011d8 <__aeabi_dadd+0x42c>
 800115c:	4662      	mov	r2, ip
 800115e:	2c1f      	cmp	r4, #31
 8001160:	dd00      	ble.n	8001164 <__aeabi_dadd+0x3b8>
 8001162:	e0b7      	b.n	80012d4 <__aeabi_dadd+0x528>
 8001164:	2520      	movs	r5, #32
 8001166:	001e      	movs	r6, r3
 8001168:	1b2d      	subs	r5, r5, r4
 800116a:	0004      	movs	r4, r0
 800116c:	40ab      	lsls	r3, r5
 800116e:	40ac      	lsls	r4, r5
 8001170:	40d6      	lsrs	r6, r2
 8001172:	40d0      	lsrs	r0, r2
 8001174:	4642      	mov	r2, r8
 8001176:	1e5d      	subs	r5, r3, #1
 8001178:	41ab      	sbcs	r3, r5
 800117a:	4334      	orrs	r4, r6
 800117c:	1a12      	subs	r2, r2, r0
 800117e:	4690      	mov	r8, r2
 8001180:	4323      	orrs	r3, r4
 8001182:	e02c      	b.n	80011de <__aeabi_dadd+0x432>
 8001184:	0742      	lsls	r2, r0, #29
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	4313      	orrs	r3, r2
 800118a:	08c0      	lsrs	r0, r0, #3
 800118c:	e73b      	b.n	8001006 <__aeabi_dadd+0x25a>
 800118e:	185c      	adds	r4, r3, r1
 8001190:	429c      	cmp	r4, r3
 8001192:	419b      	sbcs	r3, r3
 8001194:	4440      	add	r0, r8
 8001196:	425b      	negs	r3, r3
 8001198:	18c7      	adds	r7, r0, r3
 800119a:	2601      	movs	r6, #1
 800119c:	023b      	lsls	r3, r7, #8
 800119e:	d400      	bmi.n	80011a2 <__aeabi_dadd+0x3f6>
 80011a0:	e729      	b.n	8000ff6 <__aeabi_dadd+0x24a>
 80011a2:	2602      	movs	r6, #2
 80011a4:	4a9e      	ldr	r2, [pc, #632]	; (8001420 <__aeabi_dadd+0x674>)
 80011a6:	0863      	lsrs	r3, r4, #1
 80011a8:	4017      	ands	r7, r2
 80011aa:	2201      	movs	r2, #1
 80011ac:	4014      	ands	r4, r2
 80011ae:	431c      	orrs	r4, r3
 80011b0:	07fb      	lsls	r3, r7, #31
 80011b2:	431c      	orrs	r4, r3
 80011b4:	087f      	lsrs	r7, r7, #1
 80011b6:	e673      	b.n	8000ea0 <__aeabi_dadd+0xf4>
 80011b8:	4644      	mov	r4, r8
 80011ba:	3a20      	subs	r2, #32
 80011bc:	40d4      	lsrs	r4, r2
 80011be:	4662      	mov	r2, ip
 80011c0:	2a20      	cmp	r2, #32
 80011c2:	d005      	beq.n	80011d0 <__aeabi_dadd+0x424>
 80011c4:	4667      	mov	r7, ip
 80011c6:	2240      	movs	r2, #64	; 0x40
 80011c8:	1bd2      	subs	r2, r2, r7
 80011ca:	4647      	mov	r7, r8
 80011cc:	4097      	lsls	r7, r2
 80011ce:	4339      	orrs	r1, r7
 80011d0:	1e4a      	subs	r2, r1, #1
 80011d2:	4191      	sbcs	r1, r2
 80011d4:	4321      	orrs	r1, r4
 80011d6:	e635      	b.n	8000e44 <__aeabi_dadd+0x98>
 80011d8:	4303      	orrs	r3, r0
 80011da:	1e58      	subs	r0, r3, #1
 80011dc:	4183      	sbcs	r3, r0
 80011de:	1acc      	subs	r4, r1, r3
 80011e0:	42a1      	cmp	r1, r4
 80011e2:	41bf      	sbcs	r7, r7
 80011e4:	4643      	mov	r3, r8
 80011e6:	427f      	negs	r7, r7
 80011e8:	4655      	mov	r5, sl
 80011ea:	464e      	mov	r6, r9
 80011ec:	1bdf      	subs	r7, r3, r7
 80011ee:	e62e      	b.n	8000e4e <__aeabi_dadd+0xa2>
 80011f0:	0002      	movs	r2, r0
 80011f2:	431a      	orrs	r2, r3
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dadd+0x44c>
 80011f6:	e0bd      	b.n	8001374 <__aeabi_dadd+0x5c8>
 80011f8:	4662      	mov	r2, ip
 80011fa:	4664      	mov	r4, ip
 80011fc:	3a01      	subs	r2, #1
 80011fe:	2c01      	cmp	r4, #1
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x458>
 8001202:	e0e5      	b.n	80013d0 <__aeabi_dadd+0x624>
 8001204:	4c85      	ldr	r4, [pc, #532]	; (800141c <__aeabi_dadd+0x670>)
 8001206:	45a4      	cmp	ip, r4
 8001208:	d058      	beq.n	80012bc <__aeabi_dadd+0x510>
 800120a:	4694      	mov	ip, r2
 800120c:	e749      	b.n	80010a2 <__aeabi_dadd+0x2f6>
 800120e:	4664      	mov	r4, ip
 8001210:	2220      	movs	r2, #32
 8001212:	1b12      	subs	r2, r2, r4
 8001214:	4644      	mov	r4, r8
 8001216:	4094      	lsls	r4, r2
 8001218:	000f      	movs	r7, r1
 800121a:	46a1      	mov	r9, r4
 800121c:	4664      	mov	r4, ip
 800121e:	4091      	lsls	r1, r2
 8001220:	40e7      	lsrs	r7, r4
 8001222:	464c      	mov	r4, r9
 8001224:	1e4a      	subs	r2, r1, #1
 8001226:	4191      	sbcs	r1, r2
 8001228:	433c      	orrs	r4, r7
 800122a:	4642      	mov	r2, r8
 800122c:	430c      	orrs	r4, r1
 800122e:	4661      	mov	r1, ip
 8001230:	40ca      	lsrs	r2, r1
 8001232:	1880      	adds	r0, r0, r2
 8001234:	e6f4      	b.n	8001020 <__aeabi_dadd+0x274>
 8001236:	4c79      	ldr	r4, [pc, #484]	; (800141c <__aeabi_dadd+0x670>)
 8001238:	42a2      	cmp	r2, r4
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x492>
 800123c:	e6fd      	b.n	800103a <__aeabi_dadd+0x28e>
 800123e:	1859      	adds	r1, r3, r1
 8001240:	4299      	cmp	r1, r3
 8001242:	419b      	sbcs	r3, r3
 8001244:	4440      	add	r0, r8
 8001246:	425f      	negs	r7, r3
 8001248:	19c7      	adds	r7, r0, r7
 800124a:	07fc      	lsls	r4, r7, #31
 800124c:	0849      	lsrs	r1, r1, #1
 800124e:	0016      	movs	r6, r2
 8001250:	430c      	orrs	r4, r1
 8001252:	087f      	lsrs	r7, r7, #1
 8001254:	e6cf      	b.n	8000ff6 <__aeabi_dadd+0x24a>
 8001256:	1acc      	subs	r4, r1, r3
 8001258:	42a1      	cmp	r1, r4
 800125a:	41bf      	sbcs	r7, r7
 800125c:	4643      	mov	r3, r8
 800125e:	427f      	negs	r7, r7
 8001260:	1a18      	subs	r0, r3, r0
 8001262:	4655      	mov	r5, sl
 8001264:	1bc7      	subs	r7, r0, r7
 8001266:	e5f7      	b.n	8000e58 <__aeabi_dadd+0xac>
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	077b      	lsls	r3, r7, #29
 800126c:	4655      	mov	r5, sl
 800126e:	430b      	orrs	r3, r1
 8001270:	08f8      	lsrs	r0, r7, #3
 8001272:	e6c8      	b.n	8001006 <__aeabi_dadd+0x25a>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d000      	beq.n	800127a <__aeabi_dadd+0x4ce>
 8001278:	e081      	b.n	800137e <__aeabi_dadd+0x5d2>
 800127a:	4643      	mov	r3, r8
 800127c:	430b      	orrs	r3, r1
 800127e:	d115      	bne.n	80012ac <__aeabi_dadd+0x500>
 8001280:	2080      	movs	r0, #128	; 0x80
 8001282:	2500      	movs	r5, #0
 8001284:	0300      	lsls	r0, r0, #12
 8001286:	e6e3      	b.n	8001050 <__aeabi_dadd+0x2a4>
 8001288:	1a5c      	subs	r4, r3, r1
 800128a:	42a3      	cmp	r3, r4
 800128c:	419b      	sbcs	r3, r3
 800128e:	1bc7      	subs	r7, r0, r7
 8001290:	425b      	negs	r3, r3
 8001292:	2601      	movs	r6, #1
 8001294:	1aff      	subs	r7, r7, r3
 8001296:	e5da      	b.n	8000e4e <__aeabi_dadd+0xa2>
 8001298:	0742      	lsls	r2, r0, #29
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	4313      	orrs	r3, r2
 800129e:	08c0      	lsrs	r0, r0, #3
 80012a0:	e6d2      	b.n	8001048 <__aeabi_dadd+0x29c>
 80012a2:	0742      	lsls	r2, r0, #29
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	08c0      	lsrs	r0, r0, #3
 80012aa:	e6ac      	b.n	8001006 <__aeabi_dadd+0x25a>
 80012ac:	4643      	mov	r3, r8
 80012ae:	4642      	mov	r2, r8
 80012b0:	08c9      	lsrs	r1, r1, #3
 80012b2:	075b      	lsls	r3, r3, #29
 80012b4:	4655      	mov	r5, sl
 80012b6:	430b      	orrs	r3, r1
 80012b8:	08d0      	lsrs	r0, r2, #3
 80012ba:	e6c5      	b.n	8001048 <__aeabi_dadd+0x29c>
 80012bc:	4643      	mov	r3, r8
 80012be:	4642      	mov	r2, r8
 80012c0:	075b      	lsls	r3, r3, #29
 80012c2:	08c9      	lsrs	r1, r1, #3
 80012c4:	430b      	orrs	r3, r1
 80012c6:	08d0      	lsrs	r0, r2, #3
 80012c8:	e6be      	b.n	8001048 <__aeabi_dadd+0x29c>
 80012ca:	4303      	orrs	r3, r0
 80012cc:	001c      	movs	r4, r3
 80012ce:	1e63      	subs	r3, r4, #1
 80012d0:	419c      	sbcs	r4, r3
 80012d2:	e6fc      	b.n	80010ce <__aeabi_dadd+0x322>
 80012d4:	0002      	movs	r2, r0
 80012d6:	3c20      	subs	r4, #32
 80012d8:	40e2      	lsrs	r2, r4
 80012da:	0014      	movs	r4, r2
 80012dc:	4662      	mov	r2, ip
 80012de:	2a20      	cmp	r2, #32
 80012e0:	d003      	beq.n	80012ea <__aeabi_dadd+0x53e>
 80012e2:	2540      	movs	r5, #64	; 0x40
 80012e4:	1aad      	subs	r5, r5, r2
 80012e6:	40a8      	lsls	r0, r5
 80012e8:	4303      	orrs	r3, r0
 80012ea:	1e58      	subs	r0, r3, #1
 80012ec:	4183      	sbcs	r3, r0
 80012ee:	4323      	orrs	r3, r4
 80012f0:	e775      	b.n	80011de <__aeabi_dadd+0x432>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d0e2      	beq.n	80012bc <__aeabi_dadd+0x510>
 80012f6:	003a      	movs	r2, r7
 80012f8:	430a      	orrs	r2, r1
 80012fa:	d0cd      	beq.n	8001298 <__aeabi_dadd+0x4ec>
 80012fc:	0742      	lsls	r2, r0, #29
 80012fe:	08db      	lsrs	r3, r3, #3
 8001300:	4313      	orrs	r3, r2
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	08c0      	lsrs	r0, r0, #3
 8001306:	0312      	lsls	r2, r2, #12
 8001308:	4210      	tst	r0, r2
 800130a:	d006      	beq.n	800131a <__aeabi_dadd+0x56e>
 800130c:	08fc      	lsrs	r4, r7, #3
 800130e:	4214      	tst	r4, r2
 8001310:	d103      	bne.n	800131a <__aeabi_dadd+0x56e>
 8001312:	0020      	movs	r0, r4
 8001314:	08cb      	lsrs	r3, r1, #3
 8001316:	077a      	lsls	r2, r7, #29
 8001318:	4313      	orrs	r3, r2
 800131a:	0f5a      	lsrs	r2, r3, #29
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	0752      	lsls	r2, r2, #29
 8001320:	08db      	lsrs	r3, r3, #3
 8001322:	4313      	orrs	r3, r2
 8001324:	e690      	b.n	8001048 <__aeabi_dadd+0x29c>
 8001326:	4643      	mov	r3, r8
 8001328:	430b      	orrs	r3, r1
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x582>
 800132c:	e709      	b.n	8001142 <__aeabi_dadd+0x396>
 800132e:	4643      	mov	r3, r8
 8001330:	4642      	mov	r2, r8
 8001332:	08c9      	lsrs	r1, r1, #3
 8001334:	075b      	lsls	r3, r3, #29
 8001336:	4655      	mov	r5, sl
 8001338:	430b      	orrs	r3, r1
 800133a:	08d0      	lsrs	r0, r2, #3
 800133c:	e666      	b.n	800100c <__aeabi_dadd+0x260>
 800133e:	1acc      	subs	r4, r1, r3
 8001340:	42a1      	cmp	r1, r4
 8001342:	4189      	sbcs	r1, r1
 8001344:	1a3f      	subs	r7, r7, r0
 8001346:	4249      	negs	r1, r1
 8001348:	4655      	mov	r5, sl
 800134a:	2601      	movs	r6, #1
 800134c:	1a7f      	subs	r7, r7, r1
 800134e:	e57e      	b.n	8000e4e <__aeabi_dadd+0xa2>
 8001350:	4642      	mov	r2, r8
 8001352:	1a5c      	subs	r4, r3, r1
 8001354:	1a87      	subs	r7, r0, r2
 8001356:	42a3      	cmp	r3, r4
 8001358:	4192      	sbcs	r2, r2
 800135a:	4252      	negs	r2, r2
 800135c:	1abf      	subs	r7, r7, r2
 800135e:	023a      	lsls	r2, r7, #8
 8001360:	d53d      	bpl.n	80013de <__aeabi_dadd+0x632>
 8001362:	1acc      	subs	r4, r1, r3
 8001364:	42a1      	cmp	r1, r4
 8001366:	4189      	sbcs	r1, r1
 8001368:	4643      	mov	r3, r8
 800136a:	4249      	negs	r1, r1
 800136c:	1a1f      	subs	r7, r3, r0
 800136e:	4655      	mov	r5, sl
 8001370:	1a7f      	subs	r7, r7, r1
 8001372:	e595      	b.n	8000ea0 <__aeabi_dadd+0xf4>
 8001374:	077b      	lsls	r3, r7, #29
 8001376:	08c9      	lsrs	r1, r1, #3
 8001378:	430b      	orrs	r3, r1
 800137a:	08f8      	lsrs	r0, r7, #3
 800137c:	e643      	b.n	8001006 <__aeabi_dadd+0x25a>
 800137e:	4644      	mov	r4, r8
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	430c      	orrs	r4, r1
 8001384:	d130      	bne.n	80013e8 <__aeabi_dadd+0x63c>
 8001386:	0742      	lsls	r2, r0, #29
 8001388:	4313      	orrs	r3, r2
 800138a:	08c0      	lsrs	r0, r0, #3
 800138c:	e65c      	b.n	8001048 <__aeabi_dadd+0x29c>
 800138e:	077b      	lsls	r3, r7, #29
 8001390:	08c9      	lsrs	r1, r1, #3
 8001392:	430b      	orrs	r3, r1
 8001394:	08f8      	lsrs	r0, r7, #3
 8001396:	e639      	b.n	800100c <__aeabi_dadd+0x260>
 8001398:	185c      	adds	r4, r3, r1
 800139a:	429c      	cmp	r4, r3
 800139c:	419b      	sbcs	r3, r3
 800139e:	4440      	add	r0, r8
 80013a0:	425b      	negs	r3, r3
 80013a2:	18c7      	adds	r7, r0, r3
 80013a4:	023b      	lsls	r3, r7, #8
 80013a6:	d400      	bmi.n	80013aa <__aeabi_dadd+0x5fe>
 80013a8:	e625      	b.n	8000ff6 <__aeabi_dadd+0x24a>
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <__aeabi_dadd+0x674>)
 80013ac:	2601      	movs	r6, #1
 80013ae:	401f      	ands	r7, r3
 80013b0:	e621      	b.n	8000ff6 <__aeabi_dadd+0x24a>
 80013b2:	0004      	movs	r4, r0
 80013b4:	3a20      	subs	r2, #32
 80013b6:	40d4      	lsrs	r4, r2
 80013b8:	4662      	mov	r2, ip
 80013ba:	2a20      	cmp	r2, #32
 80013bc:	d004      	beq.n	80013c8 <__aeabi_dadd+0x61c>
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	4666      	mov	r6, ip
 80013c2:	1b92      	subs	r2, r2, r6
 80013c4:	4090      	lsls	r0, r2
 80013c6:	4303      	orrs	r3, r0
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	4193      	sbcs	r3, r2
 80013cc:	431c      	orrs	r4, r3
 80013ce:	e67e      	b.n	80010ce <__aeabi_dadd+0x322>
 80013d0:	185c      	adds	r4, r3, r1
 80013d2:	428c      	cmp	r4, r1
 80013d4:	4189      	sbcs	r1, r1
 80013d6:	4440      	add	r0, r8
 80013d8:	4249      	negs	r1, r1
 80013da:	1847      	adds	r7, r0, r1
 80013dc:	e6dd      	b.n	800119a <__aeabi_dadd+0x3ee>
 80013de:	0023      	movs	r3, r4
 80013e0:	433b      	orrs	r3, r7
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x63a>
 80013e4:	e6ad      	b.n	8001142 <__aeabi_dadd+0x396>
 80013e6:	e606      	b.n	8000ff6 <__aeabi_dadd+0x24a>
 80013e8:	0744      	lsls	r4, r0, #29
 80013ea:	4323      	orrs	r3, r4
 80013ec:	2480      	movs	r4, #128	; 0x80
 80013ee:	08c0      	lsrs	r0, r0, #3
 80013f0:	0324      	lsls	r4, r4, #12
 80013f2:	4220      	tst	r0, r4
 80013f4:	d008      	beq.n	8001408 <__aeabi_dadd+0x65c>
 80013f6:	4642      	mov	r2, r8
 80013f8:	08d6      	lsrs	r6, r2, #3
 80013fa:	4226      	tst	r6, r4
 80013fc:	d104      	bne.n	8001408 <__aeabi_dadd+0x65c>
 80013fe:	4655      	mov	r5, sl
 8001400:	0030      	movs	r0, r6
 8001402:	08cb      	lsrs	r3, r1, #3
 8001404:	0751      	lsls	r1, r2, #29
 8001406:	430b      	orrs	r3, r1
 8001408:	0f5a      	lsrs	r2, r3, #29
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	0752      	lsls	r2, r2, #29
 8001410:	4313      	orrs	r3, r2
 8001412:	e619      	b.n	8001048 <__aeabi_dadd+0x29c>
 8001414:	2300      	movs	r3, #0
 8001416:	4a01      	ldr	r2, [pc, #4]	; (800141c <__aeabi_dadd+0x670>)
 8001418:	001f      	movs	r7, r3
 800141a:	e55e      	b.n	8000eda <__aeabi_dadd+0x12e>
 800141c:	000007ff 	.word	0x000007ff
 8001420:	ff7fffff 	.word	0xff7fffff

08001424 <__aeabi_f2d>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	0043      	lsls	r3, r0, #1
 8001428:	0246      	lsls	r6, r0, #9
 800142a:	0fc4      	lsrs	r4, r0, #31
 800142c:	20fe      	movs	r0, #254	; 0xfe
 800142e:	0e1b      	lsrs	r3, r3, #24
 8001430:	1c59      	adds	r1, r3, #1
 8001432:	0a75      	lsrs	r5, r6, #9
 8001434:	4208      	tst	r0, r1
 8001436:	d00c      	beq.n	8001452 <__aeabi_f2d+0x2e>
 8001438:	22e0      	movs	r2, #224	; 0xe0
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4694      	mov	ip, r2
 800143e:	076d      	lsls	r5, r5, #29
 8001440:	0b36      	lsrs	r6, r6, #12
 8001442:	4463      	add	r3, ip
 8001444:	051b      	lsls	r3, r3, #20
 8001446:	4333      	orrs	r3, r6
 8001448:	07e4      	lsls	r4, r4, #31
 800144a:	4323      	orrs	r3, r4
 800144c:	0028      	movs	r0, r5
 800144e:	0019      	movs	r1, r3
 8001450:	bd70      	pop	{r4, r5, r6, pc}
 8001452:	2b00      	cmp	r3, #0
 8001454:	d114      	bne.n	8001480 <__aeabi_f2d+0x5c>
 8001456:	2d00      	cmp	r5, #0
 8001458:	d01b      	beq.n	8001492 <__aeabi_f2d+0x6e>
 800145a:	0028      	movs	r0, r5
 800145c:	f000 f8b2 	bl	80015c4 <__clzsi2>
 8001460:	280a      	cmp	r0, #10
 8001462:	dc1c      	bgt.n	800149e <__aeabi_f2d+0x7a>
 8001464:	230b      	movs	r3, #11
 8001466:	002e      	movs	r6, r5
 8001468:	1a1b      	subs	r3, r3, r0
 800146a:	40de      	lsrs	r6, r3
 800146c:	0003      	movs	r3, r0
 800146e:	3315      	adds	r3, #21
 8001470:	409d      	lsls	r5, r3
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <__aeabi_f2d+0x88>)
 8001474:	0336      	lsls	r6, r6, #12
 8001476:	1a12      	subs	r2, r2, r0
 8001478:	0552      	lsls	r2, r2, #21
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d53      	lsrs	r3, r2, #21
 800147e:	e7e1      	b.n	8001444 <__aeabi_f2d+0x20>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d009      	beq.n	8001498 <__aeabi_f2d+0x74>
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0b36      	lsrs	r6, r6, #12
 8001488:	0312      	lsls	r2, r2, #12
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <__aeabi_f2d+0x8c>)
 800148c:	076d      	lsls	r5, r5, #29
 800148e:	4316      	orrs	r6, r2
 8001490:	e7d8      	b.n	8001444 <__aeabi_f2d+0x20>
 8001492:	2300      	movs	r3, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e7d5      	b.n	8001444 <__aeabi_f2d+0x20>
 8001498:	2600      	movs	r6, #0
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <__aeabi_f2d+0x8c>)
 800149c:	e7d2      	b.n	8001444 <__aeabi_f2d+0x20>
 800149e:	0003      	movs	r3, r0
 80014a0:	3b0b      	subs	r3, #11
 80014a2:	409d      	lsls	r5, r3
 80014a4:	002e      	movs	r6, r5
 80014a6:	2500      	movs	r5, #0
 80014a8:	e7e3      	b.n	8001472 <__aeabi_f2d+0x4e>
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	00000389 	.word	0x00000389
 80014b0:	000007ff 	.word	0x000007ff

080014b4 <__aeabi_d2f>:
 80014b4:	0002      	movs	r2, r0
 80014b6:	004b      	lsls	r3, r1, #1
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	0d5b      	lsrs	r3, r3, #21
 80014bc:	030c      	lsls	r4, r1, #12
 80014be:	4e3d      	ldr	r6, [pc, #244]	; (80015b4 <__aeabi_d2f+0x100>)
 80014c0:	0a64      	lsrs	r4, r4, #9
 80014c2:	0f40      	lsrs	r0, r0, #29
 80014c4:	1c5f      	adds	r7, r3, #1
 80014c6:	0fc9      	lsrs	r1, r1, #31
 80014c8:	4304      	orrs	r4, r0
 80014ca:	00d5      	lsls	r5, r2, #3
 80014cc:	4237      	tst	r7, r6
 80014ce:	d00a      	beq.n	80014e6 <__aeabi_d2f+0x32>
 80014d0:	4839      	ldr	r0, [pc, #228]	; (80015b8 <__aeabi_d2f+0x104>)
 80014d2:	181e      	adds	r6, r3, r0
 80014d4:	2efe      	cmp	r6, #254	; 0xfe
 80014d6:	dd16      	ble.n	8001506 <__aeabi_d2f+0x52>
 80014d8:	20ff      	movs	r0, #255	; 0xff
 80014da:	2400      	movs	r4, #0
 80014dc:	05c0      	lsls	r0, r0, #23
 80014de:	4320      	orrs	r0, r4
 80014e0:	07c9      	lsls	r1, r1, #31
 80014e2:	4308      	orrs	r0, r1
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <__aeabi_d2f+0x44>
 80014ea:	432c      	orrs	r4, r5
 80014ec:	d026      	beq.n	800153c <__aeabi_d2f+0x88>
 80014ee:	2205      	movs	r2, #5
 80014f0:	0192      	lsls	r2, r2, #6
 80014f2:	0a54      	lsrs	r4, r2, #9
 80014f4:	b2d8      	uxtb	r0, r3
 80014f6:	e7f1      	b.n	80014dc <__aeabi_d2f+0x28>
 80014f8:	4325      	orrs	r5, r4
 80014fa:	d0ed      	beq.n	80014d8 <__aeabi_d2f+0x24>
 80014fc:	2080      	movs	r0, #128	; 0x80
 80014fe:	03c0      	lsls	r0, r0, #15
 8001500:	4304      	orrs	r4, r0
 8001502:	20ff      	movs	r0, #255	; 0xff
 8001504:	e7ea      	b.n	80014dc <__aeabi_d2f+0x28>
 8001506:	2e00      	cmp	r6, #0
 8001508:	dd1b      	ble.n	8001542 <__aeabi_d2f+0x8e>
 800150a:	0192      	lsls	r2, r2, #6
 800150c:	1e53      	subs	r3, r2, #1
 800150e:	419a      	sbcs	r2, r3
 8001510:	00e4      	lsls	r4, r4, #3
 8001512:	0f6d      	lsrs	r5, r5, #29
 8001514:	4322      	orrs	r2, r4
 8001516:	432a      	orrs	r2, r5
 8001518:	0753      	lsls	r3, r2, #29
 800151a:	d048      	beq.n	80015ae <__aeabi_d2f+0xfa>
 800151c:	230f      	movs	r3, #15
 800151e:	4013      	ands	r3, r2
 8001520:	2b04      	cmp	r3, #4
 8001522:	d000      	beq.n	8001526 <__aeabi_d2f+0x72>
 8001524:	3204      	adds	r2, #4
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	04db      	lsls	r3, r3, #19
 800152a:	4013      	ands	r3, r2
 800152c:	d03f      	beq.n	80015ae <__aeabi_d2f+0xfa>
 800152e:	1c70      	adds	r0, r6, #1
 8001530:	2efe      	cmp	r6, #254	; 0xfe
 8001532:	d0d1      	beq.n	80014d8 <__aeabi_d2f+0x24>
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a54      	lsrs	r4, r2, #9
 8001538:	b2c0      	uxtb	r0, r0
 800153a:	e7cf      	b.n	80014dc <__aeabi_d2f+0x28>
 800153c:	2000      	movs	r0, #0
 800153e:	2400      	movs	r4, #0
 8001540:	e7cc      	b.n	80014dc <__aeabi_d2f+0x28>
 8001542:	0032      	movs	r2, r6
 8001544:	3217      	adds	r2, #23
 8001546:	db22      	blt.n	800158e <__aeabi_d2f+0xda>
 8001548:	2080      	movs	r0, #128	; 0x80
 800154a:	0400      	lsls	r0, r0, #16
 800154c:	4320      	orrs	r0, r4
 800154e:	241e      	movs	r4, #30
 8001550:	1ba4      	subs	r4, r4, r6
 8001552:	2c1f      	cmp	r4, #31
 8001554:	dd1d      	ble.n	8001592 <__aeabi_d2f+0xde>
 8001556:	2202      	movs	r2, #2
 8001558:	4252      	negs	r2, r2
 800155a:	1b96      	subs	r6, r2, r6
 800155c:	0002      	movs	r2, r0
 800155e:	40f2      	lsrs	r2, r6
 8001560:	0016      	movs	r6, r2
 8001562:	2c20      	cmp	r4, #32
 8001564:	d004      	beq.n	8001570 <__aeabi_d2f+0xbc>
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <__aeabi_d2f+0x108>)
 8001568:	4694      	mov	ip, r2
 800156a:	4463      	add	r3, ip
 800156c:	4098      	lsls	r0, r3
 800156e:	4305      	orrs	r5, r0
 8001570:	002a      	movs	r2, r5
 8001572:	1e53      	subs	r3, r2, #1
 8001574:	419a      	sbcs	r2, r3
 8001576:	4332      	orrs	r2, r6
 8001578:	2600      	movs	r6, #0
 800157a:	0753      	lsls	r3, r2, #29
 800157c:	d1ce      	bne.n	800151c <__aeabi_d2f+0x68>
 800157e:	2480      	movs	r4, #128	; 0x80
 8001580:	0013      	movs	r3, r2
 8001582:	04e4      	lsls	r4, r4, #19
 8001584:	2001      	movs	r0, #1
 8001586:	4023      	ands	r3, r4
 8001588:	4222      	tst	r2, r4
 800158a:	d1d3      	bne.n	8001534 <__aeabi_d2f+0x80>
 800158c:	e7b0      	b.n	80014f0 <__aeabi_d2f+0x3c>
 800158e:	2300      	movs	r3, #0
 8001590:	e7ad      	b.n	80014ee <__aeabi_d2f+0x3a>
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <__aeabi_d2f+0x10c>)
 8001594:	4694      	mov	ip, r2
 8001596:	002a      	movs	r2, r5
 8001598:	40e2      	lsrs	r2, r4
 800159a:	0014      	movs	r4, r2
 800159c:	002a      	movs	r2, r5
 800159e:	4463      	add	r3, ip
 80015a0:	409a      	lsls	r2, r3
 80015a2:	4098      	lsls	r0, r3
 80015a4:	1e55      	subs	r5, r2, #1
 80015a6:	41aa      	sbcs	r2, r5
 80015a8:	4302      	orrs	r2, r0
 80015aa:	4322      	orrs	r2, r4
 80015ac:	e7e4      	b.n	8001578 <__aeabi_d2f+0xc4>
 80015ae:	0033      	movs	r3, r6
 80015b0:	e79e      	b.n	80014f0 <__aeabi_d2f+0x3c>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	000007fe 	.word	0x000007fe
 80015b8:	fffffc80 	.word	0xfffffc80
 80015bc:	fffffca2 	.word	0xfffffca2
 80015c0:	fffffc82 	.word	0xfffffc82

080015c4 <__clzsi2>:
 80015c4:	211c      	movs	r1, #28
 80015c6:	2301      	movs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d301      	bcc.n	80015d2 <__clzsi2+0xe>
 80015ce:	0c00      	lsrs	r0, r0, #16
 80015d0:	3910      	subs	r1, #16
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	4298      	cmp	r0, r3
 80015d6:	d301      	bcc.n	80015dc <__clzsi2+0x18>
 80015d8:	0a00      	lsrs	r0, r0, #8
 80015da:	3908      	subs	r1, #8
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	4298      	cmp	r0, r3
 80015e0:	d301      	bcc.n	80015e6 <__clzsi2+0x22>
 80015e2:	0900      	lsrs	r0, r0, #4
 80015e4:	3904      	subs	r1, #4
 80015e6:	a202      	add	r2, pc, #8	; (adr r2, 80015f0 <__clzsi2+0x2c>)
 80015e8:	5c10      	ldrb	r0, [r2, r0]
 80015ea:	1840      	adds	r0, r0, r1
 80015ec:	4770      	bx	lr
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	02020304 	.word	0x02020304
 80015f4:	01010101 	.word	0x01010101
	...

08001600 <_ZN3LEDC1EP6WS2812>:
#include "led.h"

LED::LED(WS2812* neopixel){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	601a      	str	r2, [r3, #0]
}
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}

0800161a <_ZN3LED4initEh>:

void LED::init(uint8_t panel_id){
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	000a      	movs	r2, r1
 8001624:	1cfb      	adds	r3, r7, #3
 8001626:	701a      	strb	r2, [r3, #0]
    NEOPIXEL->clear();
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f000 fe4f 	bl	80022d0 <_ZN6WS28125clearEv>
    if	   (panel_id==0){PANEL_START_X = 0; PANEL_START_Z = 0;}
 8001632:	1cfb      	adds	r3, r7, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <_ZN3LED4initEh+0x2e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	71da      	strb	r2, [r3, #7]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	721a      	strb	r2, [r3, #8]
    else if(panel_id==5){PANEL_START_X = 16; PANEL_START_Z = 32;}

    else if(panel_id==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
    else if(panel_id==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
    else if(panel_id==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
}
 8001646:	e056      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==1){PANEL_START_X = 0; PANEL_START_Z = 16;}
 8001648:	1cfb      	adds	r3, r7, #3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <_ZN3LED4initEh+0x44>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	71da      	strb	r2, [r3, #7]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2210      	movs	r2, #16
 800165a:	721a      	strb	r2, [r3, #8]
}
 800165c:	e04b      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==2){PANEL_START_X = 0; PANEL_START_Z = 32;}
 800165e:	1cfb      	adds	r3, r7, #3
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d106      	bne.n	8001674 <_ZN3LED4initEh+0x5a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	71da      	strb	r2, [r3, #7]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	721a      	strb	r2, [r3, #8]
}
 8001672:	e040      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==3){PANEL_START_X = 16; PANEL_START_Z = 0;}
 8001674:	1cfb      	adds	r3, r7, #3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d106      	bne.n	800168a <_ZN3LED4initEh+0x70>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2210      	movs	r2, #16
 8001680:	71da      	strb	r2, [r3, #7]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	721a      	strb	r2, [r3, #8]
}
 8001688:	e035      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==4){PANEL_START_X = 16; PANEL_START_Z = 16;}
 800168a:	1cfb      	adds	r3, r7, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d106      	bne.n	80016a0 <_ZN3LED4initEh+0x86>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2210      	movs	r2, #16
 8001696:	71da      	strb	r2, [r3, #7]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2210      	movs	r2, #16
 800169c:	721a      	strb	r2, [r3, #8]
}
 800169e:	e02a      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==5){PANEL_START_X = 16; PANEL_START_Z = 32;}
 80016a0:	1cfb      	adds	r3, r7, #3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d106      	bne.n	80016b6 <_ZN3LED4initEh+0x9c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2210      	movs	r2, #16
 80016ac:	71da      	strb	r2, [r3, #7]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2220      	movs	r2, #32
 80016b2:	721a      	strb	r2, [r3, #8]
}
 80016b4:	e01f      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
 80016b6:	1cfb      	adds	r3, r7, #3
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d106      	bne.n	80016cc <_ZN3LED4initEh+0xb2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	71da      	strb	r2, [r3, #7]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	721a      	strb	r2, [r3, #8]
}
 80016ca:	e014      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
 80016cc:	1cfb      	adds	r3, r7, #3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d106      	bne.n	80016e2 <_ZN3LED4initEh+0xc8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2220      	movs	r2, #32
 80016d8:	71da      	strb	r2, [r3, #7]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2210      	movs	r2, #16
 80016de:	721a      	strb	r2, [r3, #8]
}
 80016e0:	e009      	b.n	80016f6 <_ZN3LED4initEh+0xdc>
    else if(panel_id==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
 80016e2:	1cfb      	adds	r3, r7, #3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d105      	bne.n	80016f6 <_ZN3LED4initEh+0xdc>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	71da      	strb	r2, [r3, #7]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	721a      	strb	r2, [r3, #8]
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b002      	add	sp, #8
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_ZN3LED4showEiiiii>:

void LED::show(int travel_x, int circle_x, int circle_z, int circle_r, int hue){
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b08d      	sub	sp, #52	; 0x34
 8001702:	af04      	add	r7, sp, #16
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	603b      	str	r3, [r7, #0]
    NEOPIXEL->clear();
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0018      	movs	r0, r3
 8001712:	f000 fddd 	bl	80022d0 <_ZN6WS28125clearEv>
    for(int px=0; px<16; px++){
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	dc38      	bgt.n	8001792 <_ZN3LED4showEiiiii+0x94>
        for(int pz=0; pz<16; pz++){
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	dc2f      	bgt.n	800178a <_ZN3LED4showEiiiii+0x8c>
            int x = px + PANEL_START_X + travel_x;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	79db      	ldrb	r3, [r3, #7]
 800172e:	001a      	movs	r2, r3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	18d3      	adds	r3, r2, r3
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	18d3      	adds	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
            int z = pz + PANEL_START_Z;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	7a1b      	ldrb	r3, [r3, #8]
 800173e:	001a      	movs	r2, r3
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	189b      	adds	r3, r3, r2
 8001744:	613b      	str	r3, [r7, #16]

            set_under();
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	0018      	movs	r0, r3
 800174a:	f000 f87a 	bl	8001842 <_ZN3LED9set_underEv>
            set_circle(x, z, circle_x, circle_z, circle_r, hue);
 800174e:	687c      	ldr	r4, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	0023      	movs	r3, r4
 8001764:	f000 f81e 	bl	80017a4 <_ZN3LED10set_circleEiiiiii>
            set_color(change_coord_to_num(px, pz));
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69f9      	ldr	r1, [r7, #28]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f892 	bl	8001898 <_ZN3LED19change_coord_to_numEii>
 8001774:	0003      	movs	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	0011      	movs	r1, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f000 f871 	bl	8001864 <_ZN3LED9set_colorEt>
        for(int pz=0; pz<16; pz++){
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3301      	adds	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	e7cc      	b.n	8001724 <_ZN3LED4showEiiiii+0x26>
    for(int px=0; px<16; px++){
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3301      	adds	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	e7c3      	b.n	800171a <_ZN3LED4showEiiiii+0x1c>
        }
    }
    NEOPIXEL->show();
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fd12 	bl	80021c0 <_ZN6WS28124showEv>
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b009      	add	sp, #36	; 0x24
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <_ZN3LED10set_circleEiiiiii>:

void LED::set_circle(int x, int z, int cx, int cz, int ro, int h){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
    float distance = (x-cx)*(x-cx)+(z-cz)*(z-cz);
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	1a8a      	subs	r2, r1, r2
 80017be:	435a      	muls	r2, r3
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	1acb      	subs	r3, r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	6a39      	ldr	r1, [r7, #32]
 80017ca:	1a41      	subs	r1, r0, r1
 80017cc:	434b      	muls	r3, r1
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fa9d 	bl	8000d10 <__aeabi_i2f>
 80017d6:	1c03      	adds	r3, r0, #0
 80017d8:	617b      	str	r3, [r7, #20]
    if(ro*ro>=distance){
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	435b      	muls	r3, r3
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fa96 	bl	8000d10 <__aeabi_i2f>
 80017e4:	1c03      	adds	r3, r0, #0
 80017e6:	1c19      	adds	r1, r3, #0
 80017e8:	6978      	ldr	r0, [r7, #20]
 80017ea:	f7fe fd31 	bl	8000250 <__aeabi_fcmple>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d100      	bne.n	80017f4 <_ZN3LED10set_circleEiiiiii+0x50>
//        red = 10; green = 0; blue = 0;
    	hue = h; sat = 240; val = 10;
    }else{}
}
 80017f2:	e008      	b.n	8001806 <_ZN3LED10set_circleEiiiiii+0x62>
    	hue = h; sat = 240; val = 10;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	22f0      	movs	r2, #240	; 0xf0
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	220a      	movs	r2, #10
 8001804:	615a      	str	r2, [r3, #20]
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b006      	add	sp, #24
 800180c:	bd80      	pop	{r7, pc}

0800180e <_ZN3LED17do_forwardRewriteEv>:

void LED::do_forwardRewrite(){
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
    NEOPIXEL->do_forwardRewrite();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	f000 fe64 	bl	80024e8 <_ZN6WS281217do_forwardRewriteEv>
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN3LED14do_backRewriteEv>:

void LED::do_backRewrite(){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    NEOPIXEL->do_backRewrite();
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 ff01 	bl	800263c <_ZN6WS281214do_backRewriteEv>
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZN3LED9set_underEv>:

void LED::set_under(){
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    hue = 50;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2232      	movs	r2, #50	; 0x32
 800184e:	60da      	str	r2, [r3, #12]
    sat = 200;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	22c8      	movs	r2, #200	; 0xc8
 8001854:	611a      	str	r2, [r3, #16]
    val = 5;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	615a      	str	r2, [r3, #20]
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN3LED9set_colorEt>:

void LED::set_color(uint16_t pixel_num){
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af02      	add	r7, sp, #8
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	000a      	movs	r2, r1
 800186e:	1cbb      	adds	r3, r7, #2
 8001870:	801a      	strh	r2, [r3, #0]
//    NEOPIXEL->set_rgb(pixel_num, red, green, blue);
	NEOPIXEL->set_hsv(pixel_num, hue, sat, val);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691c      	ldr	r4, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	0023      	movs	r3, r4
 800188c:	f000 fd4e 	bl	800232c <_ZN6WS28127set_hsvEhiii>
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b003      	add	sp, #12
 8001896:	bd90      	pop	{r4, r7, pc}

08001898 <_ZN3LED19change_coord_to_numEii>:

int LED::change_coord_to_num(int px, int pz){
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
    int return_pixel_num = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

    if(pz%2 == 0){
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	d105      	bne.n	80018bc <_ZN3LED19change_coord_to_numEii+0x24>
        return_pixel_num = pz*16 + px;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	18d3      	adds	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e006      	b.n	80018ca <_ZN3LED19change_coord_to_numEii+0x32>
    }
    else{
        return_pixel_num = pz*16 + 15 - px;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	330f      	adds	r3, #15
 80018c2:	001a      	movs	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    }

    return return_pixel_num;
 80018ca:	697b      	ldr	r3, [r7, #20]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b006      	add	sp, #24
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1c18      	adds	r0, r3, #0
 80018e0:	f004 f8e2 	bl	8005aa8 <sinf>
 80018e4:	1c03      	adds	r3, r0, #0
 80018e6:	1c18      	adds	r0, r3, #0
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	led.do_forwardRewrite();
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ff87 	bl	800180e <_ZN3LED17do_forwardRewriteEv>
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b002      	add	sp, #8
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000504 	.word	0x20000504

0800190c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	led.do_backRewrite();
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff ff86 	bl	8001828 <_ZN3LED14do_backRewriteEv>
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000504 	.word	0x20000504

08001928 <_Z6readIDv>:

uint8_t readID(){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	uint8_t ID = 0;
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){ID=0;}
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <_Z6readIDv+0xcc>)
 8001936:	2110      	movs	r1, #16
 8001938:	0018      	movs	r0, r3
 800193a:	f001 fd09 	bl	8003350 <HAL_GPIO_ReadPin>
 800193e:	0003      	movs	r3, r0
 8001940:	3b01      	subs	r3, #1
 8001942:	425a      	negs	r2, r3
 8001944:	4153      	adcs	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <_Z6readIDv+0x2c>
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e01e      	b.n	8001992 <_Z6readIDv+0x6a>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){ID=1;}
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <_Z6readIDv+0xcc>)
 8001956:	2120      	movs	r1, #32
 8001958:	0018      	movs	r0, r3
 800195a:	f001 fcf9 	bl	8003350 <HAL_GPIO_ReadPin>
 800195e:	0003      	movs	r3, r0
 8001960:	3b01      	subs	r3, #1
 8001962:	425a      	negs	r2, r3
 8001964:	4153      	adcs	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <_Z6readIDv+0x4c>
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e00e      	b.n	8001992 <_Z6readIDv+0x6a>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){ID=2;}
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <_Z6readIDv+0xcc>)
 8001976:	2140      	movs	r1, #64	; 0x40
 8001978:	0018      	movs	r0, r3
 800197a:	f001 fce9 	bl	8003350 <HAL_GPIO_ReadPin>
 800197e:	0003      	movs	r3, r0
 8001980:	3b01      	subs	r3, #1
 8001982:	425a      	negs	r2, r3
 8001984:	4153      	adcs	r3, r2
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <_Z6readIDv+0x6a>
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){ID=ID+3;}
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	23a0      	movs	r3, #160	; 0xa0
 8001998:	05db      	lsls	r3, r3, #23
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f001 fcd7 	bl	8003350 <HAL_GPIO_ReadPin>
 80019a2:	0003      	movs	r3, r0
 80019a4:	3b01      	subs	r3, #1
 80019a6:	425a      	negs	r2, r3
 80019a8:	4153      	adcs	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <_Z6readIDv+0x94>
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	1dfa      	adds	r2, r7, #7
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	3203      	adds	r2, #3
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e015      	b.n	80019e8 <_Z6readIDv+0xc0>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){ID=ID+6;}
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <_Z6readIDv+0xcc>)
 80019be:	2108      	movs	r1, #8
 80019c0:	0018      	movs	r0, r3
 80019c2:	f001 fcc5 	bl	8003350 <HAL_GPIO_ReadPin>
 80019c6:	0003      	movs	r3, r0
 80019c8:	3b01      	subs	r3, #1
 80019ca:	425a      	negs	r2, r3
 80019cc:	4153      	adcs	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <_Z6readIDv+0xb8>
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	1dfa      	adds	r2, r7, #7
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	3206      	adds	r2, #6
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e003      	b.n	80019e8 <_Z6readIDv+0xc0>
	else{ID = ID;}
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	1dfa      	adds	r2, r7, #7
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	701a      	strb	r2, [r3, #0]
	return ID;
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b002      	add	sp, #8
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	50000400 	.word	0x50000400

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fe:	f000 feff 	bl	8002800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a02:	f000 f865 	bl	8001ad0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a06:	f000 f9af 	bl	8001d68 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001a0a:	f000 f987 	bl	8001d1c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001a0e:	f000 f94d 	bl	8001cac <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8001a12:	f000 f8b9 	bl	8001b88 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  led.init(readID());
 8001a16:	f7ff ff87 	bl	8001928 <_Z6readIDv>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	4b27      	ldr	r3, [pc, #156]	; (8001abc <main+0xc4>)
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff fdf9 	bl	800161a <_ZN3LED4initEh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     led.show(0,sin(k)*5+16,sin(k)*5+16,6, 0);
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <main+0xc8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1c18      	adds	r0, r3, #0
 8001a2e:	f7ff ff51 	bl	80018d4 <_ZSt3sinf>
 8001a32:	1c03      	adds	r3, r0, #0
 8001a34:	4923      	ldr	r1, [pc, #140]	; (8001ac4 <main+0xcc>)
 8001a36:	1c18      	adds	r0, r3, #0
 8001a38:	f7fe fe76 	bl	8000728 <__aeabi_fmul>
 8001a3c:	1c03      	adds	r3, r0, #0
 8001a3e:	2183      	movs	r1, #131	; 0x83
 8001a40:	05c9      	lsls	r1, r1, #23
 8001a42:	1c18      	adds	r0, r3, #0
 8001a44:	f7fe fc22 	bl	800028c <__aeabi_fadd>
 8001a48:	1c03      	adds	r3, r0, #0
 8001a4a:	1c18      	adds	r0, r3, #0
 8001a4c:	f7ff f940 	bl	8000cd0 <__aeabi_f2iz>
 8001a50:	0004      	movs	r4, r0
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <main+0xc8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1c18      	adds	r0, r3, #0
 8001a58:	f7ff ff3c 	bl	80018d4 <_ZSt3sinf>
 8001a5c:	1c03      	adds	r3, r0, #0
 8001a5e:	4919      	ldr	r1, [pc, #100]	; (8001ac4 <main+0xcc>)
 8001a60:	1c18      	adds	r0, r3, #0
 8001a62:	f7fe fe61 	bl	8000728 <__aeabi_fmul>
 8001a66:	1c03      	adds	r3, r0, #0
 8001a68:	2183      	movs	r1, #131	; 0x83
 8001a6a:	05c9      	lsls	r1, r1, #23
 8001a6c:	1c18      	adds	r0, r3, #0
 8001a6e:	f7fe fc0d 	bl	800028c <__aeabi_fadd>
 8001a72:	1c03      	adds	r3, r0, #0
 8001a74:	1c18      	adds	r0, r3, #0
 8001a76:	f7ff f92b 	bl	8000cd0 <__aeabi_f2iz>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	480f      	ldr	r0, [pc, #60]	; (8001abc <main+0xc4>)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	2306      	movs	r3, #6
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	0013      	movs	r3, r2
 8001a88:	0022      	movs	r2, r4
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	f7ff fe37 	bl	80016fe <_ZN3LED4showEiiiii>
     k = k+0.1;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <main+0xc8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c18      	adds	r0, r3, #0
 8001a96:	f7ff fcc5 	bl	8001424 <__aeabi_f2d>
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <main+0xd0>)
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <main+0xd4>)
 8001a9e:	f7ff f985 	bl	8000dac <__aeabi_dadd>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	000b      	movs	r3, r1
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	f7ff fd03 	bl	80014b4 <__aeabi_d2f>
 8001aae:	1c02      	adds	r2, r0, #0
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <main+0xc8>)
 8001ab2:	601a      	str	r2, [r3, #0]
     HAL_Delay(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f000 ff29 	bl	800290c <HAL_Delay>
     led.show(0,sin(k)*5+16,sin(k)*5+16,6, 0);
 8001aba:	e7b5      	b.n	8001a28 <main+0x30>
 8001abc:	20000504 	.word	0x20000504
 8001ac0:	2000051c 	.word	0x2000051c
 8001ac4:	40a00000 	.word	0x40a00000
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3fb99999 	.word	0x3fb99999

08001ad0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b093      	sub	sp, #76	; 0x4c
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	2414      	movs	r4, #20
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	0018      	movs	r0, r3
 8001adc:	2334      	movs	r3, #52	; 0x34
 8001ade:	001a      	movs	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f004 fdd1 	bl	8006688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	0018      	movs	r0, r3
 8001aea:	2310      	movs	r3, #16
 8001aec:	001a      	movs	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	f004 fdca 	bl	8006688 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	0018      	movs	r0, r3
 8001afa:	f001 fc63 	bl	80033c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	22a0      	movs	r2, #160	; 0xa0
 8001b08:	02d2      	lsls	r2, r2, #11
 8001b0a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	0021      	movs	r1, r4
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2202      	movs	r2, #2
 8001b12:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2203      	movs	r2, #3
 8001b18:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2209      	movs	r2, #9
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0292      	lsls	r2, r2, #10
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	05d2      	lsls	r2, r2, #23
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f001 fc8f 	bl	800345c <HAL_RCC_OscConfig>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	4193      	sbcs	r3, r2
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8001b4a:	f000 f97d 	bl	8001e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2202      	movs	r2, #2
 8001b58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2101      	movs	r1, #1
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f001 ff86 	bl	8003a7c <HAL_RCC_ClockConfig>
 8001b70:	0003      	movs	r3, r0
 8001b72:	1e5a      	subs	r2, r3, #1
 8001b74:	4193      	sbcs	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8001b7c:	f000 f964 	bl	8001e48 <Error_Handler>
  }
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b013      	add	sp, #76	; 0x4c
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	2328      	movs	r3, #40	; 0x28
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	0018      	movs	r0, r3
 8001b94:	2310      	movs	r3, #16
 8001b96:	001a      	movs	r2, r3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f004 fd75 	bl	8006688 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	231c      	movs	r3, #28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f004 fd6d 	bl	8006688 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	003b      	movs	r3, r7
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	231c      	movs	r3, #28
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f004 fd66 	bl	8006688 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <_ZL12MX_TIM3_Initv+0x120>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001bd0:	220e      	movs	r2, #14
 8001bd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001be2:	0018      	movs	r0, r3
 8001be4:	f002 f8f2 	bl	8003dcc <HAL_TIM_Base_Init>
 8001be8:	0003      	movs	r3, r0
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	4193      	sbcs	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001bf4:	f000 f928 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	2128      	movs	r1, #40	; 0x28
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0152      	lsls	r2, r2, #5
 8001c00:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c02:	187a      	adds	r2, r7, r1
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f002 fd6f 	bl	80046ec <HAL_TIM_ConfigClockSource>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	4193      	sbcs	r3, r2
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001c1a:	f000 f915 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001c20:	0018      	movs	r0, r3
 8001c22:	f002 f92b 	bl	8003e7c <HAL_TIM_PWM_Init>
 8001c26:	0003      	movs	r3, r0
 8001c28:	1e5a      	subs	r2, r3, #1
 8001c2a:	4193      	sbcs	r3, r2
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001c32:	f000 f909 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	211c      	movs	r1, #28
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c44:	187a      	adds	r2, r7, r1
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001c48:	0011      	movs	r1, r2
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f003 fad6 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	0003      	movs	r3, r0
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	4193      	sbcs	r3, r2
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001c5c:	f000 f8f4 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c60:	003b      	movs	r3, r7
 8001c62:	2260      	movs	r2, #96	; 0x60
 8001c64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c66:	003b      	movs	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c72:	003b      	movs	r3, r7
 8001c74:	2204      	movs	r2, #4
 8001c76:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c78:	0039      	movs	r1, r7
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f002 fc34 	bl	80044ec <HAL_TIM_PWM_ConfigChannel>
 8001c84:	0003      	movs	r3, r0
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	4193      	sbcs	r3, r2
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001c90:	f000 f8da 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <_ZL12MX_TIM3_Initv+0x11c>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 f97e 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b00e      	add	sp, #56	; 0x38
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000028 	.word	0x20000028
 8001ca8:	40000400 	.word	0x40000400

08001cac <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cb2:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <_ZL19MX_USART2_UART_Initv+0x6c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cb8:	22e1      	movs	r2, #225	; 0xe1
 8001cba:	0252      	lsls	r2, r2, #9
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f003 fae2 	bl	80052c0 <HAL_UART_Init>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	4193      	sbcs	r3, r2
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8001d08:	f000 f89e 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	200000d0 	.word	0x200000d0
 8001d18:	40004400 	.word	0x40004400

08001d1c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_ZL11MX_DMA_Initv+0x48>)
 8001d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <_ZL11MX_DMA_Initv+0x48>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <_ZL11MX_DMA_Initv+0x48>)
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2009      	movs	r0, #9
 8001d40:	f000 feb4 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d44:	2009      	movs	r0, #9
 8001d46:	f000 fec6 	bl	8002ad6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f000 feac 	bl	8002aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001d54:	200a      	movs	r0, #10
 8001d56:	f000 febe 	bl	8002ad6 <HAL_NVIC_EnableIRQ>

}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40021000 	.word	0x40021000

08001d68 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	240c      	movs	r4, #12
 8001d70:	193b      	adds	r3, r7, r4
 8001d72:	0018      	movs	r0, r3
 8001d74:	2314      	movs	r3, #20
 8001d76:	001a      	movs	r2, r3
 8001d78:	2100      	movs	r1, #0
 8001d7a:	f004 fc85 	bl	8006688 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001d84:	2104      	movs	r1, #4
 8001d86:	430a      	orrs	r2, r1
 8001d88:	635a      	str	r2, [r3, #52]	; 0x34
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4013      	ands	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001db4:	2102      	movs	r1, #2
 8001db6:	430a      	orrs	r2, r1
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <_ZL12MX_GPIO_Initv+0xd8>)
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <_ZL12MX_GPIO_Initv+0xdc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2104      	movs	r1, #4
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f001 fadc 	bl	800338a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001dd2:	193b      	adds	r3, r7, r4
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	193b      	adds	r3, r7, r4
 8001dda:	2201      	movs	r2, #1
 8001ddc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	193b      	adds	r3, r7, r4
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <_ZL12MX_GPIO_Initv+0xdc>)
 8001dee:	0019      	movs	r1, r3
 8001df0:	0010      	movs	r0, r2
 8001df2:	f001 f949 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001df6:	193b      	adds	r3, r7, r4
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0152      	lsls	r2, r2, #5
 8001dfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	193a      	adds	r2, r7, r4
 8001e0c:	23a0      	movs	r3, #160	; 0xa0
 8001e0e:	05db      	lsls	r3, r3, #23
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 f938 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin;
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	2278      	movs	r2, #120	; 0x78
 8001e1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	193b      	adds	r3, r7, r4
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e2e:	0019      	movs	r1, r3
 8001e30:	0010      	movs	r0, r2
 8001e32:	f001 f929 	bl	8003088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b009      	add	sp, #36	; 0x24
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	40021000 	.word	0x40021000
 8001e44:	50000400 	.word	0x50000400

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <Error_Handler+0x8>
	...

08001e54 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10f      	bne.n	8001e84 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d10b      	bne.n	8001e84 <_Z41__static_initialization_and_destruction_0ii+0x30>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001e6e:	4909      	ldr	r1, [pc, #36]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001e72:	2204      	movs	r2, #4
 8001e74:	f000 f97e 	bl	8002174 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fbbe 	bl	8001600 <_ZN3LEDC1EP6WS2812>
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	0000ffff 	.word	0x0000ffff
 8001e90:	20000074 	.word	0x20000074
 8001e94:	20000028 	.word	0x20000028
 8001e98:	200001c0 	.word	0x200001c0
 8001e9c:	20000504 	.word	0x20000504

08001ea0 <_GLOBAL__sub_I_htim3>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <_GLOBAL__sub_I_htim3+0x14>)
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff ffd3 	bl	8001e54 <_Z41__static_initialization_and_destruction_0ii>
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	0000ffff 	.word	0x0000ffff

08001eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x44>)
 8001ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_MspInit+0x44>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_MspInit+0x44>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_MspInit+0x44>)
 8001ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_MspInit+0x44>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0549      	lsls	r1, r1, #21
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_MspInit+0x44>)
 8001ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	055b      	lsls	r3, r3, #21
 8001eec:	4013      	ands	r3, r2
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_TIM_Base_MspInit+0x88>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d136      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_TIM_Base_MspInit+0x8c>)
 8001f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_TIM_Base_MspInit+0x8c>)
 8001f18:	2102      	movs	r1, #2
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_TIM_Base_MspInit+0x8c>)
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_TIM_Base_MspInit+0x94>)
 8001f2e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f32:	2221      	movs	r2, #33	; 0x21
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f38:	2210      	movs	r2, #16
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	0092      	lsls	r2, r2, #2
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f58:	2220      	movs	r2, #32
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f5e:	22c0      	movs	r2, #192	; 0xc0
 8001f60:	0192      	lsls	r2, r2, #6
 8001f62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 fdd2 	bl	8002b10 <HAL_DMA_Init>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001f70:	f7ff ff6a 	bl	8001e48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_TIM_Base_MspInit+0x90>)
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	20000074 	.word	0x20000074
 8001f94:	4002001c 	.word	0x4002001c

08001f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	240c      	movs	r4, #12
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	2314      	movs	r3, #20
 8001fa8:	001a      	movs	r2, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	f004 fb6c 	bl	8006688 <memset>
  if(htim->Instance==TIM3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_TIM_MspPostInit+0x70>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_TIM_MspPostInit+0x74>)
 8001fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_TIM_MspPostInit+0x74>)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_TIM_MspPostInit+0x74>)
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fd2:	0021      	movs	r1, r4
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2202      	movs	r2, #2
 8001fde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2201      	movs	r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	187a      	adds	r2, r7, r1
 8001ff4:	23a0      	movs	r3, #160	; 0xa0
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f001 f844 	bl	8003088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b009      	add	sp, #36	; 0x24
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	40000400 	.word	0x40000400
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b08b      	sub	sp, #44	; 0x2c
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	2414      	movs	r4, #20
 800201a:	193b      	adds	r3, r7, r4
 800201c:	0018      	movs	r0, r3
 800201e:	2314      	movs	r3, #20
 8002020:	001a      	movs	r2, r3
 8002022:	2100      	movs	r1, #0
 8002024:	f004 fb30 	bl	8006688 <memset>
  if(huart->Instance==USART2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_UART_MspInit+0xe4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d15b      	bne.n	80020ea <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_UART_MspInit+0xe8>)
 8002034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_UART_MspInit+0xe8>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0289      	lsls	r1, r1, #10
 800203c:	430a      	orrs	r2, r1
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_UART_MspInit+0xe8>)
 8002042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_UART_MspInit+0xe8>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_UART_MspInit+0xe8>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	; 0x34
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_UART_MspInit+0xe8>)
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002066:	0021      	movs	r1, r4
 8002068:	187b      	adds	r3, r7, r1
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_UART_MspInit+0xec>)
 800206c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	187b      	adds	r3, r7, r1
 8002070:	2202      	movs	r2, #2
 8002072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	187b      	adds	r3, r7, r1
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	187b      	adds	r3, r7, r1
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002080:	187b      	adds	r3, r7, r1
 8002082:	2201      	movs	r2, #1
 8002084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	187a      	adds	r2, r7, r1
 8002088:	23a0      	movs	r3, #160	; 0xa0
 800208a:	05db      	lsls	r3, r3, #23
 800208c:	0011      	movs	r1, r2
 800208e:	0018      	movs	r0, r3
 8002090:	f000 fffa 	bl	8003088 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_UART_MspInit+0xf0>)
 8002096:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_UART_MspInit+0xf4>)
 8002098:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_UART_MspInit+0xf0>)
 800209c:	2234      	movs	r2, #52	; 0x34
 800209e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020c0:	2220      	movs	r2, #32
 80020c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	0192      	lsls	r2, r2, #6
 80020ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 fd1e 	bl	8002b10 <HAL_DMA_Init>
 80020d4:	1e03      	subs	r3, r0, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80020d8:	f7ff feb6 	bl	8001e48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020e2:	505a      	str	r2, [r3, r1]
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_UART_MspInit+0xf0>)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b00b      	add	sp, #44	; 0x2c
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40004400 	.word	0x40004400
 80020f8:	40021000 	.word	0x40021000
 80020fc:	00008004 	.word	0x00008004
 8002100:	20000164 	.word	0x20000164
 8002104:	40020008 	.word	0x40020008

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212c:	f000 fbd2 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <DMA1_Channel1_IRQHandler+0x14>)
 800213e:	0018      	movs	r0, r3
 8002140:	f000 fe60 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000164 	.word	0x20000164

08002150 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fe54 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	20000074 	.word	0x20000074

08002168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: famil
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 8002186:	189b      	adds	r3, r3, r2
 8002188:	2230      	movs	r2, #48	; 0x30
 800218a:	2100      	movs	r1, #0
 800218c:	0018      	movs	r0, r3
 800218e:	f004 fa7b 	bl	8006688 <memset>
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	23d0      	movs	r3, #208	; 0xd0
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	2100      	movs	r1, #0
 800219a:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	609a      	str	r2, [r3, #8]
}
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	0000030f 	.word	0x0000030f

080021c0 <_ZN6WS28124showEv>:


void WS2812::show(){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	23d0      	movs	r3, #208	; 0xd0
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	58d3      	ldr	r3, [r2, r3]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d106      	bne.n	80021e2 <_ZN6WS28124showEv+0x22>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2225      	movs	r2, #37	; 0x25
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <_ZN6WS28124showEv+0x26>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <_ZN6WS28124showEv+0x28>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d023      	beq.n	8002234 <_ZN6WS28124showEv+0x74>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	0019      	movs	r1, r3
 80021f6:	0010      	movs	r0, r2
 80021f8:	f002 f88e 	bl	8004318 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	23d0      	movs	r3, #208	; 0xd0
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	2100      	movs	r1, #0
 8002204:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 8002206:	230f      	movs	r3, #15
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	200f      	movs	r0, #15
 8002210:	183b      	adds	r3, r7, r0
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b2f      	cmp	r3, #47	; 0x2f
 8002216:	d854      	bhi.n	80022c2 <_ZN6WS28124showEv+0x102>
 8002218:	183b      	adds	r3, r7, r0
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	492b      	ldr	r1, [pc, #172]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002220:	18d3      	adds	r3, r2, r3
 8002222:	185b      	adds	r3, r3, r1
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	183b      	adds	r3, r7, r0
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	183b      	adds	r3, r7, r0
 800222e:	3201      	adds	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e7ec      	b.n	800220e <_ZN6WS28124showEv+0x4e>
        return;
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b07      	cmp	r3, #7
 800223c:	d832      	bhi.n	80022a4 <_ZN6WS28124showEv+0xe4>
        wr_buf[i   ] = 0;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4922      	ldr	r1, [pc, #136]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	185b      	adds	r3, r3, r1
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3308      	adds	r3, #8
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	491e      	ldr	r1, [pc, #120]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002254:	18d3      	adds	r3, r2, r3
 8002256:	185b      	adds	r3, r3, r1
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3310      	adds	r3, #16
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	491a      	ldr	r1, [pc, #104]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002264:	18d3      	adds	r3, r2, r3
 8002266:	185b      	adds	r3, r3, r1
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	3318      	adds	r3, #24
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4916      	ldr	r1, [pc, #88]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002274:	18d3      	adds	r3, r2, r3
 8002276:	185b      	adds	r3, r3, r1
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3320      	adds	r3, #32
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4912      	ldr	r1, [pc, #72]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	185b      	adds	r3, r3, r1
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	3328      	adds	r3, #40	; 0x28
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	490e      	ldr	r1, [pc, #56]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	185b      	adds	r3, r3, r1
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	e7c9      	b.n	8002238 <_ZN6WS28124showEv+0x78>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6858      	ldr	r0, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <_ZN6WS28124showEv+0x10c>)
 80022b2:	189a      	adds	r2, r3, r2
 80022b4:	2330      	movs	r3, #48	; 0x30
 80022b6:	f001 fe41 	bl	8003f3c <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 80022ba:	2008      	movs	r0, #8
 80022bc:	f000 fb26 	bl	800290c <HAL_Delay>
 80022c0:	e000      	b.n	80022c4 <_ZN6WS28124showEv+0x104>
        return;
 80022c2:	46c0      	nop			; (mov r8, r8)
}
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	0000030f 	.word	0x0000030f

080022d0 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dc1e      	bgt.n	8002324 <_ZN6WS28125clearEv+0x54>
        rgb_buf[i][0]=0;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	0013      	movs	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	18cb      	adds	r3, r1, r3
 80022f2:	330c      	adds	r3, #12
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	0013      	movs	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	189b      	adds	r3, r3, r2
 8002302:	18cb      	adds	r3, r1, r3
 8002304:	330d      	adds	r3, #13
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	0013      	movs	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	189b      	adds	r3, r3, r2
 8002314:	18cb      	adds	r3, r1, r3
 8002316:	330e      	adds	r3, #14
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e7db      	b.n	80022dc <_ZN6WS28125clearEv+0xc>
    }
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZN6WS28127set_hsvEhiii>:

void WS2812::set_hsv(uint8_t id, int h, int s, int v){
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b08e      	sub	sp, #56	; 0x38
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	230b      	movs	r3, #11
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	1c0a      	adds	r2, r1, #0
 800233e:	701a      	strb	r2, [r3, #0]
	int r,g,b;
	if (s == 0) {
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <_ZN6WS28127set_hsvEhiii+0x28>
	    r = g = b = v;
 8002346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002352:	e077      	b.n	8002444 <_ZN6WS28127set_hsvEhiii+0x118>
	}else{
	    h = h * 6; // sector 0 to 5
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	0013      	movs	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	189b      	adds	r3, r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	607b      	str	r3, [r7, #4]
	    int i = h / 256;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	da00      	bge.n	8002368 <_ZN6WS28127set_hsvEhiii+0x3c>
 8002366:	33ff      	adds	r3, #255	; 0xff
 8002368:	121b      	asrs	r3, r3, #8
 800236a:	623b      	str	r3, [r7, #32]
	    int f = h % 256;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <_ZN6WS28127set_hsvEhiii+0x140>)
 8002370:	4013      	ands	r3, r2
 8002372:	d503      	bpl.n	800237c <_ZN6WS28127set_hsvEhiii+0x50>
 8002374:	3b01      	subs	r3, #1
 8002376:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <_ZN6WS28127set_hsvEhiii+0x144>)
 8002378:	4313      	orrs	r3, r2
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
	    int p = (v * (256 - s)) / 256;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	0052      	lsls	r2, r2, #1
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002388:	4353      	muls	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	da00      	bge.n	8002390 <_ZN6WS28127set_hsvEhiii+0x64>
 800238e:	33ff      	adds	r3, #255	; 0xff
 8002390:	121b      	asrs	r3, r3, #8
 8002392:	61bb      	str	r3, [r7, #24]
	    int q = (v * (256 - (s * f) / 256)) / 256;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	4353      	muls	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	da00      	bge.n	80023a0 <_ZN6WS28127set_hsvEhiii+0x74>
 800239e:	33ff      	adds	r3, #255	; 0xff
 80023a0:	121b      	asrs	r3, r3, #8
 80023a2:	425b      	negs	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	33ff      	adds	r3, #255	; 0xff
 80023a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023aa:	4353      	muls	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da00      	bge.n	80023b2 <_ZN6WS28127set_hsvEhiii+0x86>
 80023b0:	33ff      	adds	r3, #255	; 0xff
 80023b2:	121b      	asrs	r3, r3, #8
 80023b4:	617b      	str	r3, [r7, #20]
	    int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	0052      	lsls	r2, r2, #1
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4353      	muls	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da00      	bge.n	80023c8 <_ZN6WS28127set_hsvEhiii+0x9c>
 80023c6:	33ff      	adds	r3, #255	; 0xff
 80023c8:	121b      	asrs	r3, r3, #8
 80023ca:	425b      	negs	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	33ff      	adds	r3, #255	; 0xff
 80023d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023d2:	4353      	muls	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da00      	bge.n	80023da <_ZN6WS28127set_hsvEhiii+0xae>
 80023d8:	33ff      	adds	r3, #255	; 0xff
 80023da:	121b      	asrs	r3, r3, #8
 80023dc:	613b      	str	r3, [r7, #16]

	    switch (i) {
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d828      	bhi.n	8002436 <_ZN6WS28127set_hsvEhiii+0x10a>
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	009a      	lsls	r2, r3, #2
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <_ZN6WS28127set_hsvEhiii+0x148>)
 80023ea:	18d3      	adds	r3, r2, r3
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	469f      	mov	pc, r3
	        case 0: r = v; g = t; b = p; break;
 80023f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	e022      	b.n	8002444 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 1: r = q; g = v; b = p; break;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e01b      	b.n	8002444 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 2: r = p; g = v; b = t; break;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	e014      	b.n	8002444 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 3: r = p; g = q; b = v; break;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
 8002426:	e00d      	b.n	8002444 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 4: r = t; g = p; b = v; break;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	e006      	b.n	8002444 <_ZN6WS28127set_hsvEhiii+0x118>
	        default: r = v; g = p;b = q; break;
 8002436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
 8002442:	46c0      	nop			; (mov r8, r8)
	    }
	}
	set_rgb(id, r, g, b);
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	b2dc      	uxtb	r4, r3
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	b2dd      	uxtb	r5, r3
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	b2db      	uxtb	r3, r3
 8002450:	220b      	movs	r2, #11
 8002452:	18ba      	adds	r2, r7, r2
 8002454:	7811      	ldrb	r1, [r2, #0]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	002b      	movs	r3, r5
 800245c:	0022      	movs	r2, r4
 800245e:	f000 f80b 	bl	8002478 <_ZN6WS28127set_rgbEhhhh>

}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b00c      	add	sp, #48	; 0x30
 8002468:	bdb0      	pop	{r4, r5, r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	800000ff 	.word	0x800000ff
 8002470:	ffffff00 	.word	0xffffff00
 8002474:	08006750 	.word	0x08006750

08002478 <_ZN6WS28127set_rgbEhhhh>:

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	000c      	movs	r4, r1
 8002482:	0010      	movs	r0, r2
 8002484:	0019      	movs	r1, r3
 8002486:	1cfb      	adds	r3, r7, #3
 8002488:	1c22      	adds	r2, r4, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	1cbb      	adds	r3, r7, #2
 800248e:	1c02      	adds	r2, r0, #0
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	1c7b      	adds	r3, r7, #1
 8002494:	1c0a      	adds	r2, r1, #0
 8002496:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8002498:	1cfb      	adds	r3, r7, #3
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	0013      	movs	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	18cb      	adds	r3, r1, r3
 80024a6:	330c      	adds	r3, #12
 80024a8:	1cba      	adds	r2, r7, #2
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 80024ae:	1cfb      	adds	r3, r7, #3
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	0013      	movs	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	189b      	adds	r3, r3, r2
 80024ba:	18cb      	adds	r3, r1, r3
 80024bc:	330d      	adds	r3, #13
 80024be:	1c7a      	adds	r2, r7, #1
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 80024c4:	1cfb      	adds	r3, r7, #3
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	0013      	movs	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	18cb      	adds	r3, r1, r3
 80024d2:	330e      	adds	r3, #14
 80024d4:	001a      	movs	r2, r3
 80024d6:	2318      	movs	r3, #24
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	7013      	strb	r3, [r2, #0]
}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b003      	add	sp, #12
 80024e4:	bd90      	pop	{r4, r7, pc}
	...

080024e8 <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	23d0      	movs	r3, #208	; 0xd0
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	58d2      	ldr	r2, [r2, r3]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d86e      	bhi.n	80025de <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b07      	cmp	r3, #7
 8002508:	d85f      	bhi.n	80025ca <_ZN6WS281217do_forwardRewriteEv+0xe2>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	23d0      	movs	r3, #208	; 0xd0
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	58d2      	ldr	r2, [r2, r3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	0013      	movs	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	189b      	adds	r3, r3, r2
 800251a:	18cb      	adds	r3, r1, r3
 800251c:	330d      	adds	r3, #13
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	0019      	movs	r1, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2207      	movs	r2, #7
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	4119      	asrs	r1, r3
 800252a:	000b      	movs	r3, r1
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	d001      	beq.n	8002536 <_ZN6WS281217do_forwardRewriteEv+0x4e>
 8002532:	200a      	movs	r0, #10
 8002534:	e000      	b.n	8002538 <_ZN6WS281217do_forwardRewriteEv+0x50>
 8002536:	2005      	movs	r0, #5
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	493f      	ldr	r1, [pc, #252]	; (8002638 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	18d3      	adds	r3, r2, r3
 8002540:	185b      	adds	r3, r3, r1
 8002542:	1c02      	adds	r2, r0, #0
 8002544:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	23d0      	movs	r3, #208	; 0xd0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	58d2      	ldr	r2, [r2, r3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	0013      	movs	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	189b      	adds	r3, r3, r2
 8002556:	18cb      	adds	r3, r1, r3
 8002558:	330c      	adds	r3, #12
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	0019      	movs	r1, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2207      	movs	r2, #7
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4119      	asrs	r1, r3
 8002566:	000b      	movs	r3, r1
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	d001      	beq.n	8002572 <_ZN6WS281217do_forwardRewriteEv+0x8a>
 800256e:	200a      	movs	r0, #10
 8002570:	e000      	b.n	8002574 <_ZN6WS281217do_forwardRewriteEv+0x8c>
 8002572:	2005      	movs	r0, #5
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3308      	adds	r3, #8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	492f      	ldr	r1, [pc, #188]	; (8002638 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800257c:	18d3      	adds	r3, r2, r3
 800257e:	185b      	adds	r3, r3, r1
 8002580:	1c02      	adds	r2, r0, #0
 8002582:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	23d0      	movs	r3, #208	; 0xd0
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	58d2      	ldr	r2, [r2, r3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	0013      	movs	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	189b      	adds	r3, r3, r2
 8002594:	18cb      	adds	r3, r1, r3
 8002596:	330e      	adds	r3, #14
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0019      	movs	r1, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2207      	movs	r2, #7
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	4119      	asrs	r1, r3
 80025a4:	000b      	movs	r3, r1
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d001      	beq.n	80025b0 <_ZN6WS281217do_forwardRewriteEv+0xc8>
 80025ac:	200a      	movs	r0, #10
 80025ae:	e000      	b.n	80025b2 <_ZN6WS281217do_forwardRewriteEv+0xca>
 80025b0:	2005      	movs	r0, #5
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3310      	adds	r3, #16
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	491f      	ldr	r1, [pc, #124]	; (8002638 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80025ba:	18d3      	adds	r3, r2, r3
 80025bc:	185b      	adds	r3, r3, r1
 80025be:	1c02      	adds	r2, r0, #0
 80025c0:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e79c      	b.n	8002504 <_ZN6WS281217do_forwardRewriteEv+0x1c>
        }
        wr_buf_p++;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	23d0      	movs	r3, #208	; 0xd0
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	58d3      	ldr	r3, [r2, r3]
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	23d0      	movs	r3, #208	; 0xd0
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 80025dc:	e027      	b.n	800262e <_ZN6WS281217do_forwardRewriteEv+0x146>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	23d0      	movs	r3, #208	; 0xd0
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	58d2      	ldr	r2, [r2, r3]
 80025e6:	2381      	movs	r3, #129	; 0x81
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d81f      	bhi.n	800262e <_ZN6WS281217do_forwardRewriteEv+0x146>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 80025ee:	230b      	movs	r3, #11
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	200b      	movs	r0, #11
 80025f8:	183b      	adds	r3, r7, r0
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b17      	cmp	r3, #23
 80025fe:	d80d      	bhi.n	800261c <_ZN6WS281217do_forwardRewriteEv+0x134>
 8002600:	183b      	adds	r3, r7, r0
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	490c      	ldr	r1, [pc, #48]	; (8002638 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8002608:	18d3      	adds	r3, r2, r3
 800260a:	185b      	adds	r3, r3, r1
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	183b      	adds	r3, r7, r0
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	183b      	adds	r3, r7, r0
 8002616:	3201      	adds	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e7ec      	b.n	80025f6 <_ZN6WS281217do_forwardRewriteEv+0x10e>
        wr_buf_p++;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	23d0      	movs	r3, #208	; 0xd0
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	58d3      	ldr	r3, [r2, r3]
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	23d0      	movs	r3, #208	; 0xd0
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	50d1      	str	r1, [r2, r3]
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b004      	add	sp, #16
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	0000030f 	.word	0x0000030f

0800263c <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	23d0      	movs	r3, #208	; 0xd0
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	58d2      	ldr	r2, [r2, r3]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	429a      	cmp	r2, r3
 8002652:	d86f      	bhi.n	8002734 <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b07      	cmp	r3, #7
 800265c:	d860      	bhi.n	8002720 <_ZN6WS281214do_backRewriteEv+0xe4>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	23d0      	movs	r3, #208	; 0xd0
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	58d2      	ldr	r2, [r2, r3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	0013      	movs	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	189b      	adds	r3, r3, r2
 800266e:	18cb      	adds	r3, r1, r3
 8002670:	330d      	adds	r3, #13
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	0019      	movs	r1, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2207      	movs	r2, #7
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	4119      	asrs	r1, r3
 800267e:	000b      	movs	r3, r1
 8002680:	2201      	movs	r2, #1
 8002682:	4013      	ands	r3, r2
 8002684:	d001      	beq.n	800268a <_ZN6WS281214do_backRewriteEv+0x4e>
 8002686:	200a      	movs	r0, #10
 8002688:	e000      	b.n	800268c <_ZN6WS281214do_backRewriteEv+0x50>
 800268a:	2005      	movs	r0, #5
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3318      	adds	r3, #24
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4945      	ldr	r1, [pc, #276]	; (80027a8 <_ZN6WS281214do_backRewriteEv+0x16c>)
 8002694:	18d3      	adds	r3, r2, r3
 8002696:	185b      	adds	r3, r3, r1
 8002698:	1c02      	adds	r2, r0, #0
 800269a:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	23d0      	movs	r3, #208	; 0xd0
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	58d2      	ldr	r2, [r2, r3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	0013      	movs	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	18cb      	adds	r3, r1, r3
 80026ae:	330c      	adds	r3, #12
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	0019      	movs	r1, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2207      	movs	r2, #7
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	4119      	asrs	r1, r3
 80026bc:	000b      	movs	r3, r1
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	d001      	beq.n	80026c8 <_ZN6WS281214do_backRewriteEv+0x8c>
 80026c4:	200a      	movs	r0, #10
 80026c6:	e000      	b.n	80026ca <_ZN6WS281214do_backRewriteEv+0x8e>
 80026c8:	2005      	movs	r0, #5
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3320      	adds	r3, #32
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4935      	ldr	r1, [pc, #212]	; (80027a8 <_ZN6WS281214do_backRewriteEv+0x16c>)
 80026d2:	18d3      	adds	r3, r2, r3
 80026d4:	185b      	adds	r3, r3, r1
 80026d6:	1c02      	adds	r2, r0, #0
 80026d8:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	23d0      	movs	r3, #208	; 0xd0
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	58d2      	ldr	r2, [r2, r3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	0013      	movs	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	18cb      	adds	r3, r1, r3
 80026ec:	330e      	adds	r3, #14
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	0019      	movs	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2207      	movs	r2, #7
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4119      	asrs	r1, r3
 80026fa:	000b      	movs	r3, r1
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	d001      	beq.n	8002706 <_ZN6WS281214do_backRewriteEv+0xca>
 8002702:	200a      	movs	r0, #10
 8002704:	e000      	b.n	8002708 <_ZN6WS281214do_backRewriteEv+0xcc>
 8002706:	2005      	movs	r0, #5
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3328      	adds	r3, #40	; 0x28
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4926      	ldr	r1, [pc, #152]	; (80027a8 <_ZN6WS281214do_backRewriteEv+0x16c>)
 8002710:	18d3      	adds	r3, r2, r3
 8002712:	185b      	adds	r3, r3, r1
 8002714:	1c02      	adds	r2, r0, #0
 8002716:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e79b      	b.n	8002658 <_ZN6WS281214do_backRewriteEv+0x1c>
        }
        wr_buf_p++;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	23d0      	movs	r3, #208	; 0xd0
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	58d3      	ldr	r3, [r2, r3]
 8002728:	1c59      	adds	r1, r3, #1
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	23d0      	movs	r3, #208	; 0xd0
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 8002732:	e035      	b.n	80027a0 <_ZN6WS281214do_backRewriteEv+0x164>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	23d0      	movs	r3, #208	; 0xd0
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	58d2      	ldr	r2, [r2, r3]
 800273c:	2381      	movs	r3, #129	; 0x81
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	429a      	cmp	r2, r3
 8002742:	d820      	bhi.n	8002786 <_ZN6WS281214do_backRewriteEv+0x14a>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 8002744:	230b      	movs	r3, #11
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2218      	movs	r2, #24
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	200b      	movs	r0, #11
 800274e:	183b      	adds	r3, r7, r0
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b2f      	cmp	r3, #47	; 0x2f
 8002754:	d80d      	bhi.n	8002772 <_ZN6WS281214do_backRewriteEv+0x136>
 8002756:	183b      	adds	r3, r7, r0
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4912      	ldr	r1, [pc, #72]	; (80027a8 <_ZN6WS281214do_backRewriteEv+0x16c>)
 800275e:	18d3      	adds	r3, r2, r3
 8002760:	185b      	adds	r3, r3, r1
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	183b      	adds	r3, r7, r0
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	183b      	adds	r3, r7, r0
 800276c:	3201      	adds	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e7ec      	b.n	800274c <_ZN6WS281214do_backRewriteEv+0x110>
        wr_buf_p++;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	23d0      	movs	r3, #208	; 0xd0
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	58d3      	ldr	r3, [r2, r3]
 800277a:	1c59      	adds	r1, r3, #1
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	23d0      	movs	r3, #208	; 0xd0
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	50d1      	str	r1, [r2, r3]
}
 8002784:	e00c      	b.n	80027a0 <_ZN6WS281214do_backRewriteEv+0x164>
        wr_buf_p = 0;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	23d0      	movs	r3, #208	; 0xd0
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	2100      	movs	r1, #0
 800278e:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	0019      	movs	r1, r3
 800279a:	0010      	movs	r0, r2
 800279c:	f001 fdbc 	bl	8004318 <HAL_TIM_PWM_Stop_DMA>
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	0000030f 	.word	0x0000030f

080027ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027b0:	f7ff fcda 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b6:	490d      	ldr	r1, [pc, #52]	; (80027ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <LoopForever+0xe>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027cc:	4c0a      	ldr	r4, [pc, #40]	; (80027f8 <LoopForever+0x16>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027da:	f003 ff31 	bl	8006640 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027de:	f7ff f90b 	bl	80019f8 <main>

080027e2 <LoopForever>:

LoopForever:
  b LoopForever
 80027e2:	e7fe      	b.n	80027e2 <LoopForever>
  ldr   r0, =_estack
 80027e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80027f0:	08006bac 	.word	0x08006bac
  ldr r2, =_sbss
 80027f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027f8:	20000524 	.word	0x20000524

080027fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_IRQHandler>
	...

08002800 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_Init+0x3c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_Init+0x3c>)
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	0049      	lsls	r1, r1, #1
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800281a:	2003      	movs	r0, #3
 800281c:	f000 f810 	bl	8002840 <HAL_InitTick>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d003      	beq.n	800282c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e001      	b.n	8002830 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800282c:	f7ff fb44 	bl	8001eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_InitTick+0x88>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02b      	beq.n	80028b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_InitTick+0x8c>)
 800285a:	681c      	ldr	r4, [r3, #0]
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_InitTick+0x88>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	0019      	movs	r1, r3
 8002862:	23fa      	movs	r3, #250	; 0xfa
 8002864:	0098      	lsls	r0, r3, #2
 8002866:	f7fd fc4b 	bl	8000100 <__udivsi3>
 800286a:	0003      	movs	r3, r0
 800286c:	0019      	movs	r1, r3
 800286e:	0020      	movs	r0, r4
 8002870:	f7fd fc46 	bl	8000100 <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f93d 	bl	8002af6 <HAL_SYSTICK_Config>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d112      	bne.n	80028a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d80a      	bhi.n	800289c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	2301      	movs	r3, #1
 800288a:	425b      	negs	r3, r3
 800288c:	2200      	movs	r2, #0
 800288e:	0018      	movs	r0, r3
 8002890:	f000 f90c 	bl	8002aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_InitTick+0x90>)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00d      	b.n	80028b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e008      	b.n	80028b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e003      	b.n	80028b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80028b8:	230f      	movs	r3, #15
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b005      	add	sp, #20
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	20000008 	.word	0x20000008
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000004 	.word	0x20000004

080028d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_IncTick+0x1c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	001a      	movs	r2, r3
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_IncTick+0x20>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	18d2      	adds	r2, r2, r3
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_IncTick+0x20>)
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000520 	.word	0x20000520

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <HAL_GetTick+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000520 	.word	0x20000520

0800290c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fff0 	bl	80028f8 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3301      	adds	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_Delay+0x44>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	001a      	movs	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	189b      	adds	r3, r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	f7ff ffe0 	bl	80028f8 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d8f7      	bhi.n	8002934 <HAL_Delay+0x28>
  {
  }
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000008 	.word	0x20000008

08002954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b7f      	cmp	r3, #127	; 0x7f
 8002966:	d809      	bhi.n	800297c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	001a      	movs	r2, r3
 800296e:	231f      	movs	r3, #31
 8002970:	401a      	ands	r2, r3
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <__NVIC_EnableIRQ+0x30>)
 8002974:	2101      	movs	r1, #1
 8002976:	4091      	lsls	r1, r2
 8002978:	000a      	movs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	0002      	movs	r2, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b7f      	cmp	r3, #127	; 0x7f
 800299c:	d828      	bhi.n	80029f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800299e:	4a2f      	ldr	r2, [pc, #188]	; (8002a5c <__NVIC_SetPriority+0xd4>)
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	33c0      	adds	r3, #192	; 0xc0
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	589b      	ldr	r3, [r3, r2]
 80029ae:	1dfa      	adds	r2, r7, #7
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	0011      	movs	r1, r2
 80029b4:	2203      	movs	r2, #3
 80029b6:	400a      	ands	r2, r1
 80029b8:	00d2      	lsls	r2, r2, #3
 80029ba:	21ff      	movs	r1, #255	; 0xff
 80029bc:	4091      	lsls	r1, r2
 80029be:	000a      	movs	r2, r1
 80029c0:	43d2      	mvns	r2, r2
 80029c2:	401a      	ands	r2, r3
 80029c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	401a      	ands	r2, r3
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	0018      	movs	r0, r3
 80029d4:	2303      	movs	r3, #3
 80029d6:	4003      	ands	r3, r0
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029dc:	481f      	ldr	r0, [pc, #124]	; (8002a5c <__NVIC_SetPriority+0xd4>)
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	430a      	orrs	r2, r1
 80029e8:	33c0      	adds	r3, #192	; 0xc0
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029ee:	e031      	b.n	8002a54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <__NVIC_SetPriority+0xd8>)
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	0019      	movs	r1, r3
 80029f8:	230f      	movs	r3, #15
 80029fa:	400b      	ands	r3, r1
 80029fc:	3b08      	subs	r3, #8
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3306      	adds	r3, #6
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	18d3      	adds	r3, r2, r3
 8002a06:	3304      	adds	r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1dfa      	adds	r2, r7, #7
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	0011      	movs	r1, r2
 8002a10:	2203      	movs	r2, #3
 8002a12:	400a      	ands	r2, r1
 8002a14:	00d2      	lsls	r2, r2, #3
 8002a16:	21ff      	movs	r1, #255	; 0xff
 8002a18:	4091      	lsls	r1, r2
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	43d2      	mvns	r2, r2
 8002a1e:	401a      	ands	r2, r3
 8002a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	401a      	ands	r2, r3
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	2303      	movs	r3, #3
 8002a32:	4003      	ands	r3, r0
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a38:	4809      	ldr	r0, [pc, #36]	; (8002a60 <__NVIC_SetPriority+0xd8>)
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	001c      	movs	r4, r3
 8002a40:	230f      	movs	r3, #15
 8002a42:	4023      	ands	r3, r4
 8002a44:	3b08      	subs	r3, #8
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	3306      	adds	r3, #6
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	18c3      	adds	r3, r0, r3
 8002a50:	3304      	adds	r3, #4
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b003      	add	sp, #12
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	045b      	lsls	r3, r3, #17
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d301      	bcc.n	8002a7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e010      	b.n	8002a9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <SysTick_Config+0x44>)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	3a01      	subs	r2, #1
 8002a82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a84:	2301      	movs	r3, #1
 8002a86:	425b      	negs	r3, r3
 8002a88:	2103      	movs	r1, #3
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7ff ff7c 	bl	8002988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x44>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x44>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b002      	add	sp, #8
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	1c02      	adds	r2, r0, #0
 8002abc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff ff5d 	bl	8002988 <__NVIC_SetPriority>
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	0002      	movs	r2, r0
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff ff33 	bl	8002954 <__NVIC_EnableIRQ>
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff ffaf 	bl	8002a64 <SysTick_Config>
 8002b06:	0003      	movs	r3, r0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e077      	b.n	8002c12 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a3d      	ldr	r2, [pc, #244]	; (8002c1c <HAL_DMA_Init+0x10c>)
 8002b28:	4694      	mov	ip, r2
 8002b2a:	4463      	add	r3, ip
 8002b2c:	2114      	movs	r1, #20
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fd fae6 	bl	8000100 <__udivsi3>
 8002b34:	0003      	movs	r3, r0
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2225      	movs	r2, #37	; 0x25
 8002b40:	2102      	movs	r1, #2
 8002b42:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4934      	ldr	r1, [pc, #208]	; (8002c20 <HAL_DMA_Init+0x110>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 fa2b 	bl	8002fe8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	01db      	lsls	r3, r3, #7
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d102      	bne.n	8002ba4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	213f      	movs	r1, #63	; 0x3f
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d011      	beq.n	8002be8 <HAL_DMA_Init+0xd8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d80d      	bhi.n	8002be8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fa36 	bl	8003040 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	e008      	b.n	8002bfa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2225      	movs	r2, #37	; 0x25
 8002c04:	2101      	movs	r1, #1
 8002c06:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	bffdfff8 	.word	0xbffdfff8
 8002c20:	ffff800f 	.word	0xffff800f

08002c24 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2317      	movs	r3, #23
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2224      	movs	r2, #36	; 0x24
 8002c3e:	5c9b      	ldrb	r3, [r3, r2]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_DMA_Start_IT+0x24>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e06f      	b.n	8002d28 <HAL_DMA_Start_IT+0x104>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2225      	movs	r2, #37	; 0x25
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d157      	bne.n	8002d0c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2225      	movs	r2, #37	; 0x25
 8002c60:	2102      	movs	r1, #2
 8002c62:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	438a      	bics	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f971 	bl	8002f68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	210e      	movs	r1, #14
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e00f      	b.n	8002cc0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2104      	movs	r1, #4
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	210a      	movs	r1, #10
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	025b      	lsls	r3, r3, #9
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d008      	beq.n	8002ce0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	0049      	lsls	r1, r1, #1
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0049      	lsls	r1, r1, #1
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e00a      	b.n	8002d22 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2224      	movs	r2, #36	; 0x24
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002d1a:	2317      	movs	r3, #23
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002d22:	2317      	movs	r3, #23
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	781b      	ldrb	r3, [r3, #0]
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b006      	add	sp, #24
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	210f      	movs	r1, #15
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2225      	movs	r2, #37	; 0x25
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d006      	beq.n	8002d5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e049      	b.n	8002dee <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	210e      	movs	r1, #14
 8002d66:	438a      	bics	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	438a      	bics	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	491d      	ldr	r1, [pc, #116]	; (8002dfc <HAL_DMA_Abort_IT+0xcc>)
 8002d86:	400a      	ands	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_DMA_Abort_IT+0xd0>)
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	221c      	movs	r2, #28
 8002d94:	4013      	ands	r3, r2
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_DMA_Abort_IT+0xd0>)
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002da8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbc:	490f      	ldr	r1, [pc, #60]	; (8002dfc <HAL_DMA_Abort_IT+0xcc>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002dca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2225      	movs	r2, #37	; 0x25
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	0010      	movs	r0, r2
 8002dec:	4798      	blx	r3
    }
  }
  return status;
 8002dee:	230f      	movs	r3, #15
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	fffffeff 	.word	0xfffffeff
 8002e00:	40020000 	.word	0x40020000

08002e04 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	221c      	movs	r2, #28
 8002e20:	4013      	ands	r3, r2
 8002e22:	2204      	movs	r2, #4
 8002e24:	409a      	lsls	r2, r3
 8002e26:	0013      	movs	r3, r2
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d027      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x7a>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	d023      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d107      	bne.n	8002e52 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	438a      	bics	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	221c      	movs	r2, #28
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2204      	movs	r2, #4
 8002e60:	409a      	lsls	r2, r3
 8002e62:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d100      	bne.n	8002e72 <HAL_DMA_IRQHandler+0x6e>
 8002e70:	e073      	b.n	8002f5a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	0010      	movs	r0, r2
 8002e7a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002e7c:	e06d      	b.n	8002f5a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	221c      	movs	r2, #28
 8002e84:	4013      	ands	r3, r2
 8002e86:	2202      	movs	r2, #2
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d02e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0xec>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d02a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d10b      	bne.n	8002ebe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	210a      	movs	r1, #10
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2225      	movs	r2, #37	; 0x25
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	221c      	movs	r2, #28
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2202      	movs	r2, #2
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d03a      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	0010      	movs	r0, r2
 8002eec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002eee:	e034      	b.n	8002f5a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	221c      	movs	r2, #28
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2208      	movs	r2, #8
 8002efa:	409a      	lsls	r2, r3
 8002efc:	0013      	movs	r3, r2
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	d02b      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x158>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2208      	movs	r2, #8
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d027      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	210e      	movs	r1, #14
 8002f18:	438a      	bics	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	221c      	movs	r2, #28
 8002f26:	4013      	ands	r3, r2
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_DMA_IRQHandler+0x160>)
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2225      	movs	r2, #37	; 0x25
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	0010      	movs	r0, r2
 8002f58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46c0      	nop			; (mov r8, r8)
}
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b004      	add	sp, #16
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40020000 	.word	0x40020000

08002f68 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f90:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <DMA_SetConfig+0x7c>)
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	221c      	movs	r2, #28
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <DMA_SetConfig+0x7c>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d108      	bne.n	8002fca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fc8:	e007      	b.n	8002fda <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	60da      	str	r2, [r3, #12]
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ff8:	4694      	mov	ip, r2
 8002ffa:	4463      	add	r3, ip
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	001a      	movs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	001a      	movs	r2, r3
 800300a:	23ff      	movs	r3, #255	; 0xff
 800300c:	4013      	ands	r3, r2
 800300e:	3b08      	subs	r3, #8
 8003010:	2114      	movs	r1, #20
 8003012:	0018      	movs	r0, r3
 8003014:	f7fd f874 	bl	8000100 <__udivsi3>
 8003018:	0003      	movs	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003020:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	221f      	movs	r2, #31
 8003026:	4013      	ands	r3, r2
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	10008200 	.word	0x10008200
 800303c:	40020880 	.word	0x40020880

08003040 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	223f      	movs	r2, #63	; 0x3f
 800304e:	4013      	ands	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003056:	4694      	mov	ip, r2
 8003058:	4463      	add	r3, ip
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	001a      	movs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003066:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3b01      	subs	r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	2201      	movs	r2, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}
 8003080:	1000823f 	.word	0x1000823f
 8003084:	40020940 	.word	0x40020940

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e147      	b.n	8003328 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4091      	lsls	r1, r2
 80030a2:	000a      	movs	r2, r1
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d100      	bne.n	80030b0 <HAL_GPIO_Init+0x28>
 80030ae:	e138      	b.n	8003322 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	409a      	lsls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	43da      	mvns	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	409a      	lsls	r2, r3
 80030ea:	0013      	movs	r3, r2
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
 8003104:	0013      	movs	r3, r2
 8003106:	43da      	mvns	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	2201      	movs	r2, #1
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
 800311c:	0013      	movs	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2203      	movs	r2, #3
 8003130:	4013      	ands	r3, r2
 8003132:	2b03      	cmp	r3, #3
 8003134:	d017      	beq.n	8003166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	0013      	movs	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	4013      	ands	r3, r2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d123      	bne.n	80031ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	58d3      	ldr	r3, [r2, r3]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2207      	movs	r2, #7
 8003184:	4013      	ands	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	43da      	mvns	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2107      	movs	r1, #7
 800319e:	400b      	ands	r3, r1
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	409a      	lsls	r2, r3
 80031a4:	0013      	movs	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	43da      	mvns	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2203      	movs	r2, #3
 80031d8:	401a      	ands	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	0013      	movs	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	4013      	ands	r3, r2
 80031f8:	d100      	bne.n	80031fc <HAL_GPIO_Init+0x174>
 80031fa:	e092      	b.n	8003322 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031fc:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3318      	adds	r3, #24
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	589b      	ldr	r3, [r3, r2]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2203      	movs	r2, #3
 800320e:	4013      	ands	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	220f      	movs	r2, #15
 8003214:	409a      	lsls	r2, r3
 8003216:	0013      	movs	r3, r2
 8003218:	43da      	mvns	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23a0      	movs	r3, #160	; 0xa0
 8003224:	05db      	lsls	r3, r3, #23
 8003226:	429a      	cmp	r2, r3
 8003228:	d013      	beq.n	8003252 <HAL_GPIO_Init+0x1ca>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a45      	ldr	r2, [pc, #276]	; (8003344 <HAL_GPIO_Init+0x2bc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00d      	beq.n	800324e <HAL_GPIO_Init+0x1c6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a44      	ldr	r2, [pc, #272]	; (8003348 <HAL_GPIO_Init+0x2c0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <HAL_GPIO_Init+0x1c2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a43      	ldr	r2, [pc, #268]	; (800334c <HAL_GPIO_Init+0x2c4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_GPIO_Init+0x1be>
 8003242:	2303      	movs	r3, #3
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 8003246:	2305      	movs	r3, #5
 8003248:	e004      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_Init+0x1cc>
 8003252:	2300      	movs	r3, #0
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	2103      	movs	r1, #3
 8003258:	400a      	ands	r2, r1
 800325a:	00d2      	lsls	r2, r2, #3
 800325c:	4093      	lsls	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003264:	4936      	ldr	r1, [pc, #216]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3318      	adds	r3, #24
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43da      	mvns	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	035b      	lsls	r3, r3, #13
 800328a:	4013      	ands	r3, r2
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	039b      	lsls	r3, r3, #14
 80032b4:	4013      	ands	r3, r2
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032c6:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032c8:	2384      	movs	r3, #132	; 0x84
 80032ca:	58d3      	ldr	r3, [r2, r3]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ec:	4914      	ldr	r1, [pc, #80]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032ee:	2284      	movs	r2, #132	; 0x84
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032f4:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	58d3      	ldr	r3, [r2, r3]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43da      	mvns	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	4013      	ands	r3, r2
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331a:	4909      	ldr	r1, [pc, #36]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	40da      	lsrs	r2, r3
 8003330:	1e13      	subs	r3, r2, #0
 8003332:	d000      	beq.n	8003336 <HAL_GPIO_Init+0x2ae>
 8003334:	e6b0      	b.n	8003098 <HAL_GPIO_Init+0x10>
  }
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021800 	.word	0x40021800
 8003344:	50000400 	.word	0x50000400
 8003348:	50000800 	.word	0x50000800
 800334c:	50000c00 	.word	0x50000c00

08003350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	000a      	movs	r2, r1
 800335a:	1cbb      	adds	r3, r7, #2
 800335c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	1cba      	adds	r2, r7, #2
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	4013      	ands	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800336a:	230f      	movs	r3, #15
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e003      	b.n	800337c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003374:	230f      	movs	r3, #15
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800337c:	230f      	movs	r3, #15
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	781b      	ldrb	r3, [r3, #0]
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b004      	add	sp, #16
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	0008      	movs	r0, r1
 8003394:	0011      	movs	r1, r2
 8003396:	1cbb      	adds	r3, r7, #2
 8003398:	1c02      	adds	r2, r0, #0
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	1c7b      	adds	r3, r7, #1
 800339e:	1c0a      	adds	r2, r1, #0
 80033a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a2:	1c7b      	adds	r3, r7, #1
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033aa:	1cbb      	adds	r3, r7, #2
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033b2:	e003      	b.n	80033bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033b4:	1cbb      	adds	r3, r7, #2
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a19      	ldr	r2, [pc, #100]	; (8003438 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d11f      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	0013      	movs	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4912      	ldr	r1, [pc, #72]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7fc fe82 	bl	8000100 <__udivsi3>
 80033fc:	0003      	movs	r3, r0
 80033fe:	3301      	adds	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003402:	e008      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e001      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e009      	b.n	800342a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	401a      	ands	r2, r3
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	429a      	cmp	r2, r3
 8003426:	d0ed      	beq.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	0018      	movs	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	b004      	add	sp, #16
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	40007000 	.word	0x40007000
 8003438:	fffff9ff 	.word	0xfffff9ff
 800343c:	20000000 	.word	0x20000000
 8003440:	000f4240 	.word	0x000f4240

08003444 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <LL_RCC_GetAPB1Prescaler+0x14>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	23e0      	movs	r3, #224	; 0xe0
 800344e:	01db      	lsls	r3, r3, #7
 8003450:	4013      	ands	r3, r2
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e2f3      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	4013      	ands	r3, r2
 8003476:	d100      	bne.n	800347a <HAL_RCC_OscConfig+0x1e>
 8003478:	e07c      	b.n	8003574 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	4bc3      	ldr	r3, [pc, #780]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2238      	movs	r2, #56	; 0x38
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003484:	4bc0      	ldr	r3, [pc, #768]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2203      	movs	r2, #3
 800348a:	4013      	ands	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b10      	cmp	r3, #16
 8003492:	d102      	bne.n	800349a <HAL_RCC_OscConfig+0x3e>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d10b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	4bb9      	ldr	r3, [pc, #740]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	4013      	ands	r3, r2
 80034aa:	d062      	beq.n	8003572 <HAL_RCC_OscConfig+0x116>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d15e      	bne.n	8003572 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e2ce      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	025b      	lsls	r3, r3, #9
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x78>
 80034c4:	4bb0      	ldr	r3, [pc, #704]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4baf      	ldr	r3, [pc, #700]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	0249      	lsls	r1, r1, #9
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e020      	b.n	8003516 <HAL_RCC_OscConfig+0xba>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	23a0      	movs	r3, #160	; 0xa0
 80034da:	02db      	lsls	r3, r3, #11
 80034dc:	429a      	cmp	r2, r3
 80034de:	d10e      	bne.n	80034fe <HAL_RCC_OscConfig+0xa2>
 80034e0:	4ba9      	ldr	r3, [pc, #676]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4ba8      	ldr	r3, [pc, #672]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	02c9      	lsls	r1, r1, #11
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	4ba6      	ldr	r3, [pc, #664]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4ba5      	ldr	r3, [pc, #660]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	0249      	lsls	r1, r1, #9
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e00b      	b.n	8003516 <HAL_RCC_OscConfig+0xba>
 80034fe:	4ba2      	ldr	r3, [pc, #648]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4ba1      	ldr	r3, [pc, #644]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003504:	49a1      	ldr	r1, [pc, #644]	; (800378c <HAL_RCC_OscConfig+0x330>)
 8003506:	400a      	ands	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	4b9f      	ldr	r3, [pc, #636]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b9e      	ldr	r3, [pc, #632]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003510:	499f      	ldr	r1, [pc, #636]	; (8003790 <HAL_RCC_OscConfig+0x334>)
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d014      	beq.n	8003548 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7ff f9eb 	bl	80028f8 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003528:	f7ff f9e6 	bl	80028f8 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e28d      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	4b93      	ldr	r3, [pc, #588]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	029b      	lsls	r3, r3, #10
 8003542:	4013      	ands	r3, r2
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xcc>
 8003546:	e015      	b.n	8003574 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7ff f9d6 	bl	80028f8 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003552:	f7ff f9d1 	bl	80028f8 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b64      	cmp	r3, #100	; 0x64
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e278      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003564:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	4013      	ands	r3, r2
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0xf6>
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003572:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2202      	movs	r2, #2
 800357a:	4013      	ands	r3, r2
 800357c:	d100      	bne.n	8003580 <HAL_RCC_OscConfig+0x124>
 800357e:	e099      	b.n	80036b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003580:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2238      	movs	r2, #56	; 0x38
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800358a:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2203      	movs	r2, #3
 8003590:	4013      	ands	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d102      	bne.n	80035a0 <HAL_RCC_OscConfig+0x144>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d002      	beq.n	80035a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d135      	bne.n	8003612 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a6:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4013      	ands	r3, r2
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x162>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e24b      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b72      	ldr	r3, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a74      	ldr	r2, [pc, #464]	; (8003794 <HAL_RCC_OscConfig+0x338>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	021a      	lsls	r2, r3, #8
 80035ce:	4b6e      	ldr	r3, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d112      	bne.n	8003600 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035da:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x33c>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	4b67      	ldr	r3, [pc, #412]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80035ee:	4b66      	ldr	r3, [pc, #408]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	0adb      	lsrs	r3, r3, #11
 80035f4:	2207      	movs	r2, #7
 80035f6:	4013      	ands	r3, r2
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x340>)
 80035fa:	40da      	lsrs	r2, r3
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x344>)
 80035fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_OscConfig+0x348>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff f91b 	bl	8002840 <HAL_InitTick>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d051      	beq.n	80036b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e221      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d030      	beq.n	800367c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800361a:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <HAL_RCC_OscConfig+0x33c>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	4b57      	ldr	r3, [pc, #348]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800362e:	4b56      	ldr	r3, [pc, #344]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b55      	ldr	r3, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0049      	lsls	r1, r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7ff f95c 	bl	80028f8 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7ff f957 	bl	80028f8 <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1fe      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4013      	ands	r3, r2
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b48      	ldr	r3, [pc, #288]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <HAL_RCC_OscConfig+0x338>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	021a      	lsls	r2, r3, #8
 8003674:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e01b      	b.n	80036b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003682:	4949      	ldr	r1, [pc, #292]	; (80037a8 <HAL_RCC_OscConfig+0x34c>)
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7ff f936 	bl	80028f8 <HAL_GetTick>
 800368c:	0003      	movs	r3, r0
 800368e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7ff f931 	bl	80028f8 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1d8      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4013      	ands	r3, r2
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x236>
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2208      	movs	r2, #8
 80036ba:	4013      	ands	r3, r2
 80036bc:	d047      	beq.n	800374e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036be:	4b32      	ldr	r3, [pc, #200]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2238      	movs	r2, #56	; 0x38
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b18      	cmp	r3, #24
 80036c8:	d10a      	bne.n	80036e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d03c      	beq.n	800374e <HAL_RCC_OscConfig+0x2f2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d138      	bne.n	800374e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e1ba      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d019      	beq.n	800371c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80036ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	430a      	orrs	r2, r1
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7ff f900 	bl	80028f8 <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fe:	f7ff f8fb 	bl	80028f8 <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1a2      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	2202      	movs	r2, #2
 8003716:	4013      	ands	r3, r2
 8003718:	d0f1      	beq.n	80036fe <HAL_RCC_OscConfig+0x2a2>
 800371a:	e018      	b.n	800374e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 800371e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003722:	2101      	movs	r1, #1
 8003724:	438a      	bics	r2, r1
 8003726:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7ff f8e6 	bl	80028f8 <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003732:	f7ff f8e1 	bl	80028f8 <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e188      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	2202      	movs	r2, #2
 800374a:	4013      	ands	r3, r2
 800374c:	d1f1      	bne.n	8003732 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2204      	movs	r2, #4
 8003754:	4013      	ands	r3, r2
 8003756:	d100      	bne.n	800375a <HAL_RCC_OscConfig+0x2fe>
 8003758:	e0c6      	b.n	80038e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	231f      	movs	r3, #31
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2238      	movs	r2, #56	; 0x38
 8003768:	4013      	ands	r3, r2
 800376a:	2b20      	cmp	r3, #32
 800376c:	d11e      	bne.n	80037ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_OscConfig+0x32c>)
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2202      	movs	r2, #2
 8003774:	4013      	ands	r3, r2
 8003776:	d100      	bne.n	800377a <HAL_RCC_OscConfig+0x31e>
 8003778:	e0b6      	b.n	80038e8 <HAL_RCC_OscConfig+0x48c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d000      	beq.n	8003784 <HAL_RCC_OscConfig+0x328>
 8003782:	e0b1      	b.n	80038e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e166      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
 8003788:	40021000 	.word	0x40021000
 800378c:	fffeffff 	.word	0xfffeffff
 8003790:	fffbffff 	.word	0xfffbffff
 8003794:	ffff80ff 	.word	0xffff80ff
 8003798:	ffffc7ff 	.word	0xffffc7ff
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004
 80037a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ac:	4bac      	ldr	r3, [pc, #688]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80037ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	055b      	lsls	r3, r3, #21
 80037b4:	4013      	ands	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_OscConfig+0x360>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x362>
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d011      	beq.n	80037e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	4ba7      	ldr	r3, [pc, #668]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80037c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c6:	4ba6      	ldr	r3, [pc, #664]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0549      	lsls	r1, r1, #21
 80037cc:	430a      	orrs	r2, r1
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80037d0:	4ba3      	ldr	r3, [pc, #652]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80037d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	055b      	lsls	r3, r3, #21
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037de:	231f      	movs	r3, #31
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e6:	4b9f      	ldr	r3, [pc, #636]	; (8003a64 <HAL_RCC_OscConfig+0x608>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	d11a      	bne.n	8003828 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f2:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <HAL_RCC_OscConfig+0x608>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b9b      	ldr	r3, [pc, #620]	; (8003a64 <HAL_RCC_OscConfig+0x608>)
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	0049      	lsls	r1, r1, #1
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003800:	f7ff f87a 	bl	80028f8 <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7ff f875 	bl	80028f8 <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e11c      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381c:	4b91      	ldr	r3, [pc, #580]	; (8003a64 <HAL_RCC_OscConfig+0x608>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x3e2>
 8003830:	4b8b      	ldr	r3, [pc, #556]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003834:	4b8a      	ldr	r3, [pc, #552]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003836:	2101      	movs	r1, #1
 8003838:	430a      	orrs	r2, r1
 800383a:	65da      	str	r2, [r3, #92]	; 0x5c
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x41c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x404>
 8003846:	4b86      	ldr	r3, [pc, #536]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003848:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800384a:	4b85      	ldr	r3, [pc, #532]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800384c:	2104      	movs	r1, #4
 800384e:	430a      	orrs	r2, r1
 8003850:	65da      	str	r2, [r3, #92]	; 0x5c
 8003852:	4b83      	ldr	r3, [pc, #524]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003854:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003856:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0x41c>
 8003860:	4b7f      	ldr	r3, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003866:	2101      	movs	r1, #1
 8003868:	438a      	bics	r2, r1
 800386a:	65da      	str	r2, [r3, #92]	; 0x5c
 800386c:	4b7c      	ldr	r3, [pc, #496]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800386e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003870:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003872:	2104      	movs	r1, #4
 8003874:	438a      	bics	r2, r1
 8003876:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d014      	beq.n	80038aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7ff f83a 	bl	80028f8 <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003888:	e009      	b.n	800389e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7ff f835 	bl	80028f8 <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	4a74      	ldr	r2, [pc, #464]	; (8003a68 <HAL_RCC_OscConfig+0x60c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0db      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389e:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x42e>
 80038a8:	e013      	b.n	80038d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7ff f825 	bl	80028f8 <HAL_GetTick>
 80038ae:	0003      	movs	r3, r0
 80038b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b2:	e009      	b.n	80038c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7ff f820 	bl	80028f8 <HAL_GetTick>
 80038b8:	0002      	movs	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	4a6a      	ldr	r2, [pc, #424]	; (8003a68 <HAL_RCC_OscConfig+0x60c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0c6      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c8:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2202      	movs	r2, #2
 80038ce:	4013      	ands	r3, r2
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038d2:	231f      	movs	r3, #31
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038dc:	4b60      	ldr	r3, [pc, #384]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80038de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e0:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80038e2:	4962      	ldr	r1, [pc, #392]	; (8003a6c <HAL_RCC_OscConfig+0x610>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d100      	bne.n	80038f2 <HAL_RCC_OscConfig+0x496>
 80038f0:	e0b0      	b.n	8003a54 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f2:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2238      	movs	r2, #56	; 0x38
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d100      	bne.n	8003900 <HAL_RCC_OscConfig+0x4a4>
 80038fe:	e078      	b.n	80039f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d153      	bne.n	80039b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b55      	ldr	r3, [pc, #340]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800390e:	4958      	ldr	r1, [pc, #352]	; (8003a70 <HAL_RCC_OscConfig+0x614>)
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fff0 	bl	80028f8 <HAL_GetTick>
 8003918:	0003      	movs	r3, r0
 800391a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe ffeb 	bl	80028f8 <HAL_GetTick>
 8003922:	0002      	movs	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e092      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	049b      	lsls	r3, r3, #18
 8003938:	4013      	ands	r3, r2
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393c:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a4c      	ldr	r2, [pc, #304]	; (8003a74 <HAL_RCC_OscConfig+0x618>)
 8003942:	4013      	ands	r3, r2
 8003944:	0019      	movs	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	431a      	orrs	r2, r3
 8003964:	4b3e      	ldr	r3, [pc, #248]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003966:	430a      	orrs	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396a:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0449      	lsls	r1, r1, #17
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003978:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	0549      	lsls	r1, r1, #21
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe ffb7 	bl	80028f8 <HAL_GetTick>
 800398a:	0003      	movs	r3, r0
 800398c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe ffb2 	bl	80028f8 <HAL_GetTick>
 8003994:	0002      	movs	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e059      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a2:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	049b      	lsls	r3, r3, #18
 80039aa:	4013      	ands	r3, r2
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x534>
 80039ae:	e051      	b.n	8003a54 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80039b6:	492e      	ldr	r1, [pc, #184]	; (8003a70 <HAL_RCC_OscConfig+0x614>)
 80039b8:	400a      	ands	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe ff9c 	bl	80028f8 <HAL_GetTick>
 80039c0:	0003      	movs	r3, r0
 80039c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe ff97 	bl	80028f8 <HAL_GetTick>
 80039ca:	0002      	movs	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e03e      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d8:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	049b      	lsls	r3, r3, #18
 80039e0:	4013      	ands	r3, r2
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 80039ea:	4923      	ldr	r1, [pc, #140]	; (8003a78 <HAL_RCC_OscConfig+0x61c>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	e030      	b.n	8003a54 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e02b      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80039fe:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_RCC_OscConfig+0x604>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2203      	movs	r2, #3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d11e      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2270      	movs	r2, #112	; 0x70
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d117      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	23fe      	movs	r3, #254	; 0xfe
 8003a24:	01db      	lsls	r3, r3, #7
 8003a26:	401a      	ands	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d10e      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	23f8      	movs	r3, #248	; 0xf8
 8003a36:	039b      	lsls	r3, r3, #14
 8003a38:	401a      	ands	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d106      	bne.n	8003a50 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	0f5b      	lsrs	r3, r3, #29
 8003a46:	075a      	lsls	r2, r3, #29
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b008      	add	sp, #32
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
 8003a68:	00001388 	.word	0x00001388
 8003a6c:	efffffff 	.word	0xefffffff
 8003a70:	feffffff 	.word	0xfeffffff
 8003a74:	1fc1808c 	.word	0x1fc1808c
 8003a78:	effefffc 	.word	0xeffefffc

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0e9      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2207      	movs	r2, #7
 8003a96:	4013      	ands	r3, r2
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d91e      	bls.n	8003adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ab0:	f7fe ff22 	bl	80028f8 <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ab8:	e009      	b.n	8003ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aba:	f7fe ff1d 	bl	80028f8 <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	; (8003c70 <HAL_RCC_ClockConfig+0x1f4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0ca      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1ee      	bne.n	8003aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d015      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2204      	movs	r2, #4
 8003aec:	4013      	ands	r3, r2
 8003aee:	d006      	beq.n	8003afe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003af0:	4b60      	ldr	r3, [pc, #384]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	4b5f      	ldr	r3, [pc, #380]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003af6:	21e0      	movs	r1, #224	; 0xe0
 8003af8:	01c9      	lsls	r1, r1, #7
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4a5d      	ldr	r2, [pc, #372]	; (8003c78 <HAL_RCC_ClockConfig+0x1fc>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d057      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b24:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	029b      	lsls	r3, r3, #10
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d12b      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e097      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3c:	4b4d      	ldr	r3, [pc, #308]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	049b      	lsls	r3, r3, #18
 8003b44:	4013      	ands	r3, r2
 8003b46:	d11f      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e08b      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b54:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d113      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e07f      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6c:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	2202      	movs	r2, #2
 8003b72:	4013      	ands	r3, r2
 8003b74:	d108      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e074      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7a:	4b3e      	ldr	r3, [pc, #248]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	2202      	movs	r2, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e06d      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b88:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	4393      	bics	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fe feac 	bl	80028f8 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	e009      	b.n	8003bba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7fe fea7 	bl	80028f8 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	4a2f      	ldr	r2, [pc, #188]	; (8003c70 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e054      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2238      	movs	r2, #56	; 0x38
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1ec      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d21e      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2207      	movs	r2, #7
 8003be0:	4393      	bics	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bec:	f7fe fe84 	bl	80028f8 <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bf4:	e009      	b.n	8003c0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf6:	f7fe fe7f 	bl	80028f8 <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_RCC_ClockConfig+0x1f4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e02c      	b.n	8003c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2207      	movs	r2, #7
 8003c10:	4013      	ands	r3, r2
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1ee      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <HAL_RCC_ClockConfig+0x200>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c36:	f000 f829 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c3a:	0001      	movs	r1, r0
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCC_ClockConfig+0x1f8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	220f      	movs	r2, #15
 8003c44:	401a      	ands	r2, r3
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_RCC_ClockConfig+0x204>)
 8003c48:	0092      	lsls	r2, r2, #2
 8003c4a:	58d3      	ldr	r3, [r2, r3]
 8003c4c:	221f      	movs	r2, #31
 8003c4e:	4013      	ands	r3, r2
 8003c50:	000a      	movs	r2, r1
 8003c52:	40da      	lsrs	r2, r3
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x208>)
 8003c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x20c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7fe fdef 	bl	8002840 <HAL_InitTick>
 8003c62:	0003      	movs	r3, r0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40022000 	.word	0x40022000
 8003c70:	00001388 	.word	0x00001388
 8003c74:	40021000 	.word	0x40021000
 8003c78:	fffff0ff 	.word	0xfffff0ff
 8003c7c:	ffff8fff 	.word	0xffff8fff
 8003c80:	080066f0 	.word	0x080066f0
 8003c84:	20000000 	.word	0x20000000
 8003c88:	20000004 	.word	0x20000004

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c92:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2238      	movs	r2, #56	; 0x38
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d10f      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c9c:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0adb      	lsrs	r3, r3, #11
 8003ca2:	2207      	movs	r2, #7
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	0013      	movs	r3, r2
 8003cac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	4835      	ldr	r0, [pc, #212]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cb2:	f7fc fa25 	bl	8000100 <__udivsi3>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e05d      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cbc:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2238      	movs	r2, #56	; 0x38
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d102      	bne.n	8003cce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e054      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2238      	movs	r2, #56	; 0x38
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d138      	bne.n	8003d4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	2207      	movs	r2, #7
 8003cec:	4013      	ands	r3, r2
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	4823      	ldr	r0, [pc, #140]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cfc:	f7fc fa00 	bl	8000100 <__udivsi3>
 8003d00:	0003      	movs	r3, r0
 8003d02:	0019      	movs	r1, r3
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	227f      	movs	r2, #127	; 0x7f
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	434b      	muls	r3, r1
 8003d10:	617b      	str	r3, [r7, #20]
        break;
 8003d12:	e00d      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	481c      	ldr	r0, [pc, #112]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d18:	f7fc f9f2 	bl	8000100 <__udivsi3>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	0019      	movs	r1, r3
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	227f      	movs	r2, #127	; 0x7f
 8003d28:	4013      	ands	r3, r2
 8003d2a:	434b      	muls	r3, r1
 8003d2c:	617b      	str	r3, [r7, #20]
        break;
 8003d2e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d30:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0f5b      	lsrs	r3, r3, #29
 8003d36:	2207      	movs	r2, #7
 8003d38:	4013      	ands	r3, r2
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	6978      	ldr	r0, [r7, #20]
 8003d42:	f7fc f9dd 	bl	8000100 <__udivsi3>
 8003d46:	0003      	movs	r3, r0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e015      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2238      	movs	r2, #56	; 0x38
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d103      	bne.n	8003d60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2238      	movs	r2, #56	; 0x38
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b18      	cmp	r3, #24
 8003d6a:	d103      	bne.n	8003d74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d6c:	23fa      	movs	r3, #250	; 0xfa
 8003d6e:	01db      	lsls	r3, r3, #7
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	e001      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d78:	693b      	ldr	r3, [r7, #16]
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b006      	add	sp, #24
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	40021000 	.word	0x40021000
 8003d88:	00f42400 	.word	0x00f42400

08003d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	20000000 	.word	0x20000000

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003da4:	f7ff fff2 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003da8:	0004      	movs	r4, r0
 8003daa:	f7ff fb4b 	bl	8003444 <LL_RCC_GetAPB1Prescaler>
 8003dae:	0003      	movs	r3, r0
 8003db0:	0b1a      	lsrs	r2, r3, #12
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	58d3      	ldr	r3, [r2, r3]
 8003db8:	221f      	movs	r2, #31
 8003dba:	4013      	ands	r3, r2
 8003dbc:	40dc      	lsrs	r4, r3
 8003dbe:	0023      	movs	r3, r4
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	08006730 	.word	0x08006730

08003dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04a      	b.n	8003e74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	223d      	movs	r2, #61	; 0x3d
 8003de2:	5c9b      	ldrb	r3, [r3, r2]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d107      	bne.n	8003dfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223c      	movs	r2, #60	; 0x3c
 8003dee:	2100      	movs	r1, #0
 8003df0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7fe f883 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223d      	movs	r2, #61	; 0x3d
 8003dfe:	2102      	movs	r1, #2
 8003e00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	f000 fe1f 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2248      	movs	r2, #72	; 0x48
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223e      	movs	r2, #62	; 0x3e
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2241      	movs	r2, #65	; 0x41
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2242      	movs	r2, #66	; 0x42
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2243      	movs	r2, #67	; 0x43
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2244      	movs	r2, #68	; 0x44
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2245      	movs	r2, #69	; 0x45
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2246      	movs	r2, #70	; 0x46
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2247      	movs	r2, #71	; 0x47
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	223d      	movs	r2, #61	; 0x3d
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e04a      	b.n	8003f24 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	223d      	movs	r2, #61	; 0x3d
 8003e92:	5c9b      	ldrb	r3, [r3, r2]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d107      	bne.n	8003eaa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223c      	movs	r2, #60	; 0x3c
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f841 	bl	8003f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	223d      	movs	r2, #61	; 0x3d
 8003eae:	2102      	movs	r1, #2
 8003eb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	0019      	movs	r1, r3
 8003ebc:	0010      	movs	r0, r2
 8003ebe:	f000 fdc7 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2248      	movs	r2, #72	; 0x48
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	223e      	movs	r2, #62	; 0x3e
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	223f      	movs	r2, #63	; 0x3f
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2240      	movs	r2, #64	; 0x40
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2241      	movs	r2, #65	; 0x41
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2242      	movs	r2, #66	; 0x42
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2243      	movs	r2, #67	; 0x43
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2244      	movs	r2, #68	; 0x44
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2245      	movs	r2, #69	; 0x45
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2246      	movs	r2, #70	; 0x46
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2247      	movs	r2, #71	; 0x47
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	223d      	movs	r2, #61	; 0x3d
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	001a      	movs	r2, r3
 8003f4a:	1cbb      	adds	r3, r7, #2
 8003f4c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2317      	movs	r3, #23
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d108      	bne.n	8003f6e <HAL_TIM_PWM_Start_DMA+0x32>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	223e      	movs	r2, #62	; 0x3e
 8003f60:	5c9b      	ldrb	r3, [r3, r2]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3b02      	subs	r3, #2
 8003f66:	425a      	negs	r2, r3
 8003f68:	4153      	adcs	r3, r2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e037      	b.n	8003fde <HAL_TIM_PWM_Start_DMA+0xa2>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d108      	bne.n	8003f86 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	223f      	movs	r2, #63	; 0x3f
 8003f78:	5c9b      	ldrb	r3, [r3, r2]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b02      	subs	r3, #2
 8003f7e:	425a      	negs	r2, r3
 8003f80:	4153      	adcs	r3, r2
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	e02b      	b.n	8003fde <HAL_TIM_PWM_Start_DMA+0xa2>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d108      	bne.n	8003f9e <HAL_TIM_PWM_Start_DMA+0x62>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2240      	movs	r2, #64	; 0x40
 8003f90:	5c9b      	ldrb	r3, [r3, r2]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3b02      	subs	r3, #2
 8003f96:	425a      	negs	r2, r3
 8003f98:	4153      	adcs	r3, r2
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e01f      	b.n	8003fde <HAL_TIM_PWM_Start_DMA+0xa2>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d108      	bne.n	8003fb6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2241      	movs	r2, #65	; 0x41
 8003fa8:	5c9b      	ldrb	r3, [r3, r2]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b02      	subs	r3, #2
 8003fae:	425a      	negs	r2, r3
 8003fb0:	4153      	adcs	r3, r2
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e013      	b.n	8003fde <HAL_TIM_PWM_Start_DMA+0xa2>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d108      	bne.n	8003fce <HAL_TIM_PWM_Start_DMA+0x92>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2242      	movs	r2, #66	; 0x42
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3b02      	subs	r3, #2
 8003fc6:	425a      	negs	r2, r3
 8003fc8:	4153      	adcs	r3, r2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e007      	b.n	8003fde <HAL_TIM_PWM_Start_DMA+0xa2>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2243      	movs	r2, #67	; 0x43
 8003fd2:	5c9b      	ldrb	r3, [r3, r2]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	3b02      	subs	r3, #2
 8003fd8:	425a      	negs	r2, r3
 8003fda:	4153      	adcs	r3, r2
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e183      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <HAL_TIM_PWM_Start_DMA+0xc2>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	223e      	movs	r2, #62	; 0x3e
 8003ff0:	5c9b      	ldrb	r3, [r3, r2]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	425a      	negs	r2, r3
 8003ff8:	4153      	adcs	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e037      	b.n	800406e <HAL_TIM_PWM_Start_DMA+0x132>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d108      	bne.n	8004016 <HAL_TIM_PWM_Start_DMA+0xda>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	223f      	movs	r2, #63	; 0x3f
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	425a      	negs	r2, r3
 8004010:	4153      	adcs	r3, r2
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e02b      	b.n	800406e <HAL_TIM_PWM_Start_DMA+0x132>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d108      	bne.n	800402e <HAL_TIM_PWM_Start_DMA+0xf2>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	5c9b      	ldrb	r3, [r3, r2]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	425a      	negs	r2, r3
 8004028:	4153      	adcs	r3, r2
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e01f      	b.n	800406e <HAL_TIM_PWM_Start_DMA+0x132>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d108      	bne.n	8004046 <HAL_TIM_PWM_Start_DMA+0x10a>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2241      	movs	r2, #65	; 0x41
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	425a      	negs	r2, r3
 8004040:	4153      	adcs	r3, r2
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e013      	b.n	800406e <HAL_TIM_PWM_Start_DMA+0x132>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b10      	cmp	r3, #16
 800404a:	d108      	bne.n	800405e <HAL_TIM_PWM_Start_DMA+0x122>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2242      	movs	r2, #66	; 0x42
 8004050:	5c9b      	ldrb	r3, [r3, r2]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	425a      	negs	r2, r3
 8004058:	4153      	adcs	r3, r2
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e007      	b.n	800406e <HAL_TIM_PWM_Start_DMA+0x132>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2243      	movs	r2, #67	; 0x43
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	425a      	negs	r2, r3
 800406a:	4153      	adcs	r3, r2
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d035      	beq.n	80040de <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_TIM_PWM_Start_DMA+0x144>
 8004078:	1cbb      	adds	r3, r7, #2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e134      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_TIM_PWM_Start_DMA+0x158>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	223e      	movs	r2, #62	; 0x3e
 800408e:	2102      	movs	r1, #2
 8004090:	5499      	strb	r1, [r3, r2]
 8004092:	e026      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d104      	bne.n	80040a4 <HAL_TIM_PWM_Start_DMA+0x168>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	223f      	movs	r2, #63	; 0x3f
 800409e:	2102      	movs	r1, #2
 80040a0:	5499      	strb	r1, [r3, r2]
 80040a2:	e01e      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d104      	bne.n	80040b4 <HAL_TIM_PWM_Start_DMA+0x178>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	2102      	movs	r1, #2
 80040b0:	5499      	strb	r1, [r3, r2]
 80040b2:	e016      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d104      	bne.n	80040c4 <HAL_TIM_PWM_Start_DMA+0x188>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2241      	movs	r2, #65	; 0x41
 80040be:	2102      	movs	r1, #2
 80040c0:	5499      	strb	r1, [r3, r2]
 80040c2:	e00e      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d104      	bne.n	80040d4 <HAL_TIM_PWM_Start_DMA+0x198>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2242      	movs	r2, #66	; 0x42
 80040ce:	2102      	movs	r1, #2
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	e006      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2243      	movs	r2, #67	; 0x43
 80040d8:	2102      	movs	r1, #2
 80040da:	5499      	strb	r1, [r3, r2]
 80040dc:	e001      	b.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e105      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b0c      	cmp	r3, #12
 80040e6:	d100      	bne.n	80040ea <HAL_TIM_PWM_Start_DMA+0x1ae>
 80040e8:	e080      	b.n	80041ec <HAL_TIM_PWM_Start_DMA+0x2b0>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	d900      	bls.n	80040f2 <HAL_TIM_PWM_Start_DMA+0x1b6>
 80040f0:	e0a1      	b.n	8004236 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d054      	beq.n	80041a2 <HAL_TIM_PWM_Start_DMA+0x266>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d900      	bls.n	8004100 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80040fe:	e09a      	b.n	8004236 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d025      	beq.n	8004158 <HAL_TIM_PWM_Start_DMA+0x21c>
 800410c:	e093      	b.n	8004236 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	4a79      	ldr	r2, [pc, #484]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	4a78      	ldr	r2, [pc, #480]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800411c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	4a77      	ldr	r2, [pc, #476]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004124:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3334      	adds	r3, #52	; 0x34
 8004132:	001a      	movs	r2, r3
 8004134:	1cbb      	adds	r3, r7, #2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	f7fe fd74 	bl	8002c24 <HAL_DMA_Start_IT>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d001      	beq.n	8004144 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0d4      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2180      	movs	r1, #128	; 0x80
 8004150:	0089      	lsls	r1, r1, #2
 8004152:	430a      	orrs	r2, r1
 8004154:	60da      	str	r2, [r3, #12]
      break;
 8004156:	e073      	b.n	8004240 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	4a65      	ldr	r2, [pc, #404]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004166:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	4a64      	ldr	r2, [pc, #400]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800416e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3338      	adds	r3, #56	; 0x38
 800417c:	001a      	movs	r2, r3
 800417e:	1cbb      	adds	r3, r7, #2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	f7fe fd4f 	bl	8002c24 <HAL_DMA_Start_IT>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d001      	beq.n	800418e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0af      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	00c9      	lsls	r1, r1, #3
 800419c:	430a      	orrs	r2, r1
 800419e:	60da      	str	r2, [r3, #12]
      break;
 80041a0:	e04e      	b.n	8004240 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4a54      	ldr	r2, [pc, #336]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80041a8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	4a53      	ldr	r2, [pc, #332]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	333c      	adds	r3, #60	; 0x3c
 80041c6:	001a      	movs	r2, r3
 80041c8:	1cbb      	adds	r3, r7, #2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	f7fe fd2a 	bl	8002c24 <HAL_DMA_Start_IT>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e08a      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	0109      	lsls	r1, r1, #4
 80041e6:	430a      	orrs	r2, r1
 80041e8:	60da      	str	r2, [r3, #12]
      break;
 80041ea:	e029      	b.n	8004240 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	4a41      	ldr	r2, [pc, #260]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	4a40      	ldr	r2, [pc, #256]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	4a3f      	ldr	r2, [pc, #252]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3340      	adds	r3, #64	; 0x40
 8004210:	001a      	movs	r2, r3
 8004212:	1cbb      	adds	r3, r7, #2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	f7fe fd05 	bl	8002c24 <HAL_DMA_Start_IT>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d001      	beq.n	8004222 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e065      	b.n	80042ee <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	0149      	lsls	r1, r1, #5
 8004230:	430a      	orrs	r2, r1
 8004232:	60da      	str	r2, [r3, #12]
      break;
 8004234:	e004      	b.n	8004240 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8004236:	2317      	movs	r3, #23
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004240:	2317      	movs	r3, #23
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d14e      	bne.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	2201      	movs	r2, #1
 8004252:	0018      	movs	r0, r3
 8004254:	f000 ffae 	bl	80051b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a29      	ldr	r2, [pc, #164]	; (8004304 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_TIM_PWM_Start_DMA+0x33a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a28      	ldr	r2, [pc, #160]	; (8004308 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_TIM_PWM_Start_DMA+0x33a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_TIM_PWM_Start_DMA+0x33e>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_TIM_PWM_Start_DMA+0x340>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	0209      	lsls	r1, r1, #8
 800428e:	430a      	orrs	r2, r1
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIM_PWM_Start_DMA+0x36a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d116      	bne.n	80042d4 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d016      	beq.n	80042e6 <HAL_TIM_PWM_Start_DMA+0x3aa>
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	429a      	cmp	r2, r3
 80042c0:	d011      	beq.n	80042e6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2101      	movs	r1, #1
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	e008      	b.n	80042e6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2101      	movs	r1, #1
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e000      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80042e8:	2317      	movs	r3, #23
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b006      	add	sp, #24
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	0800493d 	.word	0x0800493d
 80042fc:	080049e7 	.word	0x080049e7
 8004300:	080048a9 	.word	0x080048a9
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800
 8004310:	40000400 	.word	0x40000400
 8004314:	00010007 	.word	0x00010007

08004318 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	230f      	movs	r3, #15
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d039      	beq.n	80043a4 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d844      	bhi.n	80043c0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d025      	beq.n	8004388 <HAL_TIM_PWM_Stop_DMA+0x70>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d83e      	bhi.n	80043c0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_TIM_PWM_Stop_DMA+0x38>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00e      	beq.n	800436c <HAL_TIM_PWM_Stop_DMA+0x54>
 800434e:	e037      	b.n	80043c0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	495a      	ldr	r1, [pc, #360]	; (80044c4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800435c:	400a      	ands	r2, r1
 800435e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	0018      	movs	r0, r3
 8004366:	f7fe fce3 	bl	8002d30 <HAL_DMA_Abort_IT>
      break;
 800436a:	e02e      	b.n	80043ca <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4954      	ldr	r1, [pc, #336]	; (80044c8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8004378:	400a      	ands	r2, r1
 800437a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	0018      	movs	r0, r3
 8004382:	f7fe fcd5 	bl	8002d30 <HAL_DMA_Abort_IT>
      break;
 8004386:	e020      	b.n	80043ca <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	494e      	ldr	r1, [pc, #312]	; (80044cc <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8004394:	400a      	ands	r2, r1
 8004396:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	0018      	movs	r0, r3
 800439e:	f7fe fcc7 	bl	8002d30 <HAL_DMA_Abort_IT>
      break;
 80043a2:	e012      	b.n	80043ca <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4948      	ldr	r1, [pc, #288]	; (80044d0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7fe fcb9 	bl	8002d30 <HAL_DMA_Abort_IT>
      break;
 80043be:	e004      	b.n	80043ca <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80043c0:	230f      	movs	r3, #15
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
      break;
 80043c8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80043ca:	230f      	movs	r3, #15
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d000      	beq.n	80043d6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80043d4:	e06e      	b.n	80044b4 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6839      	ldr	r1, [r7, #0]
 80043dc:	2200      	movs	r2, #0
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 fee8 	bl	80051b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a3a      	ldr	r2, [pc, #232]	; (80044d4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_TIM_PWM_Stop_DMA+0xea>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a39      	ldr	r2, [pc, #228]	; (80044d8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_TIM_PWM_Stop_DMA+0xea>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a37      	ldr	r2, [pc, #220]	; (80044dc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004414:	4013      	ands	r3, r2
 8004416:	d10d      	bne.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4a31      	ldr	r2, [pc, #196]	; (80044e4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004420:	4013      	ands	r3, r2
 8004422:	d107      	bne.n	8004434 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	492e      	ldr	r1, [pc, #184]	; (80044e8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004430:	400a      	ands	r2, r1
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800443c:	4013      	ands	r3, r2
 800443e:	d10d      	bne.n	800445c <HAL_TIM_PWM_Stop_DMA+0x144>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4a27      	ldr	r2, [pc, #156]	; (80044e4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004448:	4013      	ands	r3, r2
 800444a:	d107      	bne.n	800445c <HAL_TIM_PWM_Stop_DMA+0x144>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	438a      	bics	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_TIM_PWM_Stop_DMA+0x154>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	223e      	movs	r2, #62	; 0x3e
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]
 800446a:	e023      	b.n	80044b4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d104      	bne.n	800447c <HAL_TIM_PWM_Stop_DMA+0x164>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	223f      	movs	r2, #63	; 0x3f
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]
 800447a:	e01b      	b.n	80044b4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b08      	cmp	r3, #8
 8004480:	d104      	bne.n	800448c <HAL_TIM_PWM_Stop_DMA+0x174>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2240      	movs	r2, #64	; 0x40
 8004486:	2101      	movs	r1, #1
 8004488:	5499      	strb	r1, [r3, r2]
 800448a:	e013      	b.n	80044b4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d104      	bne.n	800449c <HAL_TIM_PWM_Stop_DMA+0x184>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2241      	movs	r2, #65	; 0x41
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]
 800449a:	e00b      	b.n	80044b4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d104      	bne.n	80044ac <HAL_TIM_PWM_Stop_DMA+0x194>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2242      	movs	r2, #66	; 0x42
 80044a6:	2101      	movs	r1, #1
 80044a8:	5499      	strb	r1, [r3, r2]
 80044aa:	e003      	b.n	80044b4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2243      	movs	r2, #67	; 0x43
 80044b0:	2101      	movs	r1, #1
 80044b2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80044b4:	230f      	movs	r3, #15
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	781b      	ldrb	r3, [r3, #0]
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	fffffdff 	.word	0xfffffdff
 80044c8:	fffffbff 	.word	0xfffffbff
 80044cc:	fffff7ff 	.word	0xfffff7ff
 80044d0:	ffffefff 	.word	0xffffefff
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800
 80044e0:	00001111 	.word	0x00001111
 80044e4:	00000444 	.word	0x00000444
 80044e8:	ffff7fff 	.word	0xffff7fff

080044ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2317      	movs	r3, #23
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	223c      	movs	r2, #60	; 0x3c
 8004504:	5c9b      	ldrb	r3, [r3, r2]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_TIM_PWM_ConfigChannel+0x22>
 800450a:	2302      	movs	r3, #2
 800450c:	e0e5      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	223c      	movs	r2, #60	; 0x3c
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b14      	cmp	r3, #20
 800451a:	d900      	bls.n	800451e <HAL_TIM_PWM_ConfigChannel+0x32>
 800451c:	e0d1      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	009a      	lsls	r2, r3, #2
 8004522:	4b70      	ldr	r3, [pc, #448]	; (80046e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fb06 	bl	8004b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2108      	movs	r1, #8
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2104      	movs	r1, #4
 8004554:	438a      	bics	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
      break;
 800456a:	e0af      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	0011      	movs	r1, r2
 8004574:	0018      	movs	r0, r3
 8004576:	f000 fb65 	bl	8004c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0109      	lsls	r1, r1, #4
 8004588:	430a      	orrs	r2, r1
 800458a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4954      	ldr	r1, [pc, #336]	; (80046e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004598:	400a      	ands	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6999      	ldr	r1, [r3, #24]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	021a      	lsls	r2, r3, #8
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	619a      	str	r2, [r3, #24]
      break;
 80045b0:	e08c      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fbc0 	bl	8004d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2108      	movs	r1, #8
 80045cc:	430a      	orrs	r2, r1
 80045ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2104      	movs	r1, #4
 80045dc:	438a      	bics	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69d9      	ldr	r1, [r3, #28]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]
      break;
 80045f2:	e06b      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	0011      	movs	r1, r2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 fc21 	bl	8004e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	0109      	lsls	r1, r1, #4
 8004610:	430a      	orrs	r2, r1
 8004612:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4932      	ldr	r1, [pc, #200]	; (80046e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004620:	400a      	ands	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69d9      	ldr	r1, [r3, #28]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
      break;
 8004638:	e048      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0011      	movs	r1, r2
 8004642:	0018      	movs	r0, r3
 8004644:	f000 fc62 	bl	8004f0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2108      	movs	r1, #8
 8004654:	430a      	orrs	r2, r1
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2104      	movs	r1, #4
 8004664:	438a      	bics	r2, r1
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800467a:	e027      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	0011      	movs	r1, r2
 8004684:	0018      	movs	r0, r3
 8004686:	f000 fc9b 	bl	8004fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	0109      	lsls	r1, r1, #4
 8004698:	430a      	orrs	r2, r1
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4910      	ldr	r1, [pc, #64]	; (80046e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046c0:	e004      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80046c2:	2317      	movs	r3, #23
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
      break;
 80046ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	223c      	movs	r2, #60	; 0x3c
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]

  return status;
 80046d4:	2317      	movs	r3, #23
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b006      	add	sp, #24
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	08006764 	.word	0x08006764
 80046e8:	fffffbff 	.word	0xfffffbff

080046ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	230f      	movs	r3, #15
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	223c      	movs	r2, #60	; 0x3c
 8004702:	5c9b      	ldrb	r3, [r3, r2]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIM_ConfigClockSource+0x20>
 8004708:	2302      	movs	r3, #2
 800470a:	e0bc      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223c      	movs	r2, #60	; 0x3c
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	223d      	movs	r2, #61	; 0x3d
 8004718:	2102      	movs	r1, #2
 800471a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a5a      	ldr	r2, [pc, #360]	; (8004890 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004728:	4013      	ands	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a59      	ldr	r2, [pc, #356]	; (8004894 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004730:	4013      	ands	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	0192      	lsls	r2, r2, #6
 8004744:	4293      	cmp	r3, r2
 8004746:	d040      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0xde>
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	0192      	lsls	r2, r2, #6
 800474c:	4293      	cmp	r3, r2
 800474e:	d900      	bls.n	8004752 <HAL_TIM_ConfigClockSource+0x66>
 8004750:	e088      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 8004752:	2280      	movs	r2, #128	; 0x80
 8004754:	0152      	lsls	r2, r2, #5
 8004756:	4293      	cmp	r3, r2
 8004758:	d100      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x70>
 800475a:	e088      	b.n	800486e <HAL_TIM_ConfigClockSource+0x182>
 800475c:	2280      	movs	r2, #128	; 0x80
 800475e:	0152      	lsls	r2, r2, #5
 8004760:	4293      	cmp	r3, r2
 8004762:	d900      	bls.n	8004766 <HAL_TIM_ConfigClockSource+0x7a>
 8004764:	e07e      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 8004766:	2b70      	cmp	r3, #112	; 0x70
 8004768:	d018      	beq.n	800479c <HAL_TIM_ConfigClockSource+0xb0>
 800476a:	d900      	bls.n	800476e <HAL_TIM_ConfigClockSource+0x82>
 800476c:	e07a      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 800476e:	2b60      	cmp	r3, #96	; 0x60
 8004770:	d04f      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x126>
 8004772:	d900      	bls.n	8004776 <HAL_TIM_ConfigClockSource+0x8a>
 8004774:	e076      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 8004776:	2b50      	cmp	r3, #80	; 0x50
 8004778:	d03b      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x106>
 800477a:	d900      	bls.n	800477e <HAL_TIM_ConfigClockSource+0x92>
 800477c:	e072      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d057      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x146>
 8004782:	d900      	bls.n	8004786 <HAL_TIM_ConfigClockSource+0x9a>
 8004784:	e06e      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 8004786:	2b30      	cmp	r3, #48	; 0x30
 8004788:	d063      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x166>
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x166>
 8004790:	d868      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d05d      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x166>
 8004796:	2b10      	cmp	r3, #16
 8004798:	d05b      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x166>
 800479a:	e063      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6899      	ldr	r1, [r3, #8]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f000 fce2 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2277      	movs	r2, #119	; 0x77
 80047bc:	4313      	orrs	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
      break;
 80047c8:	e052      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6899      	ldr	r1, [r3, #8]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f000 fccb 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	01c9      	lsls	r1, r1, #7
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03e      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	001a      	movs	r2, r3
 8004800:	f000 fc3c 	bl	800507c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	0018      	movs	r0, r3
 800480c:	f000 fc96 	bl	800513c <TIM_ITRx_SetConfig>
      break;
 8004810:	e02e      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	001a      	movs	r2, r3
 8004820:	f000 fc5a 	bl	80050d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	0018      	movs	r0, r3
 800482c:	f000 fc86 	bl	800513c <TIM_ITRx_SetConfig>
      break;
 8004830:	e01e      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	001a      	movs	r2, r3
 8004840:	f000 fc1c 	bl	800507c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	0018      	movs	r0, r3
 800484c:	f000 fc76 	bl	800513c <TIM_ITRx_SetConfig>
      break;
 8004850:	e00e      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	0019      	movs	r1, r3
 800485c:	0010      	movs	r0, r2
 800485e:	f000 fc6d 	bl	800513c <TIM_ITRx_SetConfig>
      break;
 8004862:	e005      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004864:	230f      	movs	r3, #15
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800486e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	223d      	movs	r2, #61	; 0x3d
 8004874:	2101      	movs	r1, #1
 8004876:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	223c      	movs	r2, #60	; 0x3c
 800487c:	2100      	movs	r1, #0
 800487e:	5499      	strb	r1, [r3, r2]

  return status;
 8004880:	230f      	movs	r3, #15
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	781b      	ldrb	r3, [r3, #0]
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	ffceff88 	.word	0xffceff88
 8004894:	ffff00ff 	.word	0xffff00ff

08004898 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	223e      	movs	r2, #62	; 0x3e
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]
 80048ce:	e02a      	b.n	8004926 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d107      	bne.n	80048ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2202      	movs	r2, #2
 80048de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	223f      	movs	r2, #63	; 0x3f
 80048e4:	2101      	movs	r1, #1
 80048e6:	5499      	strb	r1, [r3, r2]
 80048e8:	e01d      	b.n	8004926 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d107      	bne.n	8004904 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2204      	movs	r2, #4
 80048f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2240      	movs	r2, #64	; 0x40
 80048fe:	2101      	movs	r1, #1
 8004900:	5499      	strb	r1, [r3, r2]
 8004902:	e010      	b.n	8004926 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d107      	bne.n	800491e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2208      	movs	r2, #8
 8004912:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2241      	movs	r2, #65	; 0x41
 8004918:	2101      	movs	r1, #1
 800491a:	5499      	strb	r1, [r3, r2]
 800491c:	e003      	b.n	8004926 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	223d      	movs	r2, #61	; 0x3d
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff ffb5 	bl	8004898 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	b004      	add	sp, #16
 800493a:	bd80      	pop	{r7, pc}

0800493c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d10b      	bne.n	800496c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d136      	bne.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	223e      	movs	r2, #62	; 0x3e
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
 800496a:	e031      	b.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d10b      	bne.n	800498e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2202      	movs	r2, #2
 800497a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d125      	bne.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	223f      	movs	r2, #63	; 0x3f
 8004988:	2101      	movs	r1, #1
 800498a:	5499      	strb	r1, [r3, r2]
 800498c:	e020      	b.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d10b      	bne.n	80049b0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2204      	movs	r2, #4
 800499c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d114      	bne.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]
 80049ae:	e00f      	b.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d10a      	bne.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2241      	movs	r2, #65	; 0x41
 80049cc:	2101      	movs	r1, #1
 80049ce:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fc ff9a 	bl	800190c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	771a      	strb	r2, [r3, #28]
}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b004      	add	sp, #16
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d103      	bne.n	8004a06 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]
 8004a04:	e019      	b.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d103      	bne.n	8004a18 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2202      	movs	r2, #2
 8004a14:	771a      	strb	r2, [r3, #28]
 8004a16:	e010      	b.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d103      	bne.n	8004a2a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2204      	movs	r2, #4
 8004a26:	771a      	strb	r2, [r3, #28]
 8004a28:	e007      	b.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d102      	bne.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2208      	movs	r2, #8
 8004a38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7fc ff57 	bl	80018f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b004      	add	sp, #16
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <TIM_Base_SetConfig+0xdc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x20>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a31      	ldr	r2, [pc, #196]	; (8004b30 <TIM_Base_SetConfig+0xe0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2270      	movs	r2, #112	; 0x70
 8004a74:	4393      	bics	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a29      	ldr	r2, [pc, #164]	; (8004b2c <TIM_Base_SetConfig+0xdc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00f      	beq.n	8004aaa <TIM_Base_SetConfig+0x5a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a28      	ldr	r2, [pc, #160]	; (8004b30 <TIM_Base_SetConfig+0xe0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00b      	beq.n	8004aaa <TIM_Base_SetConfig+0x5a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d007      	beq.n	8004aaa <TIM_Base_SetConfig+0x5a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <TIM_Base_SetConfig+0xe8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d003      	beq.n	8004aaa <TIM_Base_SetConfig+0x5a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <TIM_Base_SetConfig+0xec>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d108      	bne.n	8004abc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <TIM_Base_SetConfig+0xf0>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2280      	movs	r2, #128	; 0x80
 8004ac0:	4393      	bics	r3, r2
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <TIM_Base_SetConfig+0xdc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <TIM_Base_SetConfig+0xaa>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <TIM_Base_SetConfig+0xe8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_Base_SetConfig+0xaa>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <TIM_Base_SetConfig+0xec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d103      	bne.n	8004b02 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d106      	bne.n	8004b22 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	4393      	bics	r3, r2
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]
  }
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b004      	add	sp, #16
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40002000 	.word	0x40002000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800
 8004b40:	fffffcff 	.word	0xfffffcff

08004b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4393      	bics	r3, r2
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a2e      	ldr	r2, [pc, #184]	; (8004c2c <TIM_OC1_SetConfig+0xe8>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	4393      	bics	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <TIM_OC1_SetConfig+0xec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC1_SetConfig+0x6e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <TIM_OC1_SetConfig+0xf0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC1_SetConfig+0x6e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <TIM_OC1_SetConfig+0xf4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10c      	bne.n	8004bcc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	4393      	bics	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <TIM_OC1_SetConfig+0xec>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_OC1_SetConfig+0xa0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <TIM_OC1_SetConfig+0xf0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <TIM_OC1_SetConfig+0xf4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <TIM_OC1_SetConfig+0xf8>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <TIM_OC1_SetConfig+0xfc>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b006      	add	sp, #24
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	fffeff8f 	.word	0xfffeff8f
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
 8004c3c:	fffffeff 	.word	0xfffffeff
 8004c40:	fffffdff 	.word	0xfffffdff

08004c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a2c      	ldr	r2, [pc, #176]	; (8004d24 <TIM_OC2_SetConfig+0xe0>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <TIM_OC2_SetConfig+0xe4>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	4393      	bics	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <TIM_OC2_SetConfig+0xe8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d10d      	bne.n	8004cc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	4393      	bics	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2240      	movs	r2, #64	; 0x40
 8004cbe:	4393      	bics	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <TIM_OC2_SetConfig+0xe8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC2_SetConfig+0x96>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <TIM_OC2_SetConfig+0xec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC2_SetConfig+0x96>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <TIM_OC2_SetConfig+0xf0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <TIM_OC2_SetConfig+0xf4>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <TIM_OC2_SetConfig+0xf8>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b006      	add	sp, #24
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	feff8fff 	.word	0xfeff8fff
 8004d28:	fffffcff 	.word	0xfffffcff
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800
 8004d38:	fffffbff 	.word	0xfffffbff
 8004d3c:	fffff7ff 	.word	0xfffff7ff

08004d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	4a31      	ldr	r2, [pc, #196]	; (8004e1c <TIM_OC3_SetConfig+0xdc>)
 8004d56:	401a      	ands	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <TIM_OC3_SetConfig+0xe0>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2203      	movs	r2, #3
 8004d74:	4393      	bics	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <TIM_OC3_SetConfig+0xe4>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <TIM_OC3_SetConfig+0xe8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10d      	bne.n	8004dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <TIM_OC3_SetConfig+0xec>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <TIM_OC3_SetConfig+0xf0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <TIM_OC3_SetConfig+0xe8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x92>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <TIM_OC3_SetConfig+0xf4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x92>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <TIM_OC3_SetConfig+0xf8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d113      	bne.n	8004dfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <TIM_OC3_SetConfig+0xfc>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <TIM_OC3_SetConfig+0x100>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b006      	add	sp, #24
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	fffffeff 	.word	0xfffffeff
 8004e20:	fffeff8f 	.word	0xfffeff8f
 8004e24:	fffffdff 	.word	0xfffffdff
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	fffff7ff 	.word	0xfffff7ff
 8004e30:	fffffbff 	.word	0xfffffbff
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800
 8004e3c:	ffffefff 	.word	0xffffefff
 8004e40:	ffffdfff 	.word	0xffffdfff

08004e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	4a24      	ldr	r2, [pc, #144]	; (8004eec <TIM_OC4_SetConfig+0xa8>)
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <TIM_OC4_SetConfig+0xac>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <TIM_OC4_SetConfig+0xb0>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <TIM_OC4_SetConfig+0xb4>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	031b      	lsls	r3, r3, #12
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a17      	ldr	r2, [pc, #92]	; (8004efc <TIM_OC4_SetConfig+0xb8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC4_SetConfig+0x70>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <TIM_OC4_SetConfig+0xbc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC4_SetConfig+0x70>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC4_SetConfig+0xc0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d109      	bne.n	8004ec8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <TIM_OC4_SetConfig+0xc4>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b006      	add	sp, #24
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	ffffefff 	.word	0xffffefff
 8004ef0:	feff8fff 	.word	0xfeff8fff
 8004ef4:	fffffcff 	.word	0xfffffcff
 8004ef8:	ffffdfff 	.word	0xffffdfff
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	ffffbfff 	.word	0xffffbfff

08004f0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <TIM_OC5_SetConfig+0x9c>)
 8004f22:	401a      	ands	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <TIM_OC5_SetConfig+0xa0>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <TIM_OC5_SetConfig+0xa4>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <TIM_OC5_SetConfig+0xa8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_OC5_SetConfig+0x66>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <TIM_OC5_SetConfig+0xac>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_OC5_SetConfig+0x66>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <TIM_OC5_SetConfig+0xb0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d109      	bne.n	8004f86 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_OC5_SetConfig+0x9c>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b006      	add	sp, #24
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	fffeffff 	.word	0xfffeffff
 8004fac:	fffeff8f 	.word	0xfffeff8f
 8004fb0:	fffdffff 	.word	0xfffdffff
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800

08004fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <TIM_OC6_SetConfig+0xa0>)
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <TIM_OC6_SetConfig+0xa4>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <TIM_OC6_SetConfig+0xa8>)
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	051b      	lsls	r3, r3, #20
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <TIM_OC6_SetConfig+0xac>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC6_SetConfig+0x68>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a15      	ldr	r2, [pc, #84]	; (8005070 <TIM_OC6_SetConfig+0xb0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC6_SetConfig+0x68>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a14      	ldr	r2, [pc, #80]	; (8005074 <TIM_OC6_SetConfig+0xb4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4a13      	ldr	r2, [pc, #76]	; (8005078 <TIM_OC6_SetConfig+0xb8>)
 800502c:	4013      	ands	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	029b      	lsls	r3, r3, #10
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46bd      	mov	sp, r7
 800505a:	b006      	add	sp, #24
 800505c:	bd80      	pop	{r7, pc}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	ffefffff 	.word	0xffefffff
 8005064:	feff8fff 	.word	0xfeff8fff
 8005068:	ffdfffff 	.word	0xffdfffff
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800
 8005078:	fffbffff 	.word	0xfffbffff

0800507c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	2201      	movs	r2, #1
 8005094:	4393      	bics	r3, r2
 8005096:	001a      	movs	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	22f0      	movs	r2, #240	; 0xf0
 80050a6:	4393      	bics	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	220a      	movs	r2, #10
 80050b8:	4393      	bics	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b006      	add	sp, #24
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	2210      	movs	r2, #16
 80050f0:	4393      	bics	r3, r2
 80050f2:	001a      	movs	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <TIM_TI2_ConfigInputStage+0x60>)
 8005102:	4013      	ands	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	22a0      	movs	r2, #160	; 0xa0
 8005114:	4393      	bics	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	46bd      	mov	sp, r7
 8005132:	b006      	add	sp, #24
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	ffff0fff 	.word	0xffff0fff

0800513c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a08      	ldr	r2, [pc, #32]	; (8005170 <TIM_ITRx_SetConfig+0x34>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	2207      	movs	r2, #7
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	609a      	str	r2, [r3, #8]
}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	ffcfff8f 	.word	0xffcfff8f

08005174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <TIM_ETR_SetConfig+0x3c>)
 800518c:	4013      	ands	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b006      	add	sp, #24
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	ffff00ff 	.word	0xffff00ff

080051b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	221f      	movs	r2, #31
 80051c4:	4013      	ands	r3, r2
 80051c6:	2201      	movs	r2, #1
 80051c8:	409a      	lsls	r2, r3
 80051ca:	0013      	movs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	43d2      	mvns	r2, r2
 80051d6:	401a      	ands	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	211f      	movs	r1, #31
 80051e4:	400b      	ands	r3, r1
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4099      	lsls	r1, r3
 80051ea:	000b      	movs	r3, r1
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b006      	add	sp, #24
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	223c      	movs	r2, #60	; 0x3c
 800520a:	5c9b      	ldrb	r3, [r3, r2]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e04a      	b.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	223c      	movs	r2, #60	; 0x3c
 8005218:	2101      	movs	r1, #1
 800521a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	223d      	movs	r2, #61	; 0x3d
 8005220:	2102      	movs	r1, #2
 8005222:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2270      	movs	r2, #112	; 0x70
 8005254:	4393      	bics	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a10      	ldr	r2, [pc, #64]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10c      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	4393      	bics	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4313      	orrs	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	223d      	movs	r2, #61	; 0x3d
 800529c:	2101      	movs	r1, #1
 800529e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	223c      	movs	r2, #60	; 0x3c
 80052a4:	2100      	movs	r1, #0
 80052a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b004      	add	sp, #16
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	ff0fffff 	.word	0xff0fffff
 80052bc:	40000400 	.word	0x40000400

080052c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e046      	b.n	8005360 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2288      	movs	r2, #136	; 0x88
 80052d6:	589b      	ldr	r3, [r3, r2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d107      	bne.n	80052ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2284      	movs	r2, #132	; 0x84
 80052e0:	2100      	movs	r1, #0
 80052e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fc fe92 	bl	8002010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2288      	movs	r2, #136	; 0x88
 80052f0:	2124      	movs	r1, #36	; 0x24
 80052f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2101      	movs	r1, #1
 8005300:	438a      	bics	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 f996 	bl	8005640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0018      	movs	r0, r3
 8005318:	f000 f828 	bl	800536c <UART_SetConfig>
 800531c:	0003      	movs	r3, r0
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e01c      	b.n	8005360 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	490d      	ldr	r1, [pc, #52]	; (8005368 <HAL_UART_Init+0xa8>)
 8005332:	400a      	ands	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	212a      	movs	r1, #42	; 0x2a
 8005342:	438a      	bics	r2, r1
 8005344:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2101      	movs	r1, #1
 8005352:	430a      	orrs	r2, r1
 8005354:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fa25 	bl	80057a8 <UART_CheckIdleState>
 800535e:	0003      	movs	r3, r0
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}
 8005368:	ffffb7ff 	.word	0xffffb7ff

0800536c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005374:	231a      	movs	r3, #26
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	4313      	orrs	r3, r2
 8005392:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4aa1      	ldr	r2, [pc, #644]	; (8005620 <UART_SetConfig+0x2b4>)
 800539c:	4013      	ands	r3, r2
 800539e:	0019      	movs	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a9c      	ldr	r2, [pc, #624]	; (8005624 <UART_SetConfig+0x2b8>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a93      	ldr	r2, [pc, #588]	; (8005628 <UART_SetConfig+0x2bc>)
 80053da:	4013      	ands	r3, r2
 80053dc:	0019      	movs	r1, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	220f      	movs	r2, #15
 80053f0:	4393      	bics	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a89      	ldr	r2, [pc, #548]	; (800562c <UART_SetConfig+0x2c0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d127      	bne.n	800545a <UART_SetConfig+0xee>
 800540a:	4b89      	ldr	r3, [pc, #548]	; (8005630 <UART_SetConfig+0x2c4>)
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	2203      	movs	r2, #3
 8005410:	4013      	ands	r3, r2
 8005412:	2b03      	cmp	r3, #3
 8005414:	d017      	beq.n	8005446 <UART_SetConfig+0xda>
 8005416:	d81b      	bhi.n	8005450 <UART_SetConfig+0xe4>
 8005418:	2b02      	cmp	r3, #2
 800541a:	d00a      	beq.n	8005432 <UART_SetConfig+0xc6>
 800541c:	d818      	bhi.n	8005450 <UART_SetConfig+0xe4>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <UART_SetConfig+0xbc>
 8005422:	2b01      	cmp	r3, #1
 8005424:	d00a      	beq.n	800543c <UART_SetConfig+0xd0>
 8005426:	e013      	b.n	8005450 <UART_SetConfig+0xe4>
 8005428:	231b      	movs	r3, #27
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	e021      	b.n	8005476 <UART_SetConfig+0x10a>
 8005432:	231b      	movs	r3, #27
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	2202      	movs	r2, #2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e01c      	b.n	8005476 <UART_SetConfig+0x10a>
 800543c:	231b      	movs	r3, #27
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	2204      	movs	r2, #4
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e017      	b.n	8005476 <UART_SetConfig+0x10a>
 8005446:	231b      	movs	r3, #27
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	2208      	movs	r2, #8
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e012      	b.n	8005476 <UART_SetConfig+0x10a>
 8005450:	231b      	movs	r3, #27
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2210      	movs	r2, #16
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e00d      	b.n	8005476 <UART_SetConfig+0x10a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a75      	ldr	r2, [pc, #468]	; (8005634 <UART_SetConfig+0x2c8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d104      	bne.n	800546e <UART_SetConfig+0x102>
 8005464:	231b      	movs	r3, #27
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e003      	b.n	8005476 <UART_SetConfig+0x10a>
 800546e:	231b      	movs	r3, #27
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	2210      	movs	r2, #16
 8005474:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	429a      	cmp	r2, r3
 8005480:	d000      	beq.n	8005484 <UART_SetConfig+0x118>
 8005482:	e065      	b.n	8005550 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005484:	231b      	movs	r3, #27
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d015      	beq.n	80054ba <UART_SetConfig+0x14e>
 800548e:	dc18      	bgt.n	80054c2 <UART_SetConfig+0x156>
 8005490:	2b04      	cmp	r3, #4
 8005492:	d00d      	beq.n	80054b0 <UART_SetConfig+0x144>
 8005494:	dc15      	bgt.n	80054c2 <UART_SetConfig+0x156>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <UART_SetConfig+0x134>
 800549a:	2b02      	cmp	r3, #2
 800549c:	d005      	beq.n	80054aa <UART_SetConfig+0x13e>
 800549e:	e010      	b.n	80054c2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a0:	f7fe fc7e 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 80054a4:	0003      	movs	r3, r0
 80054a6:	617b      	str	r3, [r7, #20]
        break;
 80054a8:	e012      	b.n	80054d0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054aa:	4b63      	ldr	r3, [pc, #396]	; (8005638 <UART_SetConfig+0x2cc>)
 80054ac:	617b      	str	r3, [r7, #20]
        break;
 80054ae:	e00f      	b.n	80054d0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b0:	f7fe fbec 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 80054b4:	0003      	movs	r3, r0
 80054b6:	617b      	str	r3, [r7, #20]
        break;
 80054b8:	e00a      	b.n	80054d0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	617b      	str	r3, [r7, #20]
        break;
 80054c0:	e006      	b.n	80054d0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054c6:	231a      	movs	r3, #26
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
        break;
 80054ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d100      	bne.n	80054d8 <UART_SetConfig+0x16c>
 80054d6:	e08d      	b.n	80055f4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054dc:	4b57      	ldr	r3, [pc, #348]	; (800563c <UART_SetConfig+0x2d0>)
 80054de:	0052      	lsls	r2, r2, #1
 80054e0:	5ad3      	ldrh	r3, [r2, r3]
 80054e2:	0019      	movs	r1, r3
 80054e4:	6978      	ldr	r0, [r7, #20]
 80054e6:	f7fa fe0b 	bl	8000100 <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	005a      	lsls	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	18d2      	adds	r2, r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f7fa fdff 	bl	8000100 <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b0f      	cmp	r3, #15
 800550a:	d91c      	bls.n	8005546 <UART_SetConfig+0x1da>
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	025b      	lsls	r3, r3, #9
 8005512:	429a      	cmp	r2, r3
 8005514:	d217      	bcs.n	8005546 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	b29a      	uxth	r2, r3
 800551a:	200e      	movs	r0, #14
 800551c:	183b      	adds	r3, r7, r0
 800551e:	210f      	movs	r1, #15
 8005520:	438a      	bics	r2, r1
 8005522:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	2207      	movs	r2, #7
 800552c:	4013      	ands	r3, r2
 800552e:	b299      	uxth	r1, r3
 8005530:	183b      	adds	r3, r7, r0
 8005532:	183a      	adds	r2, r7, r0
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	183a      	adds	r2, r7, r0
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	e056      	b.n	80055f4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005546:	231a      	movs	r3, #26
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e051      	b.n	80055f4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005550:	231b      	movs	r3, #27
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b08      	cmp	r3, #8
 8005558:	d015      	beq.n	8005586 <UART_SetConfig+0x21a>
 800555a:	dc18      	bgt.n	800558e <UART_SetConfig+0x222>
 800555c:	2b04      	cmp	r3, #4
 800555e:	d00d      	beq.n	800557c <UART_SetConfig+0x210>
 8005560:	dc15      	bgt.n	800558e <UART_SetConfig+0x222>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <UART_SetConfig+0x200>
 8005566:	2b02      	cmp	r3, #2
 8005568:	d005      	beq.n	8005576 <UART_SetConfig+0x20a>
 800556a:	e010      	b.n	800558e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800556c:	f7fe fc18 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8005570:	0003      	movs	r3, r0
 8005572:	617b      	str	r3, [r7, #20]
        break;
 8005574:	e012      	b.n	800559c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005576:	4b30      	ldr	r3, [pc, #192]	; (8005638 <UART_SetConfig+0x2cc>)
 8005578:	617b      	str	r3, [r7, #20]
        break;
 800557a:	e00f      	b.n	800559c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800557c:	f7fe fb86 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8005580:	0003      	movs	r3, r0
 8005582:	617b      	str	r3, [r7, #20]
        break;
 8005584:	e00a      	b.n	800559c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	617b      	str	r3, [r7, #20]
        break;
 800558c:	e006      	b.n	800559c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005592:	231a      	movs	r3, #26
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
        break;
 800559a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d028      	beq.n	80055f4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a6:	4b25      	ldr	r3, [pc, #148]	; (800563c <UART_SetConfig+0x2d0>)
 80055a8:	0052      	lsls	r2, r2, #1
 80055aa:	5ad3      	ldrh	r3, [r2, r3]
 80055ac:	0019      	movs	r1, r3
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	f7fa fda6 	bl	8000100 <__udivsi3>
 80055b4:	0003      	movs	r3, r0
 80055b6:	001a      	movs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	18d2      	adds	r2, r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	0019      	movs	r1, r3
 80055c6:	0010      	movs	r0, r2
 80055c8:	f7fa fd9a 	bl	8000100 <__udivsi3>
 80055cc:	0003      	movs	r3, r0
 80055ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d90a      	bls.n	80055ec <UART_SetConfig+0x280>
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	025b      	lsls	r3, r3, #9
 80055dc:	429a      	cmp	r2, r3
 80055de:	d205      	bcs.n	80055ec <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e003      	b.n	80055f4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80055ec:	231a      	movs	r3, #26
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	226a      	movs	r2, #106	; 0x6a
 80055f8:	2101      	movs	r1, #1
 80055fa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2268      	movs	r2, #104	; 0x68
 8005600:	2101      	movs	r1, #1
 8005602:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005610:	231a      	movs	r3, #26
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	781b      	ldrb	r3, [r3, #0]
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b008      	add	sp, #32
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	cfff69f3 	.word	0xcfff69f3
 8005624:	ffffcfff 	.word	0xffffcfff
 8005628:	11fff4ff 	.word	0x11fff4ff
 800562c:	40013800 	.word	0x40013800
 8005630:	40021000 	.word	0x40021000
 8005634:	40004400 	.word	0x40004400
 8005638:	00f42400 	.word	0x00f42400
 800563c:	080067b8 	.word	0x080067b8

08005640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	2208      	movs	r2, #8
 800564e:	4013      	ands	r3, r2
 8005650:	d00b      	beq.n	800566a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a4a      	ldr	r2, [pc, #296]	; (8005784 <UART_AdvFeatureConfig+0x144>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	2201      	movs	r2, #1
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4a43      	ldr	r2, [pc, #268]	; (8005788 <UART_AdvFeatureConfig+0x148>)
 800567c:	4013      	ands	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	2202      	movs	r2, #2
 8005692:	4013      	ands	r3, r2
 8005694:	d00b      	beq.n	80056ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a3b      	ldr	r2, [pc, #236]	; (800578c <UART_AdvFeatureConfig+0x14c>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	2204      	movs	r2, #4
 80056b4:	4013      	ands	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	4a34      	ldr	r2, [pc, #208]	; (8005790 <UART_AdvFeatureConfig+0x150>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	2210      	movs	r2, #16
 80056d6:	4013      	ands	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <UART_AdvFeatureConfig+0x154>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2220      	movs	r2, #32
 80056f8:	4013      	ands	r3, r2
 80056fa:	d00b      	beq.n	8005714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	4a25      	ldr	r2, [pc, #148]	; (8005798 <UART_AdvFeatureConfig+0x158>)
 8005704:	4013      	ands	r3, r2
 8005706:	0019      	movs	r1, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	2240      	movs	r2, #64	; 0x40
 800571a:	4013      	ands	r3, r2
 800571c:	d01d      	beq.n	800575a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <UART_AdvFeatureConfig+0x15c>)
 8005726:	4013      	ands	r3, r2
 8005728:	0019      	movs	r1, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	035b      	lsls	r3, r3, #13
 800573e:	429a      	cmp	r2, r3
 8005740:	d10b      	bne.n	800575a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <UART_AdvFeatureConfig+0x160>)
 800574a:	4013      	ands	r3, r2
 800574c:	0019      	movs	r1, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	4013      	ands	r3, r2
 8005762:	d00b      	beq.n	800577c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <UART_AdvFeatureConfig+0x164>)
 800576c:	4013      	ands	r3, r2
 800576e:	0019      	movs	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}
 8005784:	ffff7fff 	.word	0xffff7fff
 8005788:	fffdffff 	.word	0xfffdffff
 800578c:	fffeffff 	.word	0xfffeffff
 8005790:	fffbffff 	.word	0xfffbffff
 8005794:	ffffefff 	.word	0xffffefff
 8005798:	ffffdfff 	.word	0xffffdfff
 800579c:	ffefffff 	.word	0xffefffff
 80057a0:	ff9fffff 	.word	0xff9fffff
 80057a4:	fff7ffff 	.word	0xfff7ffff

080057a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b092      	sub	sp, #72	; 0x48
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2290      	movs	r2, #144	; 0x90
 80057b4:	2100      	movs	r1, #0
 80057b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057b8:	f7fd f89e 	bl	80028f8 <HAL_GetTick>
 80057bc:	0003      	movs	r3, r0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2208      	movs	r2, #8
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d12d      	bne.n	800582a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	0391      	lsls	r1, r2, #14
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4a47      	ldr	r2, [pc, #284]	; (80058f4 <UART_CheckIdleState+0x14c>)
 80057d8:	9200      	str	r2, [sp, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	f000 f88e 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 80057e0:	1e03      	subs	r3, r0, #0
 80057e2:	d022      	beq.n	800582a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e4:	f3ef 8310 	mrs	r3, PRIMASK
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ee:	2301      	movs	r3, #1
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	f383 8810 	msr	PRIMASK, r3
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2180      	movs	r1, #128	; 0x80
 8005806:	438a      	bics	r2, r1
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	f383 8810 	msr	PRIMASK, r3
}
 8005814:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2288      	movs	r2, #136	; 0x88
 800581a:	2120      	movs	r1, #32
 800581c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2284      	movs	r2, #132	; 0x84
 8005822:	2100      	movs	r1, #0
 8005824:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e060      	b.n	80058ec <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2204      	movs	r2, #4
 8005832:	4013      	ands	r3, r2
 8005834:	2b04      	cmp	r3, #4
 8005836:	d146      	bne.n	80058c6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	03d1      	lsls	r1, r2, #15
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4a2c      	ldr	r2, [pc, #176]	; (80058f4 <UART_CheckIdleState+0x14c>)
 8005842:	9200      	str	r2, [sp, #0]
 8005844:	2200      	movs	r2, #0
 8005846:	f000 f859 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 800584a:	1e03      	subs	r3, r0, #0
 800584c:	d03b      	beq.n	80058c6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800584e:	f3ef 8310 	mrs	r3, PRIMASK
 8005852:	60fb      	str	r3, [r7, #12]
  return(result);
 8005854:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
 8005858:	2301      	movs	r3, #1
 800585a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4922      	ldr	r1, [pc, #136]	; (80058f8 <UART_CheckIdleState+0x150>)
 8005870:	400a      	ands	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f383 8810 	msr	PRIMASK, r3
}
 800587e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005880:	f3ef 8310 	mrs	r3, PRIMASK
 8005884:	61bb      	str	r3, [r7, #24]
  return(result);
 8005886:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
 800588a:	2301      	movs	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f383 8810 	msr	PRIMASK, r3
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2101      	movs	r1, #1
 80058a2:	438a      	bics	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f383 8810 	msr	PRIMASK, r3
}
 80058b0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	228c      	movs	r2, #140	; 0x8c
 80058b6:	2120      	movs	r1, #32
 80058b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2284      	movs	r2, #132	; 0x84
 80058be:	2100      	movs	r1, #0
 80058c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e012      	b.n	80058ec <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2288      	movs	r2, #136	; 0x88
 80058ca:	2120      	movs	r1, #32
 80058cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	228c      	movs	r2, #140	; 0x8c
 80058d2:	2120      	movs	r1, #32
 80058d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2284      	movs	r2, #132	; 0x84
 80058e6:	2100      	movs	r1, #0
 80058e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b010      	add	sp, #64	; 0x40
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	01ffffff 	.word	0x01ffffff
 80058f8:	fffffedf 	.word	0xfffffedf

080058fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	1dfb      	adds	r3, r7, #7
 800590a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590c:	e051      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3301      	adds	r3, #1
 8005912:	d04e      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005914:	f7fc fff0 	bl	80028f8 <HAL_GetTick>
 8005918:	0002      	movs	r2, r0
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	d302      	bcc.n	800592a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e051      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2204      	movs	r2, #4
 8005936:	4013      	ands	r3, r2
 8005938:	d03b      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b80      	cmp	r3, #128	; 0x80
 800593e:	d038      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d035      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	2208      	movs	r2, #8
 800594e:	4013      	ands	r3, r2
 8005950:	2b08      	cmp	r3, #8
 8005952:	d111      	bne.n	8005978 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2208      	movs	r2, #8
 800595a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	0018      	movs	r0, r3
 8005960:	f000 f83c 	bl	80059dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2290      	movs	r2, #144	; 0x90
 8005968:	2108      	movs	r1, #8
 800596a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2284      	movs	r2, #132	; 0x84
 8005970:	2100      	movs	r1, #0
 8005972:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e02c      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	401a      	ands	r2, r3
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	429a      	cmp	r2, r3
 800598a:	d112      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 f81f 	bl	80059dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2290      	movs	r2, #144	; 0x90
 80059a2:	2120      	movs	r1, #32
 80059a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2284      	movs	r2, #132	; 0x84
 80059aa:	2100      	movs	r1, #0
 80059ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e00f      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	425a      	negs	r2, r3
 80059c2:	4153      	adcs	r3, r2
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	001a      	movs	r2, r3
 80059c8:	1dfb      	adds	r3, r7, #7
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d09e      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	0018      	movs	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b004      	add	sp, #16
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	617b      	str	r3, [r7, #20]
  return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
 80059ee:	2301      	movs	r3, #1
 80059f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4926      	ldr	r1, [pc, #152]	; (8005aa0 <UART_EndRxTransfer+0xc4>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a16:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1a:	623b      	str	r3, [r7, #32]
  return(result);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a20:	2301      	movs	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	f383 8810 	msr	PRIMASK, r3
}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	491b      	ldr	r1, [pc, #108]	; (8005aa4 <UART_EndRxTransfer+0xc8>)
 8005a38:	400a      	ands	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	f383 8810 	msr	PRIMASK, r3
}
 8005a46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d118      	bne.n	8005a82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a50:	f3ef 8310 	mrs	r3, PRIMASK
 8005a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f383 8810 	msr	PRIMASK, r3
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2110      	movs	r1, #16
 8005a72:	438a      	bics	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f383 8810 	msr	PRIMASK, r3
}
 8005a80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	228c      	movs	r2, #140	; 0x8c
 8005a86:	2120      	movs	r1, #32
 8005a88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b00e      	add	sp, #56	; 0x38
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	fffffedf 	.word	0xfffffedf
 8005aa4:	effffffe 	.word	0xeffffffe

08005aa8 <sinf>:
 8005aa8:	b507      	push	{r0, r1, r2, lr}
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <sinf+0x6c>)
 8005aac:	0043      	lsls	r3, r0, #1
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	dc04      	bgt.n	8005abe <sinf+0x16>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	f000 fcb2 	bl	8006420 <__kernel_sinf>
 8005abc:	e006      	b.n	8005acc <sinf+0x24>
 8005abe:	22ff      	movs	r2, #255	; 0xff
 8005ac0:	05d2      	lsls	r2, r2, #23
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	db03      	blt.n	8005ace <sinf+0x26>
 8005ac6:	1c01      	adds	r1, r0, #0
 8005ac8:	f7fa ff54 	bl	8000974 <__aeabi_fsub>
 8005acc:	bd0e      	pop	{r1, r2, r3, pc}
 8005ace:	4669      	mov	r1, sp
 8005ad0:	f000 f822 	bl	8005b18 <__ieee754_rem_pio2f>
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	4018      	ands	r0, r3
 8005ad8:	2801      	cmp	r0, #1
 8005ada:	d007      	beq.n	8005aec <sinf+0x44>
 8005adc:	2802      	cmp	r0, #2
 8005ade:	d00a      	beq.n	8005af6 <sinf+0x4e>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d111      	bne.n	8005b08 <sinf+0x60>
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	9901      	ldr	r1, [sp, #4]
 8005ae8:	9800      	ldr	r0, [sp, #0]
 8005aea:	e7e5      	b.n	8005ab8 <sinf+0x10>
 8005aec:	9901      	ldr	r1, [sp, #4]
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	f000 f96e 	bl	8005dd0 <__kernel_cosf>
 8005af4:	e7ea      	b.n	8005acc <sinf+0x24>
 8005af6:	2201      	movs	r2, #1
 8005af8:	9901      	ldr	r1, [sp, #4]
 8005afa:	9800      	ldr	r0, [sp, #0]
 8005afc:	f000 fc90 	bl	8006420 <__kernel_sinf>
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	18c0      	adds	r0, r0, r3
 8005b06:	e7e1      	b.n	8005acc <sinf+0x24>
 8005b08:	9901      	ldr	r1, [sp, #4]
 8005b0a:	9800      	ldr	r0, [sp, #0]
 8005b0c:	f000 f960 	bl	8005dd0 <__kernel_cosf>
 8005b10:	e7f6      	b.n	8005b00 <sinf+0x58>
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	3f490fd8 	.word	0x3f490fd8

08005b18 <__ieee754_rem_pio2f>:
 8005b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1a:	4ba0      	ldr	r3, [pc, #640]	; (8005d9c <__ieee754_rem_pio2f+0x284>)
 8005b1c:	b08b      	sub	sp, #44	; 0x2c
 8005b1e:	0045      	lsls	r5, r0, #1
 8005b20:	000c      	movs	r4, r1
 8005b22:	9005      	str	r0, [sp, #20]
 8005b24:	086d      	lsrs	r5, r5, #1
 8005b26:	429d      	cmp	r5, r3
 8005b28:	dc04      	bgt.n	8005b34 <__ieee754_rem_pio2f+0x1c>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6008      	str	r0, [r1, #0]
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	2700      	movs	r7, #0
 8005b32:	e01a      	b.n	8005b6a <__ieee754_rem_pio2f+0x52>
 8005b34:	4b9a      	ldr	r3, [pc, #616]	; (8005da0 <__ieee754_rem_pio2f+0x288>)
 8005b36:	429d      	cmp	r5, r3
 8005b38:	dc4a      	bgt.n	8005bd0 <__ieee754_rem_pio2f+0xb8>
 8005b3a:	230f      	movs	r3, #15
 8005b3c:	4e99      	ldr	r6, [pc, #612]	; (8005da4 <__ieee754_rem_pio2f+0x28c>)
 8005b3e:	499a      	ldr	r1, [pc, #616]	; (8005da8 <__ieee754_rem_pio2f+0x290>)
 8005b40:	439d      	bics	r5, r3
 8005b42:	2800      	cmp	r0, #0
 8005b44:	dd22      	ble.n	8005b8c <__ieee754_rem_pio2f+0x74>
 8005b46:	f7fa ff15 	bl	8000974 <__aeabi_fsub>
 8005b4a:	1c07      	adds	r7, r0, #0
 8005b4c:	42b5      	cmp	r5, r6
 8005b4e:	d00f      	beq.n	8005b70 <__ieee754_rem_pio2f+0x58>
 8005b50:	4996      	ldr	r1, [pc, #600]	; (8005dac <__ieee754_rem_pio2f+0x294>)
 8005b52:	f7fa ff0f 	bl	8000974 <__aeabi_fsub>
 8005b56:	1c01      	adds	r1, r0, #0
 8005b58:	6020      	str	r0, [r4, #0]
 8005b5a:	1c38      	adds	r0, r7, #0
 8005b5c:	f7fa ff0a 	bl	8000974 <__aeabi_fsub>
 8005b60:	4992      	ldr	r1, [pc, #584]	; (8005dac <__ieee754_rem_pio2f+0x294>)
 8005b62:	f7fa ff07 	bl	8000974 <__aeabi_fsub>
 8005b66:	2701      	movs	r7, #1
 8005b68:	6060      	str	r0, [r4, #4]
 8005b6a:	0038      	movs	r0, r7
 8005b6c:	b00b      	add	sp, #44	; 0x2c
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b70:	498f      	ldr	r1, [pc, #572]	; (8005db0 <__ieee754_rem_pio2f+0x298>)
 8005b72:	f7fa feff 	bl	8000974 <__aeabi_fsub>
 8005b76:	498f      	ldr	r1, [pc, #572]	; (8005db4 <__ieee754_rem_pio2f+0x29c>)
 8005b78:	1c05      	adds	r5, r0, #0
 8005b7a:	f7fa fefb 	bl	8000974 <__aeabi_fsub>
 8005b7e:	1c01      	adds	r1, r0, #0
 8005b80:	6020      	str	r0, [r4, #0]
 8005b82:	1c28      	adds	r0, r5, #0
 8005b84:	f7fa fef6 	bl	8000974 <__aeabi_fsub>
 8005b88:	498a      	ldr	r1, [pc, #552]	; (8005db4 <__ieee754_rem_pio2f+0x29c>)
 8005b8a:	e7ea      	b.n	8005b62 <__ieee754_rem_pio2f+0x4a>
 8005b8c:	f7fa fb7e 	bl	800028c <__aeabi_fadd>
 8005b90:	1c07      	adds	r7, r0, #0
 8005b92:	42b5      	cmp	r5, r6
 8005b94:	d00e      	beq.n	8005bb4 <__ieee754_rem_pio2f+0x9c>
 8005b96:	4985      	ldr	r1, [pc, #532]	; (8005dac <__ieee754_rem_pio2f+0x294>)
 8005b98:	f7fa fb78 	bl	800028c <__aeabi_fadd>
 8005b9c:	1c01      	adds	r1, r0, #0
 8005b9e:	6020      	str	r0, [r4, #0]
 8005ba0:	1c38      	adds	r0, r7, #0
 8005ba2:	f7fa fee7 	bl	8000974 <__aeabi_fsub>
 8005ba6:	4981      	ldr	r1, [pc, #516]	; (8005dac <__ieee754_rem_pio2f+0x294>)
 8005ba8:	f7fa fb70 	bl	800028c <__aeabi_fadd>
 8005bac:	2701      	movs	r7, #1
 8005bae:	6060      	str	r0, [r4, #4]
 8005bb0:	427f      	negs	r7, r7
 8005bb2:	e7da      	b.n	8005b6a <__ieee754_rem_pio2f+0x52>
 8005bb4:	497e      	ldr	r1, [pc, #504]	; (8005db0 <__ieee754_rem_pio2f+0x298>)
 8005bb6:	f7fa fb69 	bl	800028c <__aeabi_fadd>
 8005bba:	497e      	ldr	r1, [pc, #504]	; (8005db4 <__ieee754_rem_pio2f+0x29c>)
 8005bbc:	1c05      	adds	r5, r0, #0
 8005bbe:	f7fa fb65 	bl	800028c <__aeabi_fadd>
 8005bc2:	1c01      	adds	r1, r0, #0
 8005bc4:	6020      	str	r0, [r4, #0]
 8005bc6:	1c28      	adds	r0, r5, #0
 8005bc8:	f7fa fed4 	bl	8000974 <__aeabi_fsub>
 8005bcc:	4979      	ldr	r1, [pc, #484]	; (8005db4 <__ieee754_rem_pio2f+0x29c>)
 8005bce:	e7eb      	b.n	8005ba8 <__ieee754_rem_pio2f+0x90>
 8005bd0:	4b79      	ldr	r3, [pc, #484]	; (8005db8 <__ieee754_rem_pio2f+0x2a0>)
 8005bd2:	429d      	cmp	r5, r3
 8005bd4:	dd00      	ble.n	8005bd8 <__ieee754_rem_pio2f+0xc0>
 8005bd6:	e091      	b.n	8005cfc <__ieee754_rem_pio2f+0x1e4>
 8005bd8:	f000 fc96 	bl	8006508 <fabsf>
 8005bdc:	4977      	ldr	r1, [pc, #476]	; (8005dbc <__ieee754_rem_pio2f+0x2a4>)
 8005bde:	1c06      	adds	r6, r0, #0
 8005be0:	f7fa fda2 	bl	8000728 <__aeabi_fmul>
 8005be4:	21fc      	movs	r1, #252	; 0xfc
 8005be6:	0589      	lsls	r1, r1, #22
 8005be8:	f7fa fb50 	bl	800028c <__aeabi_fadd>
 8005bec:	f7fb f870 	bl	8000cd0 <__aeabi_f2iz>
 8005bf0:	0007      	movs	r7, r0
 8005bf2:	f7fb f88d 	bl	8000d10 <__aeabi_i2f>
 8005bf6:	496c      	ldr	r1, [pc, #432]	; (8005da8 <__ieee754_rem_pio2f+0x290>)
 8005bf8:	9003      	str	r0, [sp, #12]
 8005bfa:	f7fa fd95 	bl	8000728 <__aeabi_fmul>
 8005bfe:	1c01      	adds	r1, r0, #0
 8005c00:	1c30      	adds	r0, r6, #0
 8005c02:	f7fa feb7 	bl	8000974 <__aeabi_fsub>
 8005c06:	4969      	ldr	r1, [pc, #420]	; (8005dac <__ieee754_rem_pio2f+0x294>)
 8005c08:	9002      	str	r0, [sp, #8]
 8005c0a:	9803      	ldr	r0, [sp, #12]
 8005c0c:	f7fa fd8c 	bl	8000728 <__aeabi_fmul>
 8005c10:	1c06      	adds	r6, r0, #0
 8005c12:	2f1f      	cmp	r7, #31
 8005c14:	dc0d      	bgt.n	8005c32 <__ieee754_rem_pio2f+0x11a>
 8005c16:	23ff      	movs	r3, #255	; 0xff
 8005c18:	002a      	movs	r2, r5
 8005c1a:	4969      	ldr	r1, [pc, #420]	; (8005dc0 <__ieee754_rem_pio2f+0x2a8>)
 8005c1c:	439a      	bics	r2, r3
 8005c1e:	1e7b      	subs	r3, r7, #1
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	585b      	ldr	r3, [r3, r1]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d004      	beq.n	8005c32 <__ieee754_rem_pio2f+0x11a>
 8005c28:	9802      	ldr	r0, [sp, #8]
 8005c2a:	1c31      	adds	r1, r6, #0
 8005c2c:	f7fa fea2 	bl	8000974 <__aeabi_fsub>
 8005c30:	e00c      	b.n	8005c4c <__ieee754_rem_pio2f+0x134>
 8005c32:	9802      	ldr	r0, [sp, #8]
 8005c34:	1c31      	adds	r1, r6, #0
 8005c36:	f7fa fe9d 	bl	8000974 <__aeabi_fsub>
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	15eb      	asrs	r3, r5, #23
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	0dc3      	lsrs	r3, r0, #23
 8005c42:	4013      	ands	r3, r2
 8005c44:	9a04      	ldr	r2, [sp, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	dc01      	bgt.n	8005c50 <__ieee754_rem_pio2f+0x138>
 8005c4c:	6020      	str	r0, [r4, #0]
 8005c4e:	e026      	b.n	8005c9e <__ieee754_rem_pio2f+0x186>
 8005c50:	4957      	ldr	r1, [pc, #348]	; (8005db0 <__ieee754_rem_pio2f+0x298>)
 8005c52:	9803      	ldr	r0, [sp, #12]
 8005c54:	f7fa fd68 	bl	8000728 <__aeabi_fmul>
 8005c58:	1c06      	adds	r6, r0, #0
 8005c5a:	1c01      	adds	r1, r0, #0
 8005c5c:	9802      	ldr	r0, [sp, #8]
 8005c5e:	f7fa fe89 	bl	8000974 <__aeabi_fsub>
 8005c62:	1c01      	adds	r1, r0, #0
 8005c64:	1c05      	adds	r5, r0, #0
 8005c66:	9802      	ldr	r0, [sp, #8]
 8005c68:	f7fa fe84 	bl	8000974 <__aeabi_fsub>
 8005c6c:	1c31      	adds	r1, r6, #0
 8005c6e:	f7fa fe81 	bl	8000974 <__aeabi_fsub>
 8005c72:	4950      	ldr	r1, [pc, #320]	; (8005db4 <__ieee754_rem_pio2f+0x29c>)
 8005c74:	1c06      	adds	r6, r0, #0
 8005c76:	9803      	ldr	r0, [sp, #12]
 8005c78:	f7fa fd56 	bl	8000728 <__aeabi_fmul>
 8005c7c:	1c31      	adds	r1, r6, #0
 8005c7e:	f7fa fe79 	bl	8000974 <__aeabi_fsub>
 8005c82:	1c01      	adds	r1, r0, #0
 8005c84:	1c06      	adds	r6, r0, #0
 8005c86:	1c28      	adds	r0, r5, #0
 8005c88:	f7fa fe74 	bl	8000974 <__aeabi_fsub>
 8005c8c:	22ff      	movs	r2, #255	; 0xff
 8005c8e:	0dc3      	lsrs	r3, r0, #23
 8005c90:	4013      	ands	r3, r2
 8005c92:	9a04      	ldr	r2, [sp, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b19      	cmp	r3, #25
 8005c98:	dc15      	bgt.n	8005cc6 <__ieee754_rem_pio2f+0x1ae>
 8005c9a:	6020      	str	r0, [r4, #0]
 8005c9c:	9502      	str	r5, [sp, #8]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	9802      	ldr	r0, [sp, #8]
 8005ca2:	1c29      	adds	r1, r5, #0
 8005ca4:	f7fa fe66 	bl	8000974 <__aeabi_fsub>
 8005ca8:	1c31      	adds	r1, r6, #0
 8005caa:	f7fa fe63 	bl	8000974 <__aeabi_fsub>
 8005cae:	9b05      	ldr	r3, [sp, #20]
 8005cb0:	6060      	str	r0, [r4, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db00      	blt.n	8005cb8 <__ieee754_rem_pio2f+0x1a0>
 8005cb6:	e758      	b.n	8005b6a <__ieee754_rem_pio2f+0x52>
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	18ed      	adds	r5, r5, r3
 8005cbe:	18c0      	adds	r0, r0, r3
 8005cc0:	6025      	str	r5, [r4, #0]
 8005cc2:	6060      	str	r0, [r4, #4]
 8005cc4:	e774      	b.n	8005bb0 <__ieee754_rem_pio2f+0x98>
 8005cc6:	493f      	ldr	r1, [pc, #252]	; (8005dc4 <__ieee754_rem_pio2f+0x2ac>)
 8005cc8:	9803      	ldr	r0, [sp, #12]
 8005cca:	f7fa fd2d 	bl	8000728 <__aeabi_fmul>
 8005cce:	1c06      	adds	r6, r0, #0
 8005cd0:	1c01      	adds	r1, r0, #0
 8005cd2:	1c28      	adds	r0, r5, #0
 8005cd4:	f7fa fe4e 	bl	8000974 <__aeabi_fsub>
 8005cd8:	1c01      	adds	r1, r0, #0
 8005cda:	9002      	str	r0, [sp, #8]
 8005cdc:	1c28      	adds	r0, r5, #0
 8005cde:	f7fa fe49 	bl	8000974 <__aeabi_fsub>
 8005ce2:	1c31      	adds	r1, r6, #0
 8005ce4:	f7fa fe46 	bl	8000974 <__aeabi_fsub>
 8005ce8:	4937      	ldr	r1, [pc, #220]	; (8005dc8 <__ieee754_rem_pio2f+0x2b0>)
 8005cea:	1c05      	adds	r5, r0, #0
 8005cec:	9803      	ldr	r0, [sp, #12]
 8005cee:	f7fa fd1b 	bl	8000728 <__aeabi_fmul>
 8005cf2:	1c29      	adds	r1, r5, #0
 8005cf4:	f7fa fe3e 	bl	8000974 <__aeabi_fsub>
 8005cf8:	1c06      	adds	r6, r0, #0
 8005cfa:	e795      	b.n	8005c28 <__ieee754_rem_pio2f+0x110>
 8005cfc:	23ff      	movs	r3, #255	; 0xff
 8005cfe:	05db      	lsls	r3, r3, #23
 8005d00:	429d      	cmp	r5, r3
 8005d02:	db05      	blt.n	8005d10 <__ieee754_rem_pio2f+0x1f8>
 8005d04:	1c01      	adds	r1, r0, #0
 8005d06:	f7fa fe35 	bl	8000974 <__aeabi_fsub>
 8005d0a:	6060      	str	r0, [r4, #4]
 8005d0c:	6020      	str	r0, [r4, #0]
 8005d0e:	e70f      	b.n	8005b30 <__ieee754_rem_pio2f+0x18>
 8005d10:	15ee      	asrs	r6, r5, #23
 8005d12:	3e86      	subs	r6, #134	; 0x86
 8005d14:	05f3      	lsls	r3, r6, #23
 8005d16:	1aed      	subs	r5, r5, r3
 8005d18:	1c28      	adds	r0, r5, #0
 8005d1a:	f7fa ffd9 	bl	8000cd0 <__aeabi_f2iz>
 8005d1e:	f7fa fff7 	bl	8000d10 <__aeabi_i2f>
 8005d22:	1c01      	adds	r1, r0, #0
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	1c28      	adds	r0, r5, #0
 8005d28:	f7fa fe24 	bl	8000974 <__aeabi_fsub>
 8005d2c:	2187      	movs	r1, #135	; 0x87
 8005d2e:	05c9      	lsls	r1, r1, #23
 8005d30:	f7fa fcfa 	bl	8000728 <__aeabi_fmul>
 8005d34:	1c07      	adds	r7, r0, #0
 8005d36:	f7fa ffcb 	bl	8000cd0 <__aeabi_f2iz>
 8005d3a:	f7fa ffe9 	bl	8000d10 <__aeabi_i2f>
 8005d3e:	1c01      	adds	r1, r0, #0
 8005d40:	9008      	str	r0, [sp, #32]
 8005d42:	1c05      	adds	r5, r0, #0
 8005d44:	1c38      	adds	r0, r7, #0
 8005d46:	f7fa fe15 	bl	8000974 <__aeabi_fsub>
 8005d4a:	2187      	movs	r1, #135	; 0x87
 8005d4c:	05c9      	lsls	r1, r1, #23
 8005d4e:	f7fa fceb 	bl	8000728 <__aeabi_fmul>
 8005d52:	2100      	movs	r1, #0
 8005d54:	9009      	str	r0, [sp, #36]	; 0x24
 8005d56:	f7fa fa6b 	bl	8000230 <__aeabi_fcmpeq>
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d006      	beq.n	8005d6e <__ieee754_rem_pio2f+0x256>
 8005d60:	2100      	movs	r1, #0
 8005d62:	1c28      	adds	r0, r5, #0
 8005d64:	f7fa fa64 	bl	8000230 <__aeabi_fcmpeq>
 8005d68:	4243      	negs	r3, r0
 8005d6a:	4143      	adcs	r3, r0
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <__ieee754_rem_pio2f+0x2b4>)
 8005d70:	0021      	movs	r1, r4
 8005d72:	9201      	str	r2, [sp, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	a807      	add	r0, sp, #28
 8005d78:	9200      	str	r2, [sp, #0]
 8005d7a:	0032      	movs	r2, r6
 8005d7c:	f000 f8a8 	bl	8005ed0 <__kernel_rem_pio2f>
 8005d80:	9b05      	ldr	r3, [sp, #20]
 8005d82:	0007      	movs	r7, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	db00      	blt.n	8005d8a <__ieee754_rem_pio2f+0x272>
 8005d88:	e6ef      	b.n	8005b6a <__ieee754_rem_pio2f+0x52>
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	0612      	lsls	r2, r2, #24
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	e709      	b.n	8005bb0 <__ieee754_rem_pio2f+0x98>
 8005d9c:	3f490fd8 	.word	0x3f490fd8
 8005da0:	4016cbe3 	.word	0x4016cbe3
 8005da4:	3fc90fd0 	.word	0x3fc90fd0
 8005da8:	3fc90f80 	.word	0x3fc90f80
 8005dac:	37354443 	.word	0x37354443
 8005db0:	37354400 	.word	0x37354400
 8005db4:	2e85a308 	.word	0x2e85a308
 8005db8:	43490f80 	.word	0x43490f80
 8005dbc:	3f22f984 	.word	0x3f22f984
 8005dc0:	080067d0 	.word	0x080067d0
 8005dc4:	2e85a300 	.word	0x2e85a300
 8005dc8:	248d3132 	.word	0x248d3132
 8005dcc:	08006850 	.word	0x08006850

08005dd0 <__kernel_cosf>:
 8005dd0:	23c8      	movs	r3, #200	; 0xc8
 8005dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dd4:	0044      	lsls	r4, r0, #1
 8005dd6:	1c06      	adds	r6, r0, #0
 8005dd8:	9101      	str	r1, [sp, #4]
 8005dda:	0864      	lsrs	r4, r4, #1
 8005ddc:	059b      	lsls	r3, r3, #22
 8005dde:	429c      	cmp	r4, r3
 8005de0:	da03      	bge.n	8005dea <__kernel_cosf+0x1a>
 8005de2:	f7fa ff75 	bl	8000cd0 <__aeabi_f2iz>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d05d      	beq.n	8005ea6 <__kernel_cosf+0xd6>
 8005dea:	1c31      	adds	r1, r6, #0
 8005dec:	1c30      	adds	r0, r6, #0
 8005dee:	f7fa fc9b 	bl	8000728 <__aeabi_fmul>
 8005df2:	21fc      	movs	r1, #252	; 0xfc
 8005df4:	0589      	lsls	r1, r1, #22
 8005df6:	1c05      	adds	r5, r0, #0
 8005df8:	f7fa fc96 	bl	8000728 <__aeabi_fmul>
 8005dfc:	492b      	ldr	r1, [pc, #172]	; (8005eac <__kernel_cosf+0xdc>)
 8005dfe:	1c07      	adds	r7, r0, #0
 8005e00:	1c28      	adds	r0, r5, #0
 8005e02:	f7fa fc91 	bl	8000728 <__aeabi_fmul>
 8005e06:	492a      	ldr	r1, [pc, #168]	; (8005eb0 <__kernel_cosf+0xe0>)
 8005e08:	f7fa fa40 	bl	800028c <__aeabi_fadd>
 8005e0c:	1c29      	adds	r1, r5, #0
 8005e0e:	f7fa fc8b 	bl	8000728 <__aeabi_fmul>
 8005e12:	4928      	ldr	r1, [pc, #160]	; (8005eb4 <__kernel_cosf+0xe4>)
 8005e14:	f7fa fdae 	bl	8000974 <__aeabi_fsub>
 8005e18:	1c29      	adds	r1, r5, #0
 8005e1a:	f7fa fc85 	bl	8000728 <__aeabi_fmul>
 8005e1e:	4926      	ldr	r1, [pc, #152]	; (8005eb8 <__kernel_cosf+0xe8>)
 8005e20:	f7fa fa34 	bl	800028c <__aeabi_fadd>
 8005e24:	1c29      	adds	r1, r5, #0
 8005e26:	f7fa fc7f 	bl	8000728 <__aeabi_fmul>
 8005e2a:	4924      	ldr	r1, [pc, #144]	; (8005ebc <__kernel_cosf+0xec>)
 8005e2c:	f7fa fda2 	bl	8000974 <__aeabi_fsub>
 8005e30:	1c29      	adds	r1, r5, #0
 8005e32:	f7fa fc79 	bl	8000728 <__aeabi_fmul>
 8005e36:	4922      	ldr	r1, [pc, #136]	; (8005ec0 <__kernel_cosf+0xf0>)
 8005e38:	f7fa fa28 	bl	800028c <__aeabi_fadd>
 8005e3c:	1c29      	adds	r1, r5, #0
 8005e3e:	f7fa fc73 	bl	8000728 <__aeabi_fmul>
 8005e42:	1c29      	adds	r1, r5, #0
 8005e44:	f7fa fc70 	bl	8000728 <__aeabi_fmul>
 8005e48:	9901      	ldr	r1, [sp, #4]
 8005e4a:	1c05      	adds	r5, r0, #0
 8005e4c:	1c30      	adds	r0, r6, #0
 8005e4e:	f7fa fc6b 	bl	8000728 <__aeabi_fmul>
 8005e52:	1c01      	adds	r1, r0, #0
 8005e54:	1c28      	adds	r0, r5, #0
 8005e56:	f7fa fd8d 	bl	8000974 <__aeabi_fsub>
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <__kernel_cosf+0xf4>)
 8005e5c:	1c05      	adds	r5, r0, #0
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	dc09      	bgt.n	8005e76 <__kernel_cosf+0xa6>
 8005e62:	1c01      	adds	r1, r0, #0
 8005e64:	1c38      	adds	r0, r7, #0
 8005e66:	f7fa fd85 	bl	8000974 <__aeabi_fsub>
 8005e6a:	1c01      	adds	r1, r0, #0
 8005e6c:	20fe      	movs	r0, #254	; 0xfe
 8005e6e:	0580      	lsls	r0, r0, #22
 8005e70:	f7fa fd80 	bl	8000974 <__aeabi_fsub>
 8005e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <__kernel_cosf+0xf8>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	dc12      	bgt.n	8005ea2 <__kernel_cosf+0xd2>
 8005e7c:	23ff      	movs	r3, #255	; 0xff
 8005e7e:	061b      	lsls	r3, r3, #24
 8005e80:	18e4      	adds	r4, r4, r3
 8005e82:	20fe      	movs	r0, #254	; 0xfe
 8005e84:	1c21      	adds	r1, r4, #0
 8005e86:	0580      	lsls	r0, r0, #22
 8005e88:	f7fa fd74 	bl	8000974 <__aeabi_fsub>
 8005e8c:	1c21      	adds	r1, r4, #0
 8005e8e:	1c06      	adds	r6, r0, #0
 8005e90:	1c38      	adds	r0, r7, #0
 8005e92:	f7fa fd6f 	bl	8000974 <__aeabi_fsub>
 8005e96:	1c29      	adds	r1, r5, #0
 8005e98:	f7fa fd6c 	bl	8000974 <__aeabi_fsub>
 8005e9c:	1c01      	adds	r1, r0, #0
 8005e9e:	1c30      	adds	r0, r6, #0
 8005ea0:	e7e6      	b.n	8005e70 <__kernel_cosf+0xa0>
 8005ea2:	4c0a      	ldr	r4, [pc, #40]	; (8005ecc <__kernel_cosf+0xfc>)
 8005ea4:	e7ed      	b.n	8005e82 <__kernel_cosf+0xb2>
 8005ea6:	20fe      	movs	r0, #254	; 0xfe
 8005ea8:	0580      	lsls	r0, r0, #22
 8005eaa:	e7e3      	b.n	8005e74 <__kernel_cosf+0xa4>
 8005eac:	ad47d74e 	.word	0xad47d74e
 8005eb0:	310f74f6 	.word	0x310f74f6
 8005eb4:	3493f27c 	.word	0x3493f27c
 8005eb8:	37d00d01 	.word	0x37d00d01
 8005ebc:	3ab60b61 	.word	0x3ab60b61
 8005ec0:	3d2aaaab 	.word	0x3d2aaaab
 8005ec4:	3e999999 	.word	0x3e999999
 8005ec8:	3f480000 	.word	0x3f480000
 8005ecc:	3e900000 	.word	0x3e900000

08005ed0 <__kernel_rem_pio2f>:
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	b0df      	sub	sp, #380	; 0x17c
 8005ed4:	9308      	str	r3, [sp, #32]
 8005ed6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8005ed8:	9207      	str	r2, [sp, #28]
 8005eda:	009a      	lsls	r2, r3, #2
 8005edc:	4bc8      	ldr	r3, [pc, #800]	; (8006200 <__kernel_rem_pio2f+0x330>)
 8005ede:	900a      	str	r0, [sp, #40]	; 0x28
 8005ee0:	58d3      	ldr	r3, [r2, r3]
 8005ee2:	9103      	str	r1, [sp, #12]
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	9b08      	ldr	r3, [sp, #32]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	9306      	str	r3, [sp, #24]
 8005eec:	2300      	movs	r3, #0
 8005eee:	9302      	str	r3, [sp, #8]
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	db07      	blt.n	8005f06 <__kernel_rem_pio2f+0x36>
 8005ef6:	2107      	movs	r1, #7
 8005ef8:	9b07      	ldr	r3, [sp, #28]
 8005efa:	1eda      	subs	r2, r3, #3
 8005efc:	17d3      	asrs	r3, r2, #31
 8005efe:	400b      	ands	r3, r1
 8005f00:	189b      	adds	r3, r3, r2
 8005f02:	10db      	asrs	r3, r3, #3
 8005f04:	9302      	str	r3, [sp, #8]
 8005f06:	9b02      	ldr	r3, [sp, #8]
 8005f08:	ae22      	add	r6, sp, #136	; 0x88
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	00cb      	lsls	r3, r1, #3
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f12:	9b07      	ldr	r3, [sp, #28]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	9a06      	ldr	r2, [sp, #24]
 8005f1a:	9b02      	ldr	r3, [sp, #8]
 8005f1c:	1a9d      	subs	r5, r3, r2
 8005f1e:	002c      	movs	r4, r5
 8005f20:	9b05      	ldr	r3, [sp, #20]
 8005f22:	189f      	adds	r7, r3, r2
 8005f24:	1b63      	subs	r3, r4, r5
 8005f26:	429f      	cmp	r7, r3
 8005f28:	da0d      	bge.n	8005f46 <__kernel_rem_pio2f+0x76>
 8005f2a:	9c08      	ldr	r4, [sp, #32]
 8005f2c:	af4a      	add	r7, sp, #296	; 0x128
 8005f2e:	9b08      	ldr	r3, [sp, #32]
 8005f30:	9a05      	ldr	r2, [sp, #20]
 8005f32:	1ae3      	subs	r3, r4, r3
 8005f34:	429a      	cmp	r2, r3
 8005f36:	db25      	blt.n	8005f84 <__kernel_rem_pio2f+0xb4>
 8005f38:	ab22      	add	r3, sp, #136	; 0x88
 8005f3a:	00a5      	lsls	r5, r4, #2
 8005f3c:	18ed      	adds	r5, r5, r3
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2600      	movs	r6, #0
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	e016      	b.n	8005f74 <__kernel_rem_pio2f+0xa4>
 8005f46:	2000      	movs	r0, #0
 8005f48:	2c00      	cmp	r4, #0
 8005f4a:	db04      	blt.n	8005f56 <__kernel_rem_pio2f+0x86>
 8005f4c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8005f4e:	00a3      	lsls	r3, r4, #2
 8005f50:	58d0      	ldr	r0, [r2, r3]
 8005f52:	f7fa fedd 	bl	8000d10 <__aeabi_i2f>
 8005f56:	c601      	stmia	r6!, {r0}
 8005f58:	3401      	adds	r4, #1
 8005f5a:	e7e3      	b.n	8005f24 <__kernel_rem_pio2f+0x54>
 8005f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f5e:	00b3      	lsls	r3, r6, #2
 8005f60:	6829      	ldr	r1, [r5, #0]
 8005f62:	58d0      	ldr	r0, [r2, r3]
 8005f64:	f7fa fbe0 	bl	8000728 <__aeabi_fmul>
 8005f68:	1c01      	adds	r1, r0, #0
 8005f6a:	9804      	ldr	r0, [sp, #16]
 8005f6c:	f7fa f98e 	bl	800028c <__aeabi_fadd>
 8005f70:	3601      	adds	r6, #1
 8005f72:	9004      	str	r0, [sp, #16]
 8005f74:	9b06      	ldr	r3, [sp, #24]
 8005f76:	3d04      	subs	r5, #4
 8005f78:	429e      	cmp	r6, r3
 8005f7a:	ddef      	ble.n	8005f5c <__kernel_rem_pio2f+0x8c>
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	3401      	adds	r4, #1
 8005f80:	c708      	stmia	r7!, {r3}
 8005f82:	e7d4      	b.n	8005f2e <__kernel_rem_pio2f+0x5e>
 8005f84:	9b05      	ldr	r3, [sp, #20]
 8005f86:	aa0e      	add	r2, sp, #56	; 0x38
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	18d3      	adds	r3, r2, r3
 8005f96:	9e05      	ldr	r6, [sp, #20]
 8005f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f9a:	0035      	movs	r5, r6
 8005f9c:	aa4a      	add	r2, sp, #296	; 0x128
 8005f9e:	00b3      	lsls	r3, r6, #2
 8005fa0:	af0e      	add	r7, sp, #56	; 0x38
 8005fa2:	589c      	ldr	r4, [r3, r2]
 8005fa4:	9702      	str	r7, [sp, #8]
 8005fa6:	920d      	str	r2, [sp, #52]	; 0x34
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	dc64      	bgt.n	8006076 <__kernel_rem_pio2f+0x1a6>
 8005fac:	9901      	ldr	r1, [sp, #4]
 8005fae:	1c20      	adds	r0, r4, #0
 8005fb0:	f000 faec 	bl	800658c <scalbnf>
 8005fb4:	21f8      	movs	r1, #248	; 0xf8
 8005fb6:	0589      	lsls	r1, r1, #22
 8005fb8:	1c04      	adds	r4, r0, #0
 8005fba:	f7fa fbb5 	bl	8000728 <__aeabi_fmul>
 8005fbe:	f000 faa7 	bl	8006510 <floorf>
 8005fc2:	2182      	movs	r1, #130	; 0x82
 8005fc4:	05c9      	lsls	r1, r1, #23
 8005fc6:	f7fa fbaf 	bl	8000728 <__aeabi_fmul>
 8005fca:	1c01      	adds	r1, r0, #0
 8005fcc:	1c20      	adds	r0, r4, #0
 8005fce:	f7fa fcd1 	bl	8000974 <__aeabi_fsub>
 8005fd2:	1c04      	adds	r4, r0, #0
 8005fd4:	f7fa fe7c 	bl	8000cd0 <__aeabi_f2iz>
 8005fd8:	9004      	str	r0, [sp, #16]
 8005fda:	f7fa fe99 	bl	8000d10 <__aeabi_i2f>
 8005fde:	1c01      	adds	r1, r0, #0
 8005fe0:	1c20      	adds	r0, r4, #0
 8005fe2:	f7fa fcc7 	bl	8000974 <__aeabi_fsub>
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	1c04      	adds	r4, r0, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	dd63      	ble.n	80060b6 <__kernel_rem_pio2f+0x1e6>
 8005fee:	2108      	movs	r1, #8
 8005ff0:	1e73      	subs	r3, r6, #1
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	aa0e      	add	r2, sp, #56	; 0x38
 8005ff6:	589a      	ldr	r2, [r3, r2]
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	9d04      	ldr	r5, [sp, #16]
 8005ffc:	1a09      	subs	r1, r1, r0
 8005ffe:	0010      	movs	r0, r2
 8006000:	4108      	asrs	r0, r1
 8006002:	182d      	adds	r5, r5, r0
 8006004:	4088      	lsls	r0, r1
 8006006:	a90e      	add	r1, sp, #56	; 0x38
 8006008:	1a12      	subs	r2, r2, r0
 800600a:	505a      	str	r2, [r3, r1]
 800600c:	2307      	movs	r3, #7
 800600e:	9901      	ldr	r1, [sp, #4]
 8006010:	9504      	str	r5, [sp, #16]
 8006012:	1a5b      	subs	r3, r3, r1
 8006014:	411a      	asrs	r2, r3
 8006016:	9202      	str	r2, [sp, #8]
 8006018:	9b02      	ldr	r3, [sp, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	dd5c      	ble.n	80060d8 <__kernel_rem_pio2f+0x208>
 800601e:	9b04      	ldr	r3, [sp, #16]
 8006020:	2200      	movs	r2, #0
 8006022:	3301      	adds	r3, #1
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	2301      	movs	r3, #1
 8006028:	2080      	movs	r0, #128	; 0x80
 800602a:	0015      	movs	r5, r2
 800602c:	21ff      	movs	r1, #255	; 0xff
 800602e:	469c      	mov	ip, r3
 8006030:	0040      	lsls	r0, r0, #1
 8006032:	4296      	cmp	r6, r2
 8006034:	dd00      	ble.n	8006038 <__kernel_rem_pio2f+0x168>
 8006036:	e080      	b.n	800613a <__kernel_rem_pio2f+0x26a>
 8006038:	9b01      	ldr	r3, [sp, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd05      	ble.n	800604a <__kernel_rem_pio2f+0x17a>
 800603e:	2b01      	cmp	r3, #1
 8006040:	d100      	bne.n	8006044 <__kernel_rem_pio2f+0x174>
 8006042:	e08a      	b.n	800615a <__kernel_rem_pio2f+0x28a>
 8006044:	2b02      	cmp	r3, #2
 8006046:	d100      	bne.n	800604a <__kernel_rem_pio2f+0x17a>
 8006048:	e092      	b.n	8006170 <__kernel_rem_pio2f+0x2a0>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d143      	bne.n	80060d8 <__kernel_rem_pio2f+0x208>
 8006050:	20fe      	movs	r0, #254	; 0xfe
 8006052:	1c21      	adds	r1, r4, #0
 8006054:	0580      	lsls	r0, r0, #22
 8006056:	f7fa fc8d 	bl	8000974 <__aeabi_fsub>
 800605a:	1c04      	adds	r4, r0, #0
 800605c:	2d00      	cmp	r5, #0
 800605e:	d03b      	beq.n	80060d8 <__kernel_rem_pio2f+0x208>
 8006060:	20fe      	movs	r0, #254	; 0xfe
 8006062:	9901      	ldr	r1, [sp, #4]
 8006064:	0580      	lsls	r0, r0, #22
 8006066:	f000 fa91 	bl	800658c <scalbnf>
 800606a:	1c01      	adds	r1, r0, #0
 800606c:	1c20      	adds	r0, r4, #0
 800606e:	f7fa fc81 	bl	8000974 <__aeabi_fsub>
 8006072:	1c04      	adds	r4, r0, #0
 8006074:	e030      	b.n	80060d8 <__kernel_rem_pio2f+0x208>
 8006076:	21ee      	movs	r1, #238	; 0xee
 8006078:	1c20      	adds	r0, r4, #0
 800607a:	0589      	lsls	r1, r1, #22
 800607c:	f7fa fb54 	bl	8000728 <__aeabi_fmul>
 8006080:	f7fa fe26 	bl	8000cd0 <__aeabi_f2iz>
 8006084:	f7fa fe44 	bl	8000d10 <__aeabi_i2f>
 8006088:	2187      	movs	r1, #135	; 0x87
 800608a:	05c9      	lsls	r1, r1, #23
 800608c:	9004      	str	r0, [sp, #16]
 800608e:	f7fa fb4b 	bl	8000728 <__aeabi_fmul>
 8006092:	1c01      	adds	r1, r0, #0
 8006094:	1c20      	adds	r0, r4, #0
 8006096:	f7fa fc6d 	bl	8000974 <__aeabi_fsub>
 800609a:	f7fa fe19 	bl	8000cd0 <__aeabi_f2iz>
 800609e:	9b02      	ldr	r3, [sp, #8]
 80060a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060a2:	c301      	stmia	r3!, {r0}
 80060a4:	3d01      	subs	r5, #1
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	00ab      	lsls	r3, r5, #2
 80060aa:	5899      	ldr	r1, [r3, r2]
 80060ac:	9804      	ldr	r0, [sp, #16]
 80060ae:	f7fa f8ed 	bl	800028c <__aeabi_fadd>
 80060b2:	1c04      	adds	r4, r0, #0
 80060b4:	e778      	b.n	8005fa8 <__kernel_rem_pio2f+0xd8>
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <__kernel_rem_pio2f+0x1fa>
 80060bc:	1e73      	subs	r3, r6, #1
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	aa0e      	add	r2, sp, #56	; 0x38
 80060c2:	5898      	ldr	r0, [r3, r2]
 80060c4:	11c3      	asrs	r3, r0, #7
 80060c6:	9302      	str	r3, [sp, #8]
 80060c8:	e7a6      	b.n	8006018 <__kernel_rem_pio2f+0x148>
 80060ca:	21fc      	movs	r1, #252	; 0xfc
 80060cc:	0589      	lsls	r1, r1, #22
 80060ce:	f7fa f8d3 	bl	8000278 <__aeabi_fcmpge>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d12e      	bne.n	8006134 <__kernel_rem_pio2f+0x264>
 80060d6:	9002      	str	r0, [sp, #8]
 80060d8:	2100      	movs	r1, #0
 80060da:	1c20      	adds	r0, r4, #0
 80060dc:	f7fa f8a8 	bl	8000230 <__aeabi_fcmpeq>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d100      	bne.n	80060e6 <__kernel_rem_pio2f+0x216>
 80060e4:	e08e      	b.n	8006204 <__kernel_rem_pio2f+0x334>
 80060e6:	1e77      	subs	r7, r6, #1
 80060e8:	003b      	movs	r3, r7
 80060ea:	2200      	movs	r2, #0
 80060ec:	9905      	ldr	r1, [sp, #20]
 80060ee:	428b      	cmp	r3, r1
 80060f0:	da45      	bge.n	800617e <__kernel_rem_pio2f+0x2ae>
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	d05d      	beq.n	80061b2 <__kernel_rem_pio2f+0x2e2>
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	aa0e      	add	r2, sp, #56	; 0x38
 80060fa:	3b08      	subs	r3, #8
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	00bb      	lsls	r3, r7, #2
 8006100:	589b      	ldr	r3, [r3, r2]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d07a      	beq.n	80061fc <__kernel_rem_pio2f+0x32c>
 8006106:	20fe      	movs	r0, #254	; 0xfe
 8006108:	9901      	ldr	r1, [sp, #4]
 800610a:	0580      	lsls	r0, r0, #22
 800610c:	f000 fa3e 	bl	800658c <scalbnf>
 8006110:	003d      	movs	r5, r7
 8006112:	1c04      	adds	r4, r0, #0
 8006114:	2d00      	cmp	r5, #0
 8006116:	db00      	blt.n	800611a <__kernel_rem_pio2f+0x24a>
 8006118:	e0ab      	b.n	8006272 <__kernel_rem_pio2f+0x3a2>
 800611a:	003c      	movs	r4, r7
 800611c:	2c00      	cmp	r4, #0
 800611e:	da00      	bge.n	8006122 <__kernel_rem_pio2f+0x252>
 8006120:	e0d6      	b.n	80062d0 <__kernel_rem_pio2f+0x400>
 8006122:	00a3      	lsls	r3, r4, #2
 8006124:	aa4a      	add	r2, sp, #296	; 0x128
 8006126:	189b      	adds	r3, r3, r2
 8006128:	9306      	str	r3, [sp, #24]
 800612a:	1b3b      	subs	r3, r7, r4
 800612c:	2600      	movs	r6, #0
 800612e:	2500      	movs	r5, #0
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	e0bf      	b.n	80062b4 <__kernel_rem_pio2f+0x3e4>
 8006134:	2302      	movs	r3, #2
 8006136:	9302      	str	r3, [sp, #8]
 8006138:	e771      	b.n	800601e <__kernel_rem_pio2f+0x14e>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2d00      	cmp	r5, #0
 800613e:	d108      	bne.n	8006152 <__kernel_rem_pio2f+0x282>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <__kernel_rem_pio2f+0x27a>
 8006144:	1ac3      	subs	r3, r0, r3
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4663      	mov	r3, ip
 800614a:	001d      	movs	r5, r3
 800614c:	3201      	adds	r2, #1
 800614e:	3704      	adds	r7, #4
 8006150:	e76f      	b.n	8006032 <__kernel_rem_pio2f+0x162>
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	002b      	movs	r3, r5
 8006158:	e7f7      	b.n	800614a <__kernel_rem_pio2f+0x27a>
 800615a:	1e73      	subs	r3, r6, #1
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	aa0e      	add	r2, sp, #56	; 0x38
 8006160:	589a      	ldr	r2, [r3, r2]
 8006162:	920d      	str	r2, [sp, #52]	; 0x34
 8006164:	227f      	movs	r2, #127	; 0x7f
 8006166:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006168:	400a      	ands	r2, r1
 800616a:	a90e      	add	r1, sp, #56	; 0x38
 800616c:	505a      	str	r2, [r3, r1]
 800616e:	e76c      	b.n	800604a <__kernel_rem_pio2f+0x17a>
 8006170:	1e73      	subs	r3, r6, #1
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	aa0e      	add	r2, sp, #56	; 0x38
 8006176:	589a      	ldr	r2, [r3, r2]
 8006178:	920d      	str	r2, [sp, #52]	; 0x34
 800617a:	223f      	movs	r2, #63	; 0x3f
 800617c:	e7f3      	b.n	8006166 <__kernel_rem_pio2f+0x296>
 800617e:	0099      	lsls	r1, r3, #2
 8006180:	a80e      	add	r0, sp, #56	; 0x38
 8006182:	5809      	ldr	r1, [r1, r0]
 8006184:	3b01      	subs	r3, #1
 8006186:	430a      	orrs	r2, r1
 8006188:	e7b0      	b.n	80060ec <__kernel_rem_pio2f+0x21c>
 800618a:	3301      	adds	r3, #1
 800618c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800618e:	009a      	lsls	r2, r3, #2
 8006190:	4252      	negs	r2, r2
 8006192:	588a      	ldr	r2, [r1, r2]
 8006194:	2a00      	cmp	r2, #0
 8006196:	d0f8      	beq.n	800618a <__kernel_rem_pio2f+0x2ba>
 8006198:	9a08      	ldr	r2, [sp, #32]
 800619a:	18f3      	adds	r3, r6, r3
 800619c:	18b4      	adds	r4, r6, r2
 800619e:	00a4      	lsls	r4, r4, #2
 80061a0:	aa22      	add	r2, sp, #136	; 0x88
 80061a2:	1c75      	adds	r5, r6, #1
 80061a4:	1914      	adds	r4, r2, r4
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	9b02      	ldr	r3, [sp, #8]
 80061aa:	42ab      	cmp	r3, r5
 80061ac:	da03      	bge.n	80061b6 <__kernel_rem_pio2f+0x2e6>
 80061ae:	001e      	movs	r6, r3
 80061b0:	e6f3      	b.n	8005f9a <__kernel_rem_pio2f+0xca>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e7ea      	b.n	800618c <__kernel_rem_pio2f+0x2bc>
 80061b6:	00ab      	lsls	r3, r5, #2
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061bc:	00aa      	lsls	r2, r5, #2
 80061be:	5898      	ldr	r0, [r3, r2]
 80061c0:	f7fa fda6 	bl	8000d10 <__aeabi_i2f>
 80061c4:	2700      	movs	r7, #0
 80061c6:	2600      	movs	r6, #0
 80061c8:	6020      	str	r0, [r4, #0]
 80061ca:	9b06      	ldr	r3, [sp, #24]
 80061cc:	429f      	cmp	r7, r3
 80061ce:	dd07      	ble.n	80061e0 <__kernel_rem_pio2f+0x310>
 80061d0:	21f0      	movs	r1, #240	; 0xf0
 80061d2:	9a04      	ldr	r2, [sp, #16]
 80061d4:	ab0e      	add	r3, sp, #56	; 0x38
 80061d6:	185b      	adds	r3, r3, r1
 80061d8:	509e      	str	r6, [r3, r2]
 80061da:	3501      	adds	r5, #1
 80061dc:	3404      	adds	r4, #4
 80061de:	e7e3      	b.n	80061a8 <__kernel_rem_pio2f+0x2d8>
 80061e0:	00bb      	lsls	r3, r7, #2
 80061e2:	425a      	negs	r2, r3
 80061e4:	58a1      	ldr	r1, [r4, r2]
 80061e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061e8:	3701      	adds	r7, #1
 80061ea:	58d0      	ldr	r0, [r2, r3]
 80061ec:	f7fa fa9c 	bl	8000728 <__aeabi_fmul>
 80061f0:	1c01      	adds	r1, r0, #0
 80061f2:	1c30      	adds	r0, r6, #0
 80061f4:	f7fa f84a 	bl	800028c <__aeabi_fadd>
 80061f8:	1c06      	adds	r6, r0, #0
 80061fa:	e7e6      	b.n	80061ca <__kernel_rem_pio2f+0x2fa>
 80061fc:	3f01      	subs	r7, #1
 80061fe:	e77a      	b.n	80060f6 <__kernel_rem_pio2f+0x226>
 8006200:	08006b94 	.word	0x08006b94
 8006204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006206:	9a07      	ldr	r2, [sp, #28]
 8006208:	1c20      	adds	r0, r4, #0
 800620a:	1a99      	subs	r1, r3, r2
 800620c:	f000 f9be 	bl	800658c <scalbnf>
 8006210:	2187      	movs	r1, #135	; 0x87
 8006212:	05c9      	lsls	r1, r1, #23
 8006214:	1c04      	adds	r4, r0, #0
 8006216:	f7fa f82f 	bl	8000278 <__aeabi_fcmpge>
 800621a:	2800      	cmp	r0, #0
 800621c:	d021      	beq.n	8006262 <__kernel_rem_pio2f+0x392>
 800621e:	21ee      	movs	r1, #238	; 0xee
 8006220:	1c20      	adds	r0, r4, #0
 8006222:	0589      	lsls	r1, r1, #22
 8006224:	f7fa fa80 	bl	8000728 <__aeabi_fmul>
 8006228:	f7fa fd52 	bl	8000cd0 <__aeabi_f2iz>
 800622c:	f7fa fd70 	bl	8000d10 <__aeabi_i2f>
 8006230:	2187      	movs	r1, #135	; 0x87
 8006232:	05c9      	lsls	r1, r1, #23
 8006234:	1c05      	adds	r5, r0, #0
 8006236:	f7fa fa77 	bl	8000728 <__aeabi_fmul>
 800623a:	1c01      	adds	r1, r0, #0
 800623c:	1c20      	adds	r0, r4, #0
 800623e:	f7fa fb99 	bl	8000974 <__aeabi_fsub>
 8006242:	f7fa fd45 	bl	8000cd0 <__aeabi_f2iz>
 8006246:	00b7      	lsls	r7, r6, #2
 8006248:	ab0e      	add	r3, sp, #56	; 0x38
 800624a:	51d8      	str	r0, [r3, r7]
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	1c28      	adds	r0, r5, #0
 8006250:	3308      	adds	r3, #8
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	f7fa fd3c 	bl	8000cd0 <__aeabi_f2iz>
 8006258:	1c77      	adds	r7, r6, #1
 800625a:	00bc      	lsls	r4, r7, #2
 800625c:	ab0e      	add	r3, sp, #56	; 0x38
 800625e:	5118      	str	r0, [r3, r4]
 8006260:	e751      	b.n	8006106 <__kernel_rem_pio2f+0x236>
 8006262:	1c20      	adds	r0, r4, #0
 8006264:	f7fa fd34 	bl	8000cd0 <__aeabi_f2iz>
 8006268:	00b5      	lsls	r5, r6, #2
 800626a:	ab0e      	add	r3, sp, #56	; 0x38
 800626c:	0037      	movs	r7, r6
 800626e:	5158      	str	r0, [r3, r5]
 8006270:	e749      	b.n	8006106 <__kernel_rem_pio2f+0x236>
 8006272:	ab0e      	add	r3, sp, #56	; 0x38
 8006274:	00ae      	lsls	r6, r5, #2
 8006276:	58f0      	ldr	r0, [r6, r3]
 8006278:	f7fa fd4a 	bl	8000d10 <__aeabi_i2f>
 800627c:	1c21      	adds	r1, r4, #0
 800627e:	f7fa fa53 	bl	8000728 <__aeabi_fmul>
 8006282:	22f0      	movs	r2, #240	; 0xf0
 8006284:	21ee      	movs	r1, #238	; 0xee
 8006286:	ab0e      	add	r3, sp, #56	; 0x38
 8006288:	189b      	adds	r3, r3, r2
 800628a:	5198      	str	r0, [r3, r6]
 800628c:	0589      	lsls	r1, r1, #22
 800628e:	1c20      	adds	r0, r4, #0
 8006290:	f7fa fa4a 	bl	8000728 <__aeabi_fmul>
 8006294:	3d01      	subs	r5, #1
 8006296:	1c04      	adds	r4, r0, #0
 8006298:	e73c      	b.n	8006114 <__kernel_rem_pio2f+0x244>
 800629a:	9a06      	ldr	r2, [sp, #24]
 800629c:	00ab      	lsls	r3, r5, #2
 800629e:	58d1      	ldr	r1, [r2, r3]
 80062a0:	4a5e      	ldr	r2, [pc, #376]	; (800641c <__kernel_rem_pio2f+0x54c>)
 80062a2:	3501      	adds	r5, #1
 80062a4:	5898      	ldr	r0, [r3, r2]
 80062a6:	f7fa fa3f 	bl	8000728 <__aeabi_fmul>
 80062aa:	1c01      	adds	r1, r0, #0
 80062ac:	1c30      	adds	r0, r6, #0
 80062ae:	f7f9 ffed 	bl	800028c <__aeabi_fadd>
 80062b2:	1c06      	adds	r6, r0, #0
 80062b4:	9b05      	ldr	r3, [sp, #20]
 80062b6:	429d      	cmp	r5, r3
 80062b8:	dc02      	bgt.n	80062c0 <__kernel_rem_pio2f+0x3f0>
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	429d      	cmp	r5, r3
 80062be:	ddec      	ble.n	800629a <__kernel_rem_pio2f+0x3ca>
 80062c0:	21a0      	movs	r1, #160	; 0xa0
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	aa0e      	add	r2, sp, #56	; 0x38
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	1852      	adds	r2, r2, r1
 80062ca:	50d6      	str	r6, [r2, r3]
 80062cc:	3c01      	subs	r4, #1
 80062ce:	e725      	b.n	800611c <__kernel_rem_pio2f+0x24c>
 80062d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	dc08      	bgt.n	80062e8 <__kernel_rem_pio2f+0x418>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dc5a      	bgt.n	8006390 <__kernel_rem_pio2f+0x4c0>
 80062da:	d035      	beq.n	8006348 <__kernel_rem_pio2f+0x478>
 80062dc:	2007      	movs	r0, #7
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	4003      	ands	r3, r0
 80062e2:	0018      	movs	r0, r3
 80062e4:	b05f      	add	sp, #380	; 0x17c
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d1f6      	bne.n	80062dc <__kernel_rem_pio2f+0x40c>
 80062ee:	00bb      	lsls	r3, r7, #2
 80062f0:	aa36      	add	r2, sp, #216	; 0xd8
 80062f2:	18d5      	adds	r5, r2, r3
 80062f4:	002c      	movs	r4, r5
 80062f6:	9701      	str	r7, [sp, #4]
 80062f8:	9b01      	ldr	r3, [sp, #4]
 80062fa:	3c04      	subs	r4, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	dc51      	bgt.n	80063a4 <__kernel_rem_pio2f+0x4d4>
 8006300:	9701      	str	r7, [sp, #4]
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	3d04      	subs	r5, #4
 8006306:	2b01      	cmp	r3, #1
 8006308:	dc62      	bgt.n	80063d0 <__kernel_rem_pio2f+0x500>
 800630a:	2000      	movs	r0, #0
 800630c:	ac36      	add	r4, sp, #216	; 0xd8
 800630e:	2f01      	cmp	r7, #1
 8006310:	dc73      	bgt.n	80063fa <__kernel_rem_pio2f+0x52a>
 8006312:	9902      	ldr	r1, [sp, #8]
 8006314:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8006316:	6863      	ldr	r3, [r4, #4]
 8006318:	2900      	cmp	r1, #0
 800631a:	d174      	bne.n	8006406 <__kernel_rem_pio2f+0x536>
 800631c:	9903      	ldr	r1, [sp, #12]
 800631e:	604b      	str	r3, [r1, #4]
 8006320:	000b      	movs	r3, r1
 8006322:	600a      	str	r2, [r1, #0]
 8006324:	6098      	str	r0, [r3, #8]
 8006326:	e7d9      	b.n	80062dc <__kernel_rem_pio2f+0x40c>
 8006328:	00bb      	lsls	r3, r7, #2
 800632a:	5919      	ldr	r1, [r3, r4]
 800632c:	f7f9 ffae 	bl	800028c <__aeabi_fadd>
 8006330:	3f01      	subs	r7, #1
 8006332:	2f00      	cmp	r7, #0
 8006334:	daf8      	bge.n	8006328 <__kernel_rem_pio2f+0x458>
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <__kernel_rem_pio2f+0x472>
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	061b      	lsls	r3, r3, #24
 8006340:	18c0      	adds	r0, r0, r3
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	6018      	str	r0, [r3, #0]
 8006346:	e7c9      	b.n	80062dc <__kernel_rem_pio2f+0x40c>
 8006348:	2000      	movs	r0, #0
 800634a:	ac36      	add	r4, sp, #216	; 0xd8
 800634c:	e7f1      	b.n	8006332 <__kernel_rem_pio2f+0x462>
 800634e:	00a3      	lsls	r3, r4, #2
 8006350:	5959      	ldr	r1, [r3, r5]
 8006352:	f7f9 ff9b 	bl	800028c <__aeabi_fadd>
 8006356:	3c01      	subs	r4, #1
 8006358:	2c00      	cmp	r4, #0
 800635a:	daf8      	bge.n	800634e <__kernel_rem_pio2f+0x47e>
 800635c:	9a02      	ldr	r2, [sp, #8]
 800635e:	1c03      	adds	r3, r0, #0
 8006360:	2a00      	cmp	r2, #0
 8006362:	d002      	beq.n	800636a <__kernel_rem_pio2f+0x49a>
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	061b      	lsls	r3, r3, #24
 8006368:	18c3      	adds	r3, r0, r3
 800636a:	9a03      	ldr	r2, [sp, #12]
 800636c:	1c01      	adds	r1, r0, #0
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8006372:	f7fa faff 	bl	8000974 <__aeabi_fsub>
 8006376:	2401      	movs	r4, #1
 8006378:	ad36      	add	r5, sp, #216	; 0xd8
 800637a:	42a7      	cmp	r7, r4
 800637c:	da0c      	bge.n	8006398 <__kernel_rem_pio2f+0x4c8>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <__kernel_rem_pio2f+0x4ba>
 8006384:	2380      	movs	r3, #128	; 0x80
 8006386:	061b      	lsls	r3, r3, #24
 8006388:	18c0      	adds	r0, r0, r3
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	6058      	str	r0, [r3, #4]
 800638e:	e7a5      	b.n	80062dc <__kernel_rem_pio2f+0x40c>
 8006390:	003c      	movs	r4, r7
 8006392:	2000      	movs	r0, #0
 8006394:	ad36      	add	r5, sp, #216	; 0xd8
 8006396:	e7df      	b.n	8006358 <__kernel_rem_pio2f+0x488>
 8006398:	00a3      	lsls	r3, r4, #2
 800639a:	5959      	ldr	r1, [r3, r5]
 800639c:	f7f9 ff76 	bl	800028c <__aeabi_fadd>
 80063a0:	3401      	adds	r4, #1
 80063a2:	e7ea      	b.n	800637a <__kernel_rem_pio2f+0x4aa>
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	6826      	ldr	r6, [r4, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	1c30      	adds	r0, r6, #0
 80063b0:	1c19      	adds	r1, r3, #0
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	f7f9 ff6a 	bl	800028c <__aeabi_fadd>
 80063b8:	1c01      	adds	r1, r0, #0
 80063ba:	9006      	str	r0, [sp, #24]
 80063bc:	1c30      	adds	r0, r6, #0
 80063be:	f7fa fad9 	bl	8000974 <__aeabi_fsub>
 80063c2:	9905      	ldr	r1, [sp, #20]
 80063c4:	f7f9 ff62 	bl	800028c <__aeabi_fadd>
 80063c8:	9b06      	ldr	r3, [sp, #24]
 80063ca:	6060      	str	r0, [r4, #4]
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	e793      	b.n	80062f8 <__kernel_rem_pio2f+0x428>
 80063d0:	682c      	ldr	r4, [r5, #0]
 80063d2:	686e      	ldr	r6, [r5, #4]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	1c31      	adds	r1, r6, #0
 80063d8:	3b01      	subs	r3, #1
 80063da:	1c20      	adds	r0, r4, #0
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f7f9 ff55 	bl	800028c <__aeabi_fadd>
 80063e2:	1c01      	adds	r1, r0, #0
 80063e4:	9005      	str	r0, [sp, #20]
 80063e6:	1c20      	adds	r0, r4, #0
 80063e8:	f7fa fac4 	bl	8000974 <__aeabi_fsub>
 80063ec:	1c31      	adds	r1, r6, #0
 80063ee:	f7f9 ff4d 	bl	800028c <__aeabi_fadd>
 80063f2:	9b05      	ldr	r3, [sp, #20]
 80063f4:	6068      	str	r0, [r5, #4]
 80063f6:	602b      	str	r3, [r5, #0]
 80063f8:	e783      	b.n	8006302 <__kernel_rem_pio2f+0x432>
 80063fa:	00bb      	lsls	r3, r7, #2
 80063fc:	58e1      	ldr	r1, [r4, r3]
 80063fe:	f7f9 ff45 	bl	800028c <__aeabi_fadd>
 8006402:	3f01      	subs	r7, #1
 8006404:	e783      	b.n	800630e <__kernel_rem_pio2f+0x43e>
 8006406:	2180      	movs	r1, #128	; 0x80
 8006408:	9c03      	ldr	r4, [sp, #12]
 800640a:	0609      	lsls	r1, r1, #24
 800640c:	185b      	adds	r3, r3, r1
 800640e:	1852      	adds	r2, r2, r1
 8006410:	6063      	str	r3, [r4, #4]
 8006412:	6022      	str	r2, [r4, #0]
 8006414:	0023      	movs	r3, r4
 8006416:	1840      	adds	r0, r0, r1
 8006418:	e784      	b.n	8006324 <__kernel_rem_pio2f+0x454>
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	08006b68 	.word	0x08006b68

08006420 <__kernel_sinf>:
 8006420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006422:	9201      	str	r2, [sp, #4]
 8006424:	22c8      	movs	r2, #200	; 0xc8
 8006426:	0043      	lsls	r3, r0, #1
 8006428:	1c04      	adds	r4, r0, #0
 800642a:	9100      	str	r1, [sp, #0]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	0592      	lsls	r2, r2, #22
 8006430:	4293      	cmp	r3, r2
 8006432:	da03      	bge.n	800643c <__kernel_sinf+0x1c>
 8006434:	f7fa fc4c 	bl	8000cd0 <__aeabi_f2iz>
 8006438:	2800      	cmp	r0, #0
 800643a:	d035      	beq.n	80064a8 <__kernel_sinf+0x88>
 800643c:	1c21      	adds	r1, r4, #0
 800643e:	1c20      	adds	r0, r4, #0
 8006440:	f7fa f972 	bl	8000728 <__aeabi_fmul>
 8006444:	1c05      	adds	r5, r0, #0
 8006446:	1c01      	adds	r1, r0, #0
 8006448:	1c20      	adds	r0, r4, #0
 800644a:	f7fa f96d 	bl	8000728 <__aeabi_fmul>
 800644e:	4928      	ldr	r1, [pc, #160]	; (80064f0 <__kernel_sinf+0xd0>)
 8006450:	1c06      	adds	r6, r0, #0
 8006452:	1c28      	adds	r0, r5, #0
 8006454:	f7fa f968 	bl	8000728 <__aeabi_fmul>
 8006458:	4926      	ldr	r1, [pc, #152]	; (80064f4 <__kernel_sinf+0xd4>)
 800645a:	f7fa fa8b 	bl	8000974 <__aeabi_fsub>
 800645e:	1c29      	adds	r1, r5, #0
 8006460:	f7fa f962 	bl	8000728 <__aeabi_fmul>
 8006464:	4924      	ldr	r1, [pc, #144]	; (80064f8 <__kernel_sinf+0xd8>)
 8006466:	f7f9 ff11 	bl	800028c <__aeabi_fadd>
 800646a:	1c29      	adds	r1, r5, #0
 800646c:	f7fa f95c 	bl	8000728 <__aeabi_fmul>
 8006470:	4922      	ldr	r1, [pc, #136]	; (80064fc <__kernel_sinf+0xdc>)
 8006472:	f7fa fa7f 	bl	8000974 <__aeabi_fsub>
 8006476:	1c29      	adds	r1, r5, #0
 8006478:	f7fa f956 	bl	8000728 <__aeabi_fmul>
 800647c:	4920      	ldr	r1, [pc, #128]	; (8006500 <__kernel_sinf+0xe0>)
 800647e:	f7f9 ff05 	bl	800028c <__aeabi_fadd>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	1c07      	adds	r7, r0, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d110      	bne.n	80064ac <__kernel_sinf+0x8c>
 800648a:	1c01      	adds	r1, r0, #0
 800648c:	1c28      	adds	r0, r5, #0
 800648e:	f7fa f94b 	bl	8000728 <__aeabi_fmul>
 8006492:	491c      	ldr	r1, [pc, #112]	; (8006504 <__kernel_sinf+0xe4>)
 8006494:	f7fa fa6e 	bl	8000974 <__aeabi_fsub>
 8006498:	1c31      	adds	r1, r6, #0
 800649a:	f7fa f945 	bl	8000728 <__aeabi_fmul>
 800649e:	1c01      	adds	r1, r0, #0
 80064a0:	1c20      	adds	r0, r4, #0
 80064a2:	f7f9 fef3 	bl	800028c <__aeabi_fadd>
 80064a6:	1c04      	adds	r4, r0, #0
 80064a8:	1c20      	adds	r0, r4, #0
 80064aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064ac:	21fc      	movs	r1, #252	; 0xfc
 80064ae:	9800      	ldr	r0, [sp, #0]
 80064b0:	0589      	lsls	r1, r1, #22
 80064b2:	f7fa f939 	bl	8000728 <__aeabi_fmul>
 80064b6:	1c39      	adds	r1, r7, #0
 80064b8:	9001      	str	r0, [sp, #4]
 80064ba:	1c30      	adds	r0, r6, #0
 80064bc:	f7fa f934 	bl	8000728 <__aeabi_fmul>
 80064c0:	1c01      	adds	r1, r0, #0
 80064c2:	9801      	ldr	r0, [sp, #4]
 80064c4:	f7fa fa56 	bl	8000974 <__aeabi_fsub>
 80064c8:	1c29      	adds	r1, r5, #0
 80064ca:	f7fa f92d 	bl	8000728 <__aeabi_fmul>
 80064ce:	9900      	ldr	r1, [sp, #0]
 80064d0:	f7fa fa50 	bl	8000974 <__aeabi_fsub>
 80064d4:	490b      	ldr	r1, [pc, #44]	; (8006504 <__kernel_sinf+0xe4>)
 80064d6:	1c05      	adds	r5, r0, #0
 80064d8:	1c30      	adds	r0, r6, #0
 80064da:	f7fa f925 	bl	8000728 <__aeabi_fmul>
 80064de:	1c01      	adds	r1, r0, #0
 80064e0:	1c28      	adds	r0, r5, #0
 80064e2:	f7f9 fed3 	bl	800028c <__aeabi_fadd>
 80064e6:	1c01      	adds	r1, r0, #0
 80064e8:	1c20      	adds	r0, r4, #0
 80064ea:	f7fa fa43 	bl	8000974 <__aeabi_fsub>
 80064ee:	e7da      	b.n	80064a6 <__kernel_sinf+0x86>
 80064f0:	2f2ec9d3 	.word	0x2f2ec9d3
 80064f4:	32d72f34 	.word	0x32d72f34
 80064f8:	3638ef1b 	.word	0x3638ef1b
 80064fc:	39500d01 	.word	0x39500d01
 8006500:	3c088889 	.word	0x3c088889
 8006504:	3e2aaaab 	.word	0x3e2aaaab

08006508 <fabsf>:
 8006508:	0040      	lsls	r0, r0, #1
 800650a:	0840      	lsrs	r0, r0, #1
 800650c:	4770      	bx	lr
	...

08006510 <floorf>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	0045      	lsls	r5, r0, #1
 8006514:	086e      	lsrs	r6, r5, #1
 8006516:	0e2d      	lsrs	r5, r5, #24
 8006518:	3d7f      	subs	r5, #127	; 0x7f
 800651a:	0004      	movs	r4, r0
 800651c:	2d16      	cmp	r5, #22
 800651e:	dc24      	bgt.n	800656a <floorf+0x5a>
 8006520:	2d00      	cmp	r5, #0
 8006522:	da0e      	bge.n	8006542 <floorf+0x32>
 8006524:	4916      	ldr	r1, [pc, #88]	; (8006580 <floorf+0x70>)
 8006526:	f7f9 feb1 	bl	800028c <__aeabi_fadd>
 800652a:	2100      	movs	r1, #0
 800652c:	f7f9 fe9a 	bl	8000264 <__aeabi_fcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	d004      	beq.n	800653e <floorf+0x2e>
 8006534:	2c00      	cmp	r4, #0
 8006536:	da20      	bge.n	800657a <floorf+0x6a>
 8006538:	2e00      	cmp	r6, #0
 800653a:	d000      	beq.n	800653e <floorf+0x2e>
 800653c:	4c11      	ldr	r4, [pc, #68]	; (8006584 <floorf+0x74>)
 800653e:	1c20      	adds	r0, r4, #0
 8006540:	e01a      	b.n	8006578 <floorf+0x68>
 8006542:	4e11      	ldr	r6, [pc, #68]	; (8006588 <floorf+0x78>)
 8006544:	412e      	asrs	r6, r5
 8006546:	4206      	tst	r6, r0
 8006548:	d016      	beq.n	8006578 <floorf+0x68>
 800654a:	490d      	ldr	r1, [pc, #52]	; (8006580 <floorf+0x70>)
 800654c:	f7f9 fe9e 	bl	800028c <__aeabi_fadd>
 8006550:	2100      	movs	r1, #0
 8006552:	f7f9 fe87 	bl	8000264 <__aeabi_fcmpgt>
 8006556:	2800      	cmp	r0, #0
 8006558:	d0f1      	beq.n	800653e <floorf+0x2e>
 800655a:	2c00      	cmp	r4, #0
 800655c:	da03      	bge.n	8006566 <floorf+0x56>
 800655e:	2380      	movs	r3, #128	; 0x80
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	412b      	asrs	r3, r5
 8006564:	18e4      	adds	r4, r4, r3
 8006566:	43b4      	bics	r4, r6
 8006568:	e7e9      	b.n	800653e <floorf+0x2e>
 800656a:	23ff      	movs	r3, #255	; 0xff
 800656c:	05db      	lsls	r3, r3, #23
 800656e:	429e      	cmp	r6, r3
 8006570:	d302      	bcc.n	8006578 <floorf+0x68>
 8006572:	1c01      	adds	r1, r0, #0
 8006574:	f7f9 fe8a 	bl	800028c <__aeabi_fadd>
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	2400      	movs	r4, #0
 800657c:	e7df      	b.n	800653e <floorf+0x2e>
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	7149f2ca 	.word	0x7149f2ca
 8006584:	bf800000 	.word	0xbf800000
 8006588:	007fffff 	.word	0x007fffff

0800658c <scalbnf>:
 800658c:	0043      	lsls	r3, r0, #1
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	0002      	movs	r2, r0
 8006592:	000c      	movs	r4, r1
 8006594:	085d      	lsrs	r5, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d006      	beq.n	80065a8 <scalbnf+0x1c>
 800659a:	21ff      	movs	r1, #255	; 0xff
 800659c:	05c9      	lsls	r1, r1, #23
 800659e:	428d      	cmp	r5, r1
 80065a0:	d303      	bcc.n	80065aa <scalbnf+0x1e>
 80065a2:	1c01      	adds	r1, r0, #0
 80065a4:	f7f9 fe72 	bl	800028c <__aeabi_fadd>
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
 80065aa:	4208      	tst	r0, r1
 80065ac:	d116      	bne.n	80065dc <scalbnf+0x50>
 80065ae:	2198      	movs	r1, #152	; 0x98
 80065b0:	05c9      	lsls	r1, r1, #23
 80065b2:	f7fa f8b9 	bl	8000728 <__aeabi_fmul>
 80065b6:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <scalbnf+0x98>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	db29      	blt.n	8006610 <scalbnf+0x84>
 80065bc:	0002      	movs	r2, r0
 80065be:	15c3      	asrs	r3, r0, #23
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	3b19      	subs	r3, #25
 80065c4:	191b      	adds	r3, r3, r4
 80065c6:	2bfe      	cmp	r3, #254	; 0xfe
 80065c8:	dd0a      	ble.n	80065e0 <scalbnf+0x54>
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <scalbnf+0x9c>)
 80065cc:	2800      	cmp	r0, #0
 80065ce:	da00      	bge.n	80065d2 <scalbnf+0x46>
 80065d0:	4b16      	ldr	r3, [pc, #88]	; (800662c <scalbnf+0xa0>)
 80065d2:	4915      	ldr	r1, [pc, #84]	; (8006628 <scalbnf+0x9c>)
 80065d4:	1c18      	adds	r0, r3, #0
 80065d6:	f7fa f8a7 	bl	8000728 <__aeabi_fmul>
 80065da:	e7e5      	b.n	80065a8 <scalbnf+0x1c>
 80065dc:	0e1b      	lsrs	r3, r3, #24
 80065de:	e7f1      	b.n	80065c4 <scalbnf+0x38>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dd04      	ble.n	80065ee <scalbnf+0x62>
 80065e4:	4812      	ldr	r0, [pc, #72]	; (8006630 <scalbnf+0xa4>)
 80065e6:	4002      	ands	r2, r0
 80065e8:	05d8      	lsls	r0, r3, #23
 80065ea:	4310      	orrs	r0, r2
 80065ec:	e7dc      	b.n	80065a8 <scalbnf+0x1c>
 80065ee:	0019      	movs	r1, r3
 80065f0:	3116      	adds	r1, #22
 80065f2:	da0f      	bge.n	8006614 <scalbnf+0x88>
 80065f4:	4a0f      	ldr	r2, [pc, #60]	; (8006634 <scalbnf+0xa8>)
 80065f6:	0fc3      	lsrs	r3, r0, #31
 80065f8:	4294      	cmp	r4, r2
 80065fa:	dd05      	ble.n	8006608 <scalbnf+0x7c>
 80065fc:	480a      	ldr	r0, [pc, #40]	; (8006628 <scalbnf+0x9c>)
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d000      	beq.n	8006604 <scalbnf+0x78>
 8006602:	480a      	ldr	r0, [pc, #40]	; (800662c <scalbnf+0xa0>)
 8006604:	4908      	ldr	r1, [pc, #32]	; (8006628 <scalbnf+0x9c>)
 8006606:	e7e6      	b.n	80065d6 <scalbnf+0x4a>
 8006608:	480b      	ldr	r0, [pc, #44]	; (8006638 <scalbnf+0xac>)
 800660a:	2b00      	cmp	r3, #0
 800660c:	d000      	beq.n	8006610 <scalbnf+0x84>
 800660e:	480b      	ldr	r0, [pc, #44]	; (800663c <scalbnf+0xb0>)
 8006610:	4909      	ldr	r1, [pc, #36]	; (8006638 <scalbnf+0xac>)
 8006612:	e7e0      	b.n	80065d6 <scalbnf+0x4a>
 8006614:	21cc      	movs	r1, #204	; 0xcc
 8006616:	3319      	adds	r3, #25
 8006618:	05d8      	lsls	r0, r3, #23
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <scalbnf+0xa4>)
 800661c:	0589      	lsls	r1, r1, #22
 800661e:	401a      	ands	r2, r3
 8006620:	4310      	orrs	r0, r2
 8006622:	e7d8      	b.n	80065d6 <scalbnf+0x4a>
 8006624:	ffff3cb0 	.word	0xffff3cb0
 8006628:	7149f2ca 	.word	0x7149f2ca
 800662c:	f149f2ca 	.word	0xf149f2ca
 8006630:	807fffff 	.word	0x807fffff
 8006634:	0000c350 	.word	0x0000c350
 8006638:	0da24260 	.word	0x0da24260
 800663c:	8da24260 	.word	0x8da24260

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	2600      	movs	r6, #0
 8006644:	4d0c      	ldr	r5, [pc, #48]	; (8006678 <__libc_init_array+0x38>)
 8006646:	4c0d      	ldr	r4, [pc, #52]	; (800667c <__libc_init_array+0x3c>)
 8006648:	1b64      	subs	r4, r4, r5
 800664a:	10a4      	asrs	r4, r4, #2
 800664c:	42a6      	cmp	r6, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	2600      	movs	r6, #0
 8006652:	f000 f821 	bl	8006698 <_init>
 8006656:	4d0a      	ldr	r5, [pc, #40]	; (8006680 <__libc_init_array+0x40>)
 8006658:	4c0a      	ldr	r4, [pc, #40]	; (8006684 <__libc_init_array+0x44>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	42a6      	cmp	r6, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	00b3      	lsls	r3, r6, #2
 8006666:	58eb      	ldr	r3, [r5, r3]
 8006668:	4798      	blx	r3
 800666a:	3601      	adds	r6, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	00b3      	lsls	r3, r6, #2
 8006670:	58eb      	ldr	r3, [r5, r3]
 8006672:	4798      	blx	r3
 8006674:	3601      	adds	r6, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	08006ba0 	.word	0x08006ba0
 800667c:	08006ba0 	.word	0x08006ba0
 8006680:	08006ba0 	.word	0x08006ba0
 8006684:	08006ba8 	.word	0x08006ba8

08006688 <memset>:
 8006688:	0003      	movs	r3, r0
 800668a:	1882      	adds	r2, r0, r2
 800668c:	4293      	cmp	r3, r2
 800668e:	d100      	bne.n	8006692 <memset+0xa>
 8006690:	4770      	bx	lr
 8006692:	7019      	strb	r1, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	e7f9      	b.n	800668c <memset+0x4>

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr

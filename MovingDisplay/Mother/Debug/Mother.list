
Mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065dc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080067a8  080067a8  000167a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a10  08006a10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a18  08006a18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08006a9c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08006a9c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011005  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  000310ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002400d  00000000  00000000  00034540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ead6  00000000  00000000  0005854d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd02a  00000000  00000000  00067023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013404d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  001340a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800678c 	.word	0x0800678c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	0800678c 	.word	0x0800678c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f005 fc35 	bl	8006760 <memcpy>
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f001 fc58 	bl	80027d0 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f001 f858 	bl	8001fd8 <HAL_Delay>
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f001 fc37 	bl	80027d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
 8000f7a:	f001 fd27 	bl	80029cc <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800111c:	f003 fdc0 	bl	8004ca0 <atan2>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
 8001188:	f003 fcec 	bl	8004b64 <copysign>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011a2:	f003 fd49 	bl	8004c38 <asin>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001234:	f003 fd34 	bl	8004ca0 <atan2>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>:
#include "m_transmit.h"

M_TRANSMIT::M_TRANSMIT(UART_HandleTypeDef* uart, uint8_t id){
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
    UART=uart;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	605a      	str	r2, [r3, #4]
    ID=id;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	70da      	strb	r2, [r3, #3]
    send_ID = id + 190;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	3b42      	subs	r3, #66	; 0x42
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	721a      	strb	r2, [r3, #8]
}
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_ZN10M_TRANSMIT10get_travelEv>:

int M_TRANSMIT::get_travel(){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(UART, &send_ID, 1, 100);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6858      	ldr	r0, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f103 0108 	add.w	r1, r3, #8
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2201      	movs	r2, #1
 80012d4:	f003 f82f 	bl	8004336 <HAL_UART_Transmit>
    HAL_UART_Receive(UART, rcvBuf, 3, 100);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6858      	ldr	r0, [r3, #4]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	2203      	movs	r2, #3
 80012e2:	f003 f8ba 	bl	800445a <HAL_UART_Receive>

    int hyaku = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
    int travel = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]

    for(int j = 1; j <3 ; j++){
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	dc13      	bgt.n	8001320 <_ZN10M_TRANSMIT10get_travelEv+0x62>
        travel = travel + (rcvBuf[j]*hyaku);
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4413      	add	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        hyaku = hyaku*100;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2264      	movs	r2, #100	; 0x64
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
    for(int j = 1; j <3 ; j++){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e7e8      	b.n	80012f2 <_ZN10M_TRANSMIT10get_travelEv+0x34>
    }
    travel-=5000;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8001326:	3b08      	subs	r3, #8
 8001328:	613b      	str	r3, [r7, #16]
    HAL_Delay(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fe54 	bl	8001fd8 <HAL_Delay>

    return travel;
 8001330:	693b      	ldr	r3, [r7, #16]

 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	0000      	movs	r0, r0
 800133c:	0000      	movs	r0, r0
	...

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001344:	b0b2      	sub	sp, #200	; 0xc8
 8001346:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001348:	f000 fdd4 	bl	8001ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134c:	f000 f97c 	bl	8001648 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001350:	f000 fa80 	bl	8001854 <_ZL12MX_GPIO_Initv>
  MX_USART6_UART_Init();
 8001354:	f000 fa50 	bl	80017f8 <_ZL19MX_USART6_UART_Initv>
  MX_USART3_UART_Init();
 8001358:	f000 fa20 	bl	800179c <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 800135c:	f000 f9ea 	bl	8001734 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001364:	f000 fe38 	bl	8001fd8 <HAL_Delay>
  while (!ready) {
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <main+0x2b0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d116      	bne.n	800139e <main+0x5e>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	220a      	movs	r2, #10
 8001376:	2150      	movs	r1, #80	; 0x50
 8001378:	489e      	ldr	r0, [pc, #632]	; (80015f4 <main+0x2b4>)
 800137a:	f001 fd4d 	bl	8002e18 <HAL_I2C_IsDeviceReady>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <main+0x56>
      ready = 1;
 800138e:	4b98      	ldr	r3, [pc, #608]	; (80015f0 <main+0x2b0>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e7e8      	b.n	8001368 <main+0x28>
    } else {
      HAL_Delay(100);
 8001396:	2064      	movs	r0, #100	; 0x64
 8001398:	f000 fe1e 	bl	8001fd8 <HAL_Delay>
  while (!ready) {
 800139c:	e7e4      	b.n	8001368 <main+0x28>
    }
  }

  xf = -1*odom1.get_travel();
 800139e:	4896      	ldr	r0, [pc, #600]	; (80015f8 <main+0x2b8>)
 80013a0:	f7ff ff8d 	bl	80012be <_ZN10M_TRANSMIT10get_travelEv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	425b      	negs	r3, r3
 80013a8:	4a94      	ldr	r2, [pc, #592]	; (80015fc <main+0x2bc>)
 80013aa:	6013      	str	r3, [r2, #0]
  if(odom1.get_travel() <=-5000){Error = 1;}
 80013ac:	4892      	ldr	r0, [pc, #584]	; (80015f8 <main+0x2b8>)
 80013ae:	f7ff ff86 	bl	80012be <_ZN10M_TRANSMIT10get_travelEv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a92      	ldr	r2, [pc, #584]	; (8001600 <main+0x2c0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	bfb4      	ite	lt
 80013ba:	2301      	movlt	r3, #1
 80013bc:	2300      	movge	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <main+0x8a>
 80013c4:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <main+0x2c4>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
  yf = -1*odom2.get_travel();
 80013ca:	488f      	ldr	r0, [pc, #572]	; (8001608 <main+0x2c8>)
 80013cc:	f7ff ff77 	bl	80012be <_ZN10M_TRANSMIT10get_travelEv>
 80013d0:	4603      	mov	r3, r0
 80013d2:	425b      	negs	r3, r3
 80013d4:	4a8d      	ldr	r2, [pc, #564]	; (800160c <main+0x2cc>)
 80013d6:	6013      	str	r3, [r2, #0]
  if(odom2.get_travel() <=-5000){Error = 1;}
 80013d8:	488b      	ldr	r0, [pc, #556]	; (8001608 <main+0x2c8>)
 80013da:	f7ff ff70 	bl	80012be <_ZN10M_TRANSMIT10get_travelEv>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a87      	ldr	r2, [pc, #540]	; (8001600 <main+0x2c0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	bfb4      	ite	lt
 80013e6:	2301      	movlt	r3, #1
 80013e8:	2300      	movge	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <main+0xb6>
 80013f0:	4b84      	ldr	r3, [pc, #528]	; (8001604 <main+0x2c4>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2104      	movs	r1, #4
 80013fa:	4885      	ldr	r0, [pc, #532]	; (8001610 <main+0x2d0>)
 80013fc:	f001 f88a 	bl	8002514 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 8001400:	2328      	movs	r3, #40	; 0x28
 8001402:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  BNO055 bno055(hi2c1,address);
 8001406:	4e7b      	ldr	r6, [pc, #492]	; (80015f4 <main+0x2b4>)
 8001408:	f107 081c 	add.w	r8, r7, #28
 800140c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001410:	9312      	str	r3, [sp, #72]	; 0x48
 8001412:	4668      	mov	r0, sp
 8001414:	f106 030c 	add.w	r3, r6, #12
 8001418:	2248      	movs	r2, #72	; 0x48
 800141a:	4619      	mov	r1, r3
 800141c:	f005 f9a0 	bl	8006760 <memcpy>
 8001420:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001424:	4640      	mov	r0, r8
 8001426:	f7ff fd55 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    travel_x = -1*odom1.get_travel() - xf;
 800142a:	4873      	ldr	r0, [pc, #460]	; (80015f8 <main+0x2b8>)
 800142c:	f7ff ff47 	bl	80012be <_ZN10M_TRANSMIT10get_travelEv>
 8001430:	4603      	mov	r3, r0
 8001432:	425a      	negs	r2, r3
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <main+0x2bc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	4a76      	ldr	r2, [pc, #472]	; (8001614 <main+0x2d4>)
 800143c:	6013      	str	r3, [r2, #0]
    travel_y = -1*odom2.get_travel() - yf;
 800143e:	4872      	ldr	r0, [pc, #456]	; (8001608 <main+0x2c8>)
 8001440:	f7ff ff3d 	bl	80012be <_ZN10M_TRANSMIT10get_travelEv>
 8001444:	4603      	mov	r3, r0
 8001446:	425a      	negs	r2, r3
 8001448:	4b70      	ldr	r3, [pc, #448]	; (800160c <main+0x2cc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4a72      	ldr	r2, [pc, #456]	; (8001618 <main+0x2d8>)
 8001450:	6013      	str	r3, [r2, #0]

    e = bno055.get_eular();
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fe0a 	bl	8001070 <_ZN6BNO0559get_eularEv>
 800145c:	eef0 6a40 	vmov.f32	s13, s0
 8001460:	eeb0 7a60 	vmov.f32	s14, s1
 8001464:	eef0 7a41 	vmov.f32	s15, s2
 8001468:	edc7 6a00 	vstr	s13, [r7]
 800146c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001470:	edc7 7a02 	vstr	s15, [r7, #8]
    rotate = -1*(e.z/3.1415)*180;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f82a 	bl	80004d0 <__aeabi_f2d>
 800147c:	a35a      	add	r3, pc, #360	; (adr r3, 80015e8 <main+0x2a8>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f9a7 	bl	80007d4 <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4614      	mov	r4, r2
 800148c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <main+0x2dc>)
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7ff f871 	bl	8000580 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fb43 	bl	8000b30 <__aeabi_d2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a5c      	ldr	r2, [pc, #368]	; (8001620 <main+0x2e0>)
 80014ae:	6013      	str	r3, [r2, #0]
    rotate = (int)rotate;
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <main+0x2e0>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	4b58      	ldr	r3, [pc, #352]	; (8001620 <main+0x2e0>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]

    if(travel_x>250){
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <main+0x2d4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2bfa      	cmp	r3, #250	; 0xfa
 80014ca:	dd03      	ble.n	80014d4 <main+0x194>
    	goal_travel_x = 0;
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <main+0x2e4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e006      	b.n	80014e2 <main+0x1a2>
    }else if(travel_x <=0){
 80014d4:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <main+0x2d4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dc02      	bgt.n	80014e2 <main+0x1a2>
    	goal_travel_x = 250;
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <main+0x2e4>)
 80014de:	22fa      	movs	r2, #250	; 0xfa
 80014e0:	601a      	str	r2, [r3, #0]
    }

    go_degree = atan2(goal_travel_x - travel_x, -(travel_y*5))/PI*180;
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <main+0x2e4>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <main+0x2d4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1ad0      	subs	r0, r2, r3
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <main+0x2d8>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	079b      	lsls	r3, r3, #30
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 f9ff 	bl	80018fe <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001500:	ec51 0b10 	vmov	r0, r1, d0
 8001504:	a338      	add	r3, pc, #224	; (adr r3, 80015e8 <main+0x2a8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f963 	bl	80007d4 <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <main+0x2dc>)
 800151c:	f7ff f830 	bl	8000580 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fada 	bl	8000ae0 <__aeabi_d2iz>
 800152c:	4603      	mov	r3, r0
 800152e:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <main+0x2e8>)
 8001530:	6013      	str	r3, [r2, #0]

    motor_A.calcurate(rotate, go_degree, go_speed);
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <main+0x2e0>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800153c:	ee17 3a90 	vmov	r3, s15
 8001540:	b219      	sxth	r1, r3
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <main+0x2e8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <main+0x2ec>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4838      	ldr	r0, [pc, #224]	; (8001630 <main+0x2f0>)
 8001550:	f000 fa5a 	bl	8001a08 <_ZN4MOVE9calcurateEsss>
	  motor_A.set_array(Buf);
 8001554:	4937      	ldr	r1, [pc, #220]	; (8001634 <main+0x2f4>)
 8001556:	4836      	ldr	r0, [pc, #216]	; (8001630 <main+0x2f0>)
 8001558:	f000 fb0a 	bl	8001b70 <_ZN4MOVE9set_arrayEPh>
	  motor_B.calcurate(rotate, go_degree, go_speed);
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <main+0x2e0>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001566:	ee17 3a90 	vmov	r3, s15
 800156a:	b219      	sxth	r1, r3
 800156c:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <main+0x2e8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <main+0x2ec>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b21b      	sxth	r3, r3
 8001578:	482f      	ldr	r0, [pc, #188]	; (8001638 <main+0x2f8>)
 800157a:	f000 fa45 	bl	8001a08 <_ZN4MOVE9calcurateEsss>
	  motor_B.set_array(Buf);
 800157e:	492d      	ldr	r1, [pc, #180]	; (8001634 <main+0x2f4>)
 8001580:	482d      	ldr	r0, [pc, #180]	; (8001638 <main+0x2f8>)
 8001582:	f000 faf5 	bl	8001b70 <_ZN4MOVE9set_arrayEPh>
	  motor_C.calcurate(rotate, go_degree, go_speed);
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <main+0x2e0>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	b219      	sxth	r1, r3
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <main+0x2e8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <main+0x2ec>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <main+0x2fc>)
 80015a4:	f000 fa30 	bl	8001a08 <_ZN4MOVE9calcurateEsss>
	  motor_C.set_array(Buf);
 80015a8:	4922      	ldr	r1, [pc, #136]	; (8001634 <main+0x2f4>)
 80015aa:	4824      	ldr	r0, [pc, #144]	; (800163c <main+0x2fc>)
 80015ac:	f000 fae0 	bl	8001b70 <_ZN4MOVE9set_arrayEPh>
	  motor_D.calcurate(rotate, go_degree, go_speed);
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <main+0x2e0>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ba:	ee17 3a90 	vmov	r3, s15
 80015be:	b219      	sxth	r1, r3
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <main+0x2e8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <main+0x2ec>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <main+0x300>)
 80015ce:	f000 fa1b 	bl	8001a08 <_ZN4MOVE9calcurateEsss>
	  motor_D.set_array(Buf);
 80015d2:	4918      	ldr	r1, [pc, #96]	; (8001634 <main+0x2f4>)
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <main+0x300>)
 80015d6:	f000 facb 	bl	8001b70 <_ZN4MOVE9set_arrayEPh>

	  HAL_UART_Transmit(&huart3, (uint8_t*)&Buf, 12, 100);
 80015da:	2364      	movs	r3, #100	; 0x64
 80015dc:	220c      	movs	r2, #12
 80015de:	4915      	ldr	r1, [pc, #84]	; (8001634 <main+0x2f4>)
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <main+0x304>)
 80015e2:	f002 fea8 	bl	8004336 <HAL_UART_Transmit>
    travel_x = -1*odom1.get_travel() - xf;
 80015e6:	e720      	b.n	800142a <main+0xea>
 80015e8:	c083126f 	.word	0xc083126f
 80015ec:	400921ca 	.word	0x400921ca
 80015f0:	20000198 	.word	0x20000198
 80015f4:	20000094 	.word	0x20000094
 80015f8:	20000180 	.word	0x20000180
 80015fc:	20000174 	.word	0x20000174
 8001600:	ffffec79 	.word	0xffffec79
 8001604:	200001e0 	.word	0x200001e0
 8001608:	2000018c 	.word	0x2000018c
 800160c:	2000017c 	.word	0x2000017c
 8001610:	40020400 	.word	0x40020400
 8001614:	20000170 	.word	0x20000170
 8001618:	20000178 	.word	0x20000178
 800161c:	40668000 	.word	0x40668000
 8001620:	2000019c 	.word	0x2000019c
 8001624:	200001dc 	.word	0x200001dc
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004
 8001630:	200001a0 	.word	0x200001a0
 8001634:	200001d0 	.word	0x200001d0
 8001638:	200001ac 	.word	0x200001ac
 800163c:	200001b8 	.word	0x200001b8
 8001640:	200001c4 	.word	0x200001c4
 8001644:	200000e8 	.word	0x200000e8

08001648 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	; 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	2234      	movs	r2, #52	; 0x34
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 f890 	bl	800677c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <_Z18SystemClock_Configv+0xe4>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a2d      	ldr	r2, [pc, #180]	; (800172c <_Z18SystemClock_Configv+0xe4>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <_Z18SystemClock_Configv+0xe4>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001688:	2300      	movs	r3, #0
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <_Z18SystemClock_Configv+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <_Z18SystemClock_Configv+0xe8>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <_Z18SystemClock_Configv+0xe8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016bc:	2310      	movs	r3, #16
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016c0:	23c0      	movs	r3, #192	; 0xc0
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80016c4:	2306      	movs	r3, #6
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fb43 	bl	8003d60 <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80016ea:	f000 f903 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2302      	movs	r3, #2
 80016f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2101      	movs	r1, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f001 ffe1 	bl	80036d0 <HAL_RCC_ClockConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800171e:	f000 f8e9 	bl	80018f4 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 800173a:	4a16      	ldr	r2, [pc, #88]	; (8001794 <_ZL12MX_I2C1_Initv+0x60>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <_ZL12MX_I2C1_Initv+0x64>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <_ZL12MX_I2C1_Initv+0x5c>)
 8001772:	f000 fee9 	bl	8002548 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001786:	f000 f8b5 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000094 	.word	0x20000094
 8001794:	40005400 	.word	0x40005400
 8001798:	000186a0 	.word	0x000186a0

0800179c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_ZL19MX_USART3_UART_Initv+0x58>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80017d4:	f002 fd62 	bl	800429c <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80017e8:	f000 f884 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200000e8 	.word	0x200000e8
 80017f4:	40004800 	.word	0x40004800

080017f8 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001800:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001830:	f002 fd34 	bl	800429c <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001844:	f000 f856 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000012c 	.word	0x2000012c
 8001850:	40011400 	.word	0x40011400

08001854 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 8001874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <_ZL12MX_GPIO_Initv+0x98>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2104      	movs	r1, #4
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <_ZL12MX_GPIO_Initv+0x9c>)
 80018c4:	f000 fe26 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018c8:	2304      	movs	r3, #4
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	4804      	ldr	r0, [pc, #16]	; (80018f0 <_ZL12MX_GPIO_Initv+0x9c>)
 80018e0:	f000 fc84 	bl	80021ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>

080018fe <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 80018fe:	b5b0      	push	{r4, r5, r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7fe fdcf 	bl	80004ac <__aeabi_i2d>
 800190e:	4604      	mov	r4, r0
 8001910:	460d      	mov	r5, r1
 8001912:	6838      	ldr	r0, [r7, #0]
 8001914:	f7fe fdca 	bl	80004ac <__aeabi_i2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	ec43 2b11 	vmov	d1, r2, r3
 8001920:	ec45 4b10 	vmov	d0, r4, r5
 8001924:	f003 f9bc 	bl	8004ca0 <atan2>
 8001928:	eeb0 7a40 	vmov.f32	s14, s0
 800192c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001930:	eeb0 0a47 	vmov.f32	s0, s14
 8001934:	eef0 0a67 	vmov.f32	s1, s15
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001940 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d124      	bne.n	800199a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001956:	4293      	cmp	r3, r2
 8001958:	d11f      	bne.n	800199a <_Z41__static_initialization_and_destruction_0ii+0x5a>
M_TRANSMIT odom1(&huart6,0);
 800195a:	2200      	movs	r2, #0
 800195c:	4911      	ldr	r1, [pc, #68]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001960:	f7ff fc94 	bl	800128c <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
M_TRANSMIT odom2(&huart6,1);
 8001964:	2201      	movs	r2, #1
 8001966:	490f      	ldr	r1, [pc, #60]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001968:	4810      	ldr	r0, [pc, #64]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800196a:	f7ff fc8f 	bl	800128c <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
MOVE motor_A(0, 45);
 800196e:	222d      	movs	r2, #45	; 0x2d
 8001970:	2100      	movs	r1, #0
 8001972:	480f      	ldr	r0, [pc, #60]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001974:	f000 f82c 	bl	80019d0 <_ZN4MOVEC1Ehs>
MOVE motor_B(1, 135);
 8001978:	2287      	movs	r2, #135	; 0x87
 800197a:	2101      	movs	r1, #1
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800197e:	f000 f827 	bl	80019d0 <_ZN4MOVEC1Ehs>
MOVE motor_C(2, -135);
 8001982:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8001986:	2102      	movs	r1, #2
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800198a:	f000 f821 	bl	80019d0 <_ZN4MOVEC1Ehs>
MOVE motor_D(3, -45);
 800198e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8001992:	2103      	movs	r1, #3
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001996:	f000 f81b 	bl	80019d0 <_ZN4MOVEC1Ehs>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000012c 	.word	0x2000012c
 80019a8:	20000180 	.word	0x20000180
 80019ac:	2000018c 	.word	0x2000018c
 80019b0:	200001a0 	.word	0x200001a0
 80019b4:	200001ac 	.word	0x200001ac
 80019b8:	200001b8 	.word	0x200001b8
 80019bc:	200001c4 	.word	0x200001c4

080019c0 <_GLOBAL__sub_I_hi2c1>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff ffb9 	bl	8001940 <_Z41__static_initialization_and_destruction_0ii>
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN4MOVEC1Ehs>:

#include "move.h"

MOVE::MOVE(uint8_t motor_id, int16_t motor_degree){
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
 80019dc:	4613      	mov	r3, r2
 80019de:	803b      	strh	r3, [r7, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <_ZN4MOVEC1Ehs+0x30>)
 80019e4:	609a      	str	r2, [r3, #8]
    MOTOR_ID = motor_id;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	701a      	strb	r2, [r3, #0]
    MOTOR_DEGREE = motor_degree;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	883a      	ldrh	r2, [r7, #0]
 80019f0:	805a      	strh	r2, [r3, #2]
}
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	3f333333 	.word	0x3f333333
 8001a04:	00000000 	.word	0x00000000

08001a08 <_ZN4MOVE9calcurateEsss>:

void MOVE::calcurate(int16_t gyro_degree, int16_t goal_degree, int16_t goal_speed){
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	817b      	strh	r3, [r7, #10]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	813b      	strh	r3, [r7, #8]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 8001a22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a26:	2bb4      	cmp	r3, #180	; 0xb4
 8001a28:	dd05      	ble.n	8001a36 <_ZN4MOVE9calcurateEsss+0x2e>
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	817b      	strh	r3, [r7, #10]
 8001a34:	e009      	b.n	8001a4a <_ZN4MOVE9calcurateEsss+0x42>
    else if(gyro_degree <-180){gyro_degree += 360;}
 8001a36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a3a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001a3e:	da04      	bge.n	8001a4a <_ZN4MOVE9calcurateEsss+0x42>
 8001a40:	897b      	ldrh	r3, [r7, #10]
 8001a42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	817b      	strh	r3, [r7, #10]

    if (gyro_degree > 0){
 8001a4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dd14      	ble.n	8001a7c <_ZN4MOVE9calcurateEsss+0x74>
        roll_speed = -10 + (-gyro_degree * 3);
 8001a52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a56:	461a      	mov	r2, r3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	3b0a      	subs	r3, #10
 8001a5e:	617b      	str	r3, [r7, #20]
        if (gyro_degree < 6){
 8001a60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	dc01      	bgt.n	8001a6c <_ZN4MOVE9calcurateEsss+0x64>
            roll_speed = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed < -150){
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8001a72:	da1d      	bge.n	8001ab0 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = -150;
 8001a74:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e019      	b.n	8001ab0 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else if (gyro_degree < 0){
 8001a7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da13      	bge.n	8001aac <_ZN4MOVE9calcurateEsss+0xa4>
        roll_speed = 10 + (-gyro_degree * 3);
 8001a84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	330a      	adds	r3, #10
 8001a90:	617b      	str	r3, [r7, #20]
        if (gyro_degree > -6){
 8001a92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a96:	f113 0f05 	cmn.w	r3, #5
 8001a9a:	db01      	blt.n	8001aa0 <_ZN4MOVE9calcurateEsss+0x98>
            roll_speed = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed > 150){
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b96      	cmp	r3, #150	; 0x96
 8001aa4:	dd04      	ble.n	8001ab0 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = 150;
 8001aa6:	2396      	movs	r3, #150	; 0x96
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e001      	b.n	8001ab0 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else{
        roll_speed = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
    }

    motor_speed = (int)goal_speed*sin((PI/180)*(goal_degree - MOTOR_DEGREE));
 8001ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fcf9 	bl	80004ac <__aeabi_i2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fcee 	bl	80004ac <__aeabi_i2d>
 8001ad0:	a325      	add	r3, pc, #148	; (adr r3, 8001b68 <_ZN4MOVE9calcurateEsss+0x160>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fd53 	bl	8000580 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b17 	vmov	d7, r2, r3
 8001ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae6:	eef0 0a67 	vmov.f32	s1, s15
 8001aea:	f003 f84d 	bl	8004b88 <sin>
 8001aee:	ec53 2b10 	vmov	r2, r3, d0
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fd43 	bl	8000580 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7fe ffed 	bl	8000ae0 <__aeabi_d2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	809a      	strh	r2, [r3, #4]
    motor_speed = (int)(motor_speed * motor_rate) + (roll_speed * (1 - motor_rate));
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b52:	ee17 3a90 	vmov	r3, s15
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	809a      	strh	r2, [r3, #4]

}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	f3af 8000 	nop.w
 8001b68:	171ea105 	.word	0x171ea105
 8001b6c:	3f91df24 	.word	0x3f91df24

08001b70 <_ZN4MOVE9set_arrayEPh>:

void MOVE::set_array(uint8_t *send_array){
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    send_array[MOTOR_ID*3]=250+MOTOR_ID;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	460b      	mov	r3, r1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	440b      	add	r3, r1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	440b      	add	r3, r1
 8001b90:	3a06      	subs	r2, #6
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
    int16_t send_speed = motor_speed;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	889b      	ldrh	r3, [r3, #4]
 8001b9a:	81fb      	strh	r3, [r7, #14]
    send_speed += 5000;
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8001ba8:	2301      	movs	r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	dc26      	bgt.n	8001c00 <_ZN4MOVE9set_arrayEPh+0x90>
		send_array[MOTOR_ID*3+i] = send_speed%100;
 8001bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <_ZN4MOVE9set_arrayEPh+0x9c>)
 8001bb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bbc:	1151      	asrs	r1, r2, #5
 8001bbe:	17da      	asrs	r2, r3, #31
 8001bc0:	1a8a      	subs	r2, r1, r2
 8001bc2:	2164      	movs	r1, #100	; 0x64
 8001bc4:	fb01 f202 	mul.w	r2, r1, r2
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	b219      	sxth	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	441a      	add	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
		send_speed = (int)send_speed/100;
 8001be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <_ZN4MOVE9set_arrayEPh+0x9c>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	1152      	asrs	r2, r2, #5
 8001bf2:	17db      	asrs	r3, r3, #31
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	e7d5      	b.n	8001bac <_ZN4MOVE9set_arrayEPh+0x3c>
	}
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	51eb851f 	.word	0x51eb851f

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_I2C_MspInit+0x84>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12c      	bne.n	8001cdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_I2C_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_I2C_MspInit+0x88>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_I2C_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca4:	2312      	movs	r3, #18
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480c      	ldr	r0, [pc, #48]	; (8001cec <HAL_I2C_MspInit+0x8c>)
 8001cbc:	f000 fa96 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_I2C_MspInit+0x88>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_I2C_MspInit+0x88>)
 8001cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_I2C_MspInit+0x88>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_UART_MspInit+0x124>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d14b      	bne.n	8001daa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d66:	2320      	movs	r3, #32
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d76:	2307      	movs	r3, #7
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4826      	ldr	r0, [pc, #152]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001d82:	f000 fa33 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	481f      	ldr	r0, [pc, #124]	; (8001e20 <HAL_UART_MspInit+0x130>)
 8001da4:	f000 fa22 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001da8:	e030      	b.n	8001e0c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_UART_MspInit+0x134>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d12b      	bne.n	8001e0c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_UART_MspInit+0x128>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <HAL_UART_MspInit+0x12c>)
 8001e08:	f000 f9f0 	bl	80021ec <HAL_GPIO_Init>
}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40004800 	.word	0x40004800
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40011400 	.word	0x40011400

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 f890 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea6:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	; (8001eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd7 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f004 fc23 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7ff fa35 	bl	8001340 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ee4:	08006a24 	.word	0x08006a24
  ldr r2, =_sbss
 8001ee8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001eec:	200001e8 	.word	0x200001e8

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_Init+0x40>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_Init+0x40>)
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_Init+0x40>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f000 f931 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f000 f808 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7ff fe72 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f93b 	bl	80021d2 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f911 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000010 	.word	0x20000010
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	200001e4 	.word	0x200001e4

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200001e4 	.word	0x200001e4

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000010 	.word	0x20000010

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff47 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff5c 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffb0 	bl	8002140 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e165      	b.n	80024d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 8154 	bne.w	80024ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80ae 	beq.w	80024ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a5c      	ldr	r2, [pc, #368]	; (80024ec <HAL_GPIO_Init+0x300>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_GPIO_Init+0x304>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	; (80024f4 <HAL_GPIO_Init+0x308>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4e      	ldr	r2, [pc, #312]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_GPIO_Init+0x310>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_GPIO_Init+0x314>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_GPIO_Init+0x318>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_GPIO_Init+0x31c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x206>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a49      	ldr	r2, [pc, #292]	; (800250c <HAL_GPIO_Init+0x320>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x202>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x21c>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	; (80024f0 <HAL_GPIO_Init+0x304>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a31      	ldr	r2, [pc, #196]	; (8002510 <HAL_GPIO_Init+0x324>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_GPIO_Init+0x324>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_GPIO_Init+0x324>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_GPIO_Init+0x324>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_GPIO_Init+0x324>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae96 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40013c00 	.word	0x40013c00

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e12b      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fb76 	bl	8001c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ac:	f001 f982 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a81      	ldr	r2, [pc, #516]	; (80027bc <HAL_I2C_Init+0x274>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d807      	bhi.n	80025cc <HAL_I2C_Init+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a80      	ldr	r2, [pc, #512]	; (80027c0 <HAL_I2C_Init+0x278>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e006      	b.n	80025da <HAL_I2C_Init+0x92>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_I2C_Init+0x27c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0e7      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a78      	ldr	r2, [pc, #480]	; (80027c8 <HAL_I2C_Init+0x280>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_I2C_Init+0x274>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d802      	bhi.n	800261c <HAL_I2C_Init+0xd4>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	e009      	b.n	8002630 <HAL_I2C_Init+0xe8>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_I2C_Init+0x284>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	3301      	adds	r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	430b      	orrs	r3, r1
 8002636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	495c      	ldr	r1, [pc, #368]	; (80027bc <HAL_I2C_Init+0x274>)
 800264c:	428b      	cmp	r3, r1
 800264e:	d819      	bhi.n	8002684 <HAL_I2C_Init+0x13c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e59      	subs	r1, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb1 f3f3 	udiv	r3, r1, r3
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_I2C_Init+0x138>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e59      	subs	r1, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fbb1 f3f3 	udiv	r3, r1, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	e051      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002680:	2304      	movs	r3, #4
 8002682:	e04f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_I2C_Init+0x168>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e012      	b.n	80026d6 <HAL_I2C_Init+0x18e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Init+0x196>
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <HAL_I2C_Init+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e58      	subs	r0, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	440b      	add	r3, r1
 80026f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	6809      	ldr	r1, [r1, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6911      	ldr	r1, [r2, #16]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	000186a0 	.word	0x000186a0
 80027c0:	001e847f 	.word	0x001e847f
 80027c4:	003d08ff 	.word	0x003d08ff
 80027c8:	431bde83 	.word	0x431bde83
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	461a      	mov	r2, r3
 80027dc:	460b      	mov	r3, r1
 80027de:	817b      	strh	r3, [r7, #10]
 80027e0:	4613      	mov	r3, r2
 80027e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff fbec 	bl	8001fc0 <HAL_GetTick>
 80027e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	f040 80e0 	bne.w	80029b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	4970      	ldr	r1, [pc, #448]	; (80029c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fd86 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	e0d3      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Master_Transmit+0x50>
 800281c:	2302      	movs	r3, #2
 800281e:	e0cc      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d007      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002854:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2221      	movs	r2, #33	; 0x21
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fbf0 	bl	8003074 <I2C_MasterRequestWrite>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e08d      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028b4:	e066      	b.n	8002984 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fe00 	bl	80034c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d107      	bne.n	80028de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d11b      	bne.n	8002958 <HAL_I2C_Master_Transmit+0x188>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d017      	beq.n	8002958 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6a39      	ldr	r1, [r7, #32]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fdf0 	bl	8003542 <I2C_WaitOnBTFFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b04      	cmp	r3, #4
 800296e:	d107      	bne.n	8002980 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e01a      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d194      	bne.n	80028b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e000      	b.n	80029ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029b8:	2302      	movs	r3, #2
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	00100002 	.word	0x00100002
 80029c8:	ffff0000 	.word	0xffff0000

080029cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
 80029dc:	4613      	mov	r3, r2
 80029de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff faee 	bl	8001fc0 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 820b 	bne.w	8002e0a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	497c      	ldr	r1, [pc, #496]	; (8002bf0 <HAL_I2C_Master_Receive+0x224>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fc88 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e1fe      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2C_Master_Receive+0x50>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e1f7      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2222      	movs	r2, #34	; 0x22
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a5c      	ldr	r2, [pc, #368]	; (8002bf4 <HAL_I2C_Master_Receive+0x228>)
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fb74 	bl	8003178 <I2C_MasterRequestRead>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1b8      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d113      	bne.n	8002aca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e18c      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d11b      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e16c      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d11b      	bne.n	8002b4a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	e14c      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b70:	e138      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	f200 80f1 	bhi.w	8002d5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d123      	bne.n	8002bcc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fd1b 	bl	80035c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e139      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bca:	e10b      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d14e      	bne.n	8002c72 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4906      	ldr	r1, [pc, #24]	; (8002bf8 <HAL_I2C_Master_Receive+0x22c>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fb98 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e10e      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
 8002bee:	bf00      	nop
 8002bf0:	00100002 	.word	0x00100002
 8002bf4:	ffff0000 	.word	0xffff0000
 8002bf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c70:	e0b8      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4966      	ldr	r1, [pc, #408]	; (8002e14 <HAL_I2C_Master_Receive+0x448>)
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fb49 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0bf      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	494f      	ldr	r1, [pc, #316]	; (8002e14 <HAL_I2C_Master_Receive+0x448>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fb1b 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e091      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d5c:	e042      	b.n	8002de4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fc2e 	bl	80035c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e04c      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d118      	bne.n	8002de4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f aec2 	bne.w	8002b72 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3728      	adds	r7, #40	; 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	00010004 	.word	0x00010004

08002e18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff f8ca 	bl	8001fc0 <HAL_GetTick>
 8002e2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	f040 8111 	bne.w	8003062 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2319      	movs	r3, #25
 8002e46:	2201      	movs	r2, #1
 8002e48:	4988      	ldr	r1, [pc, #544]	; (800306c <HAL_I2C_IsDeviceReady+0x254>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa62 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	e104      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_I2C_IsDeviceReady+0x50>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0fd      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d007      	beq.n	8002e8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2224      	movs	r2, #36	; 0x24
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_I2C_IsDeviceReady+0x258>)
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa20 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee8:	d103      	bne.n	8002ef2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b6      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f06:	f7ff f85b 	bl	8001fc0 <HAL_GetTick>
 8002f0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f3a:	e025      	b.n	8002f88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7ff f840 	bl	8001fc0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <HAL_I2C_IsDeviceReady+0x13a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	22a0      	movs	r2, #160	; 0xa0
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2ba0      	cmp	r3, #160	; 0xa0
 8002f92:	d005      	beq.n	8002fa0 <HAL_I2C_IsDeviceReady+0x188>
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_I2C_IsDeviceReady+0x188>
 8002f9a:	7dbb      	ldrb	r3, [r7, #22]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0cd      	beq.n	8002f3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d129      	bne.n	800300a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2319      	movs	r3, #25
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4921      	ldr	r1, [pc, #132]	; (800306c <HAL_I2C_IsDeviceReady+0x254>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f994 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e036      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e02c      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003022:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2319      	movs	r3, #25
 800302a:	2201      	movs	r2, #1
 800302c:	490f      	ldr	r1, [pc, #60]	; (800306c <HAL_I2C_IsDeviceReady+0x254>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f970 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e012      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3301      	adds	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	f4ff af32 	bcc.w	8002eb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	00100002 	.word	0x00100002
 8003070:	ffff0000 	.word	0xffff0000

08003074 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d006      	beq.n	800309e <I2C_MasterRequestWrite+0x2a>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d003      	beq.n	800309e <I2C_MasterRequestWrite+0x2a>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800309c:	d108      	bne.n	80030b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00b      	b.n	80030c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	2b12      	cmp	r3, #18
 80030b6:	d107      	bne.n	80030c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f91d 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ee:	d103      	bne.n	80030f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e035      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003104:	d108      	bne.n	8003118 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	e01b      	b.n	8003150 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	11db      	asrs	r3, r3, #7
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 0306 	and.w	r3, r3, #6
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f063 030f 	orn	r3, r3, #15
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	490e      	ldr	r1, [pc, #56]	; (8003170 <I2C_MasterRequestWrite+0xfc>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f943 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e010      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <I2C_MasterRequestWrite+0x100>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f933 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00010008 	.word	0x00010008
 8003174:	00010002 	.word	0x00010002

08003178 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	460b      	mov	r3, r1
 8003186:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d006      	beq.n	80031b2 <I2C_MasterRequestRead+0x3a>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d003      	beq.n	80031b2 <I2C_MasterRequestRead+0x3a>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b0:	d108      	bne.n	80031c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e00b      	b.n	80031dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	2b11      	cmp	r3, #17
 80031ca:	d107      	bne.n	80031dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f893 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d103      	bne.n	800320c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e079      	b.n	8003304 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003218:	d108      	bne.n	800322c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800321a:	897b      	ldrh	r3, [r7, #10]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]
 800322a:	e05f      	b.n	80032ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800322c:	897b      	ldrh	r3, [r7, #10]
 800322e:	11db      	asrs	r3, r3, #7
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 0306 	and.w	r3, r3, #6
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f063 030f 	orn	r3, r3, #15
 800323c:	b2da      	uxtb	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4930      	ldr	r1, [pc, #192]	; (800330c <I2C_MasterRequestRead+0x194>)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8b9 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e054      	b.n	8003304 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4929      	ldr	r1, [pc, #164]	; (8003310 <I2C_MasterRequestRead+0x198>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8a9 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e044      	b.n	8003304 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f831 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	d103      	bne.n	80032d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e017      	b.n	8003304 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032d4:	897b      	ldrh	r3, [r7, #10]
 80032d6:	11db      	asrs	r3, r3, #7
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f003 0306 	and.w	r3, r3, #6
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f063 030e 	orn	r3, r3, #14
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4907      	ldr	r1, [pc, #28]	; (8003310 <I2C_MasterRequestRead+0x198>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f865 	bl	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	00010008 	.word	0x00010008
 8003310:	00010002 	.word	0x00010002

08003314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	e025      	b.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fe47 	bl	8001fc0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e023      	b.n	80033ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10d      	bne.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	e00c      	b.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d0b6      	beq.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033d0:	e051      	b.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d123      	bne.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0204 	orr.w	r2, r3, #4
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e046      	b.n	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d021      	beq.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fdc5 	bl	8001fc0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e020      	b.n	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10c      	bne.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e00b      	b.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d18d      	bne.n	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034cc:	e02d      	b.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f8ce 	bl	8003670 <I2C_IsAcknowledgeFailed>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e02d      	b.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d021      	beq.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7fe fd6b 	bl	8001fc0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e007      	b.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d1ca      	bne.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800354e:	e02d      	b.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f88d 	bl	8003670 <I2C_IsAcknowledgeFailed>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e02d      	b.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d021      	beq.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fe fd2a 	bl	8001fc0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d1ca      	bne.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d0:	e042      	b.n	8003658 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d119      	bne.n	8003614 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0210 	mvn.w	r2, #16
 80035e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e029      	b.n	8003668 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003614:	f7fe fcd4 	bl	8001fc0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e007      	b.n	8003668 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d1b5      	bne.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d11b      	bne.n	80036c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003690:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fbfe 	bl	8001fc0 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe fbfa 	bl	8001fc0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f855 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fb5e 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	080067a8 	.word	0x080067a8
 8003894:	20000008 	.word	0x20000008
 8003898:	2000000c 	.word	0x2000000c

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000008 	.word	0x20000008

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	080067b8 	.word	0x080067b8

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffdc 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0b5b      	lsrs	r3, r3, #13
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	080067b8 	.word	0x080067b8

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b0ae      	sub	sp, #184	; 0xb8
 800390a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392a:	4bcb      	ldr	r3, [pc, #812]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b0c      	cmp	r3, #12
 8003934:	f200 8204 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x43c>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_RCC_GetSysClockFreq+0x3c>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003975 	.word	0x08003975
 8003944:	08003d41 	.word	0x08003d41
 8003948:	08003d41 	.word	0x08003d41
 800394c:	08003d41 	.word	0x08003d41
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003d41 	.word	0x08003d41
 8003958:	08003d41 	.word	0x08003d41
 800395c:	08003d41 	.word	0x08003d41
 8003960:	08003985 	.word	0x08003985
 8003964:	08003d41 	.word	0x08003d41
 8003968:	08003d41 	.word	0x08003d41
 800396c:	08003d41 	.word	0x08003d41
 8003970:	08003b75 	.word	0x08003b75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4bb9      	ldr	r3, [pc, #740]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x358>)
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800397a:	e1e5      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4bb7      	ldr	r3, [pc, #732]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x358>)
 800397e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003982:	e1e1      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003984:	4bb4      	ldr	r3, [pc, #720]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003990:	4bb1      	ldr	r3, [pc, #708]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d071      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399c:	4bae      	ldr	r3, [pc, #696]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	0159      	lsls	r1, r3, #5
 80039d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d4:	0150      	lsls	r0, r2, #5
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4621      	mov	r1, r4
 80039dc:	1a51      	subs	r1, r2, r1
 80039de:	6439      	str	r1, [r7, #64]	; 0x40
 80039e0:	4629      	mov	r1, r5
 80039e2:	eb63 0301 	sbc.w	r3, r3, r1
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80039f4:	4649      	mov	r1, r9
 80039f6:	018b      	lsls	r3, r1, #6
 80039f8:	4641      	mov	r1, r8
 80039fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039fe:	4641      	mov	r1, r8
 8003a00:	018a      	lsls	r2, r1, #6
 8003a02:	4641      	mov	r1, r8
 8003a04:	1a51      	subs	r1, r2, r1
 8003a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a08:	4649      	mov	r1, r9
 8003a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4641      	mov	r1, r8
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4641      	mov	r1, r8
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4622      	mov	r2, r4
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	462b      	mov	r3, r5
 8003a38:	460a      	mov	r2, r1
 8003a3a:	eb42 0303 	adc.w	r3, r2, r3
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	028b      	lsls	r3, r1, #10
 8003a50:	4621      	mov	r1, r4
 8003a52:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a56:	4621      	mov	r1, r4
 8003a58:	028a      	lsls	r2, r1, #10
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a70:	f7fd f8ae 	bl	8000bd0 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a7e:	e067      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a80:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab4:	0150      	lsls	r0, r2, #5
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4621      	mov	r1, r4
 8003abc:	1a51      	subs	r1, r2, r1
 8003abe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	4641      	mov	r1, r8
 8003ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ade:	4641      	mov	r1, r8
 8003ae0:	018a      	lsls	r2, r1, #6
 8003ae2:	4641      	mov	r1, r8
 8003ae4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ae8:	4649      	mov	r1, r9
 8003aea:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003afa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b02:	4692      	mov	sl, r2
 8003b04:	469b      	mov	fp, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb1a 0303 	adds.w	r3, sl, r3
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	462b      	mov	r3, r5
 8003b10:	eb4b 0303 	adc.w	r3, fp, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b22:	4629      	mov	r1, r5
 8003b24:	028b      	lsls	r3, r1, #10
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	028a      	lsls	r2, r1, #10
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b38:	2200      	movs	r2, #0
 8003b3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003b3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b42:	f7fd f845 	bl	8000bd0 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b50:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b72:	e0e9      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d069      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8c:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	2200      	movs	r2, #0
 8003b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	f04f 0000 	mov.w	r0, #0
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	0159      	lsls	r1, r3, #5
 8003bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bba:	0150      	lsls	r0, r2, #5
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	1a51      	subs	r1, r2, r1
 8003bc4:	61b9      	str	r1, [r7, #24]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bda:	4659      	mov	r1, fp
 8003bdc:	018b      	lsls	r3, r1, #6
 8003bde:	4651      	mov	r1, sl
 8003be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be4:	4651      	mov	r1, sl
 8003be6:	018a      	lsls	r2, r1, #6
 8003be8:	4651      	mov	r1, sl
 8003bea:	ebb2 0801 	subs.w	r8, r2, r1
 8003bee:	4659      	mov	r1, fp
 8003bf0:	eb63 0901 	sbc.w	r9, r3, r1
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c08:	4690      	mov	r8, r2
 8003c0a:	4699      	mov	r9, r3
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	eb18 0303 	adds.w	r3, r8, r3
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb49 0303 	adc.w	r3, r9, r3
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c28:	4629      	mov	r1, r5
 8003c2a:	028b      	lsls	r3, r1, #10
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c32:	4621      	mov	r1, r4
 8003c34:	028a      	lsls	r2, r1, #10
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c3e:	2200      	movs	r2, #0
 8003c40:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c48:	f7fc ffc2 	bl	8000bd0 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c56:	e063      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x41c>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c60:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x454>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	099b      	lsrs	r3, r3, #6
 8003c66:	2200      	movs	r2, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
 8003c72:	2300      	movs	r3, #0
 8003c74:	657b      	str	r3, [r7, #84]	; 0x54
 8003c76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c7a:	4642      	mov	r2, r8
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	f04f 0000 	mov.w	r0, #0
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	0159      	lsls	r1, r3, #5
 8003c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8c:	0150      	lsls	r0, r2, #5
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4641      	mov	r1, r8
 8003c94:	1a51      	subs	r1, r2, r1
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	4649      	mov	r1, r9
 8003c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cac:	4659      	mov	r1, fp
 8003cae:	018b      	lsls	r3, r1, #6
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	018a      	lsls	r2, r1, #6
 8003cba:	4651      	mov	r1, sl
 8003cbc:	1a54      	subs	r4, r2, r1
 8003cbe:	4659      	mov	r1, fp
 8003cc0:	eb63 0501 	sbc.w	r5, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	00eb      	lsls	r3, r5, #3
 8003cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd2:	00e2      	lsls	r2, r4, #3
 8003cd4:	4614      	mov	r4, r2
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	4643      	mov	r3, r8
 8003cda:	18e3      	adds	r3, r4, r3
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	464b      	mov	r3, r9
 8003ce0:	eb45 0303 	adc.w	r3, r5, r3
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	028b      	lsls	r3, r1, #10
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	028a      	lsls	r2, r1, #10
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d08:	2200      	movs	r2, #0
 8003d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d0c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d12:	f7fc ff5d 	bl	8000bd0 <__aeabi_uldivmod>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x454>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0f1b      	lsrs	r3, r3, #28
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d3e:	e003      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	37b8      	adds	r7, #184	; 0xb8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400

08003d60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e28d      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8083 	beq.w	8003e86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d80:	4b94      	ldr	r3, [pc, #592]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d019      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d8c:	4b91      	ldr	r3, [pc, #580]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d98:	4b8e      	ldr	r3, [pc, #568]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b8b      	ldr	r3, [pc, #556]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dae:	2b0c      	cmp	r3, #12
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b88      	ldr	r3, [pc, #544]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b84      	ldr	r3, [pc, #528]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x124>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d157      	bne.n	8003e84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e25a      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d106      	bne.n	8003df0 <HAL_RCC_OscConfig+0x90>
 8003de2:	4b7c      	ldr	r3, [pc, #496]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7b      	ldr	r2, [pc, #492]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xcc>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0xb4>
 8003dfa:	4b76      	ldr	r3, [pc, #472]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a75      	ldr	r2, [pc, #468]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b73      	ldr	r3, [pc, #460]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a72      	ldr	r2, [pc, #456]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xcc>
 8003e14:	4b6f      	ldr	r3, [pc, #444]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6e      	ldr	r2, [pc, #440]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b6c      	ldr	r3, [pc, #432]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6b      	ldr	r2, [pc, #428]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe f8c4 	bl	8001fc0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe f8c0 	bl	8001fc0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e21f      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b61      	ldr	r3, [pc, #388]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xdc>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f8b0 	bl	8001fc0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe f8ac 	bl	8001fc0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e20b      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x104>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d06f      	beq.n	8003f72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e92:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d017      	beq.n	8003ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e9e:	4b4d      	ldr	r3, [pc, #308]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec2:	4b44      	ldr	r3, [pc, #272]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x186>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1d3      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4937      	ldr	r1, [pc, #220]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e03a      	b.n	8003f72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_RCC_OscConfig+0x278>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fe f859 	bl	8001fc0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f12:	f7fe f855 	bl	8001fc0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1b4      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4925      	ldr	r1, [pc, #148]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	e015      	b.n	8003f72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_OscConfig+0x278>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fe f838 	bl	8001fc0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fe f834 	bl	8001fc0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e193      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d036      	beq.n	8003fec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_RCC_OscConfig+0x27c>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fe f818 	bl	8001fc0 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fe f814 	bl	8001fc0 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e173      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x234>
 8003fb2:	e01b      	b.n	8003fec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fe f801 	bl	8001fc0 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc0:	e00e      	b.n	8003fe0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc2:	f7fd fffd 	bl	8001fc0 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d907      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e15c      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	42470000 	.word	0x42470000
 8003fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	4b8a      	ldr	r3, [pc, #552]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8003fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ea      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8097 	beq.w	8004128 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b83      	ldr	r3, [pc, #524]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	4b7f      	ldr	r3, [pc, #508]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a7e      	ldr	r2, [pc, #504]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
 800401a:	4b7c      	ldr	r3, [pc, #496]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b79      	ldr	r3, [pc, #484]	; (8004210 <HAL_RCC_OscConfig+0x4b0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004036:	4b76      	ldr	r3, [pc, #472]	; (8004210 <HAL_RCC_OscConfig+0x4b0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a75      	ldr	r2, [pc, #468]	; (8004210 <HAL_RCC_OscConfig+0x4b0>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fd ffbd 	bl	8001fc0 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404a:	f7fd ffb9 	bl	8001fc0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e118      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405c:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <HAL_RCC_OscConfig+0x4b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x31e>
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a65      	ldr	r2, [pc, #404]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	e01c      	b.n	80040b8 <HAL_RCC_OscConfig+0x358>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x340>
 8004086:	4b61      	ldr	r3, [pc, #388]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	4a60      	ldr	r2, [pc, #384]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 800408c:	f043 0304 	orr.w	r3, r3, #4
 8004090:	6713      	str	r3, [r2, #112]	; 0x70
 8004092:	4b5e      	ldr	r3, [pc, #376]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a5d      	ldr	r2, [pc, #372]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
 800409e:	e00b      	b.n	80040b8 <HAL_RCC_OscConfig+0x358>
 80040a0:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a59      	ldr	r2, [pc, #356]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	4b57      	ldr	r3, [pc, #348]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a56      	ldr	r2, [pc, #344]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	f023 0304 	bic.w	r3, r3, #4
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd ff7e 	bl	8001fc0 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	e00a      	b.n	80040de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c8:	f7fd ff7a 	bl	8001fc0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0d7      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	4b4b      	ldr	r3, [pc, #300]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ee      	beq.n	80040c8 <HAL_RCC_OscConfig+0x368>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd ff68 	bl	8001fc0 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd ff64 	bl	8001fc0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0c1      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410a:	4b40      	ldr	r3, [pc, #256]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1ee      	bne.n	80040f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411c:	4b3b      	ldr	r3, [pc, #236]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	4a3a      	ldr	r2, [pc, #232]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80ad 	beq.w	800428c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004132:	4b36      	ldr	r3, [pc, #216]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b08      	cmp	r3, #8
 800413c:	d060      	beq.n	8004200 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d145      	bne.n	80041d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004146:	4b33      	ldr	r3, [pc, #204]	; (8004214 <HAL_RCC_OscConfig+0x4b4>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd ff38 	bl	8001fc0 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004154:	f7fd ff34 	bl	8001fc0 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e093      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	019b      	lsls	r3, r3, #6
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	3b01      	subs	r3, #1
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	491b      	ldr	r1, [pc, #108]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x4b4>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fd ff09 	bl	8001fc0 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fd ff05 	bl	8001fc0 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e064      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x452>
 80041d0:	e05c      	b.n	800428c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_OscConfig+0x4b4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fef2 	bl	8001fc0 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fd feee 	bl	8001fc0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04d      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x480>
 80041fe:	e045      	b.n	800428c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e040      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
 800420c:	40023800 	.word	0x40023800
 8004210:	40007000 	.word	0x40007000
 8004214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004218:	4b1f      	ldr	r3, [pc, #124]	; (8004298 <HAL_RCC_OscConfig+0x538>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d030      	beq.n	8004288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d129      	bne.n	8004288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d122      	bne.n	8004288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	4293      	cmp	r3, r2
 8004252:	d119      	bne.n	8004288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	3b01      	subs	r3, #1
 8004262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d10f      	bne.n	8004288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d107      	bne.n	8004288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800

0800429c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e03f      	b.n	800432e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fd14 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f9cb 	bl	800467c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08a      	sub	sp, #40	; 0x28
 800433a:	af02      	add	r7, sp, #8
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b20      	cmp	r3, #32
 8004354:	d17c      	bne.n	8004450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_UART_Transmit+0x2c>
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e075      	b.n	8004452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_UART_Transmit+0x3e>
 8004370:	2302      	movs	r3, #2
 8004372:	e06e      	b.n	8004452 <HAL_UART_Transmit+0x11c>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2221      	movs	r2, #33	; 0x21
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438a:	f7fd fe19 	bl	8001fc0 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	88fa      	ldrh	r2, [r7, #6]
 800439a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x82>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043c8:	e02a      	b.n	8004420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f8e2 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e036      	b.n	8004452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	3302      	adds	r3, #2
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e007      	b.n	8004412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1cf      	bne.n	80043ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f8b2 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e006      	b.n	8004452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b08a      	sub	sp, #40	; 0x28
 800445e:	af02      	add	r7, sp, #8
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	f040 808c 	bne.w	8004594 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Receive+0x2e>
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e084      	b.n	8004596 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_UART_Receive+0x40>
 8004496:	2302      	movs	r3, #2
 8004498:	e07d      	b.n	8004596 <HAL_UART_Receive+0x13c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2222      	movs	r2, #34	; 0x22
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044b6:	f7fd fd83 	bl	8001fc0 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d108      	bne.n	80044e4 <HAL_UART_Receive+0x8a>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e003      	b.n	80044ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80044f4:	e043      	b.n	800457e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2120      	movs	r1, #32
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f84c 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e042      	b.n	8004596 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	b29b      	uxth	r3, r3
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	b29a      	uxth	r2, r3
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3302      	adds	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e01f      	b.n	8004570 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d007      	beq.n	800454a <HAL_UART_Receive+0xf0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <HAL_UART_Receive+0xfe>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e008      	b.n	800456a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004564:	b2da      	uxtb	r2, r3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3301      	adds	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1b6      	bne.n	80044f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b090      	sub	sp, #64	; 0x40
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	e050      	b.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d04c      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x30>
 80045be:	f7fd fcff 	bl	8001fc0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d241      	bcs.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
 80045ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045ee:	637a      	str	r2, [r7, #52]	; 0x34
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e5      	bne.n	80045ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3314      	adds	r3, #20
 8004608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	613b      	str	r3, [r7, #16]
   return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004622:	623a      	str	r2, [r7, #32]
 8004624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	69f9      	ldr	r1, [r7, #28]
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00f      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	429a      	cmp	r2, r3
 800466e:	d09f      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3740      	adds	r7, #64	; 0x40
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b0c0      	sub	sp, #256	; 0x100
 8004682:	af00      	add	r7, sp, #0
 8004684:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	68d9      	ldr	r1, [r3, #12]
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	ea40 0301 	orr.w	r3, r0, r1
 80046a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046d4:	f021 010c 	bic.w	r1, r1, #12
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046e2:	430b      	orrs	r3, r1
 80046e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	6999      	ldr	r1, [r3, #24]
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	ea40 0301 	orr.w	r3, r0, r1
 8004702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <UART_SetConfig+0x2cc>)
 800470c:	429a      	cmp	r2, r3
 800470e:	d005      	beq.n	800471c <UART_SetConfig+0xa0>
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b8d      	ldr	r3, [pc, #564]	; (800494c <UART_SetConfig+0x2d0>)
 8004718:	429a      	cmp	r2, r3
 800471a:	d104      	bne.n	8004726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7ff f8de 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004720:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004724:	e003      	b.n	800472e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004726:	f7ff f8c5 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 800472a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004738:	f040 810c 	bne.w	8004954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800473c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004746:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800474a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	1891      	adds	r1, r2, r2
 8004754:	65b9      	str	r1, [r7, #88]	; 0x58
 8004756:	415b      	adcs	r3, r3
 8004758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800475e:	4621      	mov	r1, r4
 8004760:	eb12 0801 	adds.w	r8, r2, r1
 8004764:	4629      	mov	r1, r5
 8004766:	eb43 0901 	adc.w	r9, r3, r1
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800477e:	4690      	mov	r8, r2
 8004780:	4699      	mov	r9, r3
 8004782:	4623      	mov	r3, r4
 8004784:	eb18 0303 	adds.w	r3, r8, r3
 8004788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800478c:	462b      	mov	r3, r5
 800478e:	eb49 0303 	adc.w	r3, r9, r3
 8004792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047aa:	460b      	mov	r3, r1
 80047ac:	18db      	adds	r3, r3, r3
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
 80047b0:	4613      	mov	r3, r2
 80047b2:	eb42 0303 	adc.w	r3, r2, r3
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
 80047b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047c0:	f7fc fa06 	bl	8000bd0 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4b61      	ldr	r3, [pc, #388]	; (8004950 <UART_SetConfig+0x2d4>)
 80047ca:	fba3 2302 	umull	r2, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	011c      	lsls	r4, r3, #4
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80047ec:	415b      	adcs	r3, r3
 80047ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047f4:	4641      	mov	r1, r8
 80047f6:	eb12 0a01 	adds.w	sl, r2, r1
 80047fa:	4649      	mov	r1, r9
 80047fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800480c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004814:	4692      	mov	sl, r2
 8004816:	469b      	mov	fp, r3
 8004818:	4643      	mov	r3, r8
 800481a:	eb1a 0303 	adds.w	r3, sl, r3
 800481e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004822:	464b      	mov	r3, r9
 8004824:	eb4b 0303 	adc.w	r3, fp, r3
 8004828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004838:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800483c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004840:	460b      	mov	r3, r1
 8004842:	18db      	adds	r3, r3, r3
 8004844:	643b      	str	r3, [r7, #64]	; 0x40
 8004846:	4613      	mov	r3, r2
 8004848:	eb42 0303 	adc.w	r3, r2, r3
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
 800484e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004856:	f7fc f9bb 	bl	8000bd0 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4611      	mov	r1, r2
 8004860:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <UART_SetConfig+0x2d4>)
 8004862:	fba3 2301 	umull	r2, r3, r3, r1
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2264      	movs	r2, #100	; 0x64
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	1acb      	subs	r3, r1, r3
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <UART_SetConfig+0x2d4>)
 8004878:	fba3 2302 	umull	r2, r3, r3, r2
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004884:	441c      	add	r4, r3
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004890:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	63b9      	str	r1, [r7, #56]	; 0x38
 80048a0:	415b      	adcs	r3, r3
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048a8:	4641      	mov	r1, r8
 80048aa:	1851      	adds	r1, r2, r1
 80048ac:	6339      	str	r1, [r7, #48]	; 0x30
 80048ae:	4649      	mov	r1, r9
 80048b0:	414b      	adcs	r3, r1
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048c0:	4659      	mov	r1, fp
 80048c2:	00cb      	lsls	r3, r1, #3
 80048c4:	4651      	mov	r1, sl
 80048c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ca:	4651      	mov	r1, sl
 80048cc:	00ca      	lsls	r2, r1, #3
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	4642      	mov	r2, r8
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048dc:	464b      	mov	r3, r9
 80048de:	460a      	mov	r2, r1
 80048e0:	eb42 0303 	adc.w	r3, r2, r3
 80048e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048fc:	460b      	mov	r3, r1
 80048fe:	18db      	adds	r3, r3, r3
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 8004902:	4613      	mov	r3, r2
 8004904:	eb42 0303 	adc.w	r3, r2, r3
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800490e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004912:	f7fc f95d 	bl	8000bd0 <__aeabi_uldivmod>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <UART_SetConfig+0x2d4>)
 800491c:	fba3 1302 	umull	r1, r3, r3, r2
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	2164      	movs	r1, #100	; 0x64
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	3332      	adds	r3, #50	; 0x32
 800492e:	4a08      	ldr	r2, [pc, #32]	; (8004950 <UART_SetConfig+0x2d4>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	f003 0207 	and.w	r2, r3, #7
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4422      	add	r2, r4
 8004942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004944:	e105      	b.n	8004b52 <UART_SetConfig+0x4d6>
 8004946:	bf00      	nop
 8004948:	40011000 	.word	0x40011000
 800494c:	40011400 	.word	0x40011400
 8004950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800495e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004966:	4642      	mov	r2, r8
 8004968:	464b      	mov	r3, r9
 800496a:	1891      	adds	r1, r2, r2
 800496c:	6239      	str	r1, [r7, #32]
 800496e:	415b      	adcs	r3, r3
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004976:	4641      	mov	r1, r8
 8004978:	1854      	adds	r4, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb43 0501 	adc.w	r5, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	00eb      	lsls	r3, r5, #3
 800498a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498e:	00e2      	lsls	r2, r4, #3
 8004990:	4614      	mov	r4, r2
 8004992:	461d      	mov	r5, r3
 8004994:	4643      	mov	r3, r8
 8004996:	18e3      	adds	r3, r4, r3
 8004998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800499c:	464b      	mov	r3, r9
 800499e:	eb45 0303 	adc.w	r3, r5, r3
 80049a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049c2:	4629      	mov	r1, r5
 80049c4:	008b      	lsls	r3, r1, #2
 80049c6:	4621      	mov	r1, r4
 80049c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049cc:	4621      	mov	r1, r4
 80049ce:	008a      	lsls	r2, r1, #2
 80049d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049d4:	f7fc f8fc 	bl	8000bd0 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4b60      	ldr	r3, [pc, #384]	; (8004b60 <UART_SetConfig+0x4e4>)
 80049de:	fba3 2302 	umull	r2, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	011c      	lsls	r4, r3, #4
 80049e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	61b9      	str	r1, [r7, #24]
 8004a00:	415b      	adcs	r3, r3
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a08:	4641      	mov	r1, r8
 8004a0a:	1851      	adds	r1, r2, r1
 8004a0c:	6139      	str	r1, [r7, #16]
 8004a0e:	4649      	mov	r1, r9
 8004a10:	414b      	adcs	r3, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a20:	4659      	mov	r1, fp
 8004a22:	00cb      	lsls	r3, r1, #3
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	00ca      	lsls	r2, r1, #3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	4642      	mov	r2, r8
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	460a      	mov	r2, r1
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a60:	4649      	mov	r1, r9
 8004a62:	008b      	lsls	r3, r1, #2
 8004a64:	4641      	mov	r1, r8
 8004a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	008a      	lsls	r2, r1, #2
 8004a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a72:	f7fc f8ad 	bl	8000bd0 <__aeabi_uldivmod>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <UART_SetConfig+0x4e4>)
 8004a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	2164      	movs	r1, #100	; 0x64
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	3332      	adds	r3, #50	; 0x32
 8004a8e:	4a34      	ldr	r2, [pc, #208]	; (8004b60 <UART_SetConfig+0x4e4>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a9a:	441c      	add	r4, r3
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	673b      	str	r3, [r7, #112]	; 0x70
 8004aa4:	677a      	str	r2, [r7, #116]	; 0x74
 8004aa6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aaa:	4642      	mov	r2, r8
 8004aac:	464b      	mov	r3, r9
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aba:	4641      	mov	r1, r8
 8004abc:	1851      	adds	r1, r2, r1
 8004abe:	6039      	str	r1, [r7, #0]
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	414b      	adcs	r3, r1
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	00cb      	lsls	r3, r1, #3
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004adc:	4651      	mov	r1, sl
 8004ade:	00ca      	lsls	r2, r1, #3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aec:	464b      	mov	r3, r9
 8004aee:	460a      	mov	r2, r1
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	663b      	str	r3, [r7, #96]	; 0x60
 8004b00:	667a      	str	r2, [r7, #100]	; 0x64
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b0e:	4649      	mov	r1, r9
 8004b10:	008b      	lsls	r3, r1, #2
 8004b12:	4641      	mov	r1, r8
 8004b14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b18:	4641      	mov	r1, r8
 8004b1a:	008a      	lsls	r2, r1, #2
 8004b1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b20:	f7fc f856 	bl	8000bd0 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <UART_SetConfig+0x4e4>)
 8004b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2164      	movs	r1, #100	; 0x64
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	3332      	adds	r3, #50	; 0x32
 8004b3c:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <UART_SetConfig+0x4e4>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4422      	add	r2, r4
 8004b50:	609a      	str	r2, [r3, #8]
}
 8004b52:	bf00      	nop
 8004b54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	51eb851f 	.word	0x51eb851f

08004b64 <copysign>:
 8004b64:	b082      	sub	sp, #8
 8004b66:	ec51 0b10 	vmov	r0, r1, d0
 8004b6a:	ed8d 1b00 	vstr	d1, [sp]
 8004b6e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8004b72:	9901      	ldr	r1, [sp, #4]
 8004b74:	ee10 2a10 	vmov	r2, s0
 8004b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004b7c:	ea40 0301 	orr.w	r3, r0, r1
 8004b80:	ec43 2b10 	vmov	d0, r2, r3
 8004b84:	b002      	add	sp, #8
 8004b86:	4770      	bx	lr

08004b88 <sin>:
 8004b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b8a:	ec53 2b10 	vmov	r2, r3, d0
 8004b8e:	4828      	ldr	r0, [pc, #160]	; (8004c30 <sin+0xa8>)
 8004b90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b94:	4281      	cmp	r1, r0
 8004b96:	dc07      	bgt.n	8004ba8 <sin+0x20>
 8004b98:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004c28 <sin+0xa0>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	b005      	add	sp, #20
 8004ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba4:	f001 ba38 	b.w	8006018 <__kernel_sin>
 8004ba8:	4822      	ldr	r0, [pc, #136]	; (8004c34 <sin+0xac>)
 8004baa:	4281      	cmp	r1, r0
 8004bac:	dd09      	ble.n	8004bc2 <sin+0x3a>
 8004bae:	ee10 0a10 	vmov	r0, s0
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f7fb fb2c 	bl	8000210 <__aeabi_dsub>
 8004bb8:	ec41 0b10 	vmov	d0, r0, r1
 8004bbc:	b005      	add	sp, #20
 8004bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bc2:	4668      	mov	r0, sp
 8004bc4:	f000 fb50 	bl	8005268 <__ieee754_rem_pio2>
 8004bc8:	f000 0003 	and.w	r0, r0, #3
 8004bcc:	2801      	cmp	r0, #1
 8004bce:	d00c      	beq.n	8004bea <sin+0x62>
 8004bd0:	2802      	cmp	r0, #2
 8004bd2:	d011      	beq.n	8004bf8 <sin+0x70>
 8004bd4:	b9f0      	cbnz	r0, 8004c14 <sin+0x8c>
 8004bd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004bda:	ed9d 0b00 	vldr	d0, [sp]
 8004bde:	2001      	movs	r0, #1
 8004be0:	f001 fa1a 	bl	8006018 <__kernel_sin>
 8004be4:	ec51 0b10 	vmov	r0, r1, d0
 8004be8:	e7e6      	b.n	8004bb8 <sin+0x30>
 8004bea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004bee:	ed9d 0b00 	vldr	d0, [sp]
 8004bf2:	f000 fdf9 	bl	80057e8 <__kernel_cos>
 8004bf6:	e7f5      	b.n	8004be4 <sin+0x5c>
 8004bf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004bfc:	ed9d 0b00 	vldr	d0, [sp]
 8004c00:	2001      	movs	r0, #1
 8004c02:	f001 fa09 	bl	8006018 <__kernel_sin>
 8004c06:	ec53 2b10 	vmov	r2, r3, d0
 8004c0a:	ee10 0a10 	vmov	r0, s0
 8004c0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c12:	e7d1      	b.n	8004bb8 <sin+0x30>
 8004c14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c18:	ed9d 0b00 	vldr	d0, [sp]
 8004c1c:	f000 fde4 	bl	80057e8 <__kernel_cos>
 8004c20:	e7f1      	b.n	8004c06 <sin+0x7e>
 8004c22:	bf00      	nop
 8004c24:	f3af 8000 	nop.w
	...
 8004c30:	3fe921fb 	.word	0x3fe921fb
 8004c34:	7fefffff 	.word	0x7fefffff

08004c38 <asin>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	ed2d 8b02 	vpush	{d8}
 8004c3e:	ec55 4b10 	vmov	r4, r5, d0
 8004c42:	f000 f831 	bl	8004ca8 <__ieee754_asin>
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8004c52:	eef0 8a60 	vmov.f32	s17, s1
 8004c56:	f7fb ff2d 	bl	8000ab4 <__aeabi_dcmpun>
 8004c5a:	b9a8      	cbnz	r0, 8004c88 <asin+0x50>
 8004c5c:	ec45 4b10 	vmov	d0, r4, r5
 8004c60:	f001 fc3a 	bl	80064d8 <fabs>
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <asin+0x60>)
 8004c66:	ec51 0b10 	vmov	r0, r1, d0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f7fb ff18 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c70:	b150      	cbz	r0, 8004c88 <asin+0x50>
 8004c72:	f001 fd4b 	bl	800670c <__errno>
 8004c76:	ecbd 8b02 	vpop	{d8}
 8004c7a:	2321      	movs	r3, #33	; 0x21
 8004c7c:	6003      	str	r3, [r0, #0]
 8004c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c82:	4806      	ldr	r0, [pc, #24]	; (8004c9c <asin+0x64>)
 8004c84:	f001 bcb4 	b.w	80065f0 <nan>
 8004c88:	eeb0 0a48 	vmov.f32	s0, s16
 8004c8c:	eef0 0a68 	vmov.f32	s1, s17
 8004c90:	ecbd 8b02 	vpop	{d8}
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	3ff00000 	.word	0x3ff00000
 8004c9c:	080067c0 	.word	0x080067c0

08004ca0 <atan2>:
 8004ca0:	f000 ba16 	b.w	80050d0 <__ieee754_atan2>
 8004ca4:	0000      	movs	r0, r0
	...

08004ca8 <__ieee754_asin>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	ed2d 8b04 	vpush	{d8-d9}
 8004cb0:	ec55 4b10 	vmov	r4, r5, d0
 8004cb4:	4bcc      	ldr	r3, [pc, #816]	; (8004fe8 <__ieee754_asin+0x340>)
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004cbc:	4598      	cmp	r8, r3
 8004cbe:	9501      	str	r5, [sp, #4]
 8004cc0:	dd35      	ble.n	8004d2e <__ieee754_asin+0x86>
 8004cc2:	ee10 3a10 	vmov	r3, s0
 8004cc6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8004cca:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8004cce:	ea58 0303 	orrs.w	r3, r8, r3
 8004cd2:	d117      	bne.n	8004d04 <__ieee754_asin+0x5c>
 8004cd4:	a3aa      	add	r3, pc, #680	; (adr r3, 8004f80 <__ieee754_asin+0x2d8>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	ee10 0a10 	vmov	r0, s0
 8004cde:	4629      	mov	r1, r5
 8004ce0:	f7fb fc4e 	bl	8000580 <__aeabi_dmul>
 8004ce4:	a3a8      	add	r3, pc, #672	; (adr r3, 8004f88 <__ieee754_asin+0x2e0>)
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	4606      	mov	r6, r0
 8004cec:	460f      	mov	r7, r1
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fc45 	bl	8000580 <__aeabi_dmul>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	f7fb fa89 	bl	8000214 <__adddf3>
 8004d02:	e00b      	b.n	8004d1c <__ieee754_asin+0x74>
 8004d04:	ee10 2a10 	vmov	r2, s0
 8004d08:	462b      	mov	r3, r5
 8004d0a:	ee10 0a10 	vmov	r0, s0
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f7fb fa7e 	bl	8000210 <__aeabi_dsub>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	f7fb fd5c 	bl	80007d4 <__aeabi_ddiv>
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	460d      	mov	r5, r1
 8004d20:	ec45 4b10 	vmov	d0, r4, r5
 8004d24:	b003      	add	sp, #12
 8004d26:	ecbd 8b04 	vpop	{d8-d9}
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	4baf      	ldr	r3, [pc, #700]	; (8004fec <__ieee754_asin+0x344>)
 8004d30:	4598      	cmp	r8, r3
 8004d32:	dc11      	bgt.n	8004d58 <__ieee754_asin+0xb0>
 8004d34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004d38:	f280 80ae 	bge.w	8004e98 <__ieee754_asin+0x1f0>
 8004d3c:	a394      	add	r3, pc, #592	; (adr r3, 8004f90 <__ieee754_asin+0x2e8>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	ee10 0a10 	vmov	r0, s0
 8004d46:	4629      	mov	r1, r5
 8004d48:	f7fb fa64 	bl	8000214 <__adddf3>
 8004d4c:	4ba8      	ldr	r3, [pc, #672]	; (8004ff0 <__ieee754_asin+0x348>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f7fb fea6 	bl	8000aa0 <__aeabi_dcmpgt>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1e3      	bne.n	8004d20 <__ieee754_asin+0x78>
 8004d58:	ec45 4b10 	vmov	d0, r4, r5
 8004d5c:	f001 fbbc 	bl	80064d8 <fabs>
 8004d60:	49a3      	ldr	r1, [pc, #652]	; (8004ff0 <__ieee754_asin+0x348>)
 8004d62:	ec53 2b10 	vmov	r2, r3, d0
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7fb fa52 	bl	8000210 <__aeabi_dsub>
 8004d6c:	4ba1      	ldr	r3, [pc, #644]	; (8004ff4 <__ieee754_asin+0x34c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f7fb fc06 	bl	8000580 <__aeabi_dmul>
 8004d74:	a388      	add	r3, pc, #544	; (adr r3, 8004f98 <__ieee754_asin+0x2f0>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	f7fb fbff 	bl	8000580 <__aeabi_dmul>
 8004d82:	a387      	add	r3, pc, #540	; (adr r3, 8004fa0 <__ieee754_asin+0x2f8>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fa44 	bl	8000214 <__adddf3>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	462b      	mov	r3, r5
 8004d90:	f7fb fbf6 	bl	8000580 <__aeabi_dmul>
 8004d94:	a384      	add	r3, pc, #528	; (adr r3, 8004fa8 <__ieee754_asin+0x300>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fa39 	bl	8000210 <__aeabi_dsub>
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	f7fb fbed 	bl	8000580 <__aeabi_dmul>
 8004da6:	a382      	add	r3, pc, #520	; (adr r3, 8004fb0 <__ieee754_asin+0x308>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fa32 	bl	8000214 <__adddf3>
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	f7fb fbe4 	bl	8000580 <__aeabi_dmul>
 8004db8:	a37f      	add	r3, pc, #508	; (adr r3, 8004fb8 <__ieee754_asin+0x310>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fa27 	bl	8000210 <__aeabi_dsub>
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	f7fb fbdb 	bl	8000580 <__aeabi_dmul>
 8004dca:	a37d      	add	r3, pc, #500	; (adr r3, 8004fc0 <__ieee754_asin+0x318>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fa20 	bl	8000214 <__adddf3>
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	462b      	mov	r3, r5
 8004dd8:	f7fb fbd2 	bl	8000580 <__aeabi_dmul>
 8004ddc:	a37a      	add	r3, pc, #488	; (adr r3, 8004fc8 <__ieee754_asin+0x320>)
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	ec41 0b18 	vmov	d8, r0, r1
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7fb fbc9 	bl	8000580 <__aeabi_dmul>
 8004dee:	a378      	add	r3, pc, #480	; (adr r3, 8004fd0 <__ieee754_asin+0x328>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb fa0c 	bl	8000210 <__aeabi_dsub>
 8004df8:	4622      	mov	r2, r4
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	f7fb fbc0 	bl	8000580 <__aeabi_dmul>
 8004e00:	a375      	add	r3, pc, #468	; (adr r3, 8004fd8 <__ieee754_asin+0x330>)
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb fa05 	bl	8000214 <__adddf3>
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	f7fb fbb7 	bl	8000580 <__aeabi_dmul>
 8004e12:	a373      	add	r3, pc, #460	; (adr r3, 8004fe0 <__ieee754_asin+0x338>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb f9fa 	bl	8000210 <__aeabi_dsub>
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	462b      	mov	r3, r5
 8004e20:	f7fb fbae 	bl	8000580 <__aeabi_dmul>
 8004e24:	4b72      	ldr	r3, [pc, #456]	; (8004ff0 <__ieee754_asin+0x348>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	f7fb f9f4 	bl	8000214 <__adddf3>
 8004e2c:	ec45 4b10 	vmov	d0, r4, r5
 8004e30:	4606      	mov	r6, r0
 8004e32:	460f      	mov	r7, r1
 8004e34:	f000 fc24 	bl	8005680 <__ieee754_sqrt>
 8004e38:	4b6f      	ldr	r3, [pc, #444]	; (8004ff8 <__ieee754_asin+0x350>)
 8004e3a:	4598      	cmp	r8, r3
 8004e3c:	ec5b ab10 	vmov	sl, fp, d0
 8004e40:	f340 80dc 	ble.w	8004ffc <__ieee754_asin+0x354>
 8004e44:	4632      	mov	r2, r6
 8004e46:	463b      	mov	r3, r7
 8004e48:	ec51 0b18 	vmov	r0, r1, d8
 8004e4c:	f7fb fcc2 	bl	80007d4 <__aeabi_ddiv>
 8004e50:	4652      	mov	r2, sl
 8004e52:	465b      	mov	r3, fp
 8004e54:	f7fb fb94 	bl	8000580 <__aeabi_dmul>
 8004e58:	4652      	mov	r2, sl
 8004e5a:	465b      	mov	r3, fp
 8004e5c:	f7fb f9da 	bl	8000214 <__adddf3>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	f7fb f9d6 	bl	8000214 <__adddf3>
 8004e68:	a347      	add	r3, pc, #284	; (adr r3, 8004f88 <__ieee754_asin+0x2e0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb f9cf 	bl	8000210 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	a142      	add	r1, pc, #264	; (adr r1, 8004f80 <__ieee754_asin+0x2d8>)
 8004e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e7c:	f7fb f9c8 	bl	8000210 <__aeabi_dsub>
 8004e80:	9b01      	ldr	r3, [sp, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bfdc      	itt	le
 8004e86:	4602      	movle	r2, r0
 8004e88:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	460d      	mov	r5, r1
 8004e90:	bfdc      	itt	le
 8004e92:	4614      	movle	r4, r2
 8004e94:	461d      	movle	r5, r3
 8004e96:	e743      	b.n	8004d20 <__ieee754_asin+0x78>
 8004e98:	ee10 2a10 	vmov	r2, s0
 8004e9c:	ee10 0a10 	vmov	r0, s0
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fb6c 	bl	8000580 <__aeabi_dmul>
 8004ea8:	a33b      	add	r3, pc, #236	; (adr r3, 8004f98 <__ieee754_asin+0x2f0>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	4606      	mov	r6, r0
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	f7fb fb65 	bl	8000580 <__aeabi_dmul>
 8004eb6:	a33a      	add	r3, pc, #232	; (adr r3, 8004fa0 <__ieee754_asin+0x2f8>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb f9aa 	bl	8000214 <__adddf3>
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	f7fb fb5c 	bl	8000580 <__aeabi_dmul>
 8004ec8:	a337      	add	r3, pc, #220	; (adr r3, 8004fa8 <__ieee754_asin+0x300>)
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f7fb f99f 	bl	8000210 <__aeabi_dsub>
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	f7fb fb53 	bl	8000580 <__aeabi_dmul>
 8004eda:	a335      	add	r3, pc, #212	; (adr r3, 8004fb0 <__ieee754_asin+0x308>)
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f7fb f998 	bl	8000214 <__adddf3>
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	f7fb fb4a 	bl	8000580 <__aeabi_dmul>
 8004eec:	a332      	add	r3, pc, #200	; (adr r3, 8004fb8 <__ieee754_asin+0x310>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f7fb f98d 	bl	8000210 <__aeabi_dsub>
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	463b      	mov	r3, r7
 8004efa:	f7fb fb41 	bl	8000580 <__aeabi_dmul>
 8004efe:	a330      	add	r3, pc, #192	; (adr r3, 8004fc0 <__ieee754_asin+0x318>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb f986 	bl	8000214 <__adddf3>
 8004f08:	4632      	mov	r2, r6
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	f7fb fb38 	bl	8000580 <__aeabi_dmul>
 8004f10:	a32d      	add	r3, pc, #180	; (adr r3, 8004fc8 <__ieee754_asin+0x320>)
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	4680      	mov	r8, r0
 8004f18:	4689      	mov	r9, r1
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb fb2f 	bl	8000580 <__aeabi_dmul>
 8004f22:	a32b      	add	r3, pc, #172	; (adr r3, 8004fd0 <__ieee754_asin+0x328>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f7fb f972 	bl	8000210 <__aeabi_dsub>
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	463b      	mov	r3, r7
 8004f30:	f7fb fb26 	bl	8000580 <__aeabi_dmul>
 8004f34:	a328      	add	r3, pc, #160	; (adr r3, 8004fd8 <__ieee754_asin+0x330>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb f96b 	bl	8000214 <__adddf3>
 8004f3e:	4632      	mov	r2, r6
 8004f40:	463b      	mov	r3, r7
 8004f42:	f7fb fb1d 	bl	8000580 <__aeabi_dmul>
 8004f46:	a326      	add	r3, pc, #152	; (adr r3, 8004fe0 <__ieee754_asin+0x338>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb f960 	bl	8000210 <__aeabi_dsub>
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	f7fb fb14 	bl	8000580 <__aeabi_dmul>
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <__ieee754_asin+0x348>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f7fb f95a 	bl	8000214 <__adddf3>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4640      	mov	r0, r8
 8004f66:	4649      	mov	r1, r9
 8004f68:	f7fb fc34 	bl	80007d4 <__aeabi_ddiv>
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	462b      	mov	r3, r5
 8004f70:	f7fb fb06 	bl	8000580 <__aeabi_dmul>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4620      	mov	r0, r4
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	e6bf      	b.n	8004cfe <__ieee754_asin+0x56>
 8004f7e:	bf00      	nop
 8004f80:	54442d18 	.word	0x54442d18
 8004f84:	3ff921fb 	.word	0x3ff921fb
 8004f88:	33145c07 	.word	0x33145c07
 8004f8c:	3c91a626 	.word	0x3c91a626
 8004f90:	8800759c 	.word	0x8800759c
 8004f94:	7e37e43c 	.word	0x7e37e43c
 8004f98:	0dfdf709 	.word	0x0dfdf709
 8004f9c:	3f023de1 	.word	0x3f023de1
 8004fa0:	7501b288 	.word	0x7501b288
 8004fa4:	3f49efe0 	.word	0x3f49efe0
 8004fa8:	b5688f3b 	.word	0xb5688f3b
 8004fac:	3fa48228 	.word	0x3fa48228
 8004fb0:	0e884455 	.word	0x0e884455
 8004fb4:	3fc9c155 	.word	0x3fc9c155
 8004fb8:	03eb6f7d 	.word	0x03eb6f7d
 8004fbc:	3fd4d612 	.word	0x3fd4d612
 8004fc0:	55555555 	.word	0x55555555
 8004fc4:	3fc55555 	.word	0x3fc55555
 8004fc8:	b12e9282 	.word	0xb12e9282
 8004fcc:	3fb3b8c5 	.word	0x3fb3b8c5
 8004fd0:	1b8d0159 	.word	0x1b8d0159
 8004fd4:	3fe6066c 	.word	0x3fe6066c
 8004fd8:	9c598ac8 	.word	0x9c598ac8
 8004fdc:	40002ae5 	.word	0x40002ae5
 8004fe0:	1c8a2d4b 	.word	0x1c8a2d4b
 8004fe4:	40033a27 	.word	0x40033a27
 8004fe8:	3fefffff 	.word	0x3fefffff
 8004fec:	3fdfffff 	.word	0x3fdfffff
 8004ff0:	3ff00000 	.word	0x3ff00000
 8004ff4:	3fe00000 	.word	0x3fe00000
 8004ff8:	3fef3332 	.word	0x3fef3332
 8004ffc:	ee10 2a10 	vmov	r2, s0
 8005000:	ee10 0a10 	vmov	r0, s0
 8005004:	465b      	mov	r3, fp
 8005006:	4659      	mov	r1, fp
 8005008:	f7fb f904 	bl	8000214 <__adddf3>
 800500c:	4632      	mov	r2, r6
 800500e:	463b      	mov	r3, r7
 8005010:	ec41 0b19 	vmov	d9, r0, r1
 8005014:	ec51 0b18 	vmov	r0, r1, d8
 8005018:	f7fb fbdc 	bl	80007d4 <__aeabi_ddiv>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	ec51 0b19 	vmov	r0, r1, d9
 8005024:	f7fb faac 	bl	8000580 <__aeabi_dmul>
 8005028:	f04f 0800 	mov.w	r8, #0
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	4642      	mov	r2, r8
 8005032:	465b      	mov	r3, fp
 8005034:	4640      	mov	r0, r8
 8005036:	4659      	mov	r1, fp
 8005038:	f7fb faa2 	bl	8000580 <__aeabi_dmul>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4620      	mov	r0, r4
 8005042:	4629      	mov	r1, r5
 8005044:	f7fb f8e4 	bl	8000210 <__aeabi_dsub>
 8005048:	4642      	mov	r2, r8
 800504a:	4604      	mov	r4, r0
 800504c:	460d      	mov	r5, r1
 800504e:	465b      	mov	r3, fp
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb f8de 	bl	8000214 <__adddf3>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb fbb8 	bl	80007d4 <__aeabi_ddiv>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	f7fb f8d4 	bl	8000214 <__adddf3>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	a113      	add	r1, pc, #76	; (adr r1, 80050c0 <__ieee754_asin+0x418>)
 8005072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005076:	f7fb f8cb 	bl	8000210 <__aeabi_dsub>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4630      	mov	r0, r6
 8005080:	4639      	mov	r1, r7
 8005082:	f7fb f8c5 	bl	8000210 <__aeabi_dsub>
 8005086:	4642      	mov	r2, r8
 8005088:	4604      	mov	r4, r0
 800508a:	460d      	mov	r5, r1
 800508c:	465b      	mov	r3, fp
 800508e:	4640      	mov	r0, r8
 8005090:	4659      	mov	r1, fp
 8005092:	f7fb f8bf 	bl	8000214 <__adddf3>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	a10b      	add	r1, pc, #44	; (adr r1, 80050c8 <__ieee754_asin+0x420>)
 800509c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a0:	f7fb f8b6 	bl	8000210 <__aeabi_dsub>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb f8b0 	bl	8000210 <__aeabi_dsub>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	a104      	add	r1, pc, #16	; (adr r1, 80050c8 <__ieee754_asin+0x420>)
 80050b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ba:	e6df      	b.n	8004e7c <__ieee754_asin+0x1d4>
 80050bc:	f3af 8000 	nop.w
 80050c0:	33145c07 	.word	0x33145c07
 80050c4:	3c91a626 	.word	0x3c91a626
 80050c8:	54442d18 	.word	0x54442d18
 80050cc:	3fe921fb 	.word	0x3fe921fb

080050d0 <__ieee754_atan2>:
 80050d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d4:	ec57 6b11 	vmov	r6, r7, d1
 80050d8:	4273      	negs	r3, r6
 80050da:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005260 <__ieee754_atan2+0x190>
 80050de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80050e2:	4333      	orrs	r3, r6
 80050e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80050e8:	4573      	cmp	r3, lr
 80050ea:	ec51 0b10 	vmov	r0, r1, d0
 80050ee:	ee11 8a10 	vmov	r8, s2
 80050f2:	d80a      	bhi.n	800510a <__ieee754_atan2+0x3a>
 80050f4:	4244      	negs	r4, r0
 80050f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050fa:	4304      	orrs	r4, r0
 80050fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005100:	4574      	cmp	r4, lr
 8005102:	ee10 9a10 	vmov	r9, s0
 8005106:	468c      	mov	ip, r1
 8005108:	d907      	bls.n	800511a <__ieee754_atan2+0x4a>
 800510a:	4632      	mov	r2, r6
 800510c:	463b      	mov	r3, r7
 800510e:	f7fb f881 	bl	8000214 <__adddf3>
 8005112:	ec41 0b10 	vmov	d0, r0, r1
 8005116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800511e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005122:	4334      	orrs	r4, r6
 8005124:	d103      	bne.n	800512e <__ieee754_atan2+0x5e>
 8005126:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800512a:	f001 b835 	b.w	8006198 <atan>
 800512e:	17bc      	asrs	r4, r7, #30
 8005130:	f004 0402 	and.w	r4, r4, #2
 8005134:	ea53 0909 	orrs.w	r9, r3, r9
 8005138:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800513c:	d107      	bne.n	800514e <__ieee754_atan2+0x7e>
 800513e:	2c02      	cmp	r4, #2
 8005140:	d060      	beq.n	8005204 <__ieee754_atan2+0x134>
 8005142:	2c03      	cmp	r4, #3
 8005144:	d1e5      	bne.n	8005112 <__ieee754_atan2+0x42>
 8005146:	a142      	add	r1, pc, #264	; (adr r1, 8005250 <__ieee754_atan2+0x180>)
 8005148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800514c:	e7e1      	b.n	8005112 <__ieee754_atan2+0x42>
 800514e:	ea52 0808 	orrs.w	r8, r2, r8
 8005152:	d106      	bne.n	8005162 <__ieee754_atan2+0x92>
 8005154:	f1bc 0f00 	cmp.w	ip, #0
 8005158:	da5f      	bge.n	800521a <__ieee754_atan2+0x14a>
 800515a:	a13f      	add	r1, pc, #252	; (adr r1, 8005258 <__ieee754_atan2+0x188>)
 800515c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005160:	e7d7      	b.n	8005112 <__ieee754_atan2+0x42>
 8005162:	4572      	cmp	r2, lr
 8005164:	d10f      	bne.n	8005186 <__ieee754_atan2+0xb6>
 8005166:	4293      	cmp	r3, r2
 8005168:	f104 34ff 	add.w	r4, r4, #4294967295
 800516c:	d107      	bne.n	800517e <__ieee754_atan2+0xae>
 800516e:	2c02      	cmp	r4, #2
 8005170:	d84c      	bhi.n	800520c <__ieee754_atan2+0x13c>
 8005172:	4b35      	ldr	r3, [pc, #212]	; (8005248 <__ieee754_atan2+0x178>)
 8005174:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005178:	e9d4 0100 	ldrd	r0, r1, [r4]
 800517c:	e7c9      	b.n	8005112 <__ieee754_atan2+0x42>
 800517e:	2c02      	cmp	r4, #2
 8005180:	d848      	bhi.n	8005214 <__ieee754_atan2+0x144>
 8005182:	4b32      	ldr	r3, [pc, #200]	; (800524c <__ieee754_atan2+0x17c>)
 8005184:	e7f6      	b.n	8005174 <__ieee754_atan2+0xa4>
 8005186:	4573      	cmp	r3, lr
 8005188:	d0e4      	beq.n	8005154 <__ieee754_atan2+0x84>
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005190:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005194:	da1e      	bge.n	80051d4 <__ieee754_atan2+0x104>
 8005196:	2f00      	cmp	r7, #0
 8005198:	da01      	bge.n	800519e <__ieee754_atan2+0xce>
 800519a:	323c      	adds	r2, #60	; 0x3c
 800519c:	db1e      	blt.n	80051dc <__ieee754_atan2+0x10c>
 800519e:	4632      	mov	r2, r6
 80051a0:	463b      	mov	r3, r7
 80051a2:	f7fb fb17 	bl	80007d4 <__aeabi_ddiv>
 80051a6:	ec41 0b10 	vmov	d0, r0, r1
 80051aa:	f001 f995 	bl	80064d8 <fabs>
 80051ae:	f000 fff3 	bl	8006198 <atan>
 80051b2:	ec51 0b10 	vmov	r0, r1, d0
 80051b6:	2c01      	cmp	r4, #1
 80051b8:	d013      	beq.n	80051e2 <__ieee754_atan2+0x112>
 80051ba:	2c02      	cmp	r4, #2
 80051bc:	d015      	beq.n	80051ea <__ieee754_atan2+0x11a>
 80051be:	2c00      	cmp	r4, #0
 80051c0:	d0a7      	beq.n	8005112 <__ieee754_atan2+0x42>
 80051c2:	a319      	add	r3, pc, #100	; (adr r3, 8005228 <__ieee754_atan2+0x158>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f822 	bl	8000210 <__aeabi_dsub>
 80051cc:	a318      	add	r3, pc, #96	; (adr r3, 8005230 <__ieee754_atan2+0x160>)
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	e014      	b.n	80051fe <__ieee754_atan2+0x12e>
 80051d4:	a118      	add	r1, pc, #96	; (adr r1, 8005238 <__ieee754_atan2+0x168>)
 80051d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051da:	e7ec      	b.n	80051b6 <__ieee754_atan2+0xe6>
 80051dc:	2000      	movs	r0, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	e7e9      	b.n	80051b6 <__ieee754_atan2+0xe6>
 80051e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051e6:	4619      	mov	r1, r3
 80051e8:	e793      	b.n	8005112 <__ieee754_atan2+0x42>
 80051ea:	a30f      	add	r3, pc, #60	; (adr r3, 8005228 <__ieee754_atan2+0x158>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f7fb f80e 	bl	8000210 <__aeabi_dsub>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	a10d      	add	r1, pc, #52	; (adr r1, 8005230 <__ieee754_atan2+0x160>)
 80051fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051fe:	f7fb f807 	bl	8000210 <__aeabi_dsub>
 8005202:	e786      	b.n	8005112 <__ieee754_atan2+0x42>
 8005204:	a10a      	add	r1, pc, #40	; (adr r1, 8005230 <__ieee754_atan2+0x160>)
 8005206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800520a:	e782      	b.n	8005112 <__ieee754_atan2+0x42>
 800520c:	a10c      	add	r1, pc, #48	; (adr r1, 8005240 <__ieee754_atan2+0x170>)
 800520e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005212:	e77e      	b.n	8005112 <__ieee754_atan2+0x42>
 8005214:	2000      	movs	r0, #0
 8005216:	2100      	movs	r1, #0
 8005218:	e77b      	b.n	8005112 <__ieee754_atan2+0x42>
 800521a:	a107      	add	r1, pc, #28	; (adr r1, 8005238 <__ieee754_atan2+0x168>)
 800521c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005220:	e777      	b.n	8005112 <__ieee754_atan2+0x42>
 8005222:	bf00      	nop
 8005224:	f3af 8000 	nop.w
 8005228:	33145c07 	.word	0x33145c07
 800522c:	3ca1a626 	.word	0x3ca1a626
 8005230:	54442d18 	.word	0x54442d18
 8005234:	400921fb 	.word	0x400921fb
 8005238:	54442d18 	.word	0x54442d18
 800523c:	3ff921fb 	.word	0x3ff921fb
 8005240:	54442d18 	.word	0x54442d18
 8005244:	3fe921fb 	.word	0x3fe921fb
 8005248:	080067c8 	.word	0x080067c8
 800524c:	080067e0 	.word	0x080067e0
 8005250:	54442d18 	.word	0x54442d18
 8005254:	c00921fb 	.word	0xc00921fb
 8005258:	54442d18 	.word	0x54442d18
 800525c:	bff921fb 	.word	0xbff921fb
 8005260:	7ff00000 	.word	0x7ff00000
 8005264:	00000000 	.word	0x00000000

08005268 <__ieee754_rem_pio2>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	ed2d 8b02 	vpush	{d8}
 8005270:	ec55 4b10 	vmov	r4, r5, d0
 8005274:	4bca      	ldr	r3, [pc, #808]	; (80055a0 <__ieee754_rem_pio2+0x338>)
 8005276:	b08b      	sub	sp, #44	; 0x2c
 8005278:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800527c:	4598      	cmp	r8, r3
 800527e:	4682      	mov	sl, r0
 8005280:	9502      	str	r5, [sp, #8]
 8005282:	dc08      	bgt.n	8005296 <__ieee754_rem_pio2+0x2e>
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	ed80 0b00 	vstr	d0, [r0]
 800528c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005290:	f04f 0b00 	mov.w	fp, #0
 8005294:	e028      	b.n	80052e8 <__ieee754_rem_pio2+0x80>
 8005296:	4bc3      	ldr	r3, [pc, #780]	; (80055a4 <__ieee754_rem_pio2+0x33c>)
 8005298:	4598      	cmp	r8, r3
 800529a:	dc78      	bgt.n	800538e <__ieee754_rem_pio2+0x126>
 800529c:	9b02      	ldr	r3, [sp, #8]
 800529e:	4ec2      	ldr	r6, [pc, #776]	; (80055a8 <__ieee754_rem_pio2+0x340>)
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	ee10 0a10 	vmov	r0, s0
 80052a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8005568 <__ieee754_rem_pio2+0x300>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	4629      	mov	r1, r5
 80052ae:	dd39      	ble.n	8005324 <__ieee754_rem_pio2+0xbc>
 80052b0:	f7fa ffae 	bl	8000210 <__aeabi_dsub>
 80052b4:	45b0      	cmp	r8, r6
 80052b6:	4604      	mov	r4, r0
 80052b8:	460d      	mov	r5, r1
 80052ba:	d01b      	beq.n	80052f4 <__ieee754_rem_pio2+0x8c>
 80052bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8005570 <__ieee754_rem_pio2+0x308>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f7fa ffa5 	bl	8000210 <__aeabi_dsub>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	e9ca 2300 	strd	r2, r3, [sl]
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fa ff9d 	bl	8000210 <__aeabi_dsub>
 80052d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005570 <__ieee754_rem_pio2+0x308>)
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f7fa ff98 	bl	8000210 <__aeabi_dsub>
 80052e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80052e4:	f04f 0b01 	mov.w	fp, #1
 80052e8:	4658      	mov	r0, fp
 80052ea:	b00b      	add	sp, #44	; 0x2c
 80052ec:	ecbd 8b02 	vpop	{d8}
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005578 <__ieee754_rem_pio2+0x310>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fa ff89 	bl	8000210 <__aeabi_dsub>
 80052fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8005580 <__ieee754_rem_pio2+0x318>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	f7fa ff82 	bl	8000210 <__aeabi_dsub>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	e9ca 2300 	strd	r2, r3, [sl]
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	f7fa ff7a 	bl	8000210 <__aeabi_dsub>
 800531c:	a398      	add	r3, pc, #608	; (adr r3, 8005580 <__ieee754_rem_pio2+0x318>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	e7db      	b.n	80052dc <__ieee754_rem_pio2+0x74>
 8005324:	f7fa ff76 	bl	8000214 <__adddf3>
 8005328:	45b0      	cmp	r8, r6
 800532a:	4604      	mov	r4, r0
 800532c:	460d      	mov	r5, r1
 800532e:	d016      	beq.n	800535e <__ieee754_rem_pio2+0xf6>
 8005330:	a38f      	add	r3, pc, #572	; (adr r3, 8005570 <__ieee754_rem_pio2+0x308>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ff6d 	bl	8000214 <__adddf3>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	e9ca 2300 	strd	r2, r3, [sl]
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	f7fa ff63 	bl	8000210 <__aeabi_dsub>
 800534a:	a389      	add	r3, pc, #548	; (adr r3, 8005570 <__ieee754_rem_pio2+0x308>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ff60 	bl	8000214 <__adddf3>
 8005354:	f04f 3bff 	mov.w	fp, #4294967295
 8005358:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800535c:	e7c4      	b.n	80052e8 <__ieee754_rem_pio2+0x80>
 800535e:	a386      	add	r3, pc, #536	; (adr r3, 8005578 <__ieee754_rem_pio2+0x310>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f7fa ff56 	bl	8000214 <__adddf3>
 8005368:	a385      	add	r3, pc, #532	; (adr r3, 8005580 <__ieee754_rem_pio2+0x318>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	4604      	mov	r4, r0
 8005370:	460d      	mov	r5, r1
 8005372:	f7fa ff4f 	bl	8000214 <__adddf3>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	e9ca 2300 	strd	r2, r3, [sl]
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fa ff45 	bl	8000210 <__aeabi_dsub>
 8005386:	a37e      	add	r3, pc, #504	; (adr r3, 8005580 <__ieee754_rem_pio2+0x318>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	e7e0      	b.n	8005350 <__ieee754_rem_pio2+0xe8>
 800538e:	4b87      	ldr	r3, [pc, #540]	; (80055ac <__ieee754_rem_pio2+0x344>)
 8005390:	4598      	cmp	r8, r3
 8005392:	f300 80d9 	bgt.w	8005548 <__ieee754_rem_pio2+0x2e0>
 8005396:	f001 f89f 	bl	80064d8 <fabs>
 800539a:	ec55 4b10 	vmov	r4, r5, d0
 800539e:	ee10 0a10 	vmov	r0, s0
 80053a2:	a379      	add	r3, pc, #484	; (adr r3, 8005588 <__ieee754_rem_pio2+0x320>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	4629      	mov	r1, r5
 80053aa:	f7fb f8e9 	bl	8000580 <__aeabi_dmul>
 80053ae:	4b80      	ldr	r3, [pc, #512]	; (80055b0 <__ieee754_rem_pio2+0x348>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	f7fa ff2f 	bl	8000214 <__adddf3>
 80053b6:	f7fb fb93 	bl	8000ae0 <__aeabi_d2iz>
 80053ba:	4683      	mov	fp, r0
 80053bc:	f7fb f876 	bl	80004ac <__aeabi_i2d>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	ec43 2b18 	vmov	d8, r2, r3
 80053c8:	a367      	add	r3, pc, #412	; (adr r3, 8005568 <__ieee754_rem_pio2+0x300>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fb f8d7 	bl	8000580 <__aeabi_dmul>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4620      	mov	r0, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	f7fa ff19 	bl	8000210 <__aeabi_dsub>
 80053de:	a364      	add	r3, pc, #400	; (adr r3, 8005570 <__ieee754_rem_pio2+0x308>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	ec51 0b18 	vmov	r0, r1, d8
 80053ec:	f7fb f8c8 	bl	8000580 <__aeabi_dmul>
 80053f0:	f1bb 0f1f 	cmp.w	fp, #31
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	dc0d      	bgt.n	8005416 <__ieee754_rem_pio2+0x1ae>
 80053fa:	4b6e      	ldr	r3, [pc, #440]	; (80055b4 <__ieee754_rem_pio2+0x34c>)
 80053fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	4543      	cmp	r3, r8
 8005406:	d006      	beq.n	8005416 <__ieee754_rem_pio2+0x1ae>
 8005408:	4622      	mov	r2, r4
 800540a:	462b      	mov	r3, r5
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fa fefe 	bl	8000210 <__aeabi_dsub>
 8005414:	e00f      	b.n	8005436 <__ieee754_rem_pio2+0x1ce>
 8005416:	462b      	mov	r3, r5
 8005418:	4622      	mov	r2, r4
 800541a:	4630      	mov	r0, r6
 800541c:	4639      	mov	r1, r7
 800541e:	f7fa fef7 	bl	8000210 <__aeabi_dsub>
 8005422:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800542c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005430:	f1b8 0f10 	cmp.w	r8, #16
 8005434:	dc02      	bgt.n	800543c <__ieee754_rem_pio2+0x1d4>
 8005436:	e9ca 0100 	strd	r0, r1, [sl]
 800543a:	e039      	b.n	80054b0 <__ieee754_rem_pio2+0x248>
 800543c:	a34e      	add	r3, pc, #312	; (adr r3, 8005578 <__ieee754_rem_pio2+0x310>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	ec51 0b18 	vmov	r0, r1, d8
 8005446:	f7fb f89b 	bl	8000580 <__aeabi_dmul>
 800544a:	4604      	mov	r4, r0
 800544c:	460d      	mov	r5, r1
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7fa fedb 	bl	8000210 <__aeabi_dsub>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4680      	mov	r8, r0
 8005460:	4689      	mov	r9, r1
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fa fed3 	bl	8000210 <__aeabi_dsub>
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	f7fa fecf 	bl	8000210 <__aeabi_dsub>
 8005472:	a343      	add	r3, pc, #268	; (adr r3, 8005580 <__ieee754_rem_pio2+0x318>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
 800547c:	ec51 0b18 	vmov	r0, r1, d8
 8005480:	f7fb f87e 	bl	8000580 <__aeabi_dmul>
 8005484:	4622      	mov	r2, r4
 8005486:	462b      	mov	r3, r5
 8005488:	f7fa fec2 	bl	8000210 <__aeabi_dsub>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4604      	mov	r4, r0
 8005492:	460d      	mov	r5, r1
 8005494:	4640      	mov	r0, r8
 8005496:	4649      	mov	r1, r9
 8005498:	f7fa feba 	bl	8000210 <__aeabi_dsub>
 800549c:	9a03      	ldr	r2, [sp, #12]
 800549e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b31      	cmp	r3, #49	; 0x31
 80054a6:	dc24      	bgt.n	80054f2 <__ieee754_rem_pio2+0x28a>
 80054a8:	e9ca 0100 	strd	r0, r1, [sl]
 80054ac:	4646      	mov	r6, r8
 80054ae:	464f      	mov	r7, r9
 80054b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80054b4:	4630      	mov	r0, r6
 80054b6:	4642      	mov	r2, r8
 80054b8:	464b      	mov	r3, r9
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fa fea8 	bl	8000210 <__aeabi_dsub>
 80054c0:	462b      	mov	r3, r5
 80054c2:	4622      	mov	r2, r4
 80054c4:	f7fa fea4 	bl	8000210 <__aeabi_dsub>
 80054c8:	9b02      	ldr	r3, [sp, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80054d0:	f6bf af0a 	bge.w	80052e8 <__ieee754_rem_pio2+0x80>
 80054d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80054d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80054dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054e0:	f8ca 8000 	str.w	r8, [sl]
 80054e4:	f8ca 0008 	str.w	r0, [sl, #8]
 80054e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80054ec:	f1cb 0b00 	rsb	fp, fp, #0
 80054f0:	e6fa      	b.n	80052e8 <__ieee754_rem_pio2+0x80>
 80054f2:	a327      	add	r3, pc, #156	; (adr r3, 8005590 <__ieee754_rem_pio2+0x328>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	ec51 0b18 	vmov	r0, r1, d8
 80054fc:	f7fb f840 	bl	8000580 <__aeabi_dmul>
 8005500:	4604      	mov	r4, r0
 8005502:	460d      	mov	r5, r1
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4640      	mov	r0, r8
 800550a:	4649      	mov	r1, r9
 800550c:	f7fa fe80 	bl	8000210 <__aeabi_dsub>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fa fe78 	bl	8000210 <__aeabi_dsub>
 8005520:	4622      	mov	r2, r4
 8005522:	462b      	mov	r3, r5
 8005524:	f7fa fe74 	bl	8000210 <__aeabi_dsub>
 8005528:	a31b      	add	r3, pc, #108	; (adr r3, 8005598 <__ieee754_rem_pio2+0x330>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	4604      	mov	r4, r0
 8005530:	460d      	mov	r5, r1
 8005532:	ec51 0b18 	vmov	r0, r1, d8
 8005536:	f7fb f823 	bl	8000580 <__aeabi_dmul>
 800553a:	4622      	mov	r2, r4
 800553c:	462b      	mov	r3, r5
 800553e:	f7fa fe67 	bl	8000210 <__aeabi_dsub>
 8005542:	4604      	mov	r4, r0
 8005544:	460d      	mov	r5, r1
 8005546:	e75f      	b.n	8005408 <__ieee754_rem_pio2+0x1a0>
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <__ieee754_rem_pio2+0x350>)
 800554a:	4598      	cmp	r8, r3
 800554c:	dd36      	ble.n	80055bc <__ieee754_rem_pio2+0x354>
 800554e:	ee10 2a10 	vmov	r2, s0
 8005552:	462b      	mov	r3, r5
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	f7fa fe5a 	bl	8000210 <__aeabi_dsub>
 800555c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005560:	e9ca 0100 	strd	r0, r1, [sl]
 8005564:	e694      	b.n	8005290 <__ieee754_rem_pio2+0x28>
 8005566:	bf00      	nop
 8005568:	54400000 	.word	0x54400000
 800556c:	3ff921fb 	.word	0x3ff921fb
 8005570:	1a626331 	.word	0x1a626331
 8005574:	3dd0b461 	.word	0x3dd0b461
 8005578:	1a600000 	.word	0x1a600000
 800557c:	3dd0b461 	.word	0x3dd0b461
 8005580:	2e037073 	.word	0x2e037073
 8005584:	3ba3198a 	.word	0x3ba3198a
 8005588:	6dc9c883 	.word	0x6dc9c883
 800558c:	3fe45f30 	.word	0x3fe45f30
 8005590:	2e000000 	.word	0x2e000000
 8005594:	3ba3198a 	.word	0x3ba3198a
 8005598:	252049c1 	.word	0x252049c1
 800559c:	397b839a 	.word	0x397b839a
 80055a0:	3fe921fb 	.word	0x3fe921fb
 80055a4:	4002d97b 	.word	0x4002d97b
 80055a8:	3ff921fb 	.word	0x3ff921fb
 80055ac:	413921fb 	.word	0x413921fb
 80055b0:	3fe00000 	.word	0x3fe00000
 80055b4:	080067f8 	.word	0x080067f8
 80055b8:	7fefffff 	.word	0x7fefffff
 80055bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80055c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80055c4:	ee10 0a10 	vmov	r0, s0
 80055c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80055cc:	ee10 6a10 	vmov	r6, s0
 80055d0:	460f      	mov	r7, r1
 80055d2:	f7fb fa85 	bl	8000ae0 <__aeabi_d2iz>
 80055d6:	f7fa ff69 	bl	80004ac <__aeabi_i2d>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055e6:	f7fa fe13 	bl	8000210 <__aeabi_dsub>
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <__ieee754_rem_pio2+0x410>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	f7fa ffc7 	bl	8000580 <__aeabi_dmul>
 80055f2:	460f      	mov	r7, r1
 80055f4:	4606      	mov	r6, r0
 80055f6:	f7fb fa73 	bl	8000ae0 <__aeabi_d2iz>
 80055fa:	f7fa ff57 	bl	80004ac <__aeabi_i2d>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4630      	mov	r0, r6
 8005604:	4639      	mov	r1, r7
 8005606:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800560a:	f7fa fe01 	bl	8000210 <__aeabi_dsub>
 800560e:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <__ieee754_rem_pio2+0x410>)
 8005610:	2200      	movs	r2, #0
 8005612:	f7fa ffb5 	bl	8000580 <__aeabi_dmul>
 8005616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800561a:	ad04      	add	r5, sp, #16
 800561c:	f04f 0803 	mov.w	r8, #3
 8005620:	46a9      	mov	r9, r5
 8005622:	2600      	movs	r6, #0
 8005624:	2700      	movs	r7, #0
 8005626:	4632      	mov	r2, r6
 8005628:	463b      	mov	r3, r7
 800562a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800562e:	46c3      	mov	fp, r8
 8005630:	3d08      	subs	r5, #8
 8005632:	f108 38ff 	add.w	r8, r8, #4294967295
 8005636:	f7fb fa0b 	bl	8000a50 <__aeabi_dcmpeq>
 800563a:	2800      	cmp	r0, #0
 800563c:	d1f3      	bne.n	8005626 <__ieee754_rem_pio2+0x3be>
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <__ieee754_rem_pio2+0x414>)
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	2302      	movs	r3, #2
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	4622      	mov	r2, r4
 8005648:	465b      	mov	r3, fp
 800564a:	4651      	mov	r1, sl
 800564c:	4648      	mov	r0, r9
 800564e:	f000 f993 	bl	8005978 <__kernel_rem_pio2>
 8005652:	9b02      	ldr	r3, [sp, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	4683      	mov	fp, r0
 8005658:	f6bf ae46 	bge.w	80052e8 <__ieee754_rem_pio2+0x80>
 800565c:	e9da 2100 	ldrd	r2, r1, [sl]
 8005660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005664:	e9ca 2300 	strd	r2, r3, [sl]
 8005668:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800566c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005670:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005674:	e73a      	b.n	80054ec <__ieee754_rem_pio2+0x284>
 8005676:	bf00      	nop
 8005678:	41700000 	.word	0x41700000
 800567c:	08006878 	.word	0x08006878

08005680 <__ieee754_sqrt>:
 8005680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	ec55 4b10 	vmov	r4, r5, d0
 8005688:	4e55      	ldr	r6, [pc, #340]	; (80057e0 <__ieee754_sqrt+0x160>)
 800568a:	43ae      	bics	r6, r5
 800568c:	ee10 0a10 	vmov	r0, s0
 8005690:	ee10 3a10 	vmov	r3, s0
 8005694:	462a      	mov	r2, r5
 8005696:	4629      	mov	r1, r5
 8005698:	d110      	bne.n	80056bc <__ieee754_sqrt+0x3c>
 800569a:	ee10 2a10 	vmov	r2, s0
 800569e:	462b      	mov	r3, r5
 80056a0:	f7fa ff6e 	bl	8000580 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa fdb2 	bl	8000214 <__adddf3>
 80056b0:	4604      	mov	r4, r0
 80056b2:	460d      	mov	r5, r1
 80056b4:	ec45 4b10 	vmov	d0, r4, r5
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056bc:	2d00      	cmp	r5, #0
 80056be:	dc10      	bgt.n	80056e2 <__ieee754_sqrt+0x62>
 80056c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80056c4:	4330      	orrs	r0, r6
 80056c6:	d0f5      	beq.n	80056b4 <__ieee754_sqrt+0x34>
 80056c8:	b15d      	cbz	r5, 80056e2 <__ieee754_sqrt+0x62>
 80056ca:	ee10 2a10 	vmov	r2, s0
 80056ce:	462b      	mov	r3, r5
 80056d0:	ee10 0a10 	vmov	r0, s0
 80056d4:	f7fa fd9c 	bl	8000210 <__aeabi_dsub>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	f7fb f87a 	bl	80007d4 <__aeabi_ddiv>
 80056e0:	e7e6      	b.n	80056b0 <__ieee754_sqrt+0x30>
 80056e2:	1512      	asrs	r2, r2, #20
 80056e4:	d074      	beq.n	80057d0 <__ieee754_sqrt+0x150>
 80056e6:	07d4      	lsls	r4, r2, #31
 80056e8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80056ec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80056f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80056f4:	bf5e      	ittt	pl
 80056f6:	0fda      	lsrpl	r2, r3, #31
 80056f8:	005b      	lslpl	r3, r3, #1
 80056fa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80056fe:	2400      	movs	r4, #0
 8005700:	0fda      	lsrs	r2, r3, #31
 8005702:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005706:	107f      	asrs	r7, r7, #1
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	2516      	movs	r5, #22
 800570c:	4620      	mov	r0, r4
 800570e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005712:	1886      	adds	r6, r0, r2
 8005714:	428e      	cmp	r6, r1
 8005716:	bfde      	ittt	le
 8005718:	1b89      	suble	r1, r1, r6
 800571a:	18b0      	addle	r0, r6, r2
 800571c:	18a4      	addle	r4, r4, r2
 800571e:	0049      	lsls	r1, r1, #1
 8005720:	3d01      	subs	r5, #1
 8005722:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005726:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800572a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800572e:	d1f0      	bne.n	8005712 <__ieee754_sqrt+0x92>
 8005730:	462a      	mov	r2, r5
 8005732:	f04f 0e20 	mov.w	lr, #32
 8005736:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800573a:	4281      	cmp	r1, r0
 800573c:	eb06 0c05 	add.w	ip, r6, r5
 8005740:	dc02      	bgt.n	8005748 <__ieee754_sqrt+0xc8>
 8005742:	d113      	bne.n	800576c <__ieee754_sqrt+0xec>
 8005744:	459c      	cmp	ip, r3
 8005746:	d811      	bhi.n	800576c <__ieee754_sqrt+0xec>
 8005748:	f1bc 0f00 	cmp.w	ip, #0
 800574c:	eb0c 0506 	add.w	r5, ip, r6
 8005750:	da43      	bge.n	80057da <__ieee754_sqrt+0x15a>
 8005752:	2d00      	cmp	r5, #0
 8005754:	db41      	blt.n	80057da <__ieee754_sqrt+0x15a>
 8005756:	f100 0801 	add.w	r8, r0, #1
 800575a:	1a09      	subs	r1, r1, r0
 800575c:	459c      	cmp	ip, r3
 800575e:	bf88      	it	hi
 8005760:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005764:	eba3 030c 	sub.w	r3, r3, ip
 8005768:	4432      	add	r2, r6
 800576a:	4640      	mov	r0, r8
 800576c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005770:	f1be 0e01 	subs.w	lr, lr, #1
 8005774:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005778:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800577c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005780:	d1db      	bne.n	800573a <__ieee754_sqrt+0xba>
 8005782:	430b      	orrs	r3, r1
 8005784:	d006      	beq.n	8005794 <__ieee754_sqrt+0x114>
 8005786:	1c50      	adds	r0, r2, #1
 8005788:	bf13      	iteet	ne
 800578a:	3201      	addne	r2, #1
 800578c:	3401      	addeq	r4, #1
 800578e:	4672      	moveq	r2, lr
 8005790:	f022 0201 	bicne.w	r2, r2, #1
 8005794:	1063      	asrs	r3, r4, #1
 8005796:	0852      	lsrs	r2, r2, #1
 8005798:	07e1      	lsls	r1, r4, #31
 800579a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800579e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80057a2:	bf48      	it	mi
 80057a4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80057a8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80057ac:	4614      	mov	r4, r2
 80057ae:	e781      	b.n	80056b4 <__ieee754_sqrt+0x34>
 80057b0:	0ad9      	lsrs	r1, r3, #11
 80057b2:	3815      	subs	r0, #21
 80057b4:	055b      	lsls	r3, r3, #21
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d0fa      	beq.n	80057b0 <__ieee754_sqrt+0x130>
 80057ba:	02cd      	lsls	r5, r1, #11
 80057bc:	d50a      	bpl.n	80057d4 <__ieee754_sqrt+0x154>
 80057be:	f1c2 0420 	rsb	r4, r2, #32
 80057c2:	fa23 f404 	lsr.w	r4, r3, r4
 80057c6:	1e55      	subs	r5, r2, #1
 80057c8:	4093      	lsls	r3, r2
 80057ca:	4321      	orrs	r1, r4
 80057cc:	1b42      	subs	r2, r0, r5
 80057ce:	e78a      	b.n	80056e6 <__ieee754_sqrt+0x66>
 80057d0:	4610      	mov	r0, r2
 80057d2:	e7f0      	b.n	80057b6 <__ieee754_sqrt+0x136>
 80057d4:	0049      	lsls	r1, r1, #1
 80057d6:	3201      	adds	r2, #1
 80057d8:	e7ef      	b.n	80057ba <__ieee754_sqrt+0x13a>
 80057da:	4680      	mov	r8, r0
 80057dc:	e7bd      	b.n	800575a <__ieee754_sqrt+0xda>
 80057de:	bf00      	nop
 80057e0:	7ff00000 	.word	0x7ff00000
 80057e4:	00000000 	.word	0x00000000

080057e8 <__kernel_cos>:
 80057e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	ec57 6b10 	vmov	r6, r7, d0
 80057f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80057f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80057f8:	ed8d 1b00 	vstr	d1, [sp]
 80057fc:	da07      	bge.n	800580e <__kernel_cos+0x26>
 80057fe:	ee10 0a10 	vmov	r0, s0
 8005802:	4639      	mov	r1, r7
 8005804:	f7fb f96c 	bl	8000ae0 <__aeabi_d2iz>
 8005808:	2800      	cmp	r0, #0
 800580a:	f000 8088 	beq.w	800591e <__kernel_cos+0x136>
 800580e:	4632      	mov	r2, r6
 8005810:	463b      	mov	r3, r7
 8005812:	4630      	mov	r0, r6
 8005814:	4639      	mov	r1, r7
 8005816:	f7fa feb3 	bl	8000580 <__aeabi_dmul>
 800581a:	4b51      	ldr	r3, [pc, #324]	; (8005960 <__kernel_cos+0x178>)
 800581c:	2200      	movs	r2, #0
 800581e:	4604      	mov	r4, r0
 8005820:	460d      	mov	r5, r1
 8005822:	f7fa fead 	bl	8000580 <__aeabi_dmul>
 8005826:	a340      	add	r3, pc, #256	; (adr r3, 8005928 <__kernel_cos+0x140>)
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	4682      	mov	sl, r0
 800582e:	468b      	mov	fp, r1
 8005830:	4620      	mov	r0, r4
 8005832:	4629      	mov	r1, r5
 8005834:	f7fa fea4 	bl	8000580 <__aeabi_dmul>
 8005838:	a33d      	add	r3, pc, #244	; (adr r3, 8005930 <__kernel_cos+0x148>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fa fce9 	bl	8000214 <__adddf3>
 8005842:	4622      	mov	r2, r4
 8005844:	462b      	mov	r3, r5
 8005846:	f7fa fe9b 	bl	8000580 <__aeabi_dmul>
 800584a:	a33b      	add	r3, pc, #236	; (adr r3, 8005938 <__kernel_cos+0x150>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f7fa fcde 	bl	8000210 <__aeabi_dsub>
 8005854:	4622      	mov	r2, r4
 8005856:	462b      	mov	r3, r5
 8005858:	f7fa fe92 	bl	8000580 <__aeabi_dmul>
 800585c:	a338      	add	r3, pc, #224	; (adr r3, 8005940 <__kernel_cos+0x158>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fcd7 	bl	8000214 <__adddf3>
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	f7fa fe89 	bl	8000580 <__aeabi_dmul>
 800586e:	a336      	add	r3, pc, #216	; (adr r3, 8005948 <__kernel_cos+0x160>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fa fccc 	bl	8000210 <__aeabi_dsub>
 8005878:	4622      	mov	r2, r4
 800587a:	462b      	mov	r3, r5
 800587c:	f7fa fe80 	bl	8000580 <__aeabi_dmul>
 8005880:	a333      	add	r3, pc, #204	; (adr r3, 8005950 <__kernel_cos+0x168>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fcc5 	bl	8000214 <__adddf3>
 800588a:	4622      	mov	r2, r4
 800588c:	462b      	mov	r3, r5
 800588e:	f7fa fe77 	bl	8000580 <__aeabi_dmul>
 8005892:	4622      	mov	r2, r4
 8005894:	462b      	mov	r3, r5
 8005896:	f7fa fe73 	bl	8000580 <__aeabi_dmul>
 800589a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589e:	4604      	mov	r4, r0
 80058a0:	460d      	mov	r5, r1
 80058a2:	4630      	mov	r0, r6
 80058a4:	4639      	mov	r1, r7
 80058a6:	f7fa fe6b 	bl	8000580 <__aeabi_dmul>
 80058aa:	460b      	mov	r3, r1
 80058ac:	4602      	mov	r2, r0
 80058ae:	4629      	mov	r1, r5
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7fa fcad 	bl	8000210 <__aeabi_dsub>
 80058b6:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <__kernel_cos+0x17c>)
 80058b8:	4598      	cmp	r8, r3
 80058ba:	4606      	mov	r6, r0
 80058bc:	460f      	mov	r7, r1
 80058be:	dc10      	bgt.n	80058e2 <__kernel_cos+0xfa>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4650      	mov	r0, sl
 80058c6:	4659      	mov	r1, fp
 80058c8:	f7fa fca2 	bl	8000210 <__aeabi_dsub>
 80058cc:	460b      	mov	r3, r1
 80058ce:	4926      	ldr	r1, [pc, #152]	; (8005968 <__kernel_cos+0x180>)
 80058d0:	4602      	mov	r2, r0
 80058d2:	2000      	movs	r0, #0
 80058d4:	f7fa fc9c 	bl	8000210 <__aeabi_dsub>
 80058d8:	ec41 0b10 	vmov	d0, r0, r1
 80058dc:	b003      	add	sp, #12
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	4b22      	ldr	r3, [pc, #136]	; (800596c <__kernel_cos+0x184>)
 80058e4:	4920      	ldr	r1, [pc, #128]	; (8005968 <__kernel_cos+0x180>)
 80058e6:	4598      	cmp	r8, r3
 80058e8:	bfcc      	ite	gt
 80058ea:	4d21      	ldrgt	r5, [pc, #132]	; (8005970 <__kernel_cos+0x188>)
 80058ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80058f0:	2400      	movs	r4, #0
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	2000      	movs	r0, #0
 80058f8:	f7fa fc8a 	bl	8000210 <__aeabi_dsub>
 80058fc:	4622      	mov	r2, r4
 80058fe:	4680      	mov	r8, r0
 8005900:	4689      	mov	r9, r1
 8005902:	462b      	mov	r3, r5
 8005904:	4650      	mov	r0, sl
 8005906:	4659      	mov	r1, fp
 8005908:	f7fa fc82 	bl	8000210 <__aeabi_dsub>
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	f7fa fc7e 	bl	8000210 <__aeabi_dsub>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4640      	mov	r0, r8
 800591a:	4649      	mov	r1, r9
 800591c:	e7da      	b.n	80058d4 <__kernel_cos+0xec>
 800591e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005958 <__kernel_cos+0x170>
 8005922:	e7db      	b.n	80058dc <__kernel_cos+0xf4>
 8005924:	f3af 8000 	nop.w
 8005928:	be8838d4 	.word	0xbe8838d4
 800592c:	bda8fae9 	.word	0xbda8fae9
 8005930:	bdb4b1c4 	.word	0xbdb4b1c4
 8005934:	3e21ee9e 	.word	0x3e21ee9e
 8005938:	809c52ad 	.word	0x809c52ad
 800593c:	3e927e4f 	.word	0x3e927e4f
 8005940:	19cb1590 	.word	0x19cb1590
 8005944:	3efa01a0 	.word	0x3efa01a0
 8005948:	16c15177 	.word	0x16c15177
 800594c:	3f56c16c 	.word	0x3f56c16c
 8005950:	5555554c 	.word	0x5555554c
 8005954:	3fa55555 	.word	0x3fa55555
 8005958:	00000000 	.word	0x00000000
 800595c:	3ff00000 	.word	0x3ff00000
 8005960:	3fe00000 	.word	0x3fe00000
 8005964:	3fd33332 	.word	0x3fd33332
 8005968:	3ff00000 	.word	0x3ff00000
 800596c:	3fe90000 	.word	0x3fe90000
 8005970:	3fd20000 	.word	0x3fd20000
 8005974:	00000000 	.word	0x00000000

08005978 <__kernel_rem_pio2>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	ed2d 8b02 	vpush	{d8}
 8005980:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005984:	f112 0f14 	cmn.w	r2, #20
 8005988:	9308      	str	r3, [sp, #32]
 800598a:	9101      	str	r1, [sp, #4]
 800598c:	4bc4      	ldr	r3, [pc, #784]	; (8005ca0 <__kernel_rem_pio2+0x328>)
 800598e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005990:	900b      	str	r0, [sp, #44]	; 0x2c
 8005992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005996:	9302      	str	r3, [sp, #8]
 8005998:	9b08      	ldr	r3, [sp, #32]
 800599a:	f103 33ff 	add.w	r3, r3, #4294967295
 800599e:	bfa8      	it	ge
 80059a0:	1ed4      	subge	r4, r2, #3
 80059a2:	9306      	str	r3, [sp, #24]
 80059a4:	bfb2      	itee	lt
 80059a6:	2400      	movlt	r4, #0
 80059a8:	2318      	movge	r3, #24
 80059aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80059ae:	f06f 0317 	mvn.w	r3, #23
 80059b2:	fb04 3303 	mla	r3, r4, r3, r3
 80059b6:	eb03 0a02 	add.w	sl, r3, r2
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	9a06      	ldr	r2, [sp, #24]
 80059be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005c90 <__kernel_rem_pio2+0x318>
 80059c2:	eb03 0802 	add.w	r8, r3, r2
 80059c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80059c8:	1aa7      	subs	r7, r4, r2
 80059ca:	ae22      	add	r6, sp, #136	; 0x88
 80059cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80059d0:	2500      	movs	r5, #0
 80059d2:	4545      	cmp	r5, r8
 80059d4:	dd13      	ble.n	80059fe <__kernel_rem_pio2+0x86>
 80059d6:	9b08      	ldr	r3, [sp, #32]
 80059d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005c90 <__kernel_rem_pio2+0x318>
 80059dc:	aa22      	add	r2, sp, #136	; 0x88
 80059de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80059e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	4598      	cmp	r8, r3
 80059ee:	dc2f      	bgt.n	8005a50 <__kernel_rem_pio2+0xd8>
 80059f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80059f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80059f8:	462f      	mov	r7, r5
 80059fa:	2600      	movs	r6, #0
 80059fc:	e01b      	b.n	8005a36 <__kernel_rem_pio2+0xbe>
 80059fe:	42ef      	cmn	r7, r5
 8005a00:	d407      	bmi.n	8005a12 <__kernel_rem_pio2+0x9a>
 8005a02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005a06:	f7fa fd51 	bl	80004ac <__aeabi_i2d>
 8005a0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005a0e:	3501      	adds	r5, #1
 8005a10:	e7df      	b.n	80059d2 <__kernel_rem_pio2+0x5a>
 8005a12:	ec51 0b18 	vmov	r0, r1, d8
 8005a16:	e7f8      	b.n	8005a0a <__kernel_rem_pio2+0x92>
 8005a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005a20:	f7fa fdae 	bl	8000580 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a2c:	f7fa fbf2 	bl	8000214 <__adddf3>
 8005a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a34:	3601      	adds	r6, #1
 8005a36:	9b06      	ldr	r3, [sp, #24]
 8005a38:	429e      	cmp	r6, r3
 8005a3a:	f1a7 0708 	sub.w	r7, r7, #8
 8005a3e:	ddeb      	ble.n	8005a18 <__kernel_rem_pio2+0xa0>
 8005a40:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005a44:	f108 0801 	add.w	r8, r8, #1
 8005a48:	ecab 7b02 	vstmia	fp!, {d7}
 8005a4c:	3508      	adds	r5, #8
 8005a4e:	e7cc      	b.n	80059ea <__kernel_rem_pio2+0x72>
 8005a50:	9b02      	ldr	r3, [sp, #8]
 8005a52:	aa0e      	add	r2, sp, #56	; 0x38
 8005a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a58:	930d      	str	r3, [sp, #52]	; 0x34
 8005a5a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005a5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005a60:	9c02      	ldr	r4, [sp, #8]
 8005a62:	930c      	str	r3, [sp, #48]	; 0x30
 8005a64:	00e3      	lsls	r3, r4, #3
 8005a66:	930a      	str	r3, [sp, #40]	; 0x28
 8005a68:	ab9a      	add	r3, sp, #616	; 0x268
 8005a6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a6e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005a72:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005a76:	ab72      	add	r3, sp, #456	; 0x1c8
 8005a78:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005a7c:	46c3      	mov	fp, r8
 8005a7e:	46a1      	mov	r9, r4
 8005a80:	f1b9 0f00 	cmp.w	r9, #0
 8005a84:	f1a5 0508 	sub.w	r5, r5, #8
 8005a88:	dc77      	bgt.n	8005b7a <__kernel_rem_pio2+0x202>
 8005a8a:	ec47 6b10 	vmov	d0, r6, r7
 8005a8e:	4650      	mov	r0, sl
 8005a90:	f000 fdb6 	bl	8006600 <scalbn>
 8005a94:	ec57 6b10 	vmov	r6, r7, d0
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005a9e:	ee10 0a10 	vmov	r0, s0
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fa fd6c 	bl	8000580 <__aeabi_dmul>
 8005aa8:	ec41 0b10 	vmov	d0, r0, r1
 8005aac:	f000 fd20 	bl	80064f0 <floor>
 8005ab0:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <__kernel_rem_pio2+0x32c>)
 8005ab2:	ec51 0b10 	vmov	r0, r1, d0
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f7fa fd62 	bl	8000580 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fba4 	bl	8000210 <__aeabi_dsub>
 8005ac8:	460f      	mov	r7, r1
 8005aca:	4606      	mov	r6, r0
 8005acc:	f7fb f808 	bl	8000ae0 <__aeabi_d2iz>
 8005ad0:	9004      	str	r0, [sp, #16]
 8005ad2:	f7fa fceb 	bl	80004ac <__aeabi_i2d>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa fb97 	bl	8000210 <__aeabi_dsub>
 8005ae2:	f1ba 0f00 	cmp.w	sl, #0
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	460f      	mov	r7, r1
 8005aea:	dd6d      	ble.n	8005bc8 <__kernel_rem_pio2+0x250>
 8005aec:	1e62      	subs	r2, r4, #1
 8005aee:	ab0e      	add	r3, sp, #56	; 0x38
 8005af0:	9d04      	ldr	r5, [sp, #16]
 8005af2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005af6:	f1ca 0118 	rsb	r1, sl, #24
 8005afa:	fa40 f301 	asr.w	r3, r0, r1
 8005afe:	441d      	add	r5, r3
 8005b00:	408b      	lsls	r3, r1
 8005b02:	1ac0      	subs	r0, r0, r3
 8005b04:	ab0e      	add	r3, sp, #56	; 0x38
 8005b06:	9504      	str	r5, [sp, #16]
 8005b08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005b0c:	f1ca 0317 	rsb	r3, sl, #23
 8005b10:	fa40 fb03 	asr.w	fp, r0, r3
 8005b14:	f1bb 0f00 	cmp.w	fp, #0
 8005b18:	dd65      	ble.n	8005be6 <__kernel_rem_pio2+0x26e>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	3301      	adds	r3, #1
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	4615      	mov	r5, r2
 8005b24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005b28:	4294      	cmp	r4, r2
 8005b2a:	f300 809c 	bgt.w	8005c66 <__kernel_rem_pio2+0x2ee>
 8005b2e:	f1ba 0f00 	cmp.w	sl, #0
 8005b32:	dd07      	ble.n	8005b44 <__kernel_rem_pio2+0x1cc>
 8005b34:	f1ba 0f01 	cmp.w	sl, #1
 8005b38:	f000 80c0 	beq.w	8005cbc <__kernel_rem_pio2+0x344>
 8005b3c:	f1ba 0f02 	cmp.w	sl, #2
 8005b40:	f000 80c6 	beq.w	8005cd0 <__kernel_rem_pio2+0x358>
 8005b44:	f1bb 0f02 	cmp.w	fp, #2
 8005b48:	d14d      	bne.n	8005be6 <__kernel_rem_pio2+0x26e>
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	4956      	ldr	r1, [pc, #344]	; (8005ca8 <__kernel_rem_pio2+0x330>)
 8005b50:	2000      	movs	r0, #0
 8005b52:	f7fa fb5d 	bl	8000210 <__aeabi_dsub>
 8005b56:	4606      	mov	r6, r0
 8005b58:	460f      	mov	r7, r1
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	d043      	beq.n	8005be6 <__kernel_rem_pio2+0x26e>
 8005b5e:	4650      	mov	r0, sl
 8005b60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005c98 <__kernel_rem_pio2+0x320>
 8005b64:	f000 fd4c 	bl	8006600 <scalbn>
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4639      	mov	r1, r7
 8005b6c:	ec53 2b10 	vmov	r2, r3, d0
 8005b70:	f7fa fb4e 	bl	8000210 <__aeabi_dsub>
 8005b74:	4606      	mov	r6, r0
 8005b76:	460f      	mov	r7, r1
 8005b78:	e035      	b.n	8005be6 <__kernel_rem_pio2+0x26e>
 8005b7a:	4b4c      	ldr	r3, [pc, #304]	; (8005cac <__kernel_rem_pio2+0x334>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	4639      	mov	r1, r7
 8005b82:	f7fa fcfd 	bl	8000580 <__aeabi_dmul>
 8005b86:	f7fa ffab 	bl	8000ae0 <__aeabi_d2iz>
 8005b8a:	f7fa fc8f 	bl	80004ac <__aeabi_i2d>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	ec43 2b18 	vmov	d8, r2, r3
 8005b96:	4b46      	ldr	r3, [pc, #280]	; (8005cb0 <__kernel_rem_pio2+0x338>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f7fa fcf1 	bl	8000580 <__aeabi_dmul>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa fb33 	bl	8000210 <__aeabi_dsub>
 8005baa:	f7fa ff99 	bl	8000ae0 <__aeabi_d2iz>
 8005bae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bb2:	f84b 0b04 	str.w	r0, [fp], #4
 8005bb6:	ec51 0b18 	vmov	r0, r1, d8
 8005bba:	f7fa fb2b 	bl	8000214 <__adddf3>
 8005bbe:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	e75b      	b.n	8005a80 <__kernel_rem_pio2+0x108>
 8005bc8:	d106      	bne.n	8005bd8 <__kernel_rem_pio2+0x260>
 8005bca:	1e63      	subs	r3, r4, #1
 8005bcc:	aa0e      	add	r2, sp, #56	; 0x38
 8005bce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005bd2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005bd6:	e79d      	b.n	8005b14 <__kernel_rem_pio2+0x19c>
 8005bd8:	4b36      	ldr	r3, [pc, #216]	; (8005cb4 <__kernel_rem_pio2+0x33c>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f7fa ff56 	bl	8000a8c <__aeabi_dcmpge>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d13d      	bne.n	8005c60 <__kernel_rem_pio2+0x2e8>
 8005be4:	4683      	mov	fp, r0
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	4630      	mov	r0, r6
 8005bec:	4639      	mov	r1, r7
 8005bee:	f7fa ff2f 	bl	8000a50 <__aeabi_dcmpeq>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f000 80c0 	beq.w	8005d78 <__kernel_rem_pio2+0x400>
 8005bf8:	1e65      	subs	r5, r4, #1
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	9902      	ldr	r1, [sp, #8]
 8005c00:	428b      	cmp	r3, r1
 8005c02:	da6c      	bge.n	8005cde <__kernel_rem_pio2+0x366>
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	f000 8089 	beq.w	8005d1c <__kernel_rem_pio2+0x3a4>
 8005c0a:	ab0e      	add	r3, sp, #56	; 0x38
 8005c0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005c10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80ad 	beq.w	8005d74 <__kernel_rem_pio2+0x3fc>
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005c98 <__kernel_rem_pio2+0x320>
 8005c20:	f000 fcee 	bl	8006600 <scalbn>
 8005c24:	ab9a      	add	r3, sp, #616	; 0x268
 8005c26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c2a:	ec57 6b10 	vmov	r6, r7, d0
 8005c2e:	00ec      	lsls	r4, r5, #3
 8005c30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005c34:	46aa      	mov	sl, r5
 8005c36:	f1ba 0f00 	cmp.w	sl, #0
 8005c3a:	f280 80d6 	bge.w	8005dea <__kernel_rem_pio2+0x472>
 8005c3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005c90 <__kernel_rem_pio2+0x318>
 8005c42:	462e      	mov	r6, r5
 8005c44:	2e00      	cmp	r6, #0
 8005c46:	f2c0 8104 	blt.w	8005e52 <__kernel_rem_pio2+0x4da>
 8005c4a:	ab72      	add	r3, sp, #456	; 0x1c8
 8005c4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005c50:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005cb8 <__kernel_rem_pio2+0x340>
 8005c54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005c58:	f04f 0800 	mov.w	r8, #0
 8005c5c:	1baf      	subs	r7, r5, r6
 8005c5e:	e0ea      	b.n	8005e36 <__kernel_rem_pio2+0x4be>
 8005c60:	f04f 0b02 	mov.w	fp, #2
 8005c64:	e759      	b.n	8005b1a <__kernel_rem_pio2+0x1a2>
 8005c66:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6a:	b955      	cbnz	r5, 8005c82 <__kernel_rem_pio2+0x30a>
 8005c6c:	b123      	cbz	r3, 8005c78 <__kernel_rem_pio2+0x300>
 8005c6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005c72:	f8c8 3000 	str.w	r3, [r8]
 8005c76:	2301      	movs	r3, #1
 8005c78:	3201      	adds	r2, #1
 8005c7a:	f108 0804 	add.w	r8, r8, #4
 8005c7e:	461d      	mov	r5, r3
 8005c80:	e752      	b.n	8005b28 <__kernel_rem_pio2+0x1b0>
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	f8c8 3000 	str.w	r3, [r8]
 8005c88:	462b      	mov	r3, r5
 8005c8a:	e7f5      	b.n	8005c78 <__kernel_rem_pio2+0x300>
 8005c8c:	f3af 8000 	nop.w
	...
 8005c9c:	3ff00000 	.word	0x3ff00000
 8005ca0:	080069c0 	.word	0x080069c0
 8005ca4:	40200000 	.word	0x40200000
 8005ca8:	3ff00000 	.word	0x3ff00000
 8005cac:	3e700000 	.word	0x3e700000
 8005cb0:	41700000 	.word	0x41700000
 8005cb4:	3fe00000 	.word	0x3fe00000
 8005cb8:	08006980 	.word	0x08006980
 8005cbc:	1e62      	subs	r2, r4, #1
 8005cbe:	ab0e      	add	r3, sp, #56	; 0x38
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005cc8:	a90e      	add	r1, sp, #56	; 0x38
 8005cca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005cce:	e739      	b.n	8005b44 <__kernel_rem_pio2+0x1cc>
 8005cd0:	1e62      	subs	r2, r4, #1
 8005cd2:	ab0e      	add	r3, sp, #56	; 0x38
 8005cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005cdc:	e7f4      	b.n	8005cc8 <__kernel_rem_pio2+0x350>
 8005cde:	a90e      	add	r1, sp, #56	; 0x38
 8005ce0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	e789      	b.n	8005bfe <__kernel_rem_pio2+0x286>
 8005cea:	3301      	adds	r3, #1
 8005cec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d0fa      	beq.n	8005cea <__kernel_rem_pio2+0x372>
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005cfa:	446a      	add	r2, sp
 8005cfc:	3a98      	subs	r2, #152	; 0x98
 8005cfe:	920a      	str	r2, [sp, #40]	; 0x28
 8005d00:	9a08      	ldr	r2, [sp, #32]
 8005d02:	18e3      	adds	r3, r4, r3
 8005d04:	18a5      	adds	r5, r4, r2
 8005d06:	aa22      	add	r2, sp, #136	; 0x88
 8005d08:	f104 0801 	add.w	r8, r4, #1
 8005d0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	4543      	cmp	r3, r8
 8005d16:	da04      	bge.n	8005d22 <__kernel_rem_pio2+0x3aa>
 8005d18:	461c      	mov	r4, r3
 8005d1a:	e6a3      	b.n	8005a64 <__kernel_rem_pio2+0xec>
 8005d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7e4      	b.n	8005cec <__kernel_rem_pio2+0x374>
 8005d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005d28:	f7fa fbc0 	bl	80004ac <__aeabi_i2d>
 8005d2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d32:	46ab      	mov	fp, r5
 8005d34:	461c      	mov	r4, r3
 8005d36:	f04f 0900 	mov.w	r9, #0
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	2700      	movs	r7, #0
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	4599      	cmp	r9, r3
 8005d42:	dd06      	ble.n	8005d52 <__kernel_rem_pio2+0x3da>
 8005d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005d4a:	f108 0801 	add.w	r8, r8, #1
 8005d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d50:	e7df      	b.n	8005d12 <__kernel_rem_pio2+0x39a>
 8005d52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005d56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005d5a:	f7fa fc11 	bl	8000580 <__aeabi_dmul>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4630      	mov	r0, r6
 8005d64:	4639      	mov	r1, r7
 8005d66:	f7fa fa55 	bl	8000214 <__adddf3>
 8005d6a:	f109 0901 	add.w	r9, r9, #1
 8005d6e:	4606      	mov	r6, r0
 8005d70:	460f      	mov	r7, r1
 8005d72:	e7e4      	b.n	8005d3e <__kernel_rem_pio2+0x3c6>
 8005d74:	3d01      	subs	r5, #1
 8005d76:	e748      	b.n	8005c0a <__kernel_rem_pio2+0x292>
 8005d78:	ec47 6b10 	vmov	d0, r6, r7
 8005d7c:	f1ca 0000 	rsb	r0, sl, #0
 8005d80:	f000 fc3e 	bl	8006600 <scalbn>
 8005d84:	ec57 6b10 	vmov	r6, r7, d0
 8005d88:	4ba0      	ldr	r3, [pc, #640]	; (800600c <__kernel_rem_pio2+0x694>)
 8005d8a:	ee10 0a10 	vmov	r0, s0
 8005d8e:	2200      	movs	r2, #0
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fe7b 	bl	8000a8c <__aeabi_dcmpge>
 8005d96:	b1f8      	cbz	r0, 8005dd8 <__kernel_rem_pio2+0x460>
 8005d98:	4b9d      	ldr	r3, [pc, #628]	; (8006010 <__kernel_rem_pio2+0x698>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f7fa fbee 	bl	8000580 <__aeabi_dmul>
 8005da4:	f7fa fe9c 	bl	8000ae0 <__aeabi_d2iz>
 8005da8:	4680      	mov	r8, r0
 8005daa:	f7fa fb7f 	bl	80004ac <__aeabi_i2d>
 8005dae:	4b97      	ldr	r3, [pc, #604]	; (800600c <__kernel_rem_pio2+0x694>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	f7fa fbe5 	bl	8000580 <__aeabi_dmul>
 8005db6:	460b      	mov	r3, r1
 8005db8:	4602      	mov	r2, r0
 8005dba:	4639      	mov	r1, r7
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7fa fa27 	bl	8000210 <__aeabi_dsub>
 8005dc2:	f7fa fe8d 	bl	8000ae0 <__aeabi_d2iz>
 8005dc6:	1c65      	adds	r5, r4, #1
 8005dc8:	ab0e      	add	r3, sp, #56	; 0x38
 8005dca:	f10a 0a18 	add.w	sl, sl, #24
 8005dce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005dd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005dd6:	e720      	b.n	8005c1a <__kernel_rem_pio2+0x2a2>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f7fa fe80 	bl	8000ae0 <__aeabi_d2iz>
 8005de0:	ab0e      	add	r3, sp, #56	; 0x38
 8005de2:	4625      	mov	r5, r4
 8005de4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005de8:	e717      	b.n	8005c1a <__kernel_rem_pio2+0x2a2>
 8005dea:	ab0e      	add	r3, sp, #56	; 0x38
 8005dec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005df0:	f7fa fb5c 	bl	80004ac <__aeabi_i2d>
 8005df4:	4632      	mov	r2, r6
 8005df6:	463b      	mov	r3, r7
 8005df8:	f7fa fbc2 	bl	8000580 <__aeabi_dmul>
 8005dfc:	4b84      	ldr	r3, [pc, #528]	; (8006010 <__kernel_rem_pio2+0x698>)
 8005dfe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005e02:	2200      	movs	r2, #0
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fbba 	bl	8000580 <__aeabi_dmul>
 8005e0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	e70f      	b.n	8005c36 <__kernel_rem_pio2+0x2be>
 8005e16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005e1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005e1e:	f7fa fbaf 	bl	8000580 <__aeabi_dmul>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e2a:	f7fa f9f3 	bl	8000214 <__adddf3>
 8005e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e32:	f108 0801 	add.w	r8, r8, #1
 8005e36:	9b02      	ldr	r3, [sp, #8]
 8005e38:	4598      	cmp	r8, r3
 8005e3a:	dc01      	bgt.n	8005e40 <__kernel_rem_pio2+0x4c8>
 8005e3c:	45b8      	cmp	r8, r7
 8005e3e:	ddea      	ble.n	8005e16 <__kernel_rem_pio2+0x49e>
 8005e40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005e44:	ab4a      	add	r3, sp, #296	; 0x128
 8005e46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005e4a:	ed87 7b00 	vstr	d7, [r7]
 8005e4e:	3e01      	subs	r6, #1
 8005e50:	e6f8      	b.n	8005c44 <__kernel_rem_pio2+0x2cc>
 8005e52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	dc0b      	bgt.n	8005e70 <__kernel_rem_pio2+0x4f8>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dc35      	bgt.n	8005ec8 <__kernel_rem_pio2+0x550>
 8005e5c:	d059      	beq.n	8005f12 <__kernel_rem_pio2+0x59a>
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	f003 0007 	and.w	r0, r3, #7
 8005e64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005e68:	ecbd 8b02 	vpop	{d8}
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d1f3      	bne.n	8005e5e <__kernel_rem_pio2+0x4e6>
 8005e76:	ab4a      	add	r3, sp, #296	; 0x128
 8005e78:	4423      	add	r3, r4
 8005e7a:	9306      	str	r3, [sp, #24]
 8005e7c:	461c      	mov	r4, r3
 8005e7e:	469a      	mov	sl, r3
 8005e80:	9502      	str	r5, [sp, #8]
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f1aa 0a08 	sub.w	sl, sl, #8
 8005e8a:	dc6b      	bgt.n	8005f64 <__kernel_rem_pio2+0x5ec>
 8005e8c:	46aa      	mov	sl, r5
 8005e8e:	f1ba 0f01 	cmp.w	sl, #1
 8005e92:	f1a4 0408 	sub.w	r4, r4, #8
 8005e96:	f300 8085 	bgt.w	8005fa4 <__kernel_rem_pio2+0x62c>
 8005e9a:	9c06      	ldr	r4, [sp, #24]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	3408      	adds	r4, #8
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	2d01      	cmp	r5, #1
 8005ea4:	f300 809d 	bgt.w	8005fe2 <__kernel_rem_pio2+0x66a>
 8005ea8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005eac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005eb0:	f1bb 0f00 	cmp.w	fp, #0
 8005eb4:	f040 809b 	bne.w	8005fee <__kernel_rem_pio2+0x676>
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	e9c3 5600 	strd	r5, r6, [r3]
 8005ebe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005ec2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005ec6:	e7ca      	b.n	8005e5e <__kernel_rem_pio2+0x4e6>
 8005ec8:	3408      	adds	r4, #8
 8005eca:	ab4a      	add	r3, sp, #296	; 0x128
 8005ecc:	441c      	add	r4, r3
 8005ece:	462e      	mov	r6, r5
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	2e00      	cmp	r6, #0
 8005ed6:	da36      	bge.n	8005f46 <__kernel_rem_pio2+0x5ce>
 8005ed8:	f1bb 0f00 	cmp.w	fp, #0
 8005edc:	d039      	beq.n	8005f52 <__kernel_rem_pio2+0x5da>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ee4:	9c01      	ldr	r4, [sp, #4]
 8005ee6:	e9c4 2300 	strd	r2, r3, [r4]
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005ef2:	f7fa f98d 	bl	8000210 <__aeabi_dsub>
 8005ef6:	ae4c      	add	r6, sp, #304	; 0x130
 8005ef8:	2401      	movs	r4, #1
 8005efa:	42a5      	cmp	r5, r4
 8005efc:	da2c      	bge.n	8005f58 <__kernel_rem_pio2+0x5e0>
 8005efe:	f1bb 0f00 	cmp.w	fp, #0
 8005f02:	d002      	beq.n	8005f0a <__kernel_rem_pio2+0x592>
 8005f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f08:	4619      	mov	r1, r3
 8005f0a:	9b01      	ldr	r3, [sp, #4]
 8005f0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005f10:	e7a5      	b.n	8005e5e <__kernel_rem_pio2+0x4e6>
 8005f12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005f16:	eb0d 0403 	add.w	r4, sp, r3
 8005f1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005f1e:	2000      	movs	r0, #0
 8005f20:	2100      	movs	r1, #0
 8005f22:	2d00      	cmp	r5, #0
 8005f24:	da09      	bge.n	8005f3a <__kernel_rem_pio2+0x5c2>
 8005f26:	f1bb 0f00 	cmp.w	fp, #0
 8005f2a:	d002      	beq.n	8005f32 <__kernel_rem_pio2+0x5ba>
 8005f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f30:	4619      	mov	r1, r3
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	e9c3 0100 	strd	r0, r1, [r3]
 8005f38:	e791      	b.n	8005e5e <__kernel_rem_pio2+0x4e6>
 8005f3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f3e:	f7fa f969 	bl	8000214 <__adddf3>
 8005f42:	3d01      	subs	r5, #1
 8005f44:	e7ed      	b.n	8005f22 <__kernel_rem_pio2+0x5aa>
 8005f46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f4a:	f7fa f963 	bl	8000214 <__adddf3>
 8005f4e:	3e01      	subs	r6, #1
 8005f50:	e7c0      	b.n	8005ed4 <__kernel_rem_pio2+0x55c>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	e7c5      	b.n	8005ee4 <__kernel_rem_pio2+0x56c>
 8005f58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005f5c:	f7fa f95a 	bl	8000214 <__adddf3>
 8005f60:	3401      	adds	r4, #1
 8005f62:	e7ca      	b.n	8005efa <__kernel_rem_pio2+0x582>
 8005f64:	e9da 8900 	ldrd	r8, r9, [sl]
 8005f68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005f6c:	9b02      	ldr	r3, [sp, #8]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	9302      	str	r3, [sp, #8]
 8005f72:	4632      	mov	r2, r6
 8005f74:	463b      	mov	r3, r7
 8005f76:	4640      	mov	r0, r8
 8005f78:	4649      	mov	r1, r9
 8005f7a:	f7fa f94b 	bl	8000214 <__adddf3>
 8005f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4640      	mov	r0, r8
 8005f88:	4649      	mov	r1, r9
 8005f8a:	f7fa f941 	bl	8000210 <__aeabi_dsub>
 8005f8e:	4632      	mov	r2, r6
 8005f90:	463b      	mov	r3, r7
 8005f92:	f7fa f93f 	bl	8000214 <__adddf3>
 8005f96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005f9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f9e:	ed8a 7b00 	vstr	d7, [sl]
 8005fa2:	e76e      	b.n	8005e82 <__kernel_rem_pio2+0x50a>
 8005fa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005fa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005fac:	4640      	mov	r0, r8
 8005fae:	4632      	mov	r2, r6
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	f7fa f92e 	bl	8000214 <__adddf3>
 8005fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa f924 	bl	8000210 <__aeabi_dsub>
 8005fc8:	4632      	mov	r2, r6
 8005fca:	463b      	mov	r3, r7
 8005fcc:	f7fa f922 	bl	8000214 <__adddf3>
 8005fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fd8:	ed84 7b00 	vstr	d7, [r4]
 8005fdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fe0:	e755      	b.n	8005e8e <__kernel_rem_pio2+0x516>
 8005fe2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005fe6:	f7fa f915 	bl	8000214 <__adddf3>
 8005fea:	3d01      	subs	r5, #1
 8005fec:	e759      	b.n	8005ea2 <__kernel_rem_pio2+0x52a>
 8005fee:	9b01      	ldr	r3, [sp, #4]
 8005ff0:	9a01      	ldr	r2, [sp, #4]
 8005ff2:	601d      	str	r5, [r3, #0]
 8005ff4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005ff8:	605c      	str	r4, [r3, #4]
 8005ffa:	609f      	str	r7, [r3, #8]
 8005ffc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006000:	60d3      	str	r3, [r2, #12]
 8006002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006006:	6110      	str	r0, [r2, #16]
 8006008:	6153      	str	r3, [r2, #20]
 800600a:	e728      	b.n	8005e5e <__kernel_rem_pio2+0x4e6>
 800600c:	41700000 	.word	0x41700000
 8006010:	3e700000 	.word	0x3e700000
 8006014:	00000000 	.word	0x00000000

08006018 <__kernel_sin>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	ed2d 8b04 	vpush	{d8-d9}
 8006020:	eeb0 8a41 	vmov.f32	s16, s2
 8006024:	eef0 8a61 	vmov.f32	s17, s3
 8006028:	ec55 4b10 	vmov	r4, r5, d0
 800602c:	b083      	sub	sp, #12
 800602e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006032:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006036:	9001      	str	r0, [sp, #4]
 8006038:	da06      	bge.n	8006048 <__kernel_sin+0x30>
 800603a:	ee10 0a10 	vmov	r0, s0
 800603e:	4629      	mov	r1, r5
 8006040:	f7fa fd4e 	bl	8000ae0 <__aeabi_d2iz>
 8006044:	2800      	cmp	r0, #0
 8006046:	d051      	beq.n	80060ec <__kernel_sin+0xd4>
 8006048:	4622      	mov	r2, r4
 800604a:	462b      	mov	r3, r5
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa fa96 	bl	8000580 <__aeabi_dmul>
 8006054:	4682      	mov	sl, r0
 8006056:	468b      	mov	fp, r1
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa fa8e 	bl	8000580 <__aeabi_dmul>
 8006064:	a341      	add	r3, pc, #260	; (adr r3, 800616c <__kernel_sin+0x154>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	4680      	mov	r8, r0
 800606c:	4689      	mov	r9, r1
 800606e:	4650      	mov	r0, sl
 8006070:	4659      	mov	r1, fp
 8006072:	f7fa fa85 	bl	8000580 <__aeabi_dmul>
 8006076:	a33f      	add	r3, pc, #252	; (adr r3, 8006174 <__kernel_sin+0x15c>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f7fa f8c8 	bl	8000210 <__aeabi_dsub>
 8006080:	4652      	mov	r2, sl
 8006082:	465b      	mov	r3, fp
 8006084:	f7fa fa7c 	bl	8000580 <__aeabi_dmul>
 8006088:	a33c      	add	r3, pc, #240	; (adr r3, 800617c <__kernel_sin+0x164>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa f8c1 	bl	8000214 <__adddf3>
 8006092:	4652      	mov	r2, sl
 8006094:	465b      	mov	r3, fp
 8006096:	f7fa fa73 	bl	8000580 <__aeabi_dmul>
 800609a:	a33a      	add	r3, pc, #232	; (adr r3, 8006184 <__kernel_sin+0x16c>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f8b6 	bl	8000210 <__aeabi_dsub>
 80060a4:	4652      	mov	r2, sl
 80060a6:	465b      	mov	r3, fp
 80060a8:	f7fa fa6a 	bl	8000580 <__aeabi_dmul>
 80060ac:	a337      	add	r3, pc, #220	; (adr r3, 800618c <__kernel_sin+0x174>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f8af 	bl	8000214 <__adddf3>
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	4606      	mov	r6, r0
 80060ba:	460f      	mov	r7, r1
 80060bc:	b9eb      	cbnz	r3, 80060fa <__kernel_sin+0xe2>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4650      	mov	r0, sl
 80060c4:	4659      	mov	r1, fp
 80060c6:	f7fa fa5b 	bl	8000580 <__aeabi_dmul>
 80060ca:	a325      	add	r3, pc, #148	; (adr r3, 8006160 <__kernel_sin+0x148>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa f89e 	bl	8000210 <__aeabi_dsub>
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	f7fa fa52 	bl	8000580 <__aeabi_dmul>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4620      	mov	r0, r4
 80060e2:	4629      	mov	r1, r5
 80060e4:	f7fa f896 	bl	8000214 <__adddf3>
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	ec45 4b10 	vmov	d0, r4, r5
 80060f0:	b003      	add	sp, #12
 80060f2:	ecbd 8b04 	vpop	{d8-d9}
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <__kernel_sin+0x150>)
 80060fc:	ec51 0b18 	vmov	r0, r1, d8
 8006100:	2200      	movs	r2, #0
 8006102:	f7fa fa3d 	bl	8000580 <__aeabi_dmul>
 8006106:	4632      	mov	r2, r6
 8006108:	ec41 0b19 	vmov	d9, r0, r1
 800610c:	463b      	mov	r3, r7
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f7fa fa35 	bl	8000580 <__aeabi_dmul>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	ec51 0b19 	vmov	r0, r1, d9
 800611e:	f7fa f877 	bl	8000210 <__aeabi_dsub>
 8006122:	4652      	mov	r2, sl
 8006124:	465b      	mov	r3, fp
 8006126:	f7fa fa2b 	bl	8000580 <__aeabi_dmul>
 800612a:	ec53 2b18 	vmov	r2, r3, d8
 800612e:	f7fa f86f 	bl	8000210 <__aeabi_dsub>
 8006132:	a30b      	add	r3, pc, #44	; (adr r3, 8006160 <__kernel_sin+0x148>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	4606      	mov	r6, r0
 800613a:	460f      	mov	r7, r1
 800613c:	4640      	mov	r0, r8
 800613e:	4649      	mov	r1, r9
 8006140:	f7fa fa1e 	bl	8000580 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa f862 	bl	8000214 <__adddf3>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4620      	mov	r0, r4
 8006156:	4629      	mov	r1, r5
 8006158:	f7fa f85a 	bl	8000210 <__aeabi_dsub>
 800615c:	e7c4      	b.n	80060e8 <__kernel_sin+0xd0>
 800615e:	bf00      	nop
 8006160:	55555549 	.word	0x55555549
 8006164:	3fc55555 	.word	0x3fc55555
 8006168:	3fe00000 	.word	0x3fe00000
 800616c:	5acfd57c 	.word	0x5acfd57c
 8006170:	3de5d93a 	.word	0x3de5d93a
 8006174:	8a2b9ceb 	.word	0x8a2b9ceb
 8006178:	3e5ae5e6 	.word	0x3e5ae5e6
 800617c:	57b1fe7d 	.word	0x57b1fe7d
 8006180:	3ec71de3 	.word	0x3ec71de3
 8006184:	19c161d5 	.word	0x19c161d5
 8006188:	3f2a01a0 	.word	0x3f2a01a0
 800618c:	1110f8a6 	.word	0x1110f8a6
 8006190:	3f811111 	.word	0x3f811111
 8006194:	00000000 	.word	0x00000000

08006198 <atan>:
 8006198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	ec55 4b10 	vmov	r4, r5, d0
 80061a0:	4bc3      	ldr	r3, [pc, #780]	; (80064b0 <atan+0x318>)
 80061a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80061a6:	429e      	cmp	r6, r3
 80061a8:	46ab      	mov	fp, r5
 80061aa:	dd18      	ble.n	80061de <atan+0x46>
 80061ac:	4bc1      	ldr	r3, [pc, #772]	; (80064b4 <atan+0x31c>)
 80061ae:	429e      	cmp	r6, r3
 80061b0:	dc01      	bgt.n	80061b6 <atan+0x1e>
 80061b2:	d109      	bne.n	80061c8 <atan+0x30>
 80061b4:	b144      	cbz	r4, 80061c8 <atan+0x30>
 80061b6:	4622      	mov	r2, r4
 80061b8:	462b      	mov	r3, r5
 80061ba:	4620      	mov	r0, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	f7fa f829 	bl	8000214 <__adddf3>
 80061c2:	4604      	mov	r4, r0
 80061c4:	460d      	mov	r5, r1
 80061c6:	e006      	b.n	80061d6 <atan+0x3e>
 80061c8:	f1bb 0f00 	cmp.w	fp, #0
 80061cc:	f300 8131 	bgt.w	8006432 <atan+0x29a>
 80061d0:	a59b      	add	r5, pc, #620	; (adr r5, 8006440 <atan+0x2a8>)
 80061d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061d6:	ec45 4b10 	vmov	d0, r4, r5
 80061da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	4bb6      	ldr	r3, [pc, #728]	; (80064b8 <atan+0x320>)
 80061e0:	429e      	cmp	r6, r3
 80061e2:	dc14      	bgt.n	800620e <atan+0x76>
 80061e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80061e8:	429e      	cmp	r6, r3
 80061ea:	dc0d      	bgt.n	8006208 <atan+0x70>
 80061ec:	a396      	add	r3, pc, #600	; (adr r3, 8006448 <atan+0x2b0>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	ee10 0a10 	vmov	r0, s0
 80061f6:	4629      	mov	r1, r5
 80061f8:	f7fa f80c 	bl	8000214 <__adddf3>
 80061fc:	4baf      	ldr	r3, [pc, #700]	; (80064bc <atan+0x324>)
 80061fe:	2200      	movs	r2, #0
 8006200:	f7fa fc4e 	bl	8000aa0 <__aeabi_dcmpgt>
 8006204:	2800      	cmp	r0, #0
 8006206:	d1e6      	bne.n	80061d6 <atan+0x3e>
 8006208:	f04f 3aff 	mov.w	sl, #4294967295
 800620c:	e02b      	b.n	8006266 <atan+0xce>
 800620e:	f000 f963 	bl	80064d8 <fabs>
 8006212:	4bab      	ldr	r3, [pc, #684]	; (80064c0 <atan+0x328>)
 8006214:	429e      	cmp	r6, r3
 8006216:	ec55 4b10 	vmov	r4, r5, d0
 800621a:	f300 80bf 	bgt.w	800639c <atan+0x204>
 800621e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006222:	429e      	cmp	r6, r3
 8006224:	f300 80a0 	bgt.w	8006368 <atan+0x1d0>
 8006228:	ee10 2a10 	vmov	r2, s0
 800622c:	ee10 0a10 	vmov	r0, s0
 8006230:	462b      	mov	r3, r5
 8006232:	4629      	mov	r1, r5
 8006234:	f7f9 ffee 	bl	8000214 <__adddf3>
 8006238:	4ba0      	ldr	r3, [pc, #640]	; (80064bc <atan+0x324>)
 800623a:	2200      	movs	r2, #0
 800623c:	f7f9 ffe8 	bl	8000210 <__aeabi_dsub>
 8006240:	2200      	movs	r2, #0
 8006242:	4606      	mov	r6, r0
 8006244:	460f      	mov	r7, r1
 8006246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7f9 ffe1 	bl	8000214 <__adddf3>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4630      	mov	r0, r6
 8006258:	4639      	mov	r1, r7
 800625a:	f7fa fabb 	bl	80007d4 <__aeabi_ddiv>
 800625e:	f04f 0a00 	mov.w	sl, #0
 8006262:	4604      	mov	r4, r0
 8006264:	460d      	mov	r5, r1
 8006266:	4622      	mov	r2, r4
 8006268:	462b      	mov	r3, r5
 800626a:	4620      	mov	r0, r4
 800626c:	4629      	mov	r1, r5
 800626e:	f7fa f987 	bl	8000580 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4680      	mov	r8, r0
 8006278:	4689      	mov	r9, r1
 800627a:	f7fa f981 	bl	8000580 <__aeabi_dmul>
 800627e:	a374      	add	r3, pc, #464	; (adr r3, 8006450 <atan+0x2b8>)
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	f7fa f97a 	bl	8000580 <__aeabi_dmul>
 800628c:	a372      	add	r3, pc, #456	; (adr r3, 8006458 <atan+0x2c0>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7f9 ffbf 	bl	8000214 <__adddf3>
 8006296:	4632      	mov	r2, r6
 8006298:	463b      	mov	r3, r7
 800629a:	f7fa f971 	bl	8000580 <__aeabi_dmul>
 800629e:	a370      	add	r3, pc, #448	; (adr r3, 8006460 <atan+0x2c8>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7f9 ffb6 	bl	8000214 <__adddf3>
 80062a8:	4632      	mov	r2, r6
 80062aa:	463b      	mov	r3, r7
 80062ac:	f7fa f968 	bl	8000580 <__aeabi_dmul>
 80062b0:	a36d      	add	r3, pc, #436	; (adr r3, 8006468 <atan+0x2d0>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f7f9 ffad 	bl	8000214 <__adddf3>
 80062ba:	4632      	mov	r2, r6
 80062bc:	463b      	mov	r3, r7
 80062be:	f7fa f95f 	bl	8000580 <__aeabi_dmul>
 80062c2:	a36b      	add	r3, pc, #428	; (adr r3, 8006470 <atan+0x2d8>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7f9 ffa4 	bl	8000214 <__adddf3>
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	f7fa f956 	bl	8000580 <__aeabi_dmul>
 80062d4:	a368      	add	r3, pc, #416	; (adr r3, 8006478 <atan+0x2e0>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7f9 ff9b 	bl	8000214 <__adddf3>
 80062de:	4642      	mov	r2, r8
 80062e0:	464b      	mov	r3, r9
 80062e2:	f7fa f94d 	bl	8000580 <__aeabi_dmul>
 80062e6:	a366      	add	r3, pc, #408	; (adr r3, 8006480 <atan+0x2e8>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	4630      	mov	r0, r6
 80062f2:	4639      	mov	r1, r7
 80062f4:	f7fa f944 	bl	8000580 <__aeabi_dmul>
 80062f8:	a363      	add	r3, pc, #396	; (adr r3, 8006488 <atan+0x2f0>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7f9 ff87 	bl	8000210 <__aeabi_dsub>
 8006302:	4632      	mov	r2, r6
 8006304:	463b      	mov	r3, r7
 8006306:	f7fa f93b 	bl	8000580 <__aeabi_dmul>
 800630a:	a361      	add	r3, pc, #388	; (adr r3, 8006490 <atan+0x2f8>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ff7e 	bl	8000210 <__aeabi_dsub>
 8006314:	4632      	mov	r2, r6
 8006316:	463b      	mov	r3, r7
 8006318:	f7fa f932 	bl	8000580 <__aeabi_dmul>
 800631c:	a35e      	add	r3, pc, #376	; (adr r3, 8006498 <atan+0x300>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ff75 	bl	8000210 <__aeabi_dsub>
 8006326:	4632      	mov	r2, r6
 8006328:	463b      	mov	r3, r7
 800632a:	f7fa f929 	bl	8000580 <__aeabi_dmul>
 800632e:	a35c      	add	r3, pc, #368	; (adr r3, 80064a0 <atan+0x308>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7f9 ff6c 	bl	8000210 <__aeabi_dsub>
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	f7fa f920 	bl	8000580 <__aeabi_dmul>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7f9 ff64 	bl	8000214 <__adddf3>
 800634c:	4622      	mov	r2, r4
 800634e:	462b      	mov	r3, r5
 8006350:	f7fa f916 	bl	8000580 <__aeabi_dmul>
 8006354:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	d14b      	bne.n	80063f6 <atan+0x25e>
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	f7f9 ff55 	bl	8000210 <__aeabi_dsub>
 8006366:	e72c      	b.n	80061c2 <atan+0x2a>
 8006368:	ee10 0a10 	vmov	r0, s0
 800636c:	4b53      	ldr	r3, [pc, #332]	; (80064bc <atan+0x324>)
 800636e:	2200      	movs	r2, #0
 8006370:	4629      	mov	r1, r5
 8006372:	f7f9 ff4d 	bl	8000210 <__aeabi_dsub>
 8006376:	4b51      	ldr	r3, [pc, #324]	; (80064bc <atan+0x324>)
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	2200      	movs	r2, #0
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7f9 ff47 	bl	8000214 <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7fa fa21 	bl	80007d4 <__aeabi_ddiv>
 8006392:	f04f 0a01 	mov.w	sl, #1
 8006396:	4604      	mov	r4, r0
 8006398:	460d      	mov	r5, r1
 800639a:	e764      	b.n	8006266 <atan+0xce>
 800639c:	4b49      	ldr	r3, [pc, #292]	; (80064c4 <atan+0x32c>)
 800639e:	429e      	cmp	r6, r3
 80063a0:	da1d      	bge.n	80063de <atan+0x246>
 80063a2:	ee10 0a10 	vmov	r0, s0
 80063a6:	4b48      	ldr	r3, [pc, #288]	; (80064c8 <atan+0x330>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	4629      	mov	r1, r5
 80063ac:	f7f9 ff30 	bl	8000210 <__aeabi_dsub>
 80063b0:	4b45      	ldr	r3, [pc, #276]	; (80064c8 <atan+0x330>)
 80063b2:	4606      	mov	r6, r0
 80063b4:	460f      	mov	r7, r1
 80063b6:	2200      	movs	r2, #0
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7fa f8e0 	bl	8000580 <__aeabi_dmul>
 80063c0:	4b3e      	ldr	r3, [pc, #248]	; (80064bc <atan+0x324>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	f7f9 ff26 	bl	8000214 <__adddf3>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	f7fa fa00 	bl	80007d4 <__aeabi_ddiv>
 80063d4:	f04f 0a02 	mov.w	sl, #2
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	e743      	b.n	8006266 <atan+0xce>
 80063de:	462b      	mov	r3, r5
 80063e0:	ee10 2a10 	vmov	r2, s0
 80063e4:	4939      	ldr	r1, [pc, #228]	; (80064cc <atan+0x334>)
 80063e6:	2000      	movs	r0, #0
 80063e8:	f7fa f9f4 	bl	80007d4 <__aeabi_ddiv>
 80063ec:	f04f 0a03 	mov.w	sl, #3
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	e737      	b.n	8006266 <atan+0xce>
 80063f6:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <atan+0x338>)
 80063f8:	4e36      	ldr	r6, [pc, #216]	; (80064d4 <atan+0x33c>)
 80063fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80063fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006402:	e9da 2300 	ldrd	r2, r3, [sl]
 8006406:	f7f9 ff03 	bl	8000210 <__aeabi_dsub>
 800640a:	4622      	mov	r2, r4
 800640c:	462b      	mov	r3, r5
 800640e:	f7f9 feff 	bl	8000210 <__aeabi_dsub>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	e9d6 0100 	ldrd	r0, r1, [r6]
 800641a:	f7f9 fef9 	bl	8000210 <__aeabi_dsub>
 800641e:	f1bb 0f00 	cmp.w	fp, #0
 8006422:	4604      	mov	r4, r0
 8006424:	460d      	mov	r5, r1
 8006426:	f6bf aed6 	bge.w	80061d6 <atan+0x3e>
 800642a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800642e:	461d      	mov	r5, r3
 8006430:	e6d1      	b.n	80061d6 <atan+0x3e>
 8006432:	a51d      	add	r5, pc, #116	; (adr r5, 80064a8 <atan+0x310>)
 8006434:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006438:	e6cd      	b.n	80061d6 <atan+0x3e>
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w
 8006440:	54442d18 	.word	0x54442d18
 8006444:	bff921fb 	.word	0xbff921fb
 8006448:	8800759c 	.word	0x8800759c
 800644c:	7e37e43c 	.word	0x7e37e43c
 8006450:	e322da11 	.word	0xe322da11
 8006454:	3f90ad3a 	.word	0x3f90ad3a
 8006458:	24760deb 	.word	0x24760deb
 800645c:	3fa97b4b 	.word	0x3fa97b4b
 8006460:	a0d03d51 	.word	0xa0d03d51
 8006464:	3fb10d66 	.word	0x3fb10d66
 8006468:	c54c206e 	.word	0xc54c206e
 800646c:	3fb745cd 	.word	0x3fb745cd
 8006470:	920083ff 	.word	0x920083ff
 8006474:	3fc24924 	.word	0x3fc24924
 8006478:	5555550d 	.word	0x5555550d
 800647c:	3fd55555 	.word	0x3fd55555
 8006480:	2c6a6c2f 	.word	0x2c6a6c2f
 8006484:	bfa2b444 	.word	0xbfa2b444
 8006488:	52defd9a 	.word	0x52defd9a
 800648c:	3fadde2d 	.word	0x3fadde2d
 8006490:	af749a6d 	.word	0xaf749a6d
 8006494:	3fb3b0f2 	.word	0x3fb3b0f2
 8006498:	fe231671 	.word	0xfe231671
 800649c:	3fbc71c6 	.word	0x3fbc71c6
 80064a0:	9998ebc4 	.word	0x9998ebc4
 80064a4:	3fc99999 	.word	0x3fc99999
 80064a8:	54442d18 	.word	0x54442d18
 80064ac:	3ff921fb 	.word	0x3ff921fb
 80064b0:	440fffff 	.word	0x440fffff
 80064b4:	7ff00000 	.word	0x7ff00000
 80064b8:	3fdbffff 	.word	0x3fdbffff
 80064bc:	3ff00000 	.word	0x3ff00000
 80064c0:	3ff2ffff 	.word	0x3ff2ffff
 80064c4:	40038000 	.word	0x40038000
 80064c8:	3ff80000 	.word	0x3ff80000
 80064cc:	bff00000 	.word	0xbff00000
 80064d0:	080069f0 	.word	0x080069f0
 80064d4:	080069d0 	.word	0x080069d0

080064d8 <fabs>:
 80064d8:	ec51 0b10 	vmov	r0, r1, d0
 80064dc:	ee10 2a10 	vmov	r2, s0
 80064e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064e4:	ec43 2b10 	vmov	d0, r2, r3
 80064e8:	4770      	bx	lr
 80064ea:	0000      	movs	r0, r0
 80064ec:	0000      	movs	r0, r0
	...

080064f0 <floor>:
 80064f0:	ec51 0b10 	vmov	r0, r1, d0
 80064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80064fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006500:	2e13      	cmp	r6, #19
 8006502:	ee10 5a10 	vmov	r5, s0
 8006506:	ee10 8a10 	vmov	r8, s0
 800650a:	460c      	mov	r4, r1
 800650c:	dc32      	bgt.n	8006574 <floor+0x84>
 800650e:	2e00      	cmp	r6, #0
 8006510:	da14      	bge.n	800653c <floor+0x4c>
 8006512:	a333      	add	r3, pc, #204	; (adr r3, 80065e0 <floor+0xf0>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7f9 fe7c 	bl	8000214 <__adddf3>
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	f7fa fabe 	bl	8000aa0 <__aeabi_dcmpgt>
 8006524:	b138      	cbz	r0, 8006536 <floor+0x46>
 8006526:	2c00      	cmp	r4, #0
 8006528:	da57      	bge.n	80065da <floor+0xea>
 800652a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800652e:	431d      	orrs	r5, r3
 8006530:	d001      	beq.n	8006536 <floor+0x46>
 8006532:	4c2d      	ldr	r4, [pc, #180]	; (80065e8 <floor+0xf8>)
 8006534:	2500      	movs	r5, #0
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	e025      	b.n	8006588 <floor+0x98>
 800653c:	4f2b      	ldr	r7, [pc, #172]	; (80065ec <floor+0xfc>)
 800653e:	4137      	asrs	r7, r6
 8006540:	ea01 0307 	and.w	r3, r1, r7
 8006544:	4303      	orrs	r3, r0
 8006546:	d01f      	beq.n	8006588 <floor+0x98>
 8006548:	a325      	add	r3, pc, #148	; (adr r3, 80065e0 <floor+0xf0>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 fe61 	bl	8000214 <__adddf3>
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	f7fa faa3 	bl	8000aa0 <__aeabi_dcmpgt>
 800655a:	2800      	cmp	r0, #0
 800655c:	d0eb      	beq.n	8006536 <floor+0x46>
 800655e:	2c00      	cmp	r4, #0
 8006560:	bfbe      	ittt	lt
 8006562:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006566:	fa43 f606 	asrlt.w	r6, r3, r6
 800656a:	19a4      	addlt	r4, r4, r6
 800656c:	ea24 0407 	bic.w	r4, r4, r7
 8006570:	2500      	movs	r5, #0
 8006572:	e7e0      	b.n	8006536 <floor+0x46>
 8006574:	2e33      	cmp	r6, #51	; 0x33
 8006576:	dd0b      	ble.n	8006590 <floor+0xa0>
 8006578:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800657c:	d104      	bne.n	8006588 <floor+0x98>
 800657e:	ee10 2a10 	vmov	r2, s0
 8006582:	460b      	mov	r3, r1
 8006584:	f7f9 fe46 	bl	8000214 <__adddf3>
 8006588:	ec41 0b10 	vmov	d0, r0, r1
 800658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006590:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	fa23 f707 	lsr.w	r7, r3, r7
 800659c:	4207      	tst	r7, r0
 800659e:	d0f3      	beq.n	8006588 <floor+0x98>
 80065a0:	a30f      	add	r3, pc, #60	; (adr r3, 80065e0 <floor+0xf0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 fe35 	bl	8000214 <__adddf3>
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	f7fa fa77 	bl	8000aa0 <__aeabi_dcmpgt>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d0bf      	beq.n	8006536 <floor+0x46>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	da02      	bge.n	80065c0 <floor+0xd0>
 80065ba:	2e14      	cmp	r6, #20
 80065bc:	d103      	bne.n	80065c6 <floor+0xd6>
 80065be:	3401      	adds	r4, #1
 80065c0:	ea25 0507 	bic.w	r5, r5, r7
 80065c4:	e7b7      	b.n	8006536 <floor+0x46>
 80065c6:	2301      	movs	r3, #1
 80065c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80065cc:	fa03 f606 	lsl.w	r6, r3, r6
 80065d0:	4435      	add	r5, r6
 80065d2:	4545      	cmp	r5, r8
 80065d4:	bf38      	it	cc
 80065d6:	18e4      	addcc	r4, r4, r3
 80065d8:	e7f2      	b.n	80065c0 <floor+0xd0>
 80065da:	2500      	movs	r5, #0
 80065dc:	462c      	mov	r4, r5
 80065de:	e7aa      	b.n	8006536 <floor+0x46>
 80065e0:	8800759c 	.word	0x8800759c
 80065e4:	7e37e43c 	.word	0x7e37e43c
 80065e8:	bff00000 	.word	0xbff00000
 80065ec:	000fffff 	.word	0x000fffff

080065f0 <nan>:
 80065f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80065f8 <nan+0x8>
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	00000000 	.word	0x00000000
 80065fc:	7ff80000 	.word	0x7ff80000

08006600 <scalbn>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	ec55 4b10 	vmov	r4, r5, d0
 8006606:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800660a:	4606      	mov	r6, r0
 800660c:	462b      	mov	r3, r5
 800660e:	b99a      	cbnz	r2, 8006638 <scalbn+0x38>
 8006610:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006614:	4323      	orrs	r3, r4
 8006616:	d036      	beq.n	8006686 <scalbn+0x86>
 8006618:	4b39      	ldr	r3, [pc, #228]	; (8006700 <scalbn+0x100>)
 800661a:	4629      	mov	r1, r5
 800661c:	ee10 0a10 	vmov	r0, s0
 8006620:	2200      	movs	r2, #0
 8006622:	f7f9 ffad 	bl	8000580 <__aeabi_dmul>
 8006626:	4b37      	ldr	r3, [pc, #220]	; (8006704 <scalbn+0x104>)
 8006628:	429e      	cmp	r6, r3
 800662a:	4604      	mov	r4, r0
 800662c:	460d      	mov	r5, r1
 800662e:	da10      	bge.n	8006652 <scalbn+0x52>
 8006630:	a32b      	add	r3, pc, #172	; (adr r3, 80066e0 <scalbn+0xe0>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	e03a      	b.n	80066ae <scalbn+0xae>
 8006638:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800663c:	428a      	cmp	r2, r1
 800663e:	d10c      	bne.n	800665a <scalbn+0x5a>
 8006640:	ee10 2a10 	vmov	r2, s0
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7f9 fde4 	bl	8000214 <__adddf3>
 800664c:	4604      	mov	r4, r0
 800664e:	460d      	mov	r5, r1
 8006650:	e019      	b.n	8006686 <scalbn+0x86>
 8006652:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006656:	460b      	mov	r3, r1
 8006658:	3a36      	subs	r2, #54	; 0x36
 800665a:	4432      	add	r2, r6
 800665c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006660:	428a      	cmp	r2, r1
 8006662:	dd08      	ble.n	8006676 <scalbn+0x76>
 8006664:	2d00      	cmp	r5, #0
 8006666:	a120      	add	r1, pc, #128	; (adr r1, 80066e8 <scalbn+0xe8>)
 8006668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800666c:	da1c      	bge.n	80066a8 <scalbn+0xa8>
 800666e:	a120      	add	r1, pc, #128	; (adr r1, 80066f0 <scalbn+0xf0>)
 8006670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006674:	e018      	b.n	80066a8 <scalbn+0xa8>
 8006676:	2a00      	cmp	r2, #0
 8006678:	dd08      	ble.n	800668c <scalbn+0x8c>
 800667a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800667e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006682:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006686:	ec45 4b10 	vmov	d0, r4, r5
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006690:	da19      	bge.n	80066c6 <scalbn+0xc6>
 8006692:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006696:	429e      	cmp	r6, r3
 8006698:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800669c:	dd0a      	ble.n	80066b4 <scalbn+0xb4>
 800669e:	a112      	add	r1, pc, #72	; (adr r1, 80066e8 <scalbn+0xe8>)
 80066a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e2      	bne.n	800666e <scalbn+0x6e>
 80066a8:	a30f      	add	r3, pc, #60	; (adr r3, 80066e8 <scalbn+0xe8>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 ff67 	bl	8000580 <__aeabi_dmul>
 80066b2:	e7cb      	b.n	800664c <scalbn+0x4c>
 80066b4:	a10a      	add	r1, pc, #40	; (adr r1, 80066e0 <scalbn+0xe0>)
 80066b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0b8      	beq.n	8006630 <scalbn+0x30>
 80066be:	a10e      	add	r1, pc, #56	; (adr r1, 80066f8 <scalbn+0xf8>)
 80066c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c4:	e7b4      	b.n	8006630 <scalbn+0x30>
 80066c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066ca:	3236      	adds	r2, #54	; 0x36
 80066cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80066d4:	4620      	mov	r0, r4
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <scalbn+0x108>)
 80066d8:	2200      	movs	r2, #0
 80066da:	e7e8      	b.n	80066ae <scalbn+0xae>
 80066dc:	f3af 8000 	nop.w
 80066e0:	c2f8f359 	.word	0xc2f8f359
 80066e4:	01a56e1f 	.word	0x01a56e1f
 80066e8:	8800759c 	.word	0x8800759c
 80066ec:	7e37e43c 	.word	0x7e37e43c
 80066f0:	8800759c 	.word	0x8800759c
 80066f4:	fe37e43c 	.word	0xfe37e43c
 80066f8:	c2f8f359 	.word	0xc2f8f359
 80066fc:	81a56e1f 	.word	0x81a56e1f
 8006700:	43500000 	.word	0x43500000
 8006704:	ffff3cb0 	.word	0xffff3cb0
 8006708:	3c900000 	.word	0x3c900000

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000014 	.word	0x20000014

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 f82e 	bl	800678c <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08006a18 	.word	0x08006a18
 8006754:	08006a18 	.word	0x08006a18
 8006758:	08006a18 	.word	0x08006a18
 800675c:	08006a20 	.word	0x08006a20

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <memset>:
 800677c:	4402      	add	r2, r0
 800677e:	4603      	mov	r3, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	d100      	bne.n	8006786 <memset+0xa>
 8006784:	4770      	bx	lr
 8006786:	f803 1b01 	strb.w	r1, [r3], #1
 800678a:	e7f9      	b.n	8006780 <memset+0x4>

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr


Mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008430  08008430  00018430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a0  080086a0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a8  080086a8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080086b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200000f0  080087a4  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  080087a4  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172c3  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6b  00000000  00000000  000373e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00039e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025024  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152eb  00000000  00000000  00060dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5a4d  00000000  00000000  000760bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bb0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  0014bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000f0 	.word	0x200000f0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008414 	.word	0x08008414

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000f4 	.word	0x200000f4
 8000204:	08008414 	.word	0x08008414

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b974 	b.w	8000f10 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468e      	mov	lr, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14d      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	4694      	mov	ip, r2
 8000c52:	d969      	bls.n	8000d28 <__udivmoddi4+0xe8>
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	b152      	cbz	r2, 8000c70 <__udivmoddi4+0x30>
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	f1c2 0120 	rsb	r1, r2, #32
 8000c62:	fa20 f101 	lsr.w	r1, r0, r1
 8000c66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	0c21      	lsrs	r1, r4, #16
 8000c76:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7a:	fa1f f78c 	uxth.w	r7, ip
 8000c7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c86:	fb06 f107 	mul.w	r1, r6, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c96:	f080 811f 	bcs.w	8000ed8 <__udivmoddi4+0x298>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 811c 	bls.w	8000ed8 <__udivmoddi4+0x298>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb00 f707 	mul.w	r7, r0, r7
 8000cb8:	42a7      	cmp	r7, r4
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x92>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	f080 810a 	bcs.w	8000edc <__udivmoddi4+0x29c>
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	f240 8107 	bls.w	8000edc <__udivmoddi4+0x29c>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	1be4      	subs	r4, r4, r7
 8000cd8:	2600      	movs	r6, #0
 8000cda:	b11d      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cdc:	40d4      	lsrs	r4, r2
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0xc2>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80ef 	beq.w	8000ed2 <__udivmoddi4+0x292>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x160>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xd4>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80f9 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e0      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d26:	e7dd      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d28:	b902      	cbnz	r2, 8000d2c <__udivmoddi4+0xec>
 8000d2a:	deff      	udf	#255	; 0xff
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	f040 8092 	bne.w	8000e5a <__udivmoddi4+0x21a>
 8000d36:	eba1 010c 	sub.w	r1, r1, ip
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2601      	movs	r6, #1
 8000d44:	0c20      	lsrs	r0, r4, #16
 8000d46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	fb0e f003 	mul.w	r0, lr, r3
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x12c>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x12a>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	1a09      	subs	r1, r1, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1110 	mls	r1, r7, r0, r1
 8000d78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x156>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x154>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2ca>
 8000d94:	4608      	mov	r0, r1
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	e79c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000da0:	f1c6 0720 	rsb	r7, r6, #32
 8000da4:	40b3      	lsls	r3, r6
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa20 f407 	lsr.w	r4, r0, r7
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	431c      	orrs	r4, r3
 8000db8:	40f9      	lsrs	r1, r7
 8000dba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc6:	0c20      	lsrs	r0, r4, #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	fa02 f206 	lsl.w	r2, r2, r6
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2bc>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2bc>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e00:	fb09 1110 	mls	r1, r9, r0, r1
 8000e04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0c:	458e      	cmp	lr, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1e2>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1a:	458e      	cmp	lr, r1
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e26:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2a:	eba1 010e 	sub.w	r1, r1, lr
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46a6      	mov	lr, r4
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x212>
 8000e3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e42:	fa01 f707 	lsl.w	r7, r1, r7
 8000e46:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4a:	40f1      	lsrs	r1, r6
 8000e4c:	431f      	orrs	r7, r3
 8000e4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e78:	fb07 3610 	mls	r6, r7, r0, r3
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e82:	fb00 f60e 	mul.w	r6, r0, lr
 8000e86:	429e      	cmp	r6, r3
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x260>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1b9b      	subs	r3, r3, r6
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x28a>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0x104>
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e705      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6f8      	b.n	8000cd2 <__udivmoddi4+0x92>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f8>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f8>
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x28a>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1e2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b8>
 8000f00:	3b02      	subs	r3, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x12c>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e709      	b.n	8000d1e <__udivmoddi4+0xde>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x156>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000f14:	b084      	sub	sp, #16
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af02      	add	r7, sp, #8
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	f107 001c 	add.w	r0, r7, #28
 8000f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	f107 011c 	add.w	r1, r7, #28
 8000f2e:	2254      	movs	r2, #84	; 0x54
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 fa59 	bl	80083e8 <memcpy>
	device_address_ = device_address;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000f3c:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000f3e:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f42:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f44:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	f107 001c 	add.w	r0, r7, #28
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f002 fb7e 	bl	800365c <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f60:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f64:	f001 fbe2 	bl	800272c <HAL_Delay>
}
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f74:	b004      	add	sp, #16
 8000f76:	4770      	bx	lr

08000f78 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b099      	sub	sp, #100	; 0x64
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f80:	2320      	movs	r3, #32
 8000f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	1d18      	adds	r0, r3, #4
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	b299      	uxth	r1, r3
 8000f94:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f002 fb5d 	bl	800365c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	1d18      	adds	r0, r3, #4
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2308      	movs	r3, #8
 8000fba:	f002 fc4d 	bl	8003858 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fe6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000ffa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 800100e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
 8001026:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a08 	vstr	s15, [r7, #32]
 800103e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001056:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eddf 6a12 	vldr	s13, [pc, #72]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800106e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800107c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800107e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001084:	ee06 0a10 	vmov	s12, r0
 8001088:	ee06 1a90 	vmov	s13, r1
 800108c:	ee07 2a10 	vmov	s14, r2
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a46 	vmov.f32	s0, s12
 8001098:	eef0 0a66 	vmov.f32	s1, s13
 800109c:	eeb0 1a47 	vmov.f32	s2, s14
 80010a0:	eef0 1a67 	vmov.f32	s3, s15
 80010a4:	375c      	adds	r7, #92	; 0x5c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	46800000 	.word	0x46800000

080010b0 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b09a      	sub	sp, #104	; 0x68
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff ff5d 	bl	8000f78 <_ZN6BNO05514get_quaternionEv>
 80010be:	eeb0 6a40 	vmov.f32	s12, s0
 80010c2:	eef0 6a60 	vmov.f32	s13, s1
 80010c6:	eeb0 7a41 	vmov.f32	s14, s2
 80010ca:	eef0 7a61 	vmov.f32	s15, s3
 80010ce:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80010d2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80010d6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80010da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 80010de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff f9e7 	bl	80004d0 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	f7ff f885 	bl	8000214 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 8001112:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001116:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff f9cd 	bl	80004d0 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f7ff f86b 	bl	8000214 <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4960      	ldr	r1, [pc, #384]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 8001148:	f7ff f862 	bl	8000210 <__aeabi_dsub>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001154:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001158:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800115c:	f005 fbe4 	bl	8006928 <atan2>
 8001160:	ec53 2b10 	vmov	r2, r3, d0
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd02 	bl	8000b70 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001170:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001174:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001180:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	ee17 0a90 	vmov	r0, s15
 8001190:	f7ff f99e 	bl	80004d0 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	f7ff f83c 	bl	8000214 <__adddf3>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 80011a4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80011a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fc69 	bl	8000a8c <__aeabi_dcmpge>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00e      	beq.n	80011de <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 80011c0:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80011c4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80012c0 <_ZN6BNO0559get_eularEv+0x210>
 80011c8:	f005 fb10 	bl	80067ec <copysign>
 80011cc:	ec53 2b10 	vmov	r2, r3, d0
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fccc 	bl	8000b70 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	e00b      	b.n	80011f6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 80011de:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011e2:	f005 fb6d 	bl	80068c0 <asin>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcbf 	bl	8000b70 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001202:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800120a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f95b 	bl	80004d0 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	f7fe fff9 	bl	8000214 <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 800122a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800122e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800123a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800123e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f941 	bl	80004d0 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	f7fe ffdf 	bl	8000214 <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	491a      	ldr	r1, [pc, #104]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 8001260:	f7fe ffd6 	bl	8000210 <__aeabi_dsub>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800126c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001270:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001274:	f005 fb58 	bl	8006928 <atan2>
 8001278:	ec53 2b10 	vmov	r2, r3, d0
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc76 	bl	8000b70 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	623b      	str	r3, [r7, #32]

	return e;
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	f107 0218 	add.w	r2, r7, #24
 8001290:	ca07      	ldmia	r2, {r0, r1, r2}
 8001292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001296:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129c:	ee06 1a90 	vmov	s13, r1
 80012a0:	ee07 2a10 	vmov	s14, r2
 80012a4:	ee07 3a90 	vmov	s15, r3
}
 80012a8:	eeb0 0a66 	vmov.f32	s0, s13
 80012ac:	eef0 0a47 	vmov.f32	s1, s14
 80012b0:	eeb0 1a67 	vmov.f32	s2, s15
 80012b4:	3768      	adds	r7, #104	; 0x68
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	54411744 	.word	0x54411744
 80012c4:	3ff921fb 	.word	0x3ff921fb
 80012c8:	3ff00000 	.word	0x3ff00000

080012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>:
#include "m_transmit.h"

M_TRANSMIT::M_TRANSMIT(UART_HandleTypeDef* uart, uint8_t id){
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	4613      	mov	r3, r2
 80012d8:	71fb      	strb	r3, [r7, #7]
    UART=uart;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	605a      	str	r2, [r3, #4]
    ID=id;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	70da      	strb	r2, [r3, #3]
    send_ID = id + 190;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b42      	subs	r3, #66	; 0x42
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	721a      	strb	r2, [r3, #8]
}
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZN10M_TRANSMIT10get_travelEv>:

int M_TRANSMIT::get_travel(){
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(UART, &send_ID, 1, 100);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6858      	ldr	r0, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f103 0108 	add.w	r1, r3, #8
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	2201      	movs	r2, #1
 8001314:	f004 fbd7 	bl	8005ac6 <HAL_UART_Transmit>
    HAL_UART_Receive(UART, rcvBuf, 3, 100);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6858      	ldr	r0, [r3, #4]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2203      	movs	r2, #3
 8001322:	f004 fc62 	bl	8005bea <HAL_UART_Receive>

    int hyaku = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
    int travel = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

    for(int j = 1; j <3 ; j++){
 800132e:	2301      	movs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc13      	bgt.n	8001360 <_ZN10M_TRANSMIT10get_travelEv+0x62>
        travel = travel + (rcvBuf[j]*hyaku);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4413      	add	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        hyaku = hyaku*100;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
    for(int j = 1; j <3 ; j++){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e7e8      	b.n	8001332 <_ZN10M_TRANSMIT10get_travelEv+0x34>
    }
    travel-=5000;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8001366:	3b08      	subs	r3, #8
 8001368:	613b      	str	r3, [r7, #16]
    HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f001 f9de 	bl	800272c <HAL_Delay>

    return travel;
 8001370:	693b      	ldr	r3, [r7, #16]

 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <_Z9set_arrayiiihhh>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_array(int tx, int cx, int cz, uint8_t r, uint8_t h, uint8_t h2){
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	70fb      	strb	r3, [r7, #3]
	send_array[0]=220;
 800138a:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 800138c:	22dc      	movs	r2, #220	; 0xdc
 800138e:	701a      	strb	r2, [r3, #0]

	if(cx - tx > 48+r){
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad2      	subs	r2, r2, r3
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	3330      	adds	r3, #48	; 0x30
 800139a:	429a      	cmp	r2, r3
 800139c:	dd08      	ble.n	80013b0 <_Z9set_arrayiiihhh+0x34>
		cx = cx -((48*2) - (r*2)+1);
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	3301      	adds	r3, #1
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	e00d      	b.n	80013cc <_Z9set_arrayiiihhh+0x50>
	}else if(cx - tx < -(48-r)){
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3b30      	subs	r3, #48	; 0x30
 80013ba:	429a      	cmp	r2, r3
 80013bc:	da06      	bge.n	80013cc <_Z9set_arrayiiihhh+0x50>
		cx = cx + ((48*2) + (r*2)-1);
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	3330      	adds	r3, #48	; 0x30
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	4413      	add	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
	}

	c_x = cx;
 80013cc:	4a5a      	ldr	r2, [pc, #360]	; (8001538 <_Z9set_arrayiiihhh+0x1bc>)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	6013      	str	r3, [r2, #0]

	tx += 5000; cx += 5000; cz += 5000;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013d8:	3308      	adds	r3, #8
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013e2:	3308      	adds	r3, #8
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013ec:	3308      	adds	r3, #8
 80013ee:	607b      	str	r3, [r7, #4]
	uint8_t h_out = h/2.5;
 80013f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f859 	bl	80004ac <__aeabi_i2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b4f      	ldr	r3, [pc, #316]	; (800153c <_Z9set_arrayiiihhh+0x1c0>)
 8001400:	f7ff f9e8 	bl	80007d4 <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fb90 	bl	8000b30 <__aeabi_d2uiz>
 8001410:	4603      	mov	r3, r0
 8001412:	77fb      	strb	r3, [r7, #31]
	uint8_t h_out2 = h2/2.5;
 8001414:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f847 	bl	80004ac <__aeabi_i2d>
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <_Z9set_arrayiiihhh+0x1c0>)
 8001424:	f7ff f9d6 	bl	80007d4 <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fb7e 	bl	8000b30 <__aeabi_d2uiz>
 8001434:	4603      	mov	r3, r0
 8001436:	77bb      	strb	r3, [r7, #30]
	for(int i = 1; i <3 ;i++){
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b02      	cmp	r3, #2
 8001440:	dc1c      	bgt.n	800147c <_Z9set_arrayiiihhh+0x100>
		send_array[i] = tx%100;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <_Z9set_arrayiiihhh+0x1c4>)
 8001446:	fb82 1203 	smull	r1, r2, r2, r3
 800144a:	1151      	asrs	r1, r2, #5
 800144c:	17da      	asrs	r2, r3, #31
 800144e:	1a8a      	subs	r2, r1, r2
 8001450:	2164      	movs	r1, #100	; 0x64
 8001452:	fb01 f202 	mul.w	r2, r1, r2
 8001456:	1a9a      	subs	r2, r3, r2
 8001458:	b2d1      	uxtb	r1, r2
 800145a:	4a36      	ldr	r2, [pc, #216]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4413      	add	r3, r2
 8001460:	460a      	mov	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
		tx = (int)tx/100;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a36      	ldr	r2, [pc, #216]	; (8001540 <_Z9set_arrayiiihhh+0x1c4>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1152      	asrs	r2, r2, #5
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i <3 ;i++){
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3301      	adds	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	e7df      	b.n	800143c <_Z9set_arrayiiihhh+0xc0>
	}
	for(int i = 3; i <5 ;i++){
 800147c:	2303      	movs	r3, #3
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b04      	cmp	r3, #4
 8001484:	dc1c      	bgt.n	80014c0 <_Z9set_arrayiiihhh+0x144>
		send_array[i] = cx%100;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <_Z9set_arrayiiihhh+0x1c4>)
 800148a:	fb82 1203 	smull	r1, r2, r2, r3
 800148e:	1151      	asrs	r1, r2, #5
 8001490:	17da      	asrs	r2, r3, #31
 8001492:	1a8a      	subs	r2, r1, r2
 8001494:	2164      	movs	r1, #100	; 0x64
 8001496:	fb01 f202 	mul.w	r2, r1, r2
 800149a:	1a9a      	subs	r2, r3, r2
 800149c:	b2d1      	uxtb	r1, r2
 800149e:	4a25      	ldr	r2, [pc, #148]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	460a      	mov	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
		cx = (int)cx/100;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4a25      	ldr	r2, [pc, #148]	; (8001540 <_Z9set_arrayiiihhh+0x1c4>)
 80014ac:	fb82 1203 	smull	r1, r2, r2, r3
 80014b0:	1152      	asrs	r2, r2, #5
 80014b2:	17db      	asrs	r3, r3, #31
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	60bb      	str	r3, [r7, #8]
	for(int i = 3; i <5 ;i++){
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e7df      	b.n	8001480 <_Z9set_arrayiiihhh+0x104>
	}
	for(int i = 5; i <7 ;i++){
 80014c0:	2305      	movs	r3, #5
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	dc1c      	bgt.n	8001504 <_Z9set_arrayiiihhh+0x188>
		send_array[i] = cz%100;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <_Z9set_arrayiiihhh+0x1c4>)
 80014ce:	fb82 1203 	smull	r1, r2, r2, r3
 80014d2:	1151      	asrs	r1, r2, #5
 80014d4:	17da      	asrs	r2, r3, #31
 80014d6:	1a8a      	subs	r2, r1, r2
 80014d8:	2164      	movs	r1, #100	; 0x64
 80014da:	fb01 f202 	mul.w	r2, r1, r2
 80014de:	1a9a      	subs	r2, r3, r2
 80014e0:	b2d1      	uxtb	r1, r2
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
		cz = (int)cz/100;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_Z9set_arrayiiihhh+0x1c4>)
 80014f0:	fb82 1203 	smull	r1, r2, r2, r3
 80014f4:	1152      	asrs	r2, r2, #5
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	607b      	str	r3, [r7, #4]
	for(int i = 5; i <7 ;i++){
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	3301      	adds	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	e7df      	b.n	80014c4 <_Z9set_arrayiiihhh+0x148>
	}
	send_array[7] = r;
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	71d3      	strb	r3, [r2, #7]
	if(h_out > 100){h_out = 100;}
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d901      	bls.n	8001514 <_Z9set_arrayiiihhh+0x198>
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	77fb      	strb	r3, [r7, #31]
	send_array[8] = h_out;
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	7213      	strb	r3, [r2, #8]
	if(h_out2 > 100){h_out2 = 100;}
 800151a:	7fbb      	ldrb	r3, [r7, #30]
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d901      	bls.n	8001524 <_Z9set_arrayiiihhh+0x1a8>
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	77bb      	strb	r3, [r7, #30]
	send_array[9] = h_out2;
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <_Z9set_arrayiiihhh+0x1b8>)
 8001526:	7fbb      	ldrb	r3, [r7, #30]
 8001528:	7253      	strb	r3, [r2, #9]
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000034c 	.word	0x2000034c
 8001538:	20000400 	.word	0x20000400
 800153c:	40040000 	.word	0x40040000
 8001540:	51eb851f 	.word	0x51eb851f

08001544 <_Z21set_and_send_to_motorv>:
	}else{
		go_speed = 0;
	}
}

void set_and_send_to_motor(){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	motor_A.calcurate(rotate, go_degree, go_speed);
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <_Z21set_and_send_to_motorv+0xbc>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	b219      	sxth	r1, r3
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <_Z21set_and_send_to_motorv+0xc0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <_Z21set_and_send_to_motorv+0xc4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <_Z21set_and_send_to_motorv+0xc8>)
 8001566:	f000 fd33 	bl	8001fd0 <_ZN4MOVE9calcurateEsss>
	motor_A.set_array(Buf);
 800156a:	4929      	ldr	r1, [pc, #164]	; (8001610 <_Z21set_and_send_to_motorv+0xcc>)
 800156c:	4827      	ldr	r0, [pc, #156]	; (800160c <_Z21set_and_send_to_motorv+0xc8>)
 800156e:	f000 fde3 	bl	8002138 <_ZN4MOVE9set_arrayEPh>
	motor_B.calcurate(rotate, go_degree, go_speed);
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <_Z21set_and_send_to_motorv+0xbc>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157c:	ee17 3a90 	vmov	r3, s15
 8001580:	b219      	sxth	r1, r3
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <_Z21set_and_send_to_motorv+0xc0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <_Z21set_and_send_to_motorv+0xc4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4821      	ldr	r0, [pc, #132]	; (8001614 <_Z21set_and_send_to_motorv+0xd0>)
 8001590:	f000 fd1e 	bl	8001fd0 <_ZN4MOVE9calcurateEsss>
	motor_B.set_array(Buf);
 8001594:	491e      	ldr	r1, [pc, #120]	; (8001610 <_Z21set_and_send_to_motorv+0xcc>)
 8001596:	481f      	ldr	r0, [pc, #124]	; (8001614 <_Z21set_and_send_to_motorv+0xd0>)
 8001598:	f000 fdce 	bl	8002138 <_ZN4MOVE9set_arrayEPh>
	motor_C.calcurate(rotate, go_degree, go_speed);
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <_Z21set_and_send_to_motorv+0xbc>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a6:	ee17 3a90 	vmov	r3, s15
 80015aa:	b219      	sxth	r1, r3
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_Z21set_and_send_to_motorv+0xc0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_Z21set_and_send_to_motorv+0xc4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4817      	ldr	r0, [pc, #92]	; (8001618 <_Z21set_and_send_to_motorv+0xd4>)
 80015ba:	f000 fd09 	bl	8001fd0 <_ZN4MOVE9calcurateEsss>
	motor_C.set_array(Buf);
 80015be:	4914      	ldr	r1, [pc, #80]	; (8001610 <_Z21set_and_send_to_motorv+0xcc>)
 80015c0:	4815      	ldr	r0, [pc, #84]	; (8001618 <_Z21set_and_send_to_motorv+0xd4>)
 80015c2:	f000 fdb9 	bl	8002138 <_ZN4MOVE9set_arrayEPh>
	motor_D.calcurate(rotate, go_degree, go_speed);
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <_Z21set_and_send_to_motorv+0xbc>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d0:	ee17 3a90 	vmov	r3, s15
 80015d4:	b219      	sxth	r1, r3
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <_Z21set_and_send_to_motorv+0xc0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <_Z21set_and_send_to_motorv+0xc4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <_Z21set_and_send_to_motorv+0xd8>)
 80015e4:	f000 fcf4 	bl	8001fd0 <_ZN4MOVE9calcurateEsss>
	motor_D.set_array(Buf);
 80015e8:	4909      	ldr	r1, [pc, #36]	; (8001610 <_Z21set_and_send_to_motorv+0xcc>)
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <_Z21set_and_send_to_motorv+0xd8>)
 80015ec:	f000 fda4 	bl	8002138 <_ZN4MOVE9set_arrayEPh>
	HAL_UART_Transmit(&huart6, (uint8_t*)&Buf, 12, 5);
 80015f0:	2305      	movs	r3, #5
 80015f2:	220c      	movs	r2, #12
 80015f4:	4906      	ldr	r1, [pc, #24]	; (8001610 <_Z21set_and_send_to_motorv+0xcc>)
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <_Z21set_and_send_to_motorv+0xdc>)
 80015f8:	f004 fa65 	bl	8005ac6 <HAL_UART_Transmit>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000300 	.word	0x20000300
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004
 800160c:	20000304 	.word	0x20000304
 8001610:	20000334 	.word	0x20000334
 8001614:	20000310 	.word	0x20000310
 8001618:	2000031c 	.word	0x2000031c
 800161c:	20000328 	.word	0x20000328
 8001620:	20000230 	.word	0x20000230
 8001624:	00000000 	.word	0x00000000

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800162c:	ed2d 8b02 	vpush	{d8}
 8001630:	b0b3      	sub	sp, #204	; 0xcc
 8001632:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f001 f808 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f996 	bl	8001968 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f000 fb44 	bl	8001cc8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001640:	f000 fb22 	bl	8001c88 <_ZL11MX_DMA_Initv>
  MX_USART6_UART_Init();
 8001644:	f000 faf2 	bl	8001c2c <_ZL19MX_USART6_UART_Initv>
  MX_USART3_UART_Init();
 8001648:	f000 fac2 	bl	8001bd0 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 800164c:	f000 fa02 	bl	8001a54 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001650:	f000 fa34 	bl	8001abc <_ZL12MX_TIM3_Initv>
  MX_UART5_Init();
 8001654:	f000 fa8e 	bl	8001b74 <_ZL13MX_UART5_Initv>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8001658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165c:	f001 f866 	bl	800272c <HAL_Delay>

  while (!ready) {
 8001660:	4ba7      	ldr	r3, [pc, #668]	; (8001900 <main+0x2d8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d116      	bne.n	8001696 <main+0x6e>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	220a      	movs	r2, #10
 800166e:	2150      	movs	r1, #80	; 0x50
 8001670:	48a4      	ldr	r0, [pc, #656]	; (8001904 <main+0x2dc>)
 8001672:	f002 fb17 	bl	8003ca4 <HAL_I2C_IsDeviceReady>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <main+0x66>
      ready = 1;
 8001686:	4b9e      	ldr	r3, [pc, #632]	; (8001900 <main+0x2d8>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e7e8      	b.n	8001660 <main+0x38>
    } else {
      HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f001 f84c 	bl	800272c <HAL_Delay>
  while (!ready) {
 8001694:	e7e4      	b.n	8001660 <main+0x38>
    }
  }

  xf = -1*odom1.get_travel();
 8001696:	489c      	ldr	r0, [pc, #624]	; (8001908 <main+0x2e0>)
 8001698:	f7ff fe31 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 800169c:	4603      	mov	r3, r0
 800169e:	425b      	negs	r3, r3
 80016a0:	4a9a      	ldr	r2, [pc, #616]	; (800190c <main+0x2e4>)
 80016a2:	6013      	str	r3, [r2, #0]
  if(odom1.get_travel() <=-5000){Error = 1;}
 80016a4:	4898      	ldr	r0, [pc, #608]	; (8001908 <main+0x2e0>)
 80016a6:	f7ff fe2a 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a98      	ldr	r2, [pc, #608]	; (8001910 <main+0x2e8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	bfb4      	ite	lt
 80016b2:	2301      	movlt	r3, #1
 80016b4:	2300      	movge	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <main+0x9a>
 80016bc:	4b95      	ldr	r3, [pc, #596]	; (8001914 <main+0x2ec>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
  yf = -1*odom2.get_travel();
 80016c2:	4895      	ldr	r0, [pc, #596]	; (8001918 <main+0x2f0>)
 80016c4:	f7ff fe1b 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 80016c8:	4603      	mov	r3, r0
 80016ca:	425b      	negs	r3, r3
 80016cc:	4a93      	ldr	r2, [pc, #588]	; (800191c <main+0x2f4>)
 80016ce:	6013      	str	r3, [r2, #0]
  if(odom2.get_travel() <=-5000){Error = 1;}
 80016d0:	4891      	ldr	r0, [pc, #580]	; (8001918 <main+0x2f0>)
 80016d2:	f7ff fe14 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a8d      	ldr	r2, [pc, #564]	; (8001910 <main+0x2e8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	bfb4      	ite	lt
 80016de:	2301      	movlt	r3, #1
 80016e0:	2300      	movge	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <main+0xc6>
 80016e8:	4b8a      	ldr	r3, [pc, #552]	; (8001914 <main+0x2ec>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2104      	movs	r1, #4
 80016f2:	488b      	ldr	r0, [pc, #556]	; (8001920 <main+0x2f8>)
 80016f4:	f001 fe54 	bl	80033a0 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim3);
 80016f8:	488a      	ldr	r0, [pc, #552]	; (8001924 <main+0x2fc>)
 80016fa:	f003 fd65 	bl	80051c8 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart5, rxBuf, sizeof(rxBuf));
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	4989      	ldr	r1, [pc, #548]	; (8001928 <main+0x300>)
 8001702:	488a      	ldr	r0, [pc, #552]	; (800192c <main+0x304>)
 8001704:	f004 fb13 	bl	8005d2e <HAL_UART_Receive_DMA>

  goal_travel_x = coord_array[0][0];
 8001708:	4b89      	ldr	r3, [pc, #548]	; (8001930 <main+0x308>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a89      	ldr	r2, [pc, #548]	; (8001934 <main+0x30c>)
 800170e:	6013      	str	r3, [r2, #0]
  goal_travel_y = coord_array[0][1];
 8001710:	4b87      	ldr	r3, [pc, #540]	; (8001930 <main+0x308>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a88      	ldr	r2, [pc, #544]	; (8001938 <main+0x310>)
 8001716:	6013      	str	r3, [r2, #0]
  go_speed = coord_array[0][2];
 8001718:	4b85      	ldr	r3, [pc, #532]	; (8001930 <main+0x308>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a87      	ldr	r2, [pc, #540]	; (800193c <main+0x314>)
 800171e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  unsigned char address = 0x28;
 8001720:	2328      	movs	r3, #40	; 0x28
 8001722:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  BNO055 bno055(hi2c1,address);
 8001726:	4e77      	ldr	r6, [pc, #476]	; (8001904 <main+0x2dc>)
 8001728:	f107 081c 	add.w	r8, r7, #28
 800172c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001730:	9312      	str	r3, [sp, #72]	; 0x48
 8001732:	4668      	mov	r0, sp
 8001734:	f106 030c 	add.w	r3, r6, #12
 8001738:	2248      	movs	r2, #72	; 0x48
 800173a:	4619      	mov	r1, r3
 800173c:	f006 fe54 	bl	80083e8 <memcpy>
 8001740:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001744:	4640      	mov	r0, r8
 8001746:	f7ff fbe5 	bl	8000f14 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//odometery-----------------------------
    travel_x = -1*odom1.get_travel() - xf;
 800174a:	486f      	ldr	r0, [pc, #444]	; (8001908 <main+0x2e0>)
 800174c:	f7ff fdd7 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001750:	4603      	mov	r3, r0
 8001752:	425a      	negs	r2, r3
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <main+0x2e4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	4a79      	ldr	r2, [pc, #484]	; (8001940 <main+0x318>)
 800175c:	6013      	str	r3, [r2, #0]
    travel_y = -1*odom2.get_travel() - yf;
 800175e:	486e      	ldr	r0, [pc, #440]	; (8001918 <main+0x2f0>)
 8001760:	f7ff fdcd 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001764:	4603      	mov	r3, r0
 8001766:	425a      	negs	r2, r3
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <main+0x2f4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <main+0x31c>)
 8001770:	6013      	str	r3, [r2, #0]

    //bno055--------------------------------
    e = bno055.get_eular();
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fc9a 	bl	80010b0 <_ZN6BNO0559get_eularEv>
 800177c:	eef0 6a40 	vmov.f32	s13, s0
 8001780:	eeb0 7a60 	vmov.f32	s14, s1
 8001784:	eef0 7a41 	vmov.f32	s15, s2
 8001788:	edc7 6a00 	vstr	s13, [r7]
 800178c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001790:	edc7 7a02 	vstr	s15, [r7, #8]
    rotate = -1*(e.z/3.1415)*180;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe9a 	bl	80004d0 <__aeabi_f2d>
 800179c:	a354      	add	r3, pc, #336	; (adr r3, 80018f0 <main+0x2c8>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7ff f817 	bl	80007d4 <__aeabi_ddiv>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4614      	mov	r4, r2
 80017ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b64      	ldr	r3, [pc, #400]	; (8001948 <main+0x320>)
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fee1 	bl	8000580 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f9d3 	bl	8000b70 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a5f      	ldr	r2, [pc, #380]	; (800194c <main+0x324>)
 80017ce:	6013      	str	r3, [r2, #0]
    rotate = (int)rotate;
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <main+0x324>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	4b5b      	ldr	r3, [pc, #364]	; (800194c <main+0x324>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]

    //direction-----------------------------
    go_degree = atan2((double)goal_travel_x - (double)travel_x, (double)goal_travel_y -(double)(travel_y) )/ PI*180;
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <main+0x30c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fe5f 	bl	80004ac <__aeabi_i2d>
 80017ee:	4680      	mov	r8, r0
 80017f0:	4689      	mov	r9, r1
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <main+0x318>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe58 	bl	80004ac <__aeabi_i2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4640      	mov	r0, r8
 8001802:	4649      	mov	r1, r9
 8001804:	f7fe fd04 	bl	8000210 <__aeabi_dsub>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	ec43 2b18 	vmov	d8, r2, r3
 8001810:	4b49      	ldr	r3, [pc, #292]	; (8001938 <main+0x310>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe49 	bl	80004ac <__aeabi_i2d>
 800181a:	4680      	mov	r8, r0
 800181c:	4689      	mov	r9, r1
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <main+0x31c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe42 	bl	80004ac <__aeabi_i2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4640      	mov	r0, r8
 800182e:	4649      	mov	r1, r9
 8001830:	f7fe fcee 	bl	8000210 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b17 	vmov	d7, r2, r3
 800183c:	eeb0 1a47 	vmov.f32	s2, s14
 8001840:	eef0 1a67 	vmov.f32	s3, s15
 8001844:	eeb0 0a48 	vmov.f32	s0, s16
 8001848:	eef0 0a68 	vmov.f32	s1, s17
 800184c:	f005 f86c 	bl	8006928 <atan2>
 8001850:	ec51 0b10 	vmov	r0, r1, d0
 8001854:	a326      	add	r3, pc, #152	; (adr r3, 80018f0 <main+0x2c8>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe ffbb 	bl	80007d4 <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <main+0x320>)
 800186c:	f7fe fe88 	bl	8000580 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f932 	bl	8000ae0 <__aeabi_d2iz>
 800187c:	4603      	mov	r3, r0
 800187e:	4a34      	ldr	r2, [pc, #208]	; (8001950 <main+0x328>)
 8001880:	6013      	str	r3, [r2, #0]
		set_array((-1)*travel_x, (-1)*250, 24, 12+((-1)*travel_y*0.05), hue, (hue + 90)%250);
	}else{
		set_array((-1)*travel_x, (-1)*150, 24, 12+((-1)*travel_y*0.05), hue, (hue + 90)%250);
	}
	*/
    set_array((-1)*travel_x, (-1)*0, 24, 12+((-1)*travel_y*0.05), 0, 120);
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <main+0x318>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	425e      	negs	r6, r3
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <main+0x31c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	425b      	negs	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe0c 	bl	80004ac <__aeabi_i2d>
 8001894:	a318      	add	r3, pc, #96	; (adr r3, 80018f8 <main+0x2d0>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fe71 	bl	8000580 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <main+0x32c>)
 80018ac:	f7fe fcb2 	bl	8000214 <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f93a 	bl	8000b30 <__aeabi_d2uiz>
 80018bc:	4603      	mov	r3, r0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2278      	movs	r2, #120	; 0x78
 80018c2:	9201      	str	r2, [sp, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	2218      	movs	r2, #24
 80018ca:	2100      	movs	r1, #0
 80018cc:	4630      	mov	r0, r6
 80018ce:	f7ff fd55 	bl	800137c <_Z9set_arrayiiihhh>

	//send_data-----------------------------
//
	set_and_send_to_motor();
 80018d2:	f7ff fe37 	bl	8001544 <_Z21set_and_send_to_motorv>
	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 10, 100);
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	220a      	movs	r2, #10
 80018da:	491f      	ldr	r1, [pc, #124]	; (8001958 <main+0x330>)
 80018dc:	481f      	ldr	r0, [pc, #124]	; (800195c <main+0x334>)
 80018de:	f004 f8f2 	bl	8005ac6 <HAL_UART_Transmit>

	//Twelite
	check_TWEbuf();
 80018e2:	f000 fa6b 	bl	8001dbc <_Z12check_TWEbufv>

	//
	past_array_num = array_num;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <main+0x338>)
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <main+0x33c>)
 80018ec:	701a      	strb	r2, [r3, #0]
    travel_x = -1*odom1.get_travel() - xf;
 80018ee:	e72c      	b.n	800174a <main+0x122>
 80018f0:	c083126f 	.word	0xc083126f
 80018f4:	400921ca 	.word	0x400921ca
 80018f8:	9999999a 	.word	0x9999999a
 80018fc:	3fa99999 	.word	0x3fa99999
 8001900:	200002fc 	.word	0x200002fc
 8001904:	2000010c 	.word	0x2000010c
 8001908:	200002e4 	.word	0x200002e4
 800190c:	200002d8 	.word	0x200002d8
 8001910:	ffffec79 	.word	0xffffec79
 8001914:	20000348 	.word	0x20000348
 8001918:	200002f0 	.word	0x200002f0
 800191c:	200002e0 	.word	0x200002e0
 8001920:	40020400 	.word	0x40020400
 8001924:	20000160 	.word	0x20000160
 8001928:	2000035c 	.word	0x2000035c
 800192c:	200001a8 	.word	0x200001a8
 8001930:	20000008 	.word	0x20000008
 8001934:	20000340 	.word	0x20000340
 8001938:	20000344 	.word	0x20000344
 800193c:	20000004 	.word	0x20000004
 8001940:	200002d4 	.word	0x200002d4
 8001944:	200002dc 	.word	0x200002dc
 8001948:	40668000 	.word	0x40668000
 800194c:	20000300 	.word	0x20000300
 8001950:	20000000 	.word	0x20000000
 8001954:	40280000 	.word	0x40280000
 8001958:	2000034c 	.word	0x2000034c
 800195c:	200001ec 	.word	0x200001ec
 8001960:	200003fc 	.word	0x200003fc
 8001964:	200003fd 	.word	0x200003fd

08001968 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	2234      	movs	r2, #52	; 0x34
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fd44 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <_Z18SystemClock_Configv+0xe4>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <_Z18SystemClock_Configv+0xe4>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <_Z18SystemClock_Configv+0xe4>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019a8:	2300      	movs	r3, #0
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <_Z18SystemClock_Configv+0xe8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <_Z18SystemClock_Configv+0xe8>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <_Z18SystemClock_Configv+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019dc:	2310      	movs	r3, #16
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80019e4:	2306      	movs	r3, #6
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 f8f9 	bl	8004bec <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001a0a:	f000 fa79 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2302      	movs	r3, #2
 8001a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2101      	movs	r1, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fd97 	bl	800455c <HAL_RCC_ClockConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001a3e:	f000 fa5f 	bl	8001f00 <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	; 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <_ZL12MX_I2C1_Initv+0x60>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <_ZL12MX_I2C1_Initv+0x64>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a92:	f001 fc9f 	bl	80033d4 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001aa6:	f000 fa2b 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000010c 	.word	0x2000010c
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	000186a0 	.word	0x000186a0

08001abc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001ada:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <_ZL12MX_TIM3_Initv+0xb4>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001aec:	f242 7210 	movw	r2, #10000	; 0x2710
 8001af0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001afe:	481b      	ldr	r0, [pc, #108]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001b00:	f003 fb12 	bl	8005128 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001b14:	f000 f9f4 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4619      	mov	r1, r3
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001b26:	f003 fcc7 	bl	80054b8 <HAL_TIM_ConfigClockSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001b3a:	f000 f9e1 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <_ZL12MX_TIM3_Initv+0xb0>)
 8001b4c:	f003 fede 	bl	800590c <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001b60:	f000 f9ce 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000160 	.word	0x20000160
 8001b70:	40000400 	.word	0x40000400

08001b74 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_ZL13MX_UART5_Initv+0x58>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <_ZL13MX_UART5_Initv+0x54>)
 8001bac:	f003 ff3e 	bl	8005a2c <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8001bc0:	f000 f99e 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200001a8 	.word	0x200001a8
 8001bcc:	40005000 	.word	0x40005000

08001bd0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c08:	f003 ff10 	bl	8005a2c <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001c1c:	f000 f970 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200001ec 	.word	0x200001ec
 8001c28:	40004800 	.word	0x40004800

08001c2c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c32:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001c64:	f003 fee2 	bl	8005a2c <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001c78:	f000 f942 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000230 	.word	0x20000230
 8001c84:	40011400 	.word	0x40011400

08001c88 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_ZL11MX_DMA_Initv+0x3c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <_ZL11MX_DMA_Initv+0x3c>)
 8001c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <_ZL11MX_DMA_Initv+0x3c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	200b      	movs	r0, #11
 8001cb0:	f000 fe3b 	bl	800292a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cb4:	200b      	movs	r0, #11
 8001cb6:	f000 fe54 	bl	8002962 <HAL_NVIC_EnableIRQ>

}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2104      	movs	r1, #4
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <_ZL12MX_GPIO_Initv+0xec>)
 8001d54:	f001 fb24 	bl	80033a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4811      	ldr	r0, [pc, #68]	; (8001db4 <_ZL12MX_GPIO_Initv+0xec>)
 8001d70:	f001 f982 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8001d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	480a      	ldr	r0, [pc, #40]	; (8001db4 <_ZL12MX_GPIO_Initv+0xec>)
 8001d8a:	f001 f975 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : READ_Pin */
  GPIO_InitStruct.Pin = READ_Pin;
 8001d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(READ_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <_ZL12MX_GPIO_Initv+0xf0>)
 8001da4:	f001 f968 	bl	8003078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800

08001dbc <_Z12check_TWEbufv>:

/* USER CODE BEGIN 4 */

void check_TWEbuf(){
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
	index = huart5.hdmarx->Instance->NDTR;//バッファー残容量
 8001dc2:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <_Z12check_TWEbufv+0x110>)
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a41      	ldr	r2, [pc, #260]	; (8001ed0 <_Z12check_TWEbufv+0x114>)
 8001dcc:	6013      	str	r3, [r2, #0]
 	index = sizeof(rxBuf) - index;//最新の受信データ位置
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <_Z12check_TWEbufv+0x114>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <_Z12check_TWEbufv+0x114>)
 8001dd8:	6013      	str	r3, [r2, #0]

 	int check_buf_point = index - 10;
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <_Z12check_TWEbufv+0x114>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3b0a      	subs	r3, #10
 8001de0:	617b      	str	r3, [r7, #20]
 	if(check_buf_point < 0){check_buf_point = check_buf_point + sizeof(rxBuf);}
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da02      	bge.n	8001dee <_Z12check_TWEbufv+0x32>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3380      	adds	r3, #128	; 0x80
 8001dec:	617b      	str	r3, [r7, #20]
 	//読み込み済みデータ位置より最新の受信データ位置が前にある時(バッファー内で受信データが一周してた場合)値を補正

	while(1){
		readData = rxBuf[check_buf_point];
 8001dee:	4a39      	ldr	r2, [pc, #228]	; (8001ed4 <_Z12check_TWEbufv+0x118>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <_Z12check_TWEbufv+0x11c>)
 8001dfa:	601a      	str	r2, [r3, #0]
		if(readData == 250){
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <_Z12check_TWEbufv+0x11c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2bfa      	cmp	r3, #250	; 0xfa
 8001e02:	d11c      	bne.n	8001e3e <_Z12check_TWEbufv+0x82>
			for(int i=1; i<5; i++){
 8001e04:	2301      	movs	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	dc2b      	bgt.n	8001e66 <_Z12check_TWEbufv+0xaa>
				int read_buf_point = check_buf_point + i;
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
				if(read_buf_point>sizeof(rxBuf)-1){read_buf_point = read_buf_point - sizeof(rxBuf);}
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b7f      	cmp	r3, #127	; 0x7f
 8001e1a:	d902      	bls.n	8001e22 <_Z12check_TWEbufv+0x66>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b80      	subs	r3, #128	; 0x80
 8001e20:	60fb      	str	r3, [r7, #12]
				rcvBuf[i-1] = rxBuf[read_buf_point];
 8001e22:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <_Z12check_TWEbufv+0x118>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <_Z12check_TWEbufv+0x120>)
 8001e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i=1; i<5; i++){
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e7e4      	b.n	8001e08 <_Z12check_TWEbufv+0x4c>
			}
			break;
		}
		check_buf_point++;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
		if(check_buf_point>sizeof(rxBuf)-1){check_buf_point = check_buf_point - sizeof(rxBuf);}
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b7f      	cmp	r3, #127	; 0x7f
 8001e48:	d902      	bls.n	8001e50 <_Z12check_TWEbufv+0x94>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3b80      	subs	r3, #128	; 0x80
 8001e4e:	617b      	str	r3, [r7, #20]
		if(check_buf_point==index){break;}
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <_Z12check_TWEbufv+0x114>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_Z12check_TWEbufv+0xae>
	}
 8001e64:	e7c3      	b.n	8001dee <_Z12check_TWEbufv+0x32>
			break;
 8001e66:	bf00      	nop
 8001e68:	e000      	b.n	8001e6c <_Z12check_TWEbufv+0xb0>
		if(check_buf_point==index){break;}
 8001e6a:	bf00      	nop

 	mode = rcvBuf[0]-5;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <_Z12check_TWEbufv+0x120>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3b05      	subs	r3, #5
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <_Z12check_TWEbufv+0x124>)
 8001e74:	6013      	str	r3, [r2, #0]

	clock = 0;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <_Z12check_TWEbufv+0x128>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 	int hyaku = 1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
	for(int i = 2; i >=1 ; i--){
 8001e80:	2302      	movs	r3, #2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	dd16      	ble.n	8001eb8 <_Z12check_TWEbufv+0xfc>
		clock = clock + ((rcvBuf[i]-5)*hyaku);
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_Z12check_TWEbufv+0x120>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	3b05      	subs	r3, #5
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	fb03 f202 	mul.w	r2, r3, r2
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <_Z12check_TWEbufv+0x128>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <_Z12check_TWEbufv+0x128>)
 8001ea2:	6013      	str	r3, [r2, #0]
		hyaku = hyaku*240;
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	60bb      	str	r3, [r7, #8]
	for(int i = 2; i >=1 ; i--){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e7e5      	b.n	8001e84 <_Z12check_TWEbufv+0xc8>
	}

	hue = rcvBuf[3];
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_Z12check_TWEbufv+0x120>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <_Z12check_TWEbufv+0x12c>)
 8001ebe:	6013      	str	r3, [r2, #0]

}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	200001a8 	.word	0x200001a8
 8001ed0:	20000358 	.word	0x20000358
 8001ed4:	2000035c 	.word	0x2000035c
 8001ed8:	200003ec 	.word	0x200003ec
 8001edc:	200003dc 	.word	0x200003dc
 8001ee0:	200003f0 	.word	0x200003f0
 8001ee4:	200003f4 	.word	0x200003f4
 8001ee8:	200003f8 	.word	0x200003f8

08001eec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
//
//
//    	set_array(0, (-1)*-10, cz, 5, 200);
//    	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 9, 100);
//    }
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <Error_Handler+0x8>
	...

08001f0c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d124      	bne.n	8001f66 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d11f      	bne.n	8001f66 <_Z41__static_initialization_and_destruction_0ii+0x5a>
M_TRANSMIT odom1(&huart6,0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	4911      	ldr	r1, [pc, #68]	; (8001f70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001f2a:	4812      	ldr	r0, [pc, #72]	; (8001f74 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001f2c:	f7ff f9ce 	bl	80012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
M_TRANSMIT odom2(&huart6,1);
 8001f30:	2201      	movs	r2, #1
 8001f32:	490f      	ldr	r1, [pc, #60]	; (8001f70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001f36:	f7ff f9c9 	bl	80012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
MOVE motor_A(0, 45);
 8001f3a:	222d      	movs	r2, #45	; 0x2d
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001f40:	f000 f82c 	bl	8001f9c <_ZN4MOVEC1Ehs>
MOVE motor_B(1, 135);
 8001f44:	2287      	movs	r2, #135	; 0x87
 8001f46:	2101      	movs	r1, #1
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001f4a:	f000 f827 	bl	8001f9c <_ZN4MOVEC1Ehs>
MOVE motor_C(2, -135);
 8001f4e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8001f52:	2102      	movs	r1, #2
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001f56:	f000 f821 	bl	8001f9c <_ZN4MOVEC1Ehs>
MOVE motor_D(3, -45);
 8001f5a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8001f5e:	2103      	movs	r1, #3
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001f62:	f000 f81b 	bl	8001f9c <_ZN4MOVEC1Ehs>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000230 	.word	0x20000230
 8001f74:	200002e4 	.word	0x200002e4
 8001f78:	200002f0 	.word	0x200002f0
 8001f7c:	20000304 	.word	0x20000304
 8001f80:	20000310 	.word	0x20000310
 8001f84:	2000031c 	.word	0x2000031c
 8001f88:	20000328 	.word	0x20000328

08001f8c <_GLOBAL__sub_I_hi2c1>:
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff ffb9 	bl	8001f0c <_Z41__static_initialization_and_destruction_0ii>
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZN4MOVEC1Ehs>:

#include "move.h"

MOVE::MOVE(uint8_t motor_id, int16_t motor_degree){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	803b      	strh	r3, [r7, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <_ZN4MOVEC1Ehs+0x30>)
 8001fb0:	609a      	str	r2, [r3, #8]
    MOTOR_ID = motor_id;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	701a      	strb	r2, [r3, #0]
    MOTOR_DEGREE = motor_degree;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	883a      	ldrh	r2, [r7, #0]
 8001fbc:	805a      	strh	r2, [r3, #2]
}
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	3f333333 	.word	0x3f333333

08001fd0 <_ZN4MOVE9calcurateEsss>:

void MOVE::calcurate(int16_t gyro_degree, int16_t goal_degree, int16_t goal_speed){
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 8001fea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fee:	2bb4      	cmp	r3, #180	; 0xb4
 8001ff0:	dd05      	ble.n	8001ffe <_ZN4MOVE9calcurateEsss+0x2e>
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	817b      	strh	r3, [r7, #10]
 8001ffc:	e009      	b.n	8002012 <_ZN4MOVE9calcurateEsss+0x42>
    else if(gyro_degree <-180){gyro_degree += 360;}
 8001ffe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002002:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002006:	da04      	bge.n	8002012 <_ZN4MOVE9calcurateEsss+0x42>
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800200e:	b29b      	uxth	r3, r3
 8002010:	817b      	strh	r3, [r7, #10]

    if (gyro_degree > 0){
 8002012:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002016:	2b00      	cmp	r3, #0
 8002018:	dd14      	ble.n	8002044 <_ZN4MOVE9calcurateEsss+0x74>
        roll_speed = -10 + (-gyro_degree * 3);
 800201a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800201e:	461a      	mov	r2, r3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	3b0a      	subs	r3, #10
 8002026:	617b      	str	r3, [r7, #20]
        if (gyro_degree < 6){
 8002028:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800202c:	2b05      	cmp	r3, #5
 800202e:	dc01      	bgt.n	8002034 <_ZN4MOVE9calcurateEsss+0x64>
            roll_speed = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed < -150){
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f113 0f96 	cmn.w	r3, #150	; 0x96
 800203a:	da1d      	bge.n	8002078 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = -150;
 800203c:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e019      	b.n	8002078 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else if (gyro_degree < 0){
 8002044:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da13      	bge.n	8002074 <_ZN4MOVE9calcurateEsss+0xa4>
        roll_speed = 10 + (-gyro_degree * 3);
 800204c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002050:	461a      	mov	r2, r3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	330a      	adds	r3, #10
 8002058:	617b      	str	r3, [r7, #20]
        if (gyro_degree > -6){
 800205a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800205e:	f113 0f05 	cmn.w	r3, #5
 8002062:	db01      	blt.n	8002068 <_ZN4MOVE9calcurateEsss+0x98>
            roll_speed = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed > 150){
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b96      	cmp	r3, #150	; 0x96
 800206c:	dd04      	ble.n	8002078 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = 150;
 800206e:	2396      	movs	r3, #150	; 0x96
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e001      	b.n	8002078 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else{
        roll_speed = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
    }

    motor_speed = (int)goal_speed*sin((PI/180)*(goal_degree - MOTOR_DEGREE));
 8002078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa15 	bl	80004ac <__aeabi_i2d>
 8002082:	4604      	mov	r4, r0
 8002084:	460d      	mov	r5, r1
 8002086:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa0a 	bl	80004ac <__aeabi_i2d>
 8002098:	a325      	add	r3, pc, #148	; (adr r3, 8002130 <_ZN4MOVE9calcurateEsss+0x160>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fa6f 	bl	8000580 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	ec43 2b17 	vmov	d7, r2, r3
 80020aa:	eeb0 0a47 	vmov.f32	s0, s14
 80020ae:	eef0 0a67 	vmov.f32	s1, s15
 80020b2:	f004 fbad 	bl	8006810 <sin>
 80020b6:	ec53 2b10 	vmov	r2, r3, d0
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	f7fe fa5f 	bl	8000580 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fd09 	bl	8000ae0 <__aeabi_d2iz>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	809a      	strh	r2, [r3, #4]
    motor_speed = (int)(motor_speed * motor_rate) + (roll_speed * (1 - motor_rate));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edd3 7a02 	vldr	s15, [r3, #8]
 8002106:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800210a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800210e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211a:	ee17 3a90 	vmov	r3, s15
 800211e:	b21a      	sxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	809a      	strh	r2, [r3, #4]

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bdb0      	pop	{r4, r5, r7, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	171ea105 	.word	0x171ea105
 8002134:	3f91df24 	.word	0x3f91df24

08002138 <_ZN4MOVE9set_arrayEPh>:

void MOVE::set_array(uint8_t *send_array){
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
    send_array[MOTOR_ID*3]=250+MOTOR_ID;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	460b      	mov	r3, r1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	440b      	add	r3, r1
 8002152:	4619      	mov	r1, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	440b      	add	r3, r1
 8002158:	3a06      	subs	r2, #6
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]
    int16_t send_speed = motor_speed;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	889b      	ldrh	r3, [r3, #4]
 8002162:	81fb      	strh	r3, [r7, #14]
    send_speed += 5000;
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800216a:	3308      	adds	r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8002170:	2301      	movs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	dc26      	bgt.n	80021c8 <_ZN4MOVE9set_arrayEPh+0x90>
		send_array[MOTOR_ID*3+i] = send_speed%100;
 800217a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <_ZN4MOVE9set_arrayEPh+0x9c>)
 8002180:	fb82 1203 	smull	r1, r2, r2, r3
 8002184:	1151      	asrs	r1, r2, #5
 8002186:	17da      	asrs	r2, r3, #31
 8002188:	1a8a      	subs	r2, r1, r2
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	fb01 f202 	mul.w	r2, r1, r2
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	b219      	sxth	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	441a      	add	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2ca      	uxtb	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
		send_speed = (int)send_speed/100;
 80021ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <_ZN4MOVE9set_arrayEPh+0x9c>)
 80021b4:	fb82 1203 	smull	r1, r2, r2, r3
 80021b8:	1152      	asrs	r2, r2, #5
 80021ba:	17db      	asrs	r3, r3, #31
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	3301      	adds	r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e7d5      	b.n	8002174 <_ZN4MOVE9set_arrayEPh+0x3c>
	}
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	51eb851f 	.word	0x51eb851f

080021d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a0f      	ldr	r2, [pc, #60]	; (8002224 <HAL_MspInit+0x4c>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_MspInit+0x4c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_MspInit+0x4c>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_MspInit+0x4c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_I2C_MspInit+0x84>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12c      	bne.n	80022a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002266:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002278:	2304      	movs	r3, #4
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <HAL_I2C_MspInit+0x8c>)
 8002284:	f000 fef8 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 8002292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002296:	6413      	str	r3, [r2, #64]	; 0x40
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_I2C_MspInit+0x88>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40005400 	.word	0x40005400
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_TIM_Base_MspInit+0x48>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d115      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	201d      	movs	r0, #29
 80022ec:	f000 fb1d 	bl	800292a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022f0:	201d      	movs	r0, #29
 80022f2:	f000 fb36 	bl	8002962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40000400 	.word	0x40000400
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b090      	sub	sp, #64	; 0x40
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a82      	ldr	r2, [pc, #520]	; (8002530 <HAL_UART_MspInit+0x228>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d17b      	bne.n	8002422 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
 800232e:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a80      	ldr	r2, [pc, #512]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a79      	ldr	r2, [pc, #484]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b77      	ldr	r3, [pc, #476]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	4b73      	ldr	r3, [pc, #460]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a72      	ldr	r2, [pc, #456]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002390:	2308      	movs	r3, #8
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	4867      	ldr	r0, [pc, #412]	; (8002538 <HAL_UART_MspInit+0x230>)
 800239c:	f000 fe6c 	bl	8003078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023a0:	2304      	movs	r3, #4
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023b0:	2308      	movs	r3, #8
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b8:	4619      	mov	r1, r3
 80023ba:	4860      	ldr	r0, [pc, #384]	; (800253c <HAL_UART_MspInit+0x234>)
 80023bc:	f000 fe5c 	bl	8003078 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80023c0:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023c2:	4a60      	ldr	r2, [pc, #384]	; (8002544 <HAL_UART_MspInit+0x23c>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80023c6:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023cc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ce:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d4:	4b5a      	ldr	r3, [pc, #360]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	4b55      	ldr	r3, [pc, #340]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023f6:	4b52      	ldr	r3, [pc, #328]	; (8002540 <HAL_UART_MspInit+0x238>)
 80023f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023fc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023fe:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_UART_MspInit+0x238>)
 8002400:	2200      	movs	r2, #0
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002404:	484e      	ldr	r0, [pc, #312]	; (8002540 <HAL_UART_MspInit+0x238>)
 8002406:	f000 fac7 	bl	8002998 <HAL_DMA_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002410:	f7ff fd76 	bl	8001f00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_UART_MspInit+0x238>)
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
 800241a:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_UART_MspInit+0x238>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002420:	e081      	b.n	8002526 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_UART_MspInit+0x240>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d14b      	bne.n	80024c4 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a3f      	ldr	r2, [pc, #252]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
 800243c:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a31      	ldr	r2, [pc, #196]	; (8002534 <HAL_UART_MspInit+0x22c>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_UART_MspInit+0x22c>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002480:	2320      	movs	r3, #32
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002490:	2307      	movs	r3, #7
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	4827      	ldr	r0, [pc, #156]	; (8002538 <HAL_UART_MspInit+0x230>)
 800249c:	f000 fdec 	bl	8003078 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b2:	2307      	movs	r3, #7
 80024b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4823      	ldr	r0, [pc, #140]	; (800254c <HAL_UART_MspInit+0x244>)
 80024be:	f000 fddb 	bl	8003078 <HAL_GPIO_Init>
}
 80024c2:	e030      	b.n	8002526 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a21      	ldr	r2, [pc, #132]	; (8002550 <HAL_UART_MspInit+0x248>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12b      	bne.n	8002526 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_UART_MspInit+0x22c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_UART_MspInit+0x22c>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_UART_MspInit+0x22c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_UART_MspInit+0x22c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_UART_MspInit+0x22c>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_UART_MspInit+0x22c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002516:	2308      	movs	r3, #8
 8002518:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <HAL_UART_MspInit+0x230>)
 8002522:	f000 fda9 	bl	8003078 <HAL_GPIO_Init>
}
 8002526:	bf00      	nop
 8002528:	3740      	adds	r7, #64	; 0x40
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40005000 	.word	0x40005000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020800 	.word	0x40020800
 800253c:	40020c00 	.word	0x40020c00
 8002540:	20000274 	.word	0x20000274
 8002544:	40026010 	.word	0x40026010
 8002548:	40004800 	.word	0x40004800
 800254c:	40020400 	.word	0x40020400
 8002550:	40011400 	.word	0x40011400

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a0:	f000 f8a4 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <DMA1_Stream0_IRQHandler+0x10>)
 80025ae:	f000 faf9 	bl	8002ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000274 	.word	0x20000274

080025bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM3_IRQHandler+0x10>)
 80025c2:	f002 fe71 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000160 	.word	0x20000160

080025d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <SystemInit+0x20>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <SystemInit+0x20>)
 80025dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800262c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f8:	480d      	ldr	r0, [pc, #52]	; (8002630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025fa:	490e      	ldr	r1, [pc, #56]	; (8002634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002600:	e002      	b.n	8002608 <LoopCopyDataInit>

08002602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002606:	3304      	adds	r3, #4

08002608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800260c:	d3f9      	bcc.n	8002602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002610:	4c0b      	ldr	r4, [pc, #44]	; (8002640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002614:	e001      	b.n	800261a <LoopFillZerobss>

08002616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002618:	3204      	adds	r2, #4

0800261a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800261c:	d3fb      	bcc.n	8002616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800261e:	f7ff ffd7 	bl	80025d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002622:	f005 febd 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002626:	f7fe ffff 	bl	8001628 <main>
  bx  lr    
 800262a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002638:	080086b4 	.word	0x080086b4
  ldr r2, =_sbss
 800263c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002640:	20000408 	.word	0x20000408

08002644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_Init+0x40>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_Init+0x40>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_Init+0x40>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 f94f 	bl	8002914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	200f      	movs	r0, #15
 8002678:	f000 f808 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7ff fdac 	bl	80021d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x54>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x58>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f967 	bl	800297e <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f000 f92f 	bl	800292a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x5c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000080 	.word	0x20000080
 80026e4:	20000088 	.word	0x20000088
 80026e8:	20000084 	.word	0x20000084

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000088 	.word	0x20000088
 8002710:	20000404 	.word	0x20000404

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000404 	.word	0x20000404

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000088 	.word	0x20000088

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e0:	d301      	bcc.n	80028e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00f      	b.n	8002906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <SysTick_Config+0x40>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ee:	210f      	movs	r1, #15
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f7ff ff8e 	bl	8002814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <SysTick_Config+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SysTick_Config+0x40>)
 8002900:	2207      	movs	r2, #7
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	e000e010 	.word	0xe000e010

08002914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff29 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800293c:	f7ff ff3e 	bl	80027bc <__NVIC_GetPriorityGrouping>
 8002940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f7ff ff8e 	bl	8002868 <NVIC_EncodePriority>
 800294c:	4602      	mov	r2, r0
 800294e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff5d 	bl	8002814 <__NVIC_SetPriority>
}
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff31 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffa2 	bl	80028d0 <SysTick_Config>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff feb6 	bl	8002714 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e099      	b.n	8002ae8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d4:	e00f      	b.n	80029f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d6:	f7ff fe9d 	bl	8002714 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d908      	bls.n	80029f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2203      	movs	r2, #3
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e078      	b.n	8002ae8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e8      	bne.n	80029d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <HAL_DMA_Init+0x158>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d107      	bne.n	8002a60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d117      	bne.n	8002aba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00e      	beq.n	8002aba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fa6f 	bl	8002f80 <DMA_CheckFifoParam>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e016      	b.n	8002ae8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa26 	bl	8002f14 <DMA_CalcBaseAndBitshift>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	223f      	movs	r2, #63	; 0x3f
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	f010803f 	.word	0xf010803f

08002af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_DMA_Start_IT+0x26>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e040      	b.n	8002b9c <HAL_DMA_Start_IT+0xa8>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d12f      	bne.n	8002b8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f9b8 	bl	8002eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	223f      	movs	r2, #63	; 0x3f
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0216 	orr.w	r2, r2, #22
 8002b62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0208 	orr.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e005      	b.n	8002b9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb0:	4b8e      	ldr	r3, [pc, #568]	; (8002dec <HAL_DMA_IRQHandler+0x248>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a8e      	ldr	r2, [pc, #568]	; (8002df0 <HAL_DMA_IRQHandler+0x24c>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0a9b      	lsrs	r3, r3, #10
 8002bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2208      	movs	r2, #8
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01a      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	2201      	movs	r2, #1
 8002c34:	409a      	lsls	r2, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f043 0202 	orr.w	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d012      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	2204      	movs	r2, #4
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f043 0204 	orr.w	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2210      	movs	r2, #16
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d043      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d03c      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d018      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d024      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
 8002cd2:	e01f      	b.n	8002d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01b      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e016      	b.n	8002d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0208 	bic.w	r2, r2, #8
 8002d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	2220      	movs	r2, #32
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 808f 	beq.w	8002e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8087 	beq.w	8002e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	d136      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0216 	bic.w	r2, r2, #22
 8002d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x1da>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	223f      	movs	r2, #63	; 0x3f
 8002d94:	409a      	lsls	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d07e      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
        }
        return;
 8002dba:	e079      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01d      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10d      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d031      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
 8002de8:	e02c      	b.n	8002e44 <HAL_DMA_IRQHandler+0x2a0>
 8002dea:	bf00      	nop
 8002dec:	20000080 	.word	0x20000080
 8002df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d023      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
 8002e04:	e01e      	b.n	8002e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10f      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0210 	bic.w	r2, r2, #16
 8002e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d032      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d307      	bcc.n	8002e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f2      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x2cc>
 8002e8a:	e000      	b.n	8002e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
 8002eae:	e000      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eb0:	bf00      	nop
    }
  }
}
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d108      	bne.n	8002ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ef6:	e007      	b.n	8002f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	3b10      	subs	r3, #16
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <DMA_CalcBaseAndBitshift+0x64>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <DMA_CalcBaseAndBitshift+0x68>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d909      	bls.n	8002f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	1d1a      	adds	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
 8002f54:	e007      	b.n	8002f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	aaaaaaab 	.word	0xaaaaaaab
 8002f7c:	08008448 	.word	0x08008448

08002f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11f      	bne.n	8002fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d856      	bhi.n	800304e <DMA_CheckFifoParam+0xce>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <DMA_CheckFifoParam+0x28>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fcb 	.word	0x08002fcb
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	0800304f 	.word	0x0800304f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d046      	beq.n	8003052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc8:	e043      	b.n	8003052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd2:	d140      	bne.n	8003056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd8:	e03d      	b.n	8003056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe2:	d121      	bne.n	8003028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d837      	bhi.n	800305a <DMA_CheckFifoParam+0xda>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <DMA_CheckFifoParam+0x70>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003007 	.word	0x08003007
 8002ff8:	08003001 	.word	0x08003001
 8002ffc:	08003019 	.word	0x08003019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e030      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d025      	beq.n	800305e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003016:	e022      	b.n	800305e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003020:	d11f      	bne.n	8003062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003026:	e01c      	b.n	8003062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d903      	bls.n	8003036 <DMA_CheckFifoParam+0xb6>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d003      	beq.n	800303c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003034:	e018      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      break;
 800303a:	e015      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e00b      	b.n	8003066 <DMA_CheckFifoParam+0xe6>
      break;
 800304e:	bf00      	nop
 8003050:	e00a      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003052:	bf00      	nop
 8003054:	e008      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e006      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e004      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e002      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;   
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003066:	bf00      	nop
    }
  } 
  
  return status; 
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e165      	b.n	8003360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8154 	bne.w	800335a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d005      	beq.n	80030ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d130      	bne.n	800312c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 0201 	and.w	r2, r3, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d017      	beq.n	8003168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d123      	bne.n	80031bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	08da      	lsrs	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3208      	adds	r2, #8
 800317c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0203 	and.w	r2, r3, #3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80ae 	beq.w	800335a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a5c      	ldr	r2, [pc, #368]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b5a      	ldr	r3, [pc, #360]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321a:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_GPIO_Init+0x304>)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	220f      	movs	r2, #15
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4f      	ldr	r2, [pc, #316]	; (8003380 <HAL_GPIO_Init+0x308>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d025      	beq.n	8003292 <HAL_GPIO_Init+0x21a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <HAL_GPIO_Init+0x30c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <HAL_GPIO_Init+0x216>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4d      	ldr	r2, [pc, #308]	; (8003388 <HAL_GPIO_Init+0x310>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d019      	beq.n	800328a <HAL_GPIO_Init+0x212>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4c      	ldr	r2, [pc, #304]	; (800338c <HAL_GPIO_Init+0x314>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x20e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_GPIO_Init+0x318>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00d      	beq.n	8003282 <HAL_GPIO_Init+0x20a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_GPIO_Init+0x31c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <HAL_GPIO_Init+0x206>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a49      	ldr	r2, [pc, #292]	; (8003398 <HAL_GPIO_Init+0x320>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_GPIO_Init+0x202>
 8003276:	2306      	movs	r3, #6
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800327a:	2307      	movs	r3, #7
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a4:	4935      	ldr	r1, [pc, #212]	; (800337c <HAL_GPIO_Init+0x304>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b2:	4b3a      	ldr	r3, [pc, #232]	; (800339c <HAL_GPIO_Init+0x324>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d6:	4a31      	ldr	r2, [pc, #196]	; (800339c <HAL_GPIO_Init+0x324>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032dc:	4b2f      	ldr	r3, [pc, #188]	; (800339c <HAL_GPIO_Init+0x324>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_GPIO_Init+0x324>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003306:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_GPIO_Init+0x324>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_GPIO_Init+0x324>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_GPIO_Init+0x324>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <HAL_GPIO_Init+0x324>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae96 	bls.w	8003094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40013800 	.word	0x40013800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40020800 	.word	0x40020800
 800338c:	40020c00 	.word	0x40020c00
 8003390:	40021000 	.word	0x40021000
 8003394:	40021400 	.word	0x40021400
 8003398:	40021800 	.word	0x40021800
 800339c:	40013c00 	.word	0x40013c00

080033a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
 80033ac:	4613      	mov	r3, r2
 80033ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b0:	787b      	ldrb	r3, [r7, #1]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033bc:	e003      	b.n	80033c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	041a      	lsls	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e12b      	b.n	800363e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe ff14 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2224      	movs	r2, #36	; 0x24
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003438:	f001 f982 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 800343c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4a81      	ldr	r2, [pc, #516]	; (8003648 <HAL_I2C_Init+0x274>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d807      	bhi.n	8003458 <HAL_I2C_Init+0x84>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a80      	ldr	r2, [pc, #512]	; (800364c <HAL_I2C_Init+0x278>)
 800344c:	4293      	cmp	r3, r2
 800344e:	bf94      	ite	ls
 8003450:	2301      	movls	r3, #1
 8003452:	2300      	movhi	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e006      	b.n	8003466 <HAL_I2C_Init+0x92>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a7d      	ldr	r2, [pc, #500]	; (8003650 <HAL_I2C_Init+0x27c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	bf94      	ite	ls
 8003460:	2301      	movls	r3, #1
 8003462:	2300      	movhi	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0e7      	b.n	800363e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a78      	ldr	r2, [pc, #480]	; (8003654 <HAL_I2C_Init+0x280>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0c9b      	lsrs	r3, r3, #18
 8003478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a6a      	ldr	r2, [pc, #424]	; (8003648 <HAL_I2C_Init+0x274>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d802      	bhi.n	80034a8 <HAL_I2C_Init+0xd4>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	e009      	b.n	80034bc <HAL_I2C_Init+0xe8>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	4a69      	ldr	r2, [pc, #420]	; (8003658 <HAL_I2C_Init+0x284>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	3301      	adds	r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	495c      	ldr	r1, [pc, #368]	; (8003648 <HAL_I2C_Init+0x274>)
 80034d8:	428b      	cmp	r3, r1
 80034da:	d819      	bhi.n	8003510 <HAL_I2C_Init+0x13c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e59      	subs	r1, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034f0:	400b      	ands	r3, r1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_I2C_Init+0x138>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1e59      	subs	r1, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fbb1 f3f3 	udiv	r3, r1, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350a:	e051      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 800350c:	2304      	movs	r3, #4
 800350e:	e04f      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d111      	bne.n	800353c <HAL_I2C_Init+0x168>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e58      	subs	r0, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e012      	b.n	8003562 <HAL_I2C_Init+0x18e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	0099      	lsls	r1, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Init+0x196>
 8003566:	2301      	movs	r3, #1
 8003568:	e022      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10e      	bne.n	8003590 <HAL_I2C_Init+0x1bc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e58      	subs	r0, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	440b      	add	r3, r1
 8003580:	fbb0 f3f3 	udiv	r3, r0, r3
 8003584:	3301      	adds	r3, #1
 8003586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	0099      	lsls	r1, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6809      	ldr	r1, [r1, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6911      	ldr	r1, [r2, #16]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	000186a0 	.word	0x000186a0
 800364c:	001e847f 	.word	0x001e847f
 8003650:	003d08ff 	.word	0x003d08ff
 8003654:	431bde83 	.word	0x431bde83
 8003658:	10624dd3 	.word	0x10624dd3

0800365c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	460b      	mov	r3, r1
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	4613      	mov	r3, r2
 800366e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003670:	f7ff f850 	bl	8002714 <HAL_GetTick>
 8003674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	f040 80e0 	bne.w	8003844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2319      	movs	r3, #25
 800368a:	2201      	movs	r2, #1
 800368c:	4970      	ldr	r1, [pc, #448]	; (8003850 <HAL_I2C_Master_Transmit+0x1f4>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fd86 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	e0d3      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x50>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0cc      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d007      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2210      	movs	r2, #16
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a50      	ldr	r2, [pc, #320]	; (8003854 <HAL_I2C_Master_Transmit+0x1f8>)
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fbf0 	bl	8003f00 <I2C_MasterRequestWrite>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e08d      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003740:	e066      	b.n	8003810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fe00 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11b      	bne.n	80037e4 <HAL_I2C_Master_Transmit+0x188>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	6a39      	ldr	r1, [r7, #32]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fdf0 	bl	80043ce <I2C_WaitOnBTFFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e01a      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d194      	bne.n	8003742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	00100002 	.word	0x00100002
 8003854:	ffff0000 	.word	0xffff0000

08003858 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08c      	sub	sp, #48	; 0x30
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	461a      	mov	r2, r3
 8003864:	460b      	mov	r3, r1
 8003866:	817b      	strh	r3, [r7, #10]
 8003868:	4613      	mov	r3, r2
 800386a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7fe ff52 	bl	8002714 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	f040 820b 	bne.w	8003c96 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2319      	movs	r3, #25
 8003886:	2201      	movs	r2, #1
 8003888:	497c      	ldr	r1, [pc, #496]	; (8003a7c <HAL_I2C_Master_Receive+0x224>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fc88 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	e1fe      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2C_Master_Receive+0x50>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e1f7      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d007      	beq.n	80038ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2222      	movs	r2, #34	; 0x22
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2210      	movs	r2, #16
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <HAL_I2C_Master_Receive+0x228>)
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003910:	8979      	ldrh	r1, [r7, #10]
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fb74 	bl	8004004 <I2C_MasterRequestRead>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1b8      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d113      	bne.n	8003956 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e18c      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	2b01      	cmp	r3, #1
 800395c:	d11b      	bne.n	8003996 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e16c      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b02      	cmp	r3, #2
 800399c:	d11b      	bne.n	80039d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	e14c      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039fc:	e138      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	f200 80f1 	bhi.w	8003bea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d123      	bne.n	8003a58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fd1b 	bl	8004450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e139      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a56:	e10b      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d14e      	bne.n	8003afe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	2200      	movs	r2, #0
 8003a68:	4906      	ldr	r1, [pc, #24]	; (8003a84 <HAL_I2C_Master_Receive+0x22c>)
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb98 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e10e      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
 8003a7a:	bf00      	nop
 8003a7c:	00100002 	.word	0x00100002
 8003a80:	ffff0000 	.word	0xffff0000
 8003a84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003afc:	e0b8      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	2200      	movs	r2, #0
 8003b06:	4966      	ldr	r1, [pc, #408]	; (8003ca0 <HAL_I2C_Master_Receive+0x448>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fb49 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0bf      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	2200      	movs	r2, #0
 8003b62:	494f      	ldr	r1, [pc, #316]	; (8003ca0 <HAL_I2C_Master_Receive+0x448>)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fb1b 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e091      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be8:	e042      	b.n	8003c70 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fc2e 	bl	8004450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e04c      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d118      	bne.n	8003c70 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f47f aec2 	bne.w	80039fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e000      	b.n	8003c98 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	00010004 	.word	0x00010004

08003ca4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7fe fd2e 	bl	8002714 <HAL_GetTick>
 8003cb8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	f040 8111 	bne.w	8003eee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2319      	movs	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4988      	ldr	r1, [pc, #544]	; (8003ef8 <HAL_I2C_IsDeviceReady+0x254>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fa62 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e104      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2C_IsDeviceReady+0x50>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0fd      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d007      	beq.n	8003d1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2224      	movs	r2, #36	; 0x24
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a70      	ldr	r2, [pc, #448]	; (8003efc <HAL_I2C_IsDeviceReady+0x258>)
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa20 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00d      	beq.n	8003d82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	d103      	bne.n	8003d7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0b6      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fcbf 	bl	8002714 <HAL_GetTick>
 8003d96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dc6:	e025      	b.n	8003e14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dc8:	f7fe fca4 	bl	8002714 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <HAL_I2C_IsDeviceReady+0x13a>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	22a0      	movs	r2, #160	; 0xa0
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2ba0      	cmp	r3, #160	; 0xa0
 8003e1e:	d005      	beq.n	8003e2c <HAL_I2C_IsDeviceReady+0x188>
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <HAL_I2C_IsDeviceReady+0x188>
 8003e26:	7dbb      	ldrb	r3, [r7, #22]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0cd      	beq.n	8003dc8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d129      	bne.n	8003e96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2319      	movs	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4921      	ldr	r1, [pc, #132]	; (8003ef8 <HAL_I2C_IsDeviceReady+0x254>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f994 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e036      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e02c      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2319      	movs	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	490f      	ldr	r1, [pc, #60]	; (8003ef8 <HAL_I2C_IsDeviceReady+0x254>)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f970 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e012      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	f4ff af32 	bcc.w	8003d3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000

08003f00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d006      	beq.n	8003f2a <I2C_MasterRequestWrite+0x2a>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d003      	beq.n	8003f2a <I2C_MasterRequestWrite+0x2a>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f28:	d108      	bne.n	8003f3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e00b      	b.n	8003f54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	2b12      	cmp	r3, #18
 8003f42:	d107      	bne.n	8003f54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f91d 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7a:	d103      	bne.n	8003f84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e035      	b.n	8003ff4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f90:	d108      	bne.n	8003fa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fa0:	611a      	str	r2, [r3, #16]
 8003fa2:	e01b      	b.n	8003fdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fa4:	897b      	ldrh	r3, [r7, #10]
 8003fa6:	11db      	asrs	r3, r3, #7
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f063 030f 	orn	r3, r3, #15
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	490e      	ldr	r1, [pc, #56]	; (8003ffc <I2C_MasterRequestWrite+0xfc>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f943 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e010      	b.n	8003ff4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fd2:	897b      	ldrh	r3, [r7, #10]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4907      	ldr	r1, [pc, #28]	; (8004000 <I2C_MasterRequestWrite+0x100>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f933 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	00010008 	.word	0x00010008
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	460b      	mov	r3, r1
 8004012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004028:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d006      	beq.n	800403e <I2C_MasterRequestRead+0x3a>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d003      	beq.n	800403e <I2C_MasterRequestRead+0x3a>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800403c:	d108      	bne.n	8004050 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e00b      	b.n	8004068 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	2b11      	cmp	r3, #17
 8004056:	d107      	bne.n	8004068 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f893 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d103      	bne.n	8004098 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e079      	b.n	8004190 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a4:	d108      	bne.n	80040b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	e05f      	b.n	8004178 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040b8:	897b      	ldrh	r3, [r7, #10]
 80040ba:	11db      	asrs	r3, r3, #7
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0306 	and.w	r3, r3, #6
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f063 030f 	orn	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4930      	ldr	r1, [pc, #192]	; (8004198 <I2C_MasterRequestRead+0x194>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f8b9 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e054      	b.n	8004190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040e6:	897b      	ldrh	r3, [r7, #10]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4929      	ldr	r1, [pc, #164]	; (800419c <I2C_MasterRequestRead+0x198>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f8a9 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e044      	b.n	8004190 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f831 	bl	80041a0 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d103      	bne.n	800415c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e017      	b.n	8004190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004160:	897b      	ldrh	r3, [r7, #10]
 8004162:	11db      	asrs	r3, r3, #7
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f003 0306 	and.w	r3, r3, #6
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f063 030e 	orn	r3, r3, #14
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4907      	ldr	r1, [pc, #28]	; (800419c <I2C_MasterRequestRead+0x198>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f865 	bl	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	00010008 	.word	0x00010008
 800419c:	00010002 	.word	0x00010002

080041a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b0:	e025      	b.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d021      	beq.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fe faab 	bl	8002714 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d116      	bne.n	80041fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e023      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	e00c      	b.n	800423e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	43da      	mvns	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0b6      	beq.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800425c:	e051      	b.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426c:	d123      	bne.n	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004286:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e046      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042bc:	d021      	beq.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fa29 	bl	8002714 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e020      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10c      	bne.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e00b      	b.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	43da      	mvns	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d18d      	bne.n	800425e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004358:	e02d      	b.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f8ce 	bl	80044fc <I2C_IsAcknowledgeFailed>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e02d      	b.n	80043c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d021      	beq.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fe f9cf 	bl	8002714 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e007      	b.n	80043c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b80      	cmp	r3, #128	; 0x80
 80043c2:	d1ca      	bne.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043da:	e02d      	b.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f88d 	bl	80044fc <I2C_IsAcknowledgeFailed>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e02d      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d021      	beq.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f4:	f7fe f98e 	bl	8002714 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	d302      	bcc.n	800440a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d116      	bne.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d1ca      	bne.n	80043dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800445c:	e042      	b.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b10      	cmp	r3, #16
 800446a:	d119      	bne.n	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0210 	mvn.w	r2, #16
 8004474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e029      	b.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe f938 	bl	8002714 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e007      	b.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d1b5      	bne.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d11b      	bne.n	800454c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0cc      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d90c      	bls.n	8004598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a58      	ldr	r2, [pc, #352]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d119      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d003      	beq.n	800461a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	2b03      	cmp	r3, #3
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e067      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fe f862 	bl	8002714 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fe f85e 	bl	8002714 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e04f      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d20c      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f855 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490a      	ldr	r1, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd ffc2 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40023c00 	.word	0x40023c00
 8004718:	40023800 	.word	0x40023800
 800471c:	08008430 	.word	0x08008430
 8004720:	20000080 	.word	0x20000080
 8004724:	20000084 	.word	0x20000084

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000080 	.word	0x20000080

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	08008440 	.word	0x08008440

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	08008440 	.word	0x08008440

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b0ae      	sub	sp, #184	; 0xb8
 8004796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b6:	4bcb      	ldr	r3, [pc, #812]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	f200 8204 	bhi.w	8004bcc <HAL_RCC_GetSysClockFreq+0x43c>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	08004801 	.word	0x08004801
 80047d0:	08004bcd 	.word	0x08004bcd
 80047d4:	08004bcd 	.word	0x08004bcd
 80047d8:	08004bcd 	.word	0x08004bcd
 80047dc:	08004809 	.word	0x08004809
 80047e0:	08004bcd 	.word	0x08004bcd
 80047e4:	08004bcd 	.word	0x08004bcd
 80047e8:	08004bcd 	.word	0x08004bcd
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004bcd 	.word	0x08004bcd
 80047f4:	08004bcd 	.word	0x08004bcd
 80047f8:	08004bcd 	.word	0x08004bcd
 80047fc:	08004a01 	.word	0x08004a01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004800:	4bb9      	ldr	r3, [pc, #740]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004806:	e1e5      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004808:	4bb7      	ldr	r3, [pc, #732]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x358>)
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800480e:	e1e1      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004810:	4bb4      	ldr	r3, [pc, #720]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481c:	4bb1      	ldr	r3, [pc, #708]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d071      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004828:	4bae      	ldr	r3, [pc, #696]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004834:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800483c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800484a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800484e:	4622      	mov	r2, r4
 8004850:	462b      	mov	r3, r5
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	0159      	lsls	r1, r3, #5
 800485c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004860:	0150      	lsls	r0, r2, #5
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4621      	mov	r1, r4
 8004868:	1a51      	subs	r1, r2, r1
 800486a:	6439      	str	r1, [r7, #64]	; 0x40
 800486c:	4629      	mov	r1, r5
 800486e:	eb63 0301 	sbc.w	r3, r3, r1
 8004872:	647b      	str	r3, [r7, #68]	; 0x44
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004880:	4649      	mov	r1, r9
 8004882:	018b      	lsls	r3, r1, #6
 8004884:	4641      	mov	r1, r8
 8004886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800488a:	4641      	mov	r1, r8
 800488c:	018a      	lsls	r2, r1, #6
 800488e:	4641      	mov	r1, r8
 8004890:	1a51      	subs	r1, r2, r1
 8004892:	63b9      	str	r1, [r7, #56]	; 0x38
 8004894:	4649      	mov	r1, r9
 8004896:	eb63 0301 	sbc.w	r3, r3, r1
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80048a8:	4649      	mov	r1, r9
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4641      	mov	r1, r8
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4622      	mov	r2, r4
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	462b      	mov	r3, r5
 80048c4:	460a      	mov	r2, r1
 80048c6:	eb42 0303 	adc.w	r3, r2, r3
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048d8:	4629      	mov	r1, r5
 80048da:	028b      	lsls	r3, r1, #10
 80048dc:	4621      	mov	r1, r4
 80048de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e2:	4621      	mov	r1, r4
 80048e4:	028a      	lsls	r2, r1, #10
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048fc:	f7fc f988 	bl	8000c10 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800490a:	e067      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490c:	4b75      	ldr	r3, [pc, #468]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004918:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800491c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	67bb      	str	r3, [r7, #120]	; 0x78
 8004926:	2300      	movs	r3, #0
 8004928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800492a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	0159      	lsls	r1, r3, #5
 800493c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004940:	0150      	lsls	r0, r2, #5
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4621      	mov	r1, r4
 8004948:	1a51      	subs	r1, r2, r1
 800494a:	62b9      	str	r1, [r7, #40]	; 0x28
 800494c:	4629      	mov	r1, r5
 800494e:	eb63 0301 	sbc.w	r3, r3, r1
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004960:	4649      	mov	r1, r9
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	4641      	mov	r1, r8
 8004966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800496a:	4641      	mov	r1, r8
 800496c:	018a      	lsls	r2, r1, #6
 800496e:	4641      	mov	r1, r8
 8004970:	ebb2 0a01 	subs.w	sl, r2, r1
 8004974:	4649      	mov	r1, r9
 8004976:	eb63 0b01 	sbc.w	fp, r3, r1
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004986:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800498a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800498e:	4692      	mov	sl, r2
 8004990:	469b      	mov	fp, r3
 8004992:	4623      	mov	r3, r4
 8004994:	eb1a 0303 	adds.w	r3, sl, r3
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	462b      	mov	r3, r5
 800499c:	eb4b 0303 	adc.w	r3, fp, r3
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049ae:	4629      	mov	r1, r5
 80049b0:	028b      	lsls	r3, r1, #10
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b8:	4621      	mov	r1, r4
 80049ba:	028a      	lsls	r2, r1, #10
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049c4:	2200      	movs	r2, #0
 80049c6:	673b      	str	r3, [r7, #112]	; 0x70
 80049c8:	677a      	str	r2, [r7, #116]	; 0x74
 80049ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049ce:	f7fc f91f 	bl	8000c10 <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4613      	mov	r3, r2
 80049d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049dc:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80049ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049fe:	e0e9      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a00:	4b38      	ldr	r3, [pc, #224]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0c:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d069      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	099b      	lsrs	r3, r3, #6
 8004a1e:	2200      	movs	r2, #0
 8004a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	f04f 0000 	mov.w	r0, #0
 8004a3c:	f04f 0100 	mov.w	r1, #0
 8004a40:	0159      	lsls	r1, r3, #5
 8004a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a46:	0150      	lsls	r0, r2, #5
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	1a51      	subs	r1, r2, r1
 8004a50:	61b9      	str	r1, [r7, #24]
 8004a52:	4629      	mov	r1, r5
 8004a54:	eb63 0301 	sbc.w	r3, r3, r1
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a66:	4659      	mov	r1, fp
 8004a68:	018b      	lsls	r3, r1, #6
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a70:	4651      	mov	r1, sl
 8004a72:	018a      	lsls	r2, r1, #6
 8004a74:	4651      	mov	r1, sl
 8004a76:	ebb2 0801 	subs.w	r8, r2, r1
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	eb63 0901 	sbc.w	r9, r3, r1
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a94:	4690      	mov	r8, r2
 8004a96:	4699      	mov	r9, r3
 8004a98:	4623      	mov	r3, r4
 8004a9a:	eb18 0303 	adds.w	r3, r8, r3
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	eb49 0303 	adc.w	r3, r9, r3
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	028b      	lsls	r3, r1, #10
 8004ab8:	4621      	mov	r1, r4
 8004aba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004abe:	4621      	mov	r1, r4
 8004ac0:	028a      	lsls	r2, r1, #10
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aca:	2200      	movs	r2, #0
 8004acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ace:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ad0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ad4:	f7fc f89c 	bl	8000c10 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae2:	e063      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x41c>
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aec:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x454>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	2200      	movs	r2, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	4611      	mov	r1, r2
 8004af8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afc:	653b      	str	r3, [r7, #80]	; 0x50
 8004afe:	2300      	movs	r3, #0
 8004b00:	657b      	str	r3, [r7, #84]	; 0x54
 8004b02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	f04f 0000 	mov.w	r0, #0
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b18:	0150      	lsls	r0, r2, #5
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4641      	mov	r1, r8
 8004b20:	1a51      	subs	r1, r2, r1
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	4649      	mov	r1, r9
 8004b26:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b38:	4659      	mov	r1, fp
 8004b3a:	018b      	lsls	r3, r1, #6
 8004b3c:	4651      	mov	r1, sl
 8004b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b42:	4651      	mov	r1, sl
 8004b44:	018a      	lsls	r2, r1, #6
 8004b46:	4651      	mov	r1, sl
 8004b48:	1a54      	subs	r4, r2, r1
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	00eb      	lsls	r3, r5, #3
 8004b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b5e:	00e2      	lsls	r2, r4, #3
 8004b60:	4614      	mov	r4, r2
 8004b62:	461d      	mov	r5, r3
 8004b64:	4643      	mov	r3, r8
 8004b66:	18e3      	adds	r3, r4, r3
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb45 0303 	adc.w	r3, r5, r3
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b7e:	4629      	mov	r1, r5
 8004b80:	028b      	lsls	r3, r1, #10
 8004b82:	4621      	mov	r1, r4
 8004b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b88:	4621      	mov	r1, r4
 8004b8a:	028a      	lsls	r2, r1, #10
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b94:	2200      	movs	r2, #0
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b9e:	f7fc f837 	bl	8000c10 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x454>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0f1b      	lsrs	r3, r3, #28
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004bba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bca:	e003      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	37b8      	adds	r7, #184	; 0xb8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400

08004bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e28d      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8083 	beq.w	8004d12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c0c:	4b94      	ldr	r3, [pc, #592]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d019      	beq.n	8004c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c18:	4b91      	ldr	r3, [pc, #580]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c24:	4b8e      	ldr	r3, [pc, #568]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c30:	d00c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d112      	bne.n	8004c64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b84      	ldr	r3, [pc, #528]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <HAL_RCC_OscConfig+0x124>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d157      	bne.n	8004d10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e25a      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x90>
 8004c6e:	4b7c      	ldr	r3, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a7b      	ldr	r2, [pc, #492]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xcc>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xb4>
 8004c86:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a75      	ldr	r2, [pc, #468]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a72      	ldr	r2, [pc, #456]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xcc>
 8004ca0:	4b6f      	ldr	r3, [pc, #444]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6e      	ldr	r2, [pc, #440]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6b      	ldr	r2, [pc, #428]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fd28 	bl	8002714 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fd24 	bl	8002714 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e21f      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xdc>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fd14 	bl	8002714 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fd10 	bl	8002714 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e20b      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x104>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d06f      	beq.n	8004dfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d1e:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d017      	beq.n	8004d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d2a:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d105      	bne.n	8004d42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d11c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4e:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d116      	bne.n	8004d88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_RCC_OscConfig+0x186>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e1d3      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4937      	ldr	r1, [pc, #220]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d86:	e03a      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d020      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d90:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_RCC_OscConfig+0x278>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fd fcbd 	bl	8002714 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9e:	f7fd fcb9 	bl	8002714 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e1b4      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db0:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbc:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4925      	ldr	r1, [pc, #148]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]
 8004dd0:	e015      	b.n	8004dfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd2:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x278>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fd fc9c 	bl	8002714 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de0:	f7fd fc98 	bl	8002714 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e193      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d036      	beq.n	8004e78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fd fc7c 	bl	8002714 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e20:	f7fd fc78 	bl	8002714 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e173      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x234>
 8004e3e:	e01b      	b.n	8004e78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fd fc65 	bl	8002714 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4c:	e00e      	b.n	8004e6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e4e:	f7fd fc61 	bl	8002714 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d907      	bls.n	8004e6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e15c      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
 8004e60:	40023800 	.word	0x40023800
 8004e64:	42470000 	.word	0x42470000
 8004e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e6c:	4b8a      	ldr	r3, [pc, #552]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ea      	bne.n	8004e4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8097 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8a:	4b83      	ldr	r3, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10f      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	4b7f      	ldr	r3, [pc, #508]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb6:	4b79      	ldr	r3, [pc, #484]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d118      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec2:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a75      	ldr	r2, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ece:	f7fd fc21 	bl	8002714 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fd fc1d 	bl	8002714 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e118      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	; (800509c <HAL_RCC_OscConfig+0x4b0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d106      	bne.n	8004f0a <HAL_RCC_OscConfig+0x31e>
 8004efc:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	e01c      	b.n	8004f44 <HAL_RCC_OscConfig+0x358>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x340>
 8004f12:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a60      	ldr	r2, [pc, #384]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	4b5e      	ldr	r3, [pc, #376]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0x358>
 8004f2c:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a59      	ldr	r2, [pc, #356]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	4b57      	ldr	r3, [pc, #348]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a56      	ldr	r2, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	f023 0304 	bic.w	r3, r3, #4
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fd fbe2 	bl	8002714 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fd fbde 	bl	8002714 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e0d7      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ee      	beq.n	8004f54 <HAL_RCC_OscConfig+0x368>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fd fbcc 	bl	8002714 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f80:	f7fd fbc8 	bl	8002714 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0c1      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ee      	bne.n	8004f80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80ad 	beq.w	8005118 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d060      	beq.n	800508c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d145      	bne.n	800505e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <HAL_RCC_OscConfig+0x4b4>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fd fb9c 	bl	8002714 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fd fb98 	bl	8002714 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e093      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	019b      	lsls	r3, r3, #6
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	491b      	ldr	r1, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x4b4>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005036:	f7fd fb6d 	bl	8002714 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503e:	f7fd fb69 	bl	8002714 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e064      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x452>
 800505c:	e05c      	b.n	8005118 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <HAL_RCC_OscConfig+0x4b4>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fd fb56 	bl	8002714 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506c:	f7fd fb52 	bl	8002714 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e04d      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x480>
 800508a:	e045      	b.n	8005118 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e040      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
 8005098:	40023800 	.word	0x40023800
 800509c:	40007000 	.word	0x40007000
 80050a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <HAL_RCC_OscConfig+0x538>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d030      	beq.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d129      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d122      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050dc:	4293      	cmp	r3, r2
 80050de:	d119      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	3b01      	subs	r3, #1
 80050ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d10f      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d107      	bne.n	8005114 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800

08005128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e041      	b.n	80051be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fd f8b2 	bl	80022b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f000 fa96 	bl	8005698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d001      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e04e      	b.n	800527e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	; (800528c <HAL_TIM_Base_Start_IT+0xc4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_Base_Start_IT+0xc8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_TIM_Base_Start_IT+0xcc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIM_Base_Start_IT+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_Base_Start_IT+0xd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d111      	bne.n	800526c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d010      	beq.n	800527c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0201 	orr.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	e007      	b.n	800527c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0202 	mvn.w	r2, #2
 80052d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9b5 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9a7 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f9b8 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b04      	cmp	r3, #4
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b04      	cmp	r3, #4
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0204 	mvn.w	r2, #4
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f98b 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f97d 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f98e 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b08      	cmp	r3, #8
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0208 	mvn.w	r2, #8
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f961 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f953 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f964 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0210 	mvn.w	r2, #16
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2208      	movs	r2, #8
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f937 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f929 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f93a 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0201 	mvn.w	r2, #1
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fc fd60 	bl	8001eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d10e      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005444:	2b80      	cmp	r3, #128	; 0x80
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fae0 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d10e      	bne.n	8005484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d107      	bne.n	8005484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8ff 	bl	8005682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b20      	cmp	r3, #32
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b20      	cmp	r3, #32
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0220 	mvn.w	r2, #32
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 faaa 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_ConfigClockSource+0x1c>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0b4      	b.n	800563e <HAL_TIM_ConfigClockSource+0x186>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d03e      	beq.n	800558c <HAL_TIM_ConfigClockSource+0xd4>
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	f200 8087 	bhi.w	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	f000 8086 	beq.w	800562a <HAL_TIM_ConfigClockSource+0x172>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	d87f      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d01a      	beq.n	800555e <HAL_TIM_ConfigClockSource+0xa6>
 8005528:	2b70      	cmp	r3, #112	; 0x70
 800552a:	d87b      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d050      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005530:	2b60      	cmp	r3, #96	; 0x60
 8005532:	d877      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d03c      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005538:	2b50      	cmp	r3, #80	; 0x50
 800553a:	d873      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d058      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d86f      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d064      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15a>
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	d86b      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d060      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15a>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d867      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05c      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d05a      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15a>
 800555c:	e062      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6899      	ldr	r1, [r3, #8]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f000 f9ad 	bl	80058cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	609a      	str	r2, [r3, #8]
      break;
 800558a:	e04f      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f000 f996 	bl	80058cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ae:	609a      	str	r2, [r3, #8]
      break;
 80055b0:	e03c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 f90a 	bl	80057d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2150      	movs	r1, #80	; 0x50
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f963 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 80055d0:	e02c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 f929 	bl	8005836 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2160      	movs	r1, #96	; 0x60
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f953 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 80055f0:	e01c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 f8ea 	bl	80057d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f943 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8005610:	e00c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f000 f93a 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8005622:	e003      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      break;
 8005628:	e000      	b.n	800562c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800562a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a40      	ldr	r2, [pc, #256]	; (80057ac <TIM_Base_SetConfig+0x114>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d00f      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3d      	ldr	r2, [pc, #244]	; (80057b0 <TIM_Base_SetConfig+0x118>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00b      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3c      	ldr	r2, [pc, #240]	; (80057b4 <TIM_Base_SetConfig+0x11c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <TIM_Base_SetConfig+0x120>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3a      	ldr	r2, [pc, #232]	; (80057bc <TIM_Base_SetConfig+0x124>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d108      	bne.n	80056ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <TIM_Base_SetConfig+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d02b      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d027      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <TIM_Base_SetConfig+0x118>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d023      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2b      	ldr	r2, [pc, #172]	; (80057b4 <TIM_Base_SetConfig+0x11c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01f      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <TIM_Base_SetConfig+0x120>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01b      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a29      	ldr	r2, [pc, #164]	; (80057bc <TIM_Base_SetConfig+0x124>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d017      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <TIM_Base_SetConfig+0x128>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a27      	ldr	r2, [pc, #156]	; (80057c4 <TIM_Base_SetConfig+0x12c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00f      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <TIM_Base_SetConfig+0x130>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a25      	ldr	r2, [pc, #148]	; (80057cc <TIM_Base_SetConfig+0x134>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a24      	ldr	r2, [pc, #144]	; (80057d0 <TIM_Base_SetConfig+0x138>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a23      	ldr	r2, [pc, #140]	; (80057d4 <TIM_Base_SetConfig+0x13c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d108      	bne.n	800575c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <TIM_Base_SetConfig+0x114>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_Base_SetConfig+0xf8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a0c      	ldr	r2, [pc, #48]	; (80057bc <TIM_Base_SetConfig+0x124>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d103      	bne.n	8005798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	615a      	str	r2, [r3, #20]
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40010400 	.word	0x40010400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800
 80057cc:	40001800 	.word	0x40001800
 80057d0:	40001c00 	.word	0x40001c00
 80057d4:	40002000 	.word	0x40002000

080057d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 030a 	bic.w	r3, r3, #10
 8005814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005836:	b480      	push	{r7}
 8005838:	b087      	sub	sp, #28
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f023 0210 	bic.w	r2, r3, #16
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	031b      	lsls	r3, r3, #12
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005872:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f043 0307 	orr.w	r3, r3, #7
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	021a      	lsls	r2, r3, #8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005920:	2302      	movs	r3, #2
 8005922:	e05a      	b.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a21      	ldr	r2, [pc, #132]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005970:	d01d      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a17      	ldr	r2, [pc, #92]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10c      	bne.n	80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800
 80059f4:	40000c00 	.word	0x40000c00
 80059f8:	40010400 	.word	0x40010400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40001800 	.word	0x40001800

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e03f      	b.n	8005abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc fc58 	bl	8002308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fc47 	bl	8006304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b08a      	sub	sp, #40	; 0x28
 8005aca:	af02      	add	r7, sp, #8
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d17c      	bne.n	8005be0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Transmit+0x2c>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e075      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Transmit+0x3e>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e06e      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2221      	movs	r2, #33	; 0x21
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b1a:	f7fc fdfb 	bl	8002714 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b34:	d108      	bne.n	8005b48 <HAL_UART_Transmit+0x82>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e003      	b.n	8005b50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b58:	e02a      	b.n	8005bb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa34 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e036      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10b      	bne.n	8005b92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e007      	b.n	8005ba2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1cf      	bne.n	8005b5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2140      	movs	r1, #64	; 0x40
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fa04 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e006      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e000      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08a      	sub	sp, #40	; 0x28
 8005bee:	af02      	add	r7, sp, #8
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	f040 808c 	bne.w	8005d24 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_UART_Receive+0x2e>
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e084      	b.n	8005d26 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Receive+0x40>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e07d      	b.n	8005d26 <HAL_UART_Receive+0x13c>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2222      	movs	r2, #34	; 0x22
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c46:	f7fc fd65 	bl	8002714 <HAL_GetTick>
 8005c4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c60:	d108      	bne.n	8005c74 <HAL_UART_Receive+0x8a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c84:	e043      	b.n	8005d0e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2120      	movs	r1, #32
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f99e 	bl	8005fd2 <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e042      	b.n	8005d26 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	3302      	adds	r3, #2
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	e01f      	b.n	8005d00 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc8:	d007      	beq.n	8005cda <HAL_UART_Receive+0xf0>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_UART_Receive+0xfe>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e008      	b.n	8005cfa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1b6      	bne.n	8005c86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d11d      	bne.n	8005d84 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_UART_Receive_DMA+0x26>
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e016      	b.n	8005d86 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Receive_DMA+0x38>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e00f      	b.n	8005d86 <HAL_UART_Receive_DMA+0x58>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	461a      	mov	r2, r3
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f998 	bl	80060b0 <UART_Start_Receive_DMA>
 8005d80:	4603      	mov	r3, r0
 8005d82:	e000      	b.n	8005d86 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b09c      	sub	sp, #112	; 0x70
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d172      	bne.n	8005ee4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	2200      	movs	r2, #0
 8005e02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e26:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3314      	adds	r3, #20
 8005e56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e58:	647a      	str	r2, [r7, #68]	; 0x44
 8005e5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3314      	adds	r3, #20
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e82:	663b      	str	r3, [r7, #96]	; 0x60
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e5      	bne.n	8005e6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d119      	bne.n	8005ee4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ed0:	61fa      	str	r2, [r7, #28]
 8005ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d106      	bne.n	8005efa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ef4:	f7ff ff69 	bl	8005dca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ef8:	e002      	b.n	8005f00 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005efa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005efc:	f7ff ff47 	bl	8005d8e <HAL_UART_RxCpltCallback>
}
 8005f00:	bf00      	nop
 8005f02:	3770      	adds	r7, #112	; 0x70
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d108      	bne.n	8005f30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7ff ff4e 	bl	8005dca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f2e:	e002      	b.n	8005f36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff ff36 	bl	8005da2 <HAL_UART_RxHalfCpltCallback>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b80      	cmp	r3, #128	; 0x80
 8005f5c:	bf0c      	ite	eq
 8005f5e:	2301      	moveq	r3, #1
 8005f60:	2300      	movne	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b21      	cmp	r3, #33	; 0x21
 8005f70:	d108      	bne.n	8005f84 <UART_DMAError+0x46>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f7e:	68b8      	ldr	r0, [r7, #8]
 8005f80:	f000 f934 	bl	80061ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b40      	cmp	r3, #64	; 0x40
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b22      	cmp	r3, #34	; 0x22
 8005fa4:	d108      	bne.n	8005fb8 <UART_DMAError+0x7a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005fb2:	68b8      	ldr	r0, [r7, #8]
 8005fb4:	f000 f942 	bl	800623c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	f043 0210 	orr.w	r2, r3, #16
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fc4:	68b8      	ldr	r0, [r7, #8]
 8005fc6:	f7ff fef6 	bl	8005db6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b090      	sub	sp, #64	; 0x40
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe2:	e050      	b.n	8006086 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d04c      	beq.n	8006086 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ff2:	f7fc fb8f 	bl	8002714 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d241      	bcs.n	8006086 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006022:	637a      	str	r2, [r7, #52]	; 0x34
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	613b      	str	r3, [r7, #16]
   return(result);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f023 0301 	bic.w	r3, r3, #1
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006056:	623a      	str	r2, [r7, #32]
 8006058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	69f9      	ldr	r1, [r7, #28]
 800605c:	6a3a      	ldr	r2, [r7, #32]
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	61bb      	str	r3, [r7, #24]
   return(result);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e00f      	b.n	80060a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4013      	ands	r3, r2
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	bf0c      	ite	eq
 8006096:	2301      	moveq	r3, #1
 8006098:	2300      	movne	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d09f      	beq.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3740      	adds	r7, #64	; 0x40
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b098      	sub	sp, #96	; 0x60
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2222      	movs	r2, #34	; 0x22
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	4a40      	ldr	r2, [pc, #256]	; (80061e0 <UART_Start_Receive_DMA+0x130>)
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	4a3f      	ldr	r2, [pc, #252]	; (80061e4 <UART_Start_Receive_DMA+0x134>)
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	4a3e      	ldr	r2, [pc, #248]	; (80061e8 <UART_Start_Receive_DMA+0x138>)
 80060ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	2200      	movs	r2, #0
 80060f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	f7fc fcf0 	bl	8002af4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006114:	2300      	movs	r3, #0
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d019      	beq.n	800616e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006150:	65bb      	str	r3, [r7, #88]	; 0x58
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800615a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800615c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	657b      	str	r3, [r7, #84]	; 0x54
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800618e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	617b      	str	r3, [r7, #20]
   return(result);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3314      	adds	r3, #20
 80061c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061c2:	627a      	str	r2, [r7, #36]	; 0x24
 80061c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6a39      	ldr	r1, [r7, #32]
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3760      	adds	r7, #96	; 0x60
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	08005de3 	.word	0x08005de3
 80061e4:	08005f09 	.word	0x08005f09
 80061e8:	08005f3f 	.word	0x08005f3f

080061ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b089      	sub	sp, #36	; 0x24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	60bb      	str	r3, [r7, #8]
   return(result);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	61ba      	str	r2, [r7, #24]
 8006216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6979      	ldr	r1, [r7, #20]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	613b      	str	r3, [r7, #16]
   return(result);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006230:	bf00      	nop
 8006232:	3724      	adds	r7, #36	; 0x24
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b095      	sub	sp, #84	; 0x54
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006264:	643a      	str	r2, [r7, #64]	; 0x40
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800626a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	61fb      	str	r3, [r7, #28]
   return(result);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3314      	adds	r3, #20
 8006296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800629e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d119      	bne.n	80062e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	647b      	str	r3, [r7, #68]	; 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062d4:	61ba      	str	r2, [r7, #24]
 80062d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062f6:	bf00      	nop
 80062f8:	3754      	adds	r7, #84	; 0x54
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006308:	b0c0      	sub	sp, #256	; 0x100
 800630a:	af00      	add	r7, sp, #0
 800630c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	68d9      	ldr	r1, [r3, #12]
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	ea40 0301 	orr.w	r3, r0, r1
 800632c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	431a      	orrs	r2, r3
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	431a      	orrs	r2, r3
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800635c:	f021 010c 	bic.w	r1, r1, #12
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800636a:	430b      	orrs	r3, r1
 800636c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637e:	6999      	ldr	r1, [r3, #24]
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	ea40 0301 	orr.w	r3, r0, r1
 800638a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b8f      	ldr	r3, [pc, #572]	; (80065d0 <UART_SetConfig+0x2cc>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d005      	beq.n	80063a4 <UART_SetConfig+0xa0>
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <UART_SetConfig+0x2d0>)
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d104      	bne.n	80063ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063a4:	f7fe f9e0 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 80063a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80063ac:	e003      	b.n	80063b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ae:	f7fe f9c7 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 80063b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c0:	f040 810c 	bne.w	80065dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80063de:	415b      	adcs	r3, r3
 80063e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063e6:	4621      	mov	r1, r4
 80063e8:	eb12 0801 	adds.w	r8, r2, r1
 80063ec:	4629      	mov	r1, r5
 80063ee:	eb43 0901 	adc.w	r9, r3, r1
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006406:	4690      	mov	r8, r2
 8006408:	4699      	mov	r9, r3
 800640a:	4623      	mov	r3, r4
 800640c:	eb18 0303 	adds.w	r3, r8, r3
 8006410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006414:	462b      	mov	r3, r5
 8006416:	eb49 0303 	adc.w	r3, r9, r3
 800641a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800642a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800642e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006432:	460b      	mov	r3, r1
 8006434:	18db      	adds	r3, r3, r3
 8006436:	653b      	str	r3, [r7, #80]	; 0x50
 8006438:	4613      	mov	r3, r2
 800643a:	eb42 0303 	adc.w	r3, r2, r3
 800643e:	657b      	str	r3, [r7, #84]	; 0x54
 8006440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006448:	f7fa fbe2 	bl	8000c10 <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4b61      	ldr	r3, [pc, #388]	; (80065d8 <UART_SetConfig+0x2d4>)
 8006452:	fba3 2302 	umull	r2, r3, r3, r2
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	011c      	lsls	r4, r3, #4
 800645a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645e:	2200      	movs	r2, #0
 8006460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	1891      	adds	r1, r2, r2
 8006472:	64b9      	str	r1, [r7, #72]	; 0x48
 8006474:	415b      	adcs	r3, r3
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800647c:	4641      	mov	r1, r8
 800647e:	eb12 0a01 	adds.w	sl, r2, r1
 8006482:	4649      	mov	r1, r9
 8006484:	eb43 0b01 	adc.w	fp, r3, r1
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649c:	4692      	mov	sl, r2
 800649e:	469b      	mov	fp, r3
 80064a0:	4643      	mov	r3, r8
 80064a2:	eb1a 0303 	adds.w	r3, sl, r3
 80064a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064aa:	464b      	mov	r3, r9
 80064ac:	eb4b 0303 	adc.w	r3, fp, r3
 80064b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064c8:	460b      	mov	r3, r1
 80064ca:	18db      	adds	r3, r3, r3
 80064cc:	643b      	str	r3, [r7, #64]	; 0x40
 80064ce:	4613      	mov	r3, r2
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064de:	f7fa fb97 	bl	8000c10 <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	4b3b      	ldr	r3, [pc, #236]	; (80065d8 <UART_SetConfig+0x2d4>)
 80064ea:	fba3 2301 	umull	r2, r3, r3, r1
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	2264      	movs	r2, #100	; 0x64
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	1acb      	subs	r3, r1, r3
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064fe:	4b36      	ldr	r3, [pc, #216]	; (80065d8 <UART_SetConfig+0x2d4>)
 8006500:	fba3 2302 	umull	r2, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800650c:	441c      	add	r4, r3
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800651c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	1891      	adds	r1, r2, r2
 8006526:	63b9      	str	r1, [r7, #56]	; 0x38
 8006528:	415b      	adcs	r3, r3
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006530:	4641      	mov	r1, r8
 8006532:	1851      	adds	r1, r2, r1
 8006534:	6339      	str	r1, [r7, #48]	; 0x30
 8006536:	4649      	mov	r1, r9
 8006538:	414b      	adcs	r3, r1
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006548:	4659      	mov	r1, fp
 800654a:	00cb      	lsls	r3, r1, #3
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006552:	4651      	mov	r1, sl
 8006554:	00ca      	lsls	r2, r1, #3
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	4603      	mov	r3, r0
 800655c:	4642      	mov	r2, r8
 800655e:	189b      	adds	r3, r3, r2
 8006560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006564:	464b      	mov	r3, r9
 8006566:	460a      	mov	r2, r1
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800657c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006584:	460b      	mov	r3, r1
 8006586:	18db      	adds	r3, r3, r3
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
 800658a:	4613      	mov	r3, r2
 800658c:	eb42 0303 	adc.w	r3, r2, r3
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800659a:	f7fa fb39 	bl	8000c10 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <UART_SetConfig+0x2d4>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	2164      	movs	r1, #100	; 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	3332      	adds	r3, #50	; 0x32
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <UART_SetConfig+0x2d4>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f003 0207 	and.w	r2, r3, #7
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4422      	add	r2, r4
 80065ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065cc:	e105      	b.n	80067da <UART_SetConfig+0x4d6>
 80065ce:	bf00      	nop
 80065d0:	40011000 	.word	0x40011000
 80065d4:	40011400 	.word	0x40011400
 80065d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065ee:	4642      	mov	r2, r8
 80065f0:	464b      	mov	r3, r9
 80065f2:	1891      	adds	r1, r2, r2
 80065f4:	6239      	str	r1, [r7, #32]
 80065f6:	415b      	adcs	r3, r3
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
 80065fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065fe:	4641      	mov	r1, r8
 8006600:	1854      	adds	r4, r2, r1
 8006602:	4649      	mov	r1, r9
 8006604:	eb43 0501 	adc.w	r5, r3, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	00eb      	lsls	r3, r5, #3
 8006612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006616:	00e2      	lsls	r2, r4, #3
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	4643      	mov	r3, r8
 800661e:	18e3      	adds	r3, r4, r3
 8006620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006624:	464b      	mov	r3, r9
 8006626:	eb45 0303 	adc.w	r3, r5, r3
 800662a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800663a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800664a:	4629      	mov	r1, r5
 800664c:	008b      	lsls	r3, r1, #2
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006654:	4621      	mov	r1, r4
 8006656:	008a      	lsls	r2, r1, #2
 8006658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800665c:	f7fa fad8 	bl	8000c10 <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4b60      	ldr	r3, [pc, #384]	; (80067e8 <UART_SetConfig+0x4e4>)
 8006666:	fba3 2302 	umull	r2, r3, r3, r2
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	011c      	lsls	r4, r3, #4
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800667c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	1891      	adds	r1, r2, r2
 8006686:	61b9      	str	r1, [r7, #24]
 8006688:	415b      	adcs	r3, r3
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006690:	4641      	mov	r1, r8
 8006692:	1851      	adds	r1, r2, r1
 8006694:	6139      	str	r1, [r7, #16]
 8006696:	4649      	mov	r1, r9
 8006698:	414b      	adcs	r3, r1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066a8:	4659      	mov	r1, fp
 80066aa:	00cb      	lsls	r3, r1, #3
 80066ac:	4651      	mov	r1, sl
 80066ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b2:	4651      	mov	r1, sl
 80066b4:	00ca      	lsls	r2, r1, #3
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	4642      	mov	r2, r8
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066c4:	464b      	mov	r3, r9
 80066c6:	460a      	mov	r2, r1
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066e8:	4649      	mov	r1, r9
 80066ea:	008b      	lsls	r3, r1, #2
 80066ec:	4641      	mov	r1, r8
 80066ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f2:	4641      	mov	r1, r8
 80066f4:	008a      	lsls	r2, r1, #2
 80066f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066fa:	f7fa fa89 	bl	8000c10 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <UART_SetConfig+0x4e4>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	; 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	3332      	adds	r3, #50	; 0x32
 8006716:	4a34      	ldr	r2, [pc, #208]	; (80067e8 <UART_SetConfig+0x4e4>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006722:	441c      	add	r4, r3
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006728:	2200      	movs	r2, #0
 800672a:	673b      	str	r3, [r7, #112]	; 0x70
 800672c:	677a      	str	r2, [r7, #116]	; 0x74
 800672e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	1891      	adds	r1, r2, r2
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	415b      	adcs	r3, r3
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006742:	4641      	mov	r1, r8
 8006744:	1851      	adds	r1, r2, r1
 8006746:	6039      	str	r1, [r7, #0]
 8006748:	4649      	mov	r1, r9
 800674a:	414b      	adcs	r3, r1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800675a:	4659      	mov	r1, fp
 800675c:	00cb      	lsls	r3, r1, #3
 800675e:	4651      	mov	r1, sl
 8006760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006764:	4651      	mov	r1, sl
 8006766:	00ca      	lsls	r2, r1, #3
 8006768:	4610      	mov	r0, r2
 800676a:	4619      	mov	r1, r3
 800676c:	4603      	mov	r3, r0
 800676e:	4642      	mov	r2, r8
 8006770:	189b      	adds	r3, r3, r2
 8006772:	66bb      	str	r3, [r7, #104]	; 0x68
 8006774:	464b      	mov	r3, r9
 8006776:	460a      	mov	r2, r1
 8006778:	eb42 0303 	adc.w	r3, r2, r3
 800677c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	663b      	str	r3, [r7, #96]	; 0x60
 8006788:	667a      	str	r2, [r7, #100]	; 0x64
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006796:	4649      	mov	r1, r9
 8006798:	008b      	lsls	r3, r1, #2
 800679a:	4641      	mov	r1, r8
 800679c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a0:	4641      	mov	r1, r8
 80067a2:	008a      	lsls	r2, r1, #2
 80067a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067a8:	f7fa fa32 	bl	8000c10 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <UART_SetConfig+0x4e4>)
 80067b2:	fba3 1302 	umull	r1, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	2164      	movs	r1, #100	; 0x64
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	3332      	adds	r3, #50	; 0x32
 80067c4:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <UART_SetConfig+0x4e4>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4422      	add	r2, r4
 80067d8:	609a      	str	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067e0:	46bd      	mov	sp, r7
 80067e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e6:	bf00      	nop
 80067e8:	51eb851f 	.word	0x51eb851f

080067ec <copysign>:
 80067ec:	b082      	sub	sp, #8
 80067ee:	ec51 0b10 	vmov	r0, r1, d0
 80067f2:	ed8d 1b00 	vstr	d1, [sp]
 80067f6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80067fa:	9901      	ldr	r1, [sp, #4]
 80067fc:	ee10 2a10 	vmov	r2, s0
 8006800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006804:	ea40 0301 	orr.w	r3, r0, r1
 8006808:	ec43 2b10 	vmov	d0, r2, r3
 800680c:	b002      	add	sp, #8
 800680e:	4770      	bx	lr

08006810 <sin>:
 8006810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006812:	ec53 2b10 	vmov	r2, r3, d0
 8006816:	4828      	ldr	r0, [pc, #160]	; (80068b8 <sin+0xa8>)
 8006818:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800681c:	4281      	cmp	r1, r0
 800681e:	dc07      	bgt.n	8006830 <sin+0x20>
 8006820:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80068b0 <sin+0xa0>
 8006824:	2000      	movs	r0, #0
 8006826:	b005      	add	sp, #20
 8006828:	f85d eb04 	ldr.w	lr, [sp], #4
 800682c:	f001 ba38 	b.w	8007ca0 <__kernel_sin>
 8006830:	4822      	ldr	r0, [pc, #136]	; (80068bc <sin+0xac>)
 8006832:	4281      	cmp	r1, r0
 8006834:	dd09      	ble.n	800684a <sin+0x3a>
 8006836:	ee10 0a10 	vmov	r0, s0
 800683a:	4619      	mov	r1, r3
 800683c:	f7f9 fce8 	bl	8000210 <__aeabi_dsub>
 8006840:	ec41 0b10 	vmov	d0, r0, r1
 8006844:	b005      	add	sp, #20
 8006846:	f85d fb04 	ldr.w	pc, [sp], #4
 800684a:	4668      	mov	r0, sp
 800684c:	f000 fb50 	bl	8006ef0 <__ieee754_rem_pio2>
 8006850:	f000 0003 	and.w	r0, r0, #3
 8006854:	2801      	cmp	r0, #1
 8006856:	d00c      	beq.n	8006872 <sin+0x62>
 8006858:	2802      	cmp	r0, #2
 800685a:	d011      	beq.n	8006880 <sin+0x70>
 800685c:	b9f0      	cbnz	r0, 800689c <sin+0x8c>
 800685e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006862:	ed9d 0b00 	vldr	d0, [sp]
 8006866:	2001      	movs	r0, #1
 8006868:	f001 fa1a 	bl	8007ca0 <__kernel_sin>
 800686c:	ec51 0b10 	vmov	r0, r1, d0
 8006870:	e7e6      	b.n	8006840 <sin+0x30>
 8006872:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006876:	ed9d 0b00 	vldr	d0, [sp]
 800687a:	f000 fdf9 	bl	8007470 <__kernel_cos>
 800687e:	e7f5      	b.n	800686c <sin+0x5c>
 8006880:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006884:	ed9d 0b00 	vldr	d0, [sp]
 8006888:	2001      	movs	r0, #1
 800688a:	f001 fa09 	bl	8007ca0 <__kernel_sin>
 800688e:	ec53 2b10 	vmov	r2, r3, d0
 8006892:	ee10 0a10 	vmov	r0, s0
 8006896:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800689a:	e7d1      	b.n	8006840 <sin+0x30>
 800689c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068a0:	ed9d 0b00 	vldr	d0, [sp]
 80068a4:	f000 fde4 	bl	8007470 <__kernel_cos>
 80068a8:	e7f1      	b.n	800688e <sin+0x7e>
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w
	...
 80068b8:	3fe921fb 	.word	0x3fe921fb
 80068bc:	7fefffff 	.word	0x7fefffff

080068c0 <asin>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	ed2d 8b02 	vpush	{d8}
 80068c6:	ec55 4b10 	vmov	r4, r5, d0
 80068ca:	f000 f831 	bl	8006930 <__ieee754_asin>
 80068ce:	4622      	mov	r2, r4
 80068d0:	462b      	mov	r3, r5
 80068d2:	4620      	mov	r0, r4
 80068d4:	4629      	mov	r1, r5
 80068d6:	eeb0 8a40 	vmov.f32	s16, s0
 80068da:	eef0 8a60 	vmov.f32	s17, s1
 80068de:	f7fa f8e9 	bl	8000ab4 <__aeabi_dcmpun>
 80068e2:	b9a8      	cbnz	r0, 8006910 <asin+0x50>
 80068e4:	ec45 4b10 	vmov	d0, r4, r5
 80068e8:	f001 fc3a 	bl	8008160 <fabs>
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <asin+0x60>)
 80068ee:	ec51 0b10 	vmov	r0, r1, d0
 80068f2:	2200      	movs	r2, #0
 80068f4:	f7fa f8d4 	bl	8000aa0 <__aeabi_dcmpgt>
 80068f8:	b150      	cbz	r0, 8006910 <asin+0x50>
 80068fa:	f001 fd4b 	bl	8008394 <__errno>
 80068fe:	ecbd 8b02 	vpop	{d8}
 8006902:	2321      	movs	r3, #33	; 0x21
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800690a:	4806      	ldr	r0, [pc, #24]	; (8006924 <asin+0x64>)
 800690c:	f001 bcb4 	b.w	8008278 <nan>
 8006910:	eeb0 0a48 	vmov.f32	s0, s16
 8006914:	eef0 0a68 	vmov.f32	s1, s17
 8006918:	ecbd 8b02 	vpop	{d8}
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	3ff00000 	.word	0x3ff00000
 8006924:	08008450 	.word	0x08008450

08006928 <atan2>:
 8006928:	f000 ba16 	b.w	8006d58 <__ieee754_atan2>
 800692c:	0000      	movs	r0, r0
	...

08006930 <__ieee754_asin>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	ed2d 8b04 	vpush	{d8-d9}
 8006938:	ec55 4b10 	vmov	r4, r5, d0
 800693c:	4bcc      	ldr	r3, [pc, #816]	; (8006c70 <__ieee754_asin+0x340>)
 800693e:	b083      	sub	sp, #12
 8006940:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006944:	4598      	cmp	r8, r3
 8006946:	9501      	str	r5, [sp, #4]
 8006948:	dd35      	ble.n	80069b6 <__ieee754_asin+0x86>
 800694a:	ee10 3a10 	vmov	r3, s0
 800694e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006952:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006956:	ea58 0303 	orrs.w	r3, r8, r3
 800695a:	d117      	bne.n	800698c <__ieee754_asin+0x5c>
 800695c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006c08 <__ieee754_asin+0x2d8>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	ee10 0a10 	vmov	r0, s0
 8006966:	4629      	mov	r1, r5
 8006968:	f7f9 fe0a 	bl	8000580 <__aeabi_dmul>
 800696c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006c10 <__ieee754_asin+0x2e0>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f7f9 fe01 	bl	8000580 <__aeabi_dmul>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7f9 fc45 	bl	8000214 <__adddf3>
 800698a:	e00b      	b.n	80069a4 <__ieee754_asin+0x74>
 800698c:	ee10 2a10 	vmov	r2, s0
 8006990:	462b      	mov	r3, r5
 8006992:	ee10 0a10 	vmov	r0, s0
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fc3a 	bl	8000210 <__aeabi_dsub>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	f7f9 ff18 	bl	80007d4 <__aeabi_ddiv>
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	ec45 4b10 	vmov	d0, r4, r5
 80069ac:	b003      	add	sp, #12
 80069ae:	ecbd 8b04 	vpop	{d8-d9}
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	4baf      	ldr	r3, [pc, #700]	; (8006c74 <__ieee754_asin+0x344>)
 80069b8:	4598      	cmp	r8, r3
 80069ba:	dc11      	bgt.n	80069e0 <__ieee754_asin+0xb0>
 80069bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80069c0:	f280 80ae 	bge.w	8006b20 <__ieee754_asin+0x1f0>
 80069c4:	a394      	add	r3, pc, #592	; (adr r3, 8006c18 <__ieee754_asin+0x2e8>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	ee10 0a10 	vmov	r0, s0
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7f9 fc20 	bl	8000214 <__adddf3>
 80069d4:	4ba8      	ldr	r3, [pc, #672]	; (8006c78 <__ieee754_asin+0x348>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	f7fa f862 	bl	8000aa0 <__aeabi_dcmpgt>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d1e3      	bne.n	80069a8 <__ieee754_asin+0x78>
 80069e0:	ec45 4b10 	vmov	d0, r4, r5
 80069e4:	f001 fbbc 	bl	8008160 <fabs>
 80069e8:	49a3      	ldr	r1, [pc, #652]	; (8006c78 <__ieee754_asin+0x348>)
 80069ea:	ec53 2b10 	vmov	r2, r3, d0
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7f9 fc0e 	bl	8000210 <__aeabi_dsub>
 80069f4:	4ba1      	ldr	r3, [pc, #644]	; (8006c7c <__ieee754_asin+0x34c>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	f7f9 fdc2 	bl	8000580 <__aeabi_dmul>
 80069fc:	a388      	add	r3, pc, #544	; (adr r3, 8006c20 <__ieee754_asin+0x2f0>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	4604      	mov	r4, r0
 8006a04:	460d      	mov	r5, r1
 8006a06:	f7f9 fdbb 	bl	8000580 <__aeabi_dmul>
 8006a0a:	a387      	add	r3, pc, #540	; (adr r3, 8006c28 <__ieee754_asin+0x2f8>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fc00 	bl	8000214 <__adddf3>
 8006a14:	4622      	mov	r2, r4
 8006a16:	462b      	mov	r3, r5
 8006a18:	f7f9 fdb2 	bl	8000580 <__aeabi_dmul>
 8006a1c:	a384      	add	r3, pc, #528	; (adr r3, 8006c30 <__ieee754_asin+0x300>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fbf5 	bl	8000210 <__aeabi_dsub>
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f7f9 fda9 	bl	8000580 <__aeabi_dmul>
 8006a2e:	a382      	add	r3, pc, #520	; (adr r3, 8006c38 <__ieee754_asin+0x308>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 fbee 	bl	8000214 <__adddf3>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	f7f9 fda0 	bl	8000580 <__aeabi_dmul>
 8006a40:	a37f      	add	r3, pc, #508	; (adr r3, 8006c40 <__ieee754_asin+0x310>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fbe3 	bl	8000210 <__aeabi_dsub>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	f7f9 fd97 	bl	8000580 <__aeabi_dmul>
 8006a52:	a37d      	add	r3, pc, #500	; (adr r3, 8006c48 <__ieee754_asin+0x318>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f7f9 fbdc 	bl	8000214 <__adddf3>
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	462b      	mov	r3, r5
 8006a60:	f7f9 fd8e 	bl	8000580 <__aeabi_dmul>
 8006a64:	a37a      	add	r3, pc, #488	; (adr r3, 8006c50 <__ieee754_asin+0x320>)
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	ec41 0b18 	vmov	d8, r0, r1
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7f9 fd85 	bl	8000580 <__aeabi_dmul>
 8006a76:	a378      	add	r3, pc, #480	; (adr r3, 8006c58 <__ieee754_asin+0x328>)
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 fbc8 	bl	8000210 <__aeabi_dsub>
 8006a80:	4622      	mov	r2, r4
 8006a82:	462b      	mov	r3, r5
 8006a84:	f7f9 fd7c 	bl	8000580 <__aeabi_dmul>
 8006a88:	a375      	add	r3, pc, #468	; (adr r3, 8006c60 <__ieee754_asin+0x330>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f7f9 fbc1 	bl	8000214 <__adddf3>
 8006a92:	4622      	mov	r2, r4
 8006a94:	462b      	mov	r3, r5
 8006a96:	f7f9 fd73 	bl	8000580 <__aeabi_dmul>
 8006a9a:	a373      	add	r3, pc, #460	; (adr r3, 8006c68 <__ieee754_asin+0x338>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fbb6 	bl	8000210 <__aeabi_dsub>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	f7f9 fd6a 	bl	8000580 <__aeabi_dmul>
 8006aac:	4b72      	ldr	r3, [pc, #456]	; (8006c78 <__ieee754_asin+0x348>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f7f9 fbb0 	bl	8000214 <__adddf3>
 8006ab4:	ec45 4b10 	vmov	d0, r4, r5
 8006ab8:	4606      	mov	r6, r0
 8006aba:	460f      	mov	r7, r1
 8006abc:	f000 fc24 	bl	8007308 <__ieee754_sqrt>
 8006ac0:	4b6f      	ldr	r3, [pc, #444]	; (8006c80 <__ieee754_asin+0x350>)
 8006ac2:	4598      	cmp	r8, r3
 8006ac4:	ec5b ab10 	vmov	sl, fp, d0
 8006ac8:	f340 80dc 	ble.w	8006c84 <__ieee754_asin+0x354>
 8006acc:	4632      	mov	r2, r6
 8006ace:	463b      	mov	r3, r7
 8006ad0:	ec51 0b18 	vmov	r0, r1, d8
 8006ad4:	f7f9 fe7e 	bl	80007d4 <__aeabi_ddiv>
 8006ad8:	4652      	mov	r2, sl
 8006ada:	465b      	mov	r3, fp
 8006adc:	f7f9 fd50 	bl	8000580 <__aeabi_dmul>
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	465b      	mov	r3, fp
 8006ae4:	f7f9 fb96 	bl	8000214 <__adddf3>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	f7f9 fb92 	bl	8000214 <__adddf3>
 8006af0:	a347      	add	r3, pc, #284	; (adr r3, 8006c10 <__ieee754_asin+0x2e0>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 fb8b 	bl	8000210 <__aeabi_dsub>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	a142      	add	r1, pc, #264	; (adr r1, 8006c08 <__ieee754_asin+0x2d8>)
 8006b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b04:	f7f9 fb84 	bl	8000210 <__aeabi_dsub>
 8006b08:	9b01      	ldr	r3, [sp, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfdc      	itt	le
 8006b0e:	4602      	movle	r2, r0
 8006b10:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006b14:	4604      	mov	r4, r0
 8006b16:	460d      	mov	r5, r1
 8006b18:	bfdc      	itt	le
 8006b1a:	4614      	movle	r4, r2
 8006b1c:	461d      	movle	r5, r3
 8006b1e:	e743      	b.n	80069a8 <__ieee754_asin+0x78>
 8006b20:	ee10 2a10 	vmov	r2, s0
 8006b24:	ee10 0a10 	vmov	r0, s0
 8006b28:	462b      	mov	r3, r5
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fd28 	bl	8000580 <__aeabi_dmul>
 8006b30:	a33b      	add	r3, pc, #236	; (adr r3, 8006c20 <__ieee754_asin+0x2f0>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	f7f9 fd21 	bl	8000580 <__aeabi_dmul>
 8006b3e:	a33a      	add	r3, pc, #232	; (adr r3, 8006c28 <__ieee754_asin+0x2f8>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f7f9 fb66 	bl	8000214 <__adddf3>
 8006b48:	4632      	mov	r2, r6
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	f7f9 fd18 	bl	8000580 <__aeabi_dmul>
 8006b50:	a337      	add	r3, pc, #220	; (adr r3, 8006c30 <__ieee754_asin+0x300>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fb5b 	bl	8000210 <__aeabi_dsub>
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	f7f9 fd0f 	bl	8000580 <__aeabi_dmul>
 8006b62:	a335      	add	r3, pc, #212	; (adr r3, 8006c38 <__ieee754_asin+0x308>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fb54 	bl	8000214 <__adddf3>
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	f7f9 fd06 	bl	8000580 <__aeabi_dmul>
 8006b74:	a332      	add	r3, pc, #200	; (adr r3, 8006c40 <__ieee754_asin+0x310>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fb49 	bl	8000210 <__aeabi_dsub>
 8006b7e:	4632      	mov	r2, r6
 8006b80:	463b      	mov	r3, r7
 8006b82:	f7f9 fcfd 	bl	8000580 <__aeabi_dmul>
 8006b86:	a330      	add	r3, pc, #192	; (adr r3, 8006c48 <__ieee754_asin+0x318>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fb42 	bl	8000214 <__adddf3>
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	f7f9 fcf4 	bl	8000580 <__aeabi_dmul>
 8006b98:	a32d      	add	r3, pc, #180	; (adr r3, 8006c50 <__ieee754_asin+0x320>)
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	4689      	mov	r9, r1
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f7f9 fceb 	bl	8000580 <__aeabi_dmul>
 8006baa:	a32b      	add	r3, pc, #172	; (adr r3, 8006c58 <__ieee754_asin+0x328>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f7f9 fb2e 	bl	8000210 <__aeabi_dsub>
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	f7f9 fce2 	bl	8000580 <__aeabi_dmul>
 8006bbc:	a328      	add	r3, pc, #160	; (adr r3, 8006c60 <__ieee754_asin+0x330>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fb27 	bl	8000214 <__adddf3>
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	463b      	mov	r3, r7
 8006bca:	f7f9 fcd9 	bl	8000580 <__aeabi_dmul>
 8006bce:	a326      	add	r3, pc, #152	; (adr r3, 8006c68 <__ieee754_asin+0x338>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f7f9 fb1c 	bl	8000210 <__aeabi_dsub>
 8006bd8:	4632      	mov	r2, r6
 8006bda:	463b      	mov	r3, r7
 8006bdc:	f7f9 fcd0 	bl	8000580 <__aeabi_dmul>
 8006be0:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <__ieee754_asin+0x348>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	f7f9 fb16 	bl	8000214 <__adddf3>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f7f9 fdf0 	bl	80007d4 <__aeabi_ddiv>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	f7f9 fcc2 	bl	8000580 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	e6bf      	b.n	8006986 <__ieee754_asin+0x56>
 8006c06:	bf00      	nop
 8006c08:	54442d18 	.word	0x54442d18
 8006c0c:	3ff921fb 	.word	0x3ff921fb
 8006c10:	33145c07 	.word	0x33145c07
 8006c14:	3c91a626 	.word	0x3c91a626
 8006c18:	8800759c 	.word	0x8800759c
 8006c1c:	7e37e43c 	.word	0x7e37e43c
 8006c20:	0dfdf709 	.word	0x0dfdf709
 8006c24:	3f023de1 	.word	0x3f023de1
 8006c28:	7501b288 	.word	0x7501b288
 8006c2c:	3f49efe0 	.word	0x3f49efe0
 8006c30:	b5688f3b 	.word	0xb5688f3b
 8006c34:	3fa48228 	.word	0x3fa48228
 8006c38:	0e884455 	.word	0x0e884455
 8006c3c:	3fc9c155 	.word	0x3fc9c155
 8006c40:	03eb6f7d 	.word	0x03eb6f7d
 8006c44:	3fd4d612 	.word	0x3fd4d612
 8006c48:	55555555 	.word	0x55555555
 8006c4c:	3fc55555 	.word	0x3fc55555
 8006c50:	b12e9282 	.word	0xb12e9282
 8006c54:	3fb3b8c5 	.word	0x3fb3b8c5
 8006c58:	1b8d0159 	.word	0x1b8d0159
 8006c5c:	3fe6066c 	.word	0x3fe6066c
 8006c60:	9c598ac8 	.word	0x9c598ac8
 8006c64:	40002ae5 	.word	0x40002ae5
 8006c68:	1c8a2d4b 	.word	0x1c8a2d4b
 8006c6c:	40033a27 	.word	0x40033a27
 8006c70:	3fefffff 	.word	0x3fefffff
 8006c74:	3fdfffff 	.word	0x3fdfffff
 8006c78:	3ff00000 	.word	0x3ff00000
 8006c7c:	3fe00000 	.word	0x3fe00000
 8006c80:	3fef3332 	.word	0x3fef3332
 8006c84:	ee10 2a10 	vmov	r2, s0
 8006c88:	ee10 0a10 	vmov	r0, s0
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4659      	mov	r1, fp
 8006c90:	f7f9 fac0 	bl	8000214 <__adddf3>
 8006c94:	4632      	mov	r2, r6
 8006c96:	463b      	mov	r3, r7
 8006c98:	ec41 0b19 	vmov	d9, r0, r1
 8006c9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ca0:	f7f9 fd98 	bl	80007d4 <__aeabi_ddiv>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	ec51 0b19 	vmov	r0, r1, d9
 8006cac:	f7f9 fc68 	bl	8000580 <__aeabi_dmul>
 8006cb0:	f04f 0800 	mov.w	r8, #0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4642      	mov	r2, r8
 8006cba:	465b      	mov	r3, fp
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	f7f9 fc5e 	bl	8000580 <__aeabi_dmul>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7f9 faa0 	bl	8000210 <__aeabi_dsub>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	4650      	mov	r0, sl
 8006cda:	4659      	mov	r1, fp
 8006cdc:	f7f9 fa9a 	bl	8000214 <__adddf3>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f7f9 fd74 	bl	80007d4 <__aeabi_ddiv>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	f7f9 fa90 	bl	8000214 <__adddf3>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	a113      	add	r1, pc, #76	; (adr r1, 8006d48 <__ieee754_asin+0x418>)
 8006cfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cfe:	f7f9 fa87 	bl	8000210 <__aeabi_dsub>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4630      	mov	r0, r6
 8006d08:	4639      	mov	r1, r7
 8006d0a:	f7f9 fa81 	bl	8000210 <__aeabi_dsub>
 8006d0e:	4642      	mov	r2, r8
 8006d10:	4604      	mov	r4, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	465b      	mov	r3, fp
 8006d16:	4640      	mov	r0, r8
 8006d18:	4659      	mov	r1, fp
 8006d1a:	f7f9 fa7b 	bl	8000214 <__adddf3>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	a10b      	add	r1, pc, #44	; (adr r1, 8006d50 <__ieee754_asin+0x420>)
 8006d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d28:	f7f9 fa72 	bl	8000210 <__aeabi_dsub>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4620      	mov	r0, r4
 8006d32:	4629      	mov	r1, r5
 8006d34:	f7f9 fa6c 	bl	8000210 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	a104      	add	r1, pc, #16	; (adr r1, 8006d50 <__ieee754_asin+0x420>)
 8006d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d42:	e6df      	b.n	8006b04 <__ieee754_asin+0x1d4>
 8006d44:	f3af 8000 	nop.w
 8006d48:	33145c07 	.word	0x33145c07
 8006d4c:	3c91a626 	.word	0x3c91a626
 8006d50:	54442d18 	.word	0x54442d18
 8006d54:	3fe921fb 	.word	0x3fe921fb

08006d58 <__ieee754_atan2>:
 8006d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	ec57 6b11 	vmov	r6, r7, d1
 8006d60:	4273      	negs	r3, r6
 8006d62:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006ee8 <__ieee754_atan2+0x190>
 8006d66:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006d6a:	4333      	orrs	r3, r6
 8006d6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006d70:	4573      	cmp	r3, lr
 8006d72:	ec51 0b10 	vmov	r0, r1, d0
 8006d76:	ee11 8a10 	vmov	r8, s2
 8006d7a:	d80a      	bhi.n	8006d92 <__ieee754_atan2+0x3a>
 8006d7c:	4244      	negs	r4, r0
 8006d7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d82:	4304      	orrs	r4, r0
 8006d84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006d88:	4574      	cmp	r4, lr
 8006d8a:	ee10 9a10 	vmov	r9, s0
 8006d8e:	468c      	mov	ip, r1
 8006d90:	d907      	bls.n	8006da2 <__ieee754_atan2+0x4a>
 8006d92:	4632      	mov	r2, r6
 8006d94:	463b      	mov	r3, r7
 8006d96:	f7f9 fa3d 	bl	8000214 <__adddf3>
 8006d9a:	ec41 0b10 	vmov	d0, r0, r1
 8006d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006da6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006daa:	4334      	orrs	r4, r6
 8006dac:	d103      	bne.n	8006db6 <__ieee754_atan2+0x5e>
 8006dae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db2:	f001 b835 	b.w	8007e20 <atan>
 8006db6:	17bc      	asrs	r4, r7, #30
 8006db8:	f004 0402 	and.w	r4, r4, #2
 8006dbc:	ea53 0909 	orrs.w	r9, r3, r9
 8006dc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006dc4:	d107      	bne.n	8006dd6 <__ieee754_atan2+0x7e>
 8006dc6:	2c02      	cmp	r4, #2
 8006dc8:	d060      	beq.n	8006e8c <__ieee754_atan2+0x134>
 8006dca:	2c03      	cmp	r4, #3
 8006dcc:	d1e5      	bne.n	8006d9a <__ieee754_atan2+0x42>
 8006dce:	a142      	add	r1, pc, #264	; (adr r1, 8006ed8 <__ieee754_atan2+0x180>)
 8006dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dd4:	e7e1      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006dd6:	ea52 0808 	orrs.w	r8, r2, r8
 8006dda:	d106      	bne.n	8006dea <__ieee754_atan2+0x92>
 8006ddc:	f1bc 0f00 	cmp.w	ip, #0
 8006de0:	da5f      	bge.n	8006ea2 <__ieee754_atan2+0x14a>
 8006de2:	a13f      	add	r1, pc, #252	; (adr r1, 8006ee0 <__ieee754_atan2+0x188>)
 8006de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006de8:	e7d7      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006dea:	4572      	cmp	r2, lr
 8006dec:	d10f      	bne.n	8006e0e <__ieee754_atan2+0xb6>
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f104 34ff 	add.w	r4, r4, #4294967295
 8006df4:	d107      	bne.n	8006e06 <__ieee754_atan2+0xae>
 8006df6:	2c02      	cmp	r4, #2
 8006df8:	d84c      	bhi.n	8006e94 <__ieee754_atan2+0x13c>
 8006dfa:	4b35      	ldr	r3, [pc, #212]	; (8006ed0 <__ieee754_atan2+0x178>)
 8006dfc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006e00:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006e04:	e7c9      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006e06:	2c02      	cmp	r4, #2
 8006e08:	d848      	bhi.n	8006e9c <__ieee754_atan2+0x144>
 8006e0a:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <__ieee754_atan2+0x17c>)
 8006e0c:	e7f6      	b.n	8006dfc <__ieee754_atan2+0xa4>
 8006e0e:	4573      	cmp	r3, lr
 8006e10:	d0e4      	beq.n	8006ddc <__ieee754_atan2+0x84>
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006e18:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e1c:	da1e      	bge.n	8006e5c <__ieee754_atan2+0x104>
 8006e1e:	2f00      	cmp	r7, #0
 8006e20:	da01      	bge.n	8006e26 <__ieee754_atan2+0xce>
 8006e22:	323c      	adds	r2, #60	; 0x3c
 8006e24:	db1e      	blt.n	8006e64 <__ieee754_atan2+0x10c>
 8006e26:	4632      	mov	r2, r6
 8006e28:	463b      	mov	r3, r7
 8006e2a:	f7f9 fcd3 	bl	80007d4 <__aeabi_ddiv>
 8006e2e:	ec41 0b10 	vmov	d0, r0, r1
 8006e32:	f001 f995 	bl	8008160 <fabs>
 8006e36:	f000 fff3 	bl	8007e20 <atan>
 8006e3a:	ec51 0b10 	vmov	r0, r1, d0
 8006e3e:	2c01      	cmp	r4, #1
 8006e40:	d013      	beq.n	8006e6a <__ieee754_atan2+0x112>
 8006e42:	2c02      	cmp	r4, #2
 8006e44:	d015      	beq.n	8006e72 <__ieee754_atan2+0x11a>
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	d0a7      	beq.n	8006d9a <__ieee754_atan2+0x42>
 8006e4a:	a319      	add	r3, pc, #100	; (adr r3, 8006eb0 <__ieee754_atan2+0x158>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 f9de 	bl	8000210 <__aeabi_dsub>
 8006e54:	a318      	add	r3, pc, #96	; (adr r3, 8006eb8 <__ieee754_atan2+0x160>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	e014      	b.n	8006e86 <__ieee754_atan2+0x12e>
 8006e5c:	a118      	add	r1, pc, #96	; (adr r1, 8006ec0 <__ieee754_atan2+0x168>)
 8006e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e62:	e7ec      	b.n	8006e3e <__ieee754_atan2+0xe6>
 8006e64:	2000      	movs	r0, #0
 8006e66:	2100      	movs	r1, #0
 8006e68:	e7e9      	b.n	8006e3e <__ieee754_atan2+0xe6>
 8006e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e6e:	4619      	mov	r1, r3
 8006e70:	e793      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006e72:	a30f      	add	r3, pc, #60	; (adr r3, 8006eb0 <__ieee754_atan2+0x158>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f7f9 f9ca 	bl	8000210 <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	a10d      	add	r1, pc, #52	; (adr r1, 8006eb8 <__ieee754_atan2+0x160>)
 8006e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e86:	f7f9 f9c3 	bl	8000210 <__aeabi_dsub>
 8006e8a:	e786      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006e8c:	a10a      	add	r1, pc, #40	; (adr r1, 8006eb8 <__ieee754_atan2+0x160>)
 8006e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e92:	e782      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006e94:	a10c      	add	r1, pc, #48	; (adr r1, 8006ec8 <__ieee754_atan2+0x170>)
 8006e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e9a:	e77e      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	e77b      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006ea2:	a107      	add	r1, pc, #28	; (adr r1, 8006ec0 <__ieee754_atan2+0x168>)
 8006ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea8:	e777      	b.n	8006d9a <__ieee754_atan2+0x42>
 8006eaa:	bf00      	nop
 8006eac:	f3af 8000 	nop.w
 8006eb0:	33145c07 	.word	0x33145c07
 8006eb4:	3ca1a626 	.word	0x3ca1a626
 8006eb8:	54442d18 	.word	0x54442d18
 8006ebc:	400921fb 	.word	0x400921fb
 8006ec0:	54442d18 	.word	0x54442d18
 8006ec4:	3ff921fb 	.word	0x3ff921fb
 8006ec8:	54442d18 	.word	0x54442d18
 8006ecc:	3fe921fb 	.word	0x3fe921fb
 8006ed0:	08008458 	.word	0x08008458
 8006ed4:	08008470 	.word	0x08008470
 8006ed8:	54442d18 	.word	0x54442d18
 8006edc:	c00921fb 	.word	0xc00921fb
 8006ee0:	54442d18 	.word	0x54442d18
 8006ee4:	bff921fb 	.word	0xbff921fb
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	00000000 	.word	0x00000000

08006ef0 <__ieee754_rem_pio2>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	ed2d 8b02 	vpush	{d8}
 8006ef8:	ec55 4b10 	vmov	r4, r5, d0
 8006efc:	4bca      	ldr	r3, [pc, #808]	; (8007228 <__ieee754_rem_pio2+0x338>)
 8006efe:	b08b      	sub	sp, #44	; 0x2c
 8006f00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006f04:	4598      	cmp	r8, r3
 8006f06:	4682      	mov	sl, r0
 8006f08:	9502      	str	r5, [sp, #8]
 8006f0a:	dc08      	bgt.n	8006f1e <__ieee754_rem_pio2+0x2e>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2300      	movs	r3, #0
 8006f10:	ed80 0b00 	vstr	d0, [r0]
 8006f14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f18:	f04f 0b00 	mov.w	fp, #0
 8006f1c:	e028      	b.n	8006f70 <__ieee754_rem_pio2+0x80>
 8006f1e:	4bc3      	ldr	r3, [pc, #780]	; (800722c <__ieee754_rem_pio2+0x33c>)
 8006f20:	4598      	cmp	r8, r3
 8006f22:	dc78      	bgt.n	8007016 <__ieee754_rem_pio2+0x126>
 8006f24:	9b02      	ldr	r3, [sp, #8]
 8006f26:	4ec2      	ldr	r6, [pc, #776]	; (8007230 <__ieee754_rem_pio2+0x340>)
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	ee10 0a10 	vmov	r0, s0
 8006f2e:	a3b0      	add	r3, pc, #704	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x300>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	4629      	mov	r1, r5
 8006f36:	dd39      	ble.n	8006fac <__ieee754_rem_pio2+0xbc>
 8006f38:	f7f9 f96a 	bl	8000210 <__aeabi_dsub>
 8006f3c:	45b0      	cmp	r8, r6
 8006f3e:	4604      	mov	r4, r0
 8006f40:	460d      	mov	r5, r1
 8006f42:	d01b      	beq.n	8006f7c <__ieee754_rem_pio2+0x8c>
 8006f44:	a3ac      	add	r3, pc, #688	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x308>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f961 	bl	8000210 <__aeabi_dsub>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	e9ca 2300 	strd	r2, r3, [sl]
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	f7f9 f959 	bl	8000210 <__aeabi_dsub>
 8006f5e:	a3a6      	add	r3, pc, #664	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x308>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 f954 	bl	8000210 <__aeabi_dsub>
 8006f68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f6c:	f04f 0b01 	mov.w	fp, #1
 8006f70:	4658      	mov	r0, fp
 8006f72:	b00b      	add	sp, #44	; 0x2c
 8006f74:	ecbd 8b02 	vpop	{d8}
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007200 <__ieee754_rem_pio2+0x310>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f945 	bl	8000210 <__aeabi_dsub>
 8006f86:	a3a0      	add	r3, pc, #640	; (adr r3, 8007208 <__ieee754_rem_pio2+0x318>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	f7f9 f93e 	bl	8000210 <__aeabi_dsub>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9ca 2300 	strd	r2, r3, [sl]
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 f936 	bl	8000210 <__aeabi_dsub>
 8006fa4:	a398      	add	r3, pc, #608	; (adr r3, 8007208 <__ieee754_rem_pio2+0x318>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	e7db      	b.n	8006f64 <__ieee754_rem_pio2+0x74>
 8006fac:	f7f9 f932 	bl	8000214 <__adddf3>
 8006fb0:	45b0      	cmp	r8, r6
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	d016      	beq.n	8006fe6 <__ieee754_rem_pio2+0xf6>
 8006fb8:	a38f      	add	r3, pc, #572	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x308>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 f929 	bl	8000214 <__adddf3>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	e9ca 2300 	strd	r2, r3, [sl]
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 f91f 	bl	8000210 <__aeabi_dsub>
 8006fd2:	a389      	add	r3, pc, #548	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x308>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 f91c 	bl	8000214 <__adddf3>
 8006fdc:	f04f 3bff 	mov.w	fp, #4294967295
 8006fe0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fe4:	e7c4      	b.n	8006f70 <__ieee754_rem_pio2+0x80>
 8006fe6:	a386      	add	r3, pc, #536	; (adr r3, 8007200 <__ieee754_rem_pio2+0x310>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f912 	bl	8000214 <__adddf3>
 8006ff0:	a385      	add	r3, pc, #532	; (adr r3, 8007208 <__ieee754_rem_pio2+0x318>)
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	f7f9 f90b 	bl	8000214 <__adddf3>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	e9ca 2300 	strd	r2, r3, [sl]
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 f901 	bl	8000210 <__aeabi_dsub>
 800700e:	a37e      	add	r3, pc, #504	; (adr r3, 8007208 <__ieee754_rem_pio2+0x318>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	e7e0      	b.n	8006fd8 <__ieee754_rem_pio2+0xe8>
 8007016:	4b87      	ldr	r3, [pc, #540]	; (8007234 <__ieee754_rem_pio2+0x344>)
 8007018:	4598      	cmp	r8, r3
 800701a:	f300 80d9 	bgt.w	80071d0 <__ieee754_rem_pio2+0x2e0>
 800701e:	f001 f89f 	bl	8008160 <fabs>
 8007022:	ec55 4b10 	vmov	r4, r5, d0
 8007026:	ee10 0a10 	vmov	r0, s0
 800702a:	a379      	add	r3, pc, #484	; (adr r3, 8007210 <__ieee754_rem_pio2+0x320>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 faa5 	bl	8000580 <__aeabi_dmul>
 8007036:	4b80      	ldr	r3, [pc, #512]	; (8007238 <__ieee754_rem_pio2+0x348>)
 8007038:	2200      	movs	r2, #0
 800703a:	f7f9 f8eb 	bl	8000214 <__adddf3>
 800703e:	f7f9 fd4f 	bl	8000ae0 <__aeabi_d2iz>
 8007042:	4683      	mov	fp, r0
 8007044:	f7f9 fa32 	bl	80004ac <__aeabi_i2d>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	ec43 2b18 	vmov	d8, r2, r3
 8007050:	a367      	add	r3, pc, #412	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x300>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 fa93 	bl	8000580 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	f7f9 f8d5 	bl	8000210 <__aeabi_dsub>
 8007066:	a364      	add	r3, pc, #400	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x308>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	4606      	mov	r6, r0
 800706e:	460f      	mov	r7, r1
 8007070:	ec51 0b18 	vmov	r0, r1, d8
 8007074:	f7f9 fa84 	bl	8000580 <__aeabi_dmul>
 8007078:	f1bb 0f1f 	cmp.w	fp, #31
 800707c:	4604      	mov	r4, r0
 800707e:	460d      	mov	r5, r1
 8007080:	dc0d      	bgt.n	800709e <__ieee754_rem_pio2+0x1ae>
 8007082:	4b6e      	ldr	r3, [pc, #440]	; (800723c <__ieee754_rem_pio2+0x34c>)
 8007084:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708c:	4543      	cmp	r3, r8
 800708e:	d006      	beq.n	800709e <__ieee754_rem_pio2+0x1ae>
 8007090:	4622      	mov	r2, r4
 8007092:	462b      	mov	r3, r5
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 f8ba 	bl	8000210 <__aeabi_dsub>
 800709c:	e00f      	b.n	80070be <__ieee754_rem_pio2+0x1ce>
 800709e:	462b      	mov	r3, r5
 80070a0:	4622      	mov	r2, r4
 80070a2:	4630      	mov	r0, r6
 80070a4:	4639      	mov	r1, r7
 80070a6:	f7f9 f8b3 	bl	8000210 <__aeabi_dsub>
 80070aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80070b8:	f1b8 0f10 	cmp.w	r8, #16
 80070bc:	dc02      	bgt.n	80070c4 <__ieee754_rem_pio2+0x1d4>
 80070be:	e9ca 0100 	strd	r0, r1, [sl]
 80070c2:	e039      	b.n	8007138 <__ieee754_rem_pio2+0x248>
 80070c4:	a34e      	add	r3, pc, #312	; (adr r3, 8007200 <__ieee754_rem_pio2+0x310>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	ec51 0b18 	vmov	r0, r1, d8
 80070ce:	f7f9 fa57 	bl	8000580 <__aeabi_dmul>
 80070d2:	4604      	mov	r4, r0
 80070d4:	460d      	mov	r5, r1
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4630      	mov	r0, r6
 80070dc:	4639      	mov	r1, r7
 80070de:	f7f9 f897 	bl	8000210 <__aeabi_dsub>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4680      	mov	r8, r0
 80070e8:	4689      	mov	r9, r1
 80070ea:	4630      	mov	r0, r6
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 f88f 	bl	8000210 <__aeabi_dsub>
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	f7f9 f88b 	bl	8000210 <__aeabi_dsub>
 80070fa:	a343      	add	r3, pc, #268	; (adr r3, 8007208 <__ieee754_rem_pio2+0x318>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	ec51 0b18 	vmov	r0, r1, d8
 8007108:	f7f9 fa3a 	bl	8000580 <__aeabi_dmul>
 800710c:	4622      	mov	r2, r4
 800710e:	462b      	mov	r3, r5
 8007110:	f7f9 f87e 	bl	8000210 <__aeabi_dsub>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4604      	mov	r4, r0
 800711a:	460d      	mov	r5, r1
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 f876 	bl	8000210 <__aeabi_dsub>
 8007124:	9a03      	ldr	r2, [sp, #12]
 8007126:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b31      	cmp	r3, #49	; 0x31
 800712e:	dc24      	bgt.n	800717a <__ieee754_rem_pio2+0x28a>
 8007130:	e9ca 0100 	strd	r0, r1, [sl]
 8007134:	4646      	mov	r6, r8
 8007136:	464f      	mov	r7, r9
 8007138:	e9da 8900 	ldrd	r8, r9, [sl]
 800713c:	4630      	mov	r0, r6
 800713e:	4642      	mov	r2, r8
 8007140:	464b      	mov	r3, r9
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 f864 	bl	8000210 <__aeabi_dsub>
 8007148:	462b      	mov	r3, r5
 800714a:	4622      	mov	r2, r4
 800714c:	f7f9 f860 	bl	8000210 <__aeabi_dsub>
 8007150:	9b02      	ldr	r3, [sp, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007158:	f6bf af0a 	bge.w	8006f70 <__ieee754_rem_pio2+0x80>
 800715c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007160:	f8ca 3004 	str.w	r3, [sl, #4]
 8007164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007168:	f8ca 8000 	str.w	r8, [sl]
 800716c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007170:	f8ca 300c 	str.w	r3, [sl, #12]
 8007174:	f1cb 0b00 	rsb	fp, fp, #0
 8007178:	e6fa      	b.n	8006f70 <__ieee754_rem_pio2+0x80>
 800717a:	a327      	add	r3, pc, #156	; (adr r3, 8007218 <__ieee754_rem_pio2+0x328>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	ec51 0b18 	vmov	r0, r1, d8
 8007184:	f7f9 f9fc 	bl	8000580 <__aeabi_dmul>
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4640      	mov	r0, r8
 8007192:	4649      	mov	r1, r9
 8007194:	f7f9 f83c 	bl	8000210 <__aeabi_dsub>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	4640      	mov	r0, r8
 80071a2:	4649      	mov	r1, r9
 80071a4:	f7f9 f834 	bl	8000210 <__aeabi_dsub>
 80071a8:	4622      	mov	r2, r4
 80071aa:	462b      	mov	r3, r5
 80071ac:	f7f9 f830 	bl	8000210 <__aeabi_dsub>
 80071b0:	a31b      	add	r3, pc, #108	; (adr r3, 8007220 <__ieee754_rem_pio2+0x330>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	4604      	mov	r4, r0
 80071b8:	460d      	mov	r5, r1
 80071ba:	ec51 0b18 	vmov	r0, r1, d8
 80071be:	f7f9 f9df 	bl	8000580 <__aeabi_dmul>
 80071c2:	4622      	mov	r2, r4
 80071c4:	462b      	mov	r3, r5
 80071c6:	f7f9 f823 	bl	8000210 <__aeabi_dsub>
 80071ca:	4604      	mov	r4, r0
 80071cc:	460d      	mov	r5, r1
 80071ce:	e75f      	b.n	8007090 <__ieee754_rem_pio2+0x1a0>
 80071d0:	4b1b      	ldr	r3, [pc, #108]	; (8007240 <__ieee754_rem_pio2+0x350>)
 80071d2:	4598      	cmp	r8, r3
 80071d4:	dd36      	ble.n	8007244 <__ieee754_rem_pio2+0x354>
 80071d6:	ee10 2a10 	vmov	r2, s0
 80071da:	462b      	mov	r3, r5
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	f7f9 f816 	bl	8000210 <__aeabi_dsub>
 80071e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071e8:	e9ca 0100 	strd	r0, r1, [sl]
 80071ec:	e694      	b.n	8006f18 <__ieee754_rem_pio2+0x28>
 80071ee:	bf00      	nop
 80071f0:	54400000 	.word	0x54400000
 80071f4:	3ff921fb 	.word	0x3ff921fb
 80071f8:	1a626331 	.word	0x1a626331
 80071fc:	3dd0b461 	.word	0x3dd0b461
 8007200:	1a600000 	.word	0x1a600000
 8007204:	3dd0b461 	.word	0x3dd0b461
 8007208:	2e037073 	.word	0x2e037073
 800720c:	3ba3198a 	.word	0x3ba3198a
 8007210:	6dc9c883 	.word	0x6dc9c883
 8007214:	3fe45f30 	.word	0x3fe45f30
 8007218:	2e000000 	.word	0x2e000000
 800721c:	3ba3198a 	.word	0x3ba3198a
 8007220:	252049c1 	.word	0x252049c1
 8007224:	397b839a 	.word	0x397b839a
 8007228:	3fe921fb 	.word	0x3fe921fb
 800722c:	4002d97b 	.word	0x4002d97b
 8007230:	3ff921fb 	.word	0x3ff921fb
 8007234:	413921fb 	.word	0x413921fb
 8007238:	3fe00000 	.word	0x3fe00000
 800723c:	08008488 	.word	0x08008488
 8007240:	7fefffff 	.word	0x7fefffff
 8007244:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007248:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800724c:	ee10 0a10 	vmov	r0, s0
 8007250:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007254:	ee10 6a10 	vmov	r6, s0
 8007258:	460f      	mov	r7, r1
 800725a:	f7f9 fc41 	bl	8000ae0 <__aeabi_d2iz>
 800725e:	f7f9 f925 	bl	80004ac <__aeabi_i2d>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800726e:	f7f8 ffcf 	bl	8000210 <__aeabi_dsub>
 8007272:	4b23      	ldr	r3, [pc, #140]	; (8007300 <__ieee754_rem_pio2+0x410>)
 8007274:	2200      	movs	r2, #0
 8007276:	f7f9 f983 	bl	8000580 <__aeabi_dmul>
 800727a:	460f      	mov	r7, r1
 800727c:	4606      	mov	r6, r0
 800727e:	f7f9 fc2f 	bl	8000ae0 <__aeabi_d2iz>
 8007282:	f7f9 f913 	bl	80004ac <__aeabi_i2d>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4630      	mov	r0, r6
 800728c:	4639      	mov	r1, r7
 800728e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007292:	f7f8 ffbd 	bl	8000210 <__aeabi_dsub>
 8007296:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <__ieee754_rem_pio2+0x410>)
 8007298:	2200      	movs	r2, #0
 800729a:	f7f9 f971 	bl	8000580 <__aeabi_dmul>
 800729e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072a2:	ad04      	add	r5, sp, #16
 80072a4:	f04f 0803 	mov.w	r8, #3
 80072a8:	46a9      	mov	r9, r5
 80072aa:	2600      	movs	r6, #0
 80072ac:	2700      	movs	r7, #0
 80072ae:	4632      	mov	r2, r6
 80072b0:	463b      	mov	r3, r7
 80072b2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80072b6:	46c3      	mov	fp, r8
 80072b8:	3d08      	subs	r5, #8
 80072ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80072be:	f7f9 fbc7 	bl	8000a50 <__aeabi_dcmpeq>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d1f3      	bne.n	80072ae <__ieee754_rem_pio2+0x3be>
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <__ieee754_rem_pio2+0x414>)
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2302      	movs	r3, #2
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	4622      	mov	r2, r4
 80072d0:	465b      	mov	r3, fp
 80072d2:	4651      	mov	r1, sl
 80072d4:	4648      	mov	r0, r9
 80072d6:	f000 f993 	bl	8007600 <__kernel_rem_pio2>
 80072da:	9b02      	ldr	r3, [sp, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	4683      	mov	fp, r0
 80072e0:	f6bf ae46 	bge.w	8006f70 <__ieee754_rem_pio2+0x80>
 80072e4:	e9da 2100 	ldrd	r2, r1, [sl]
 80072e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072ec:	e9ca 2300 	strd	r2, r3, [sl]
 80072f0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80072f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80072fc:	e73a      	b.n	8007174 <__ieee754_rem_pio2+0x284>
 80072fe:	bf00      	nop
 8007300:	41700000 	.word	0x41700000
 8007304:	08008508 	.word	0x08008508

08007308 <__ieee754_sqrt>:
 8007308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	ec55 4b10 	vmov	r4, r5, d0
 8007310:	4e55      	ldr	r6, [pc, #340]	; (8007468 <__ieee754_sqrt+0x160>)
 8007312:	43ae      	bics	r6, r5
 8007314:	ee10 0a10 	vmov	r0, s0
 8007318:	ee10 3a10 	vmov	r3, s0
 800731c:	462a      	mov	r2, r5
 800731e:	4629      	mov	r1, r5
 8007320:	d110      	bne.n	8007344 <__ieee754_sqrt+0x3c>
 8007322:	ee10 2a10 	vmov	r2, s0
 8007326:	462b      	mov	r3, r5
 8007328:	f7f9 f92a 	bl	8000580 <__aeabi_dmul>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f8 ff6e 	bl	8000214 <__adddf3>
 8007338:	4604      	mov	r4, r0
 800733a:	460d      	mov	r5, r1
 800733c:	ec45 4b10 	vmov	d0, r4, r5
 8007340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007344:	2d00      	cmp	r5, #0
 8007346:	dc10      	bgt.n	800736a <__ieee754_sqrt+0x62>
 8007348:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800734c:	4330      	orrs	r0, r6
 800734e:	d0f5      	beq.n	800733c <__ieee754_sqrt+0x34>
 8007350:	b15d      	cbz	r5, 800736a <__ieee754_sqrt+0x62>
 8007352:	ee10 2a10 	vmov	r2, s0
 8007356:	462b      	mov	r3, r5
 8007358:	ee10 0a10 	vmov	r0, s0
 800735c:	f7f8 ff58 	bl	8000210 <__aeabi_dsub>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	f7f9 fa36 	bl	80007d4 <__aeabi_ddiv>
 8007368:	e7e6      	b.n	8007338 <__ieee754_sqrt+0x30>
 800736a:	1512      	asrs	r2, r2, #20
 800736c:	d074      	beq.n	8007458 <__ieee754_sqrt+0x150>
 800736e:	07d4      	lsls	r4, r2, #31
 8007370:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007374:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800737c:	bf5e      	ittt	pl
 800737e:	0fda      	lsrpl	r2, r3, #31
 8007380:	005b      	lslpl	r3, r3, #1
 8007382:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007386:	2400      	movs	r4, #0
 8007388:	0fda      	lsrs	r2, r3, #31
 800738a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800738e:	107f      	asrs	r7, r7, #1
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	2516      	movs	r5, #22
 8007394:	4620      	mov	r0, r4
 8007396:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800739a:	1886      	adds	r6, r0, r2
 800739c:	428e      	cmp	r6, r1
 800739e:	bfde      	ittt	le
 80073a0:	1b89      	suble	r1, r1, r6
 80073a2:	18b0      	addle	r0, r6, r2
 80073a4:	18a4      	addle	r4, r4, r2
 80073a6:	0049      	lsls	r1, r1, #1
 80073a8:	3d01      	subs	r5, #1
 80073aa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80073ae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80073b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073b6:	d1f0      	bne.n	800739a <__ieee754_sqrt+0x92>
 80073b8:	462a      	mov	r2, r5
 80073ba:	f04f 0e20 	mov.w	lr, #32
 80073be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80073c2:	4281      	cmp	r1, r0
 80073c4:	eb06 0c05 	add.w	ip, r6, r5
 80073c8:	dc02      	bgt.n	80073d0 <__ieee754_sqrt+0xc8>
 80073ca:	d113      	bne.n	80073f4 <__ieee754_sqrt+0xec>
 80073cc:	459c      	cmp	ip, r3
 80073ce:	d811      	bhi.n	80073f4 <__ieee754_sqrt+0xec>
 80073d0:	f1bc 0f00 	cmp.w	ip, #0
 80073d4:	eb0c 0506 	add.w	r5, ip, r6
 80073d8:	da43      	bge.n	8007462 <__ieee754_sqrt+0x15a>
 80073da:	2d00      	cmp	r5, #0
 80073dc:	db41      	blt.n	8007462 <__ieee754_sqrt+0x15a>
 80073de:	f100 0801 	add.w	r8, r0, #1
 80073e2:	1a09      	subs	r1, r1, r0
 80073e4:	459c      	cmp	ip, r3
 80073e6:	bf88      	it	hi
 80073e8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80073ec:	eba3 030c 	sub.w	r3, r3, ip
 80073f0:	4432      	add	r2, r6
 80073f2:	4640      	mov	r0, r8
 80073f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80073f8:	f1be 0e01 	subs.w	lr, lr, #1
 80073fc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007400:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007404:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007408:	d1db      	bne.n	80073c2 <__ieee754_sqrt+0xba>
 800740a:	430b      	orrs	r3, r1
 800740c:	d006      	beq.n	800741c <__ieee754_sqrt+0x114>
 800740e:	1c50      	adds	r0, r2, #1
 8007410:	bf13      	iteet	ne
 8007412:	3201      	addne	r2, #1
 8007414:	3401      	addeq	r4, #1
 8007416:	4672      	moveq	r2, lr
 8007418:	f022 0201 	bicne.w	r2, r2, #1
 800741c:	1063      	asrs	r3, r4, #1
 800741e:	0852      	lsrs	r2, r2, #1
 8007420:	07e1      	lsls	r1, r4, #31
 8007422:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007426:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800742a:	bf48      	it	mi
 800742c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007430:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007434:	4614      	mov	r4, r2
 8007436:	e781      	b.n	800733c <__ieee754_sqrt+0x34>
 8007438:	0ad9      	lsrs	r1, r3, #11
 800743a:	3815      	subs	r0, #21
 800743c:	055b      	lsls	r3, r3, #21
 800743e:	2900      	cmp	r1, #0
 8007440:	d0fa      	beq.n	8007438 <__ieee754_sqrt+0x130>
 8007442:	02cd      	lsls	r5, r1, #11
 8007444:	d50a      	bpl.n	800745c <__ieee754_sqrt+0x154>
 8007446:	f1c2 0420 	rsb	r4, r2, #32
 800744a:	fa23 f404 	lsr.w	r4, r3, r4
 800744e:	1e55      	subs	r5, r2, #1
 8007450:	4093      	lsls	r3, r2
 8007452:	4321      	orrs	r1, r4
 8007454:	1b42      	subs	r2, r0, r5
 8007456:	e78a      	b.n	800736e <__ieee754_sqrt+0x66>
 8007458:	4610      	mov	r0, r2
 800745a:	e7f0      	b.n	800743e <__ieee754_sqrt+0x136>
 800745c:	0049      	lsls	r1, r1, #1
 800745e:	3201      	adds	r2, #1
 8007460:	e7ef      	b.n	8007442 <__ieee754_sqrt+0x13a>
 8007462:	4680      	mov	r8, r0
 8007464:	e7bd      	b.n	80073e2 <__ieee754_sqrt+0xda>
 8007466:	bf00      	nop
 8007468:	7ff00000 	.word	0x7ff00000
 800746c:	00000000 	.word	0x00000000

08007470 <__kernel_cos>:
 8007470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	ec57 6b10 	vmov	r6, r7, d0
 8007478:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800747c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007480:	ed8d 1b00 	vstr	d1, [sp]
 8007484:	da07      	bge.n	8007496 <__kernel_cos+0x26>
 8007486:	ee10 0a10 	vmov	r0, s0
 800748a:	4639      	mov	r1, r7
 800748c:	f7f9 fb28 	bl	8000ae0 <__aeabi_d2iz>
 8007490:	2800      	cmp	r0, #0
 8007492:	f000 8088 	beq.w	80075a6 <__kernel_cos+0x136>
 8007496:	4632      	mov	r2, r6
 8007498:	463b      	mov	r3, r7
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f9 f86f 	bl	8000580 <__aeabi_dmul>
 80074a2:	4b51      	ldr	r3, [pc, #324]	; (80075e8 <__kernel_cos+0x178>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	f7f9 f869 	bl	8000580 <__aeabi_dmul>
 80074ae:	a340      	add	r3, pc, #256	; (adr r3, 80075b0 <__kernel_cos+0x140>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	4682      	mov	sl, r0
 80074b6:	468b      	mov	fp, r1
 80074b8:	4620      	mov	r0, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	f7f9 f860 	bl	8000580 <__aeabi_dmul>
 80074c0:	a33d      	add	r3, pc, #244	; (adr r3, 80075b8 <__kernel_cos+0x148>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fea5 	bl	8000214 <__adddf3>
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f9 f857 	bl	8000580 <__aeabi_dmul>
 80074d2:	a33b      	add	r3, pc, #236	; (adr r3, 80075c0 <__kernel_cos+0x150>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fe9a 	bl	8000210 <__aeabi_dsub>
 80074dc:	4622      	mov	r2, r4
 80074de:	462b      	mov	r3, r5
 80074e0:	f7f9 f84e 	bl	8000580 <__aeabi_dmul>
 80074e4:	a338      	add	r3, pc, #224	; (adr r3, 80075c8 <__kernel_cos+0x158>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fe93 	bl	8000214 <__adddf3>
 80074ee:	4622      	mov	r2, r4
 80074f0:	462b      	mov	r3, r5
 80074f2:	f7f9 f845 	bl	8000580 <__aeabi_dmul>
 80074f6:	a336      	add	r3, pc, #216	; (adr r3, 80075d0 <__kernel_cos+0x160>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 fe88 	bl	8000210 <__aeabi_dsub>
 8007500:	4622      	mov	r2, r4
 8007502:	462b      	mov	r3, r5
 8007504:	f7f9 f83c 	bl	8000580 <__aeabi_dmul>
 8007508:	a333      	add	r3, pc, #204	; (adr r3, 80075d8 <__kernel_cos+0x168>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f8 fe81 	bl	8000214 <__adddf3>
 8007512:	4622      	mov	r2, r4
 8007514:	462b      	mov	r3, r5
 8007516:	f7f9 f833 	bl	8000580 <__aeabi_dmul>
 800751a:	4622      	mov	r2, r4
 800751c:	462b      	mov	r3, r5
 800751e:	f7f9 f82f 	bl	8000580 <__aeabi_dmul>
 8007522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007526:	4604      	mov	r4, r0
 8007528:	460d      	mov	r5, r1
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f9 f827 	bl	8000580 <__aeabi_dmul>
 8007532:	460b      	mov	r3, r1
 8007534:	4602      	mov	r2, r0
 8007536:	4629      	mov	r1, r5
 8007538:	4620      	mov	r0, r4
 800753a:	f7f8 fe69 	bl	8000210 <__aeabi_dsub>
 800753e:	4b2b      	ldr	r3, [pc, #172]	; (80075ec <__kernel_cos+0x17c>)
 8007540:	4598      	cmp	r8, r3
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	dc10      	bgt.n	800756a <__kernel_cos+0xfa>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4650      	mov	r0, sl
 800754e:	4659      	mov	r1, fp
 8007550:	f7f8 fe5e 	bl	8000210 <__aeabi_dsub>
 8007554:	460b      	mov	r3, r1
 8007556:	4926      	ldr	r1, [pc, #152]	; (80075f0 <__kernel_cos+0x180>)
 8007558:	4602      	mov	r2, r0
 800755a:	2000      	movs	r0, #0
 800755c:	f7f8 fe58 	bl	8000210 <__aeabi_dsub>
 8007560:	ec41 0b10 	vmov	d0, r0, r1
 8007564:	b003      	add	sp, #12
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	4b22      	ldr	r3, [pc, #136]	; (80075f4 <__kernel_cos+0x184>)
 800756c:	4920      	ldr	r1, [pc, #128]	; (80075f0 <__kernel_cos+0x180>)
 800756e:	4598      	cmp	r8, r3
 8007570:	bfcc      	ite	gt
 8007572:	4d21      	ldrgt	r5, [pc, #132]	; (80075f8 <__kernel_cos+0x188>)
 8007574:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007578:	2400      	movs	r4, #0
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	2000      	movs	r0, #0
 8007580:	f7f8 fe46 	bl	8000210 <__aeabi_dsub>
 8007584:	4622      	mov	r2, r4
 8007586:	4680      	mov	r8, r0
 8007588:	4689      	mov	r9, r1
 800758a:	462b      	mov	r3, r5
 800758c:	4650      	mov	r0, sl
 800758e:	4659      	mov	r1, fp
 8007590:	f7f8 fe3e 	bl	8000210 <__aeabi_dsub>
 8007594:	4632      	mov	r2, r6
 8007596:	463b      	mov	r3, r7
 8007598:	f7f8 fe3a 	bl	8000210 <__aeabi_dsub>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4640      	mov	r0, r8
 80075a2:	4649      	mov	r1, r9
 80075a4:	e7da      	b.n	800755c <__kernel_cos+0xec>
 80075a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80075e0 <__kernel_cos+0x170>
 80075aa:	e7db      	b.n	8007564 <__kernel_cos+0xf4>
 80075ac:	f3af 8000 	nop.w
 80075b0:	be8838d4 	.word	0xbe8838d4
 80075b4:	bda8fae9 	.word	0xbda8fae9
 80075b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80075bc:	3e21ee9e 	.word	0x3e21ee9e
 80075c0:	809c52ad 	.word	0x809c52ad
 80075c4:	3e927e4f 	.word	0x3e927e4f
 80075c8:	19cb1590 	.word	0x19cb1590
 80075cc:	3efa01a0 	.word	0x3efa01a0
 80075d0:	16c15177 	.word	0x16c15177
 80075d4:	3f56c16c 	.word	0x3f56c16c
 80075d8:	5555554c 	.word	0x5555554c
 80075dc:	3fa55555 	.word	0x3fa55555
 80075e0:	00000000 	.word	0x00000000
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	3fe00000 	.word	0x3fe00000
 80075ec:	3fd33332 	.word	0x3fd33332
 80075f0:	3ff00000 	.word	0x3ff00000
 80075f4:	3fe90000 	.word	0x3fe90000
 80075f8:	3fd20000 	.word	0x3fd20000
 80075fc:	00000000 	.word	0x00000000

08007600 <__kernel_rem_pio2>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b02 	vpush	{d8}
 8007608:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800760c:	f112 0f14 	cmn.w	r2, #20
 8007610:	9308      	str	r3, [sp, #32]
 8007612:	9101      	str	r1, [sp, #4]
 8007614:	4bc4      	ldr	r3, [pc, #784]	; (8007928 <__kernel_rem_pio2+0x328>)
 8007616:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007618:	900b      	str	r0, [sp, #44]	; 0x2c
 800761a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800761e:	9302      	str	r3, [sp, #8]
 8007620:	9b08      	ldr	r3, [sp, #32]
 8007622:	f103 33ff 	add.w	r3, r3, #4294967295
 8007626:	bfa8      	it	ge
 8007628:	1ed4      	subge	r4, r2, #3
 800762a:	9306      	str	r3, [sp, #24]
 800762c:	bfb2      	itee	lt
 800762e:	2400      	movlt	r4, #0
 8007630:	2318      	movge	r3, #24
 8007632:	fb94 f4f3 	sdivge	r4, r4, r3
 8007636:	f06f 0317 	mvn.w	r3, #23
 800763a:	fb04 3303 	mla	r3, r4, r3, r3
 800763e:	eb03 0a02 	add.w	sl, r3, r2
 8007642:	9b02      	ldr	r3, [sp, #8]
 8007644:	9a06      	ldr	r2, [sp, #24]
 8007646:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007918 <__kernel_rem_pio2+0x318>
 800764a:	eb03 0802 	add.w	r8, r3, r2
 800764e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007650:	1aa7      	subs	r7, r4, r2
 8007652:	ae22      	add	r6, sp, #136	; 0x88
 8007654:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007658:	2500      	movs	r5, #0
 800765a:	4545      	cmp	r5, r8
 800765c:	dd13      	ble.n	8007686 <__kernel_rem_pio2+0x86>
 800765e:	9b08      	ldr	r3, [sp, #32]
 8007660:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007918 <__kernel_rem_pio2+0x318>
 8007664:	aa22      	add	r2, sp, #136	; 0x88
 8007666:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800766a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	9b02      	ldr	r3, [sp, #8]
 8007674:	4598      	cmp	r8, r3
 8007676:	dc2f      	bgt.n	80076d8 <__kernel_rem_pio2+0xd8>
 8007678:	ed8d 8b04 	vstr	d8, [sp, #16]
 800767c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007680:	462f      	mov	r7, r5
 8007682:	2600      	movs	r6, #0
 8007684:	e01b      	b.n	80076be <__kernel_rem_pio2+0xbe>
 8007686:	42ef      	cmn	r7, r5
 8007688:	d407      	bmi.n	800769a <__kernel_rem_pio2+0x9a>
 800768a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800768e:	f7f8 ff0d 	bl	80004ac <__aeabi_i2d>
 8007692:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007696:	3501      	adds	r5, #1
 8007698:	e7df      	b.n	800765a <__kernel_rem_pio2+0x5a>
 800769a:	ec51 0b18 	vmov	r0, r1, d8
 800769e:	e7f8      	b.n	8007692 <__kernel_rem_pio2+0x92>
 80076a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80076a8:	f7f8 ff6a 	bl	8000580 <__aeabi_dmul>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076b4:	f7f8 fdae 	bl	8000214 <__adddf3>
 80076b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076bc:	3601      	adds	r6, #1
 80076be:	9b06      	ldr	r3, [sp, #24]
 80076c0:	429e      	cmp	r6, r3
 80076c2:	f1a7 0708 	sub.w	r7, r7, #8
 80076c6:	ddeb      	ble.n	80076a0 <__kernel_rem_pio2+0xa0>
 80076c8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80076cc:	f108 0801 	add.w	r8, r8, #1
 80076d0:	ecab 7b02 	vstmia	fp!, {d7}
 80076d4:	3508      	adds	r5, #8
 80076d6:	e7cc      	b.n	8007672 <__kernel_rem_pio2+0x72>
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	aa0e      	add	r2, sp, #56	; 0x38
 80076dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076e0:	930d      	str	r3, [sp, #52]	; 0x34
 80076e2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80076e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80076e8:	9c02      	ldr	r4, [sp, #8]
 80076ea:	930c      	str	r3, [sp, #48]	; 0x30
 80076ec:	00e3      	lsls	r3, r4, #3
 80076ee:	930a      	str	r3, [sp, #40]	; 0x28
 80076f0:	ab9a      	add	r3, sp, #616	; 0x268
 80076f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80076fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80076fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8007700:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007704:	46c3      	mov	fp, r8
 8007706:	46a1      	mov	r9, r4
 8007708:	f1b9 0f00 	cmp.w	r9, #0
 800770c:	f1a5 0508 	sub.w	r5, r5, #8
 8007710:	dc77      	bgt.n	8007802 <__kernel_rem_pio2+0x202>
 8007712:	ec47 6b10 	vmov	d0, r6, r7
 8007716:	4650      	mov	r0, sl
 8007718:	f000 fdb6 	bl	8008288 <scalbn>
 800771c:	ec57 6b10 	vmov	r6, r7, d0
 8007720:	2200      	movs	r2, #0
 8007722:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007726:	ee10 0a10 	vmov	r0, s0
 800772a:	4639      	mov	r1, r7
 800772c:	f7f8 ff28 	bl	8000580 <__aeabi_dmul>
 8007730:	ec41 0b10 	vmov	d0, r0, r1
 8007734:	f000 fd20 	bl	8008178 <floor>
 8007738:	4b7c      	ldr	r3, [pc, #496]	; (800792c <__kernel_rem_pio2+0x32c>)
 800773a:	ec51 0b10 	vmov	r0, r1, d0
 800773e:	2200      	movs	r2, #0
 8007740:	f7f8 ff1e 	bl	8000580 <__aeabi_dmul>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f8 fd60 	bl	8000210 <__aeabi_dsub>
 8007750:	460f      	mov	r7, r1
 8007752:	4606      	mov	r6, r0
 8007754:	f7f9 f9c4 	bl	8000ae0 <__aeabi_d2iz>
 8007758:	9004      	str	r0, [sp, #16]
 800775a:	f7f8 fea7 	bl	80004ac <__aeabi_i2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f8 fd53 	bl	8000210 <__aeabi_dsub>
 800776a:	f1ba 0f00 	cmp.w	sl, #0
 800776e:	4606      	mov	r6, r0
 8007770:	460f      	mov	r7, r1
 8007772:	dd6d      	ble.n	8007850 <__kernel_rem_pio2+0x250>
 8007774:	1e62      	subs	r2, r4, #1
 8007776:	ab0e      	add	r3, sp, #56	; 0x38
 8007778:	9d04      	ldr	r5, [sp, #16]
 800777a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800777e:	f1ca 0118 	rsb	r1, sl, #24
 8007782:	fa40 f301 	asr.w	r3, r0, r1
 8007786:	441d      	add	r5, r3
 8007788:	408b      	lsls	r3, r1
 800778a:	1ac0      	subs	r0, r0, r3
 800778c:	ab0e      	add	r3, sp, #56	; 0x38
 800778e:	9504      	str	r5, [sp, #16]
 8007790:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007794:	f1ca 0317 	rsb	r3, sl, #23
 8007798:	fa40 fb03 	asr.w	fp, r0, r3
 800779c:	f1bb 0f00 	cmp.w	fp, #0
 80077a0:	dd65      	ble.n	800786e <__kernel_rem_pio2+0x26e>
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	2200      	movs	r2, #0
 80077a6:	3301      	adds	r3, #1
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	4615      	mov	r5, r2
 80077ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80077b0:	4294      	cmp	r4, r2
 80077b2:	f300 809c 	bgt.w	80078ee <__kernel_rem_pio2+0x2ee>
 80077b6:	f1ba 0f00 	cmp.w	sl, #0
 80077ba:	dd07      	ble.n	80077cc <__kernel_rem_pio2+0x1cc>
 80077bc:	f1ba 0f01 	cmp.w	sl, #1
 80077c0:	f000 80c0 	beq.w	8007944 <__kernel_rem_pio2+0x344>
 80077c4:	f1ba 0f02 	cmp.w	sl, #2
 80077c8:	f000 80c6 	beq.w	8007958 <__kernel_rem_pio2+0x358>
 80077cc:	f1bb 0f02 	cmp.w	fp, #2
 80077d0:	d14d      	bne.n	800786e <__kernel_rem_pio2+0x26e>
 80077d2:	4632      	mov	r2, r6
 80077d4:	463b      	mov	r3, r7
 80077d6:	4956      	ldr	r1, [pc, #344]	; (8007930 <__kernel_rem_pio2+0x330>)
 80077d8:	2000      	movs	r0, #0
 80077da:	f7f8 fd19 	bl	8000210 <__aeabi_dsub>
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	d043      	beq.n	800786e <__kernel_rem_pio2+0x26e>
 80077e6:	4650      	mov	r0, sl
 80077e8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007920 <__kernel_rem_pio2+0x320>
 80077ec:	f000 fd4c 	bl	8008288 <scalbn>
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	ec53 2b10 	vmov	r2, r3, d0
 80077f8:	f7f8 fd0a 	bl	8000210 <__aeabi_dsub>
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	e035      	b.n	800786e <__kernel_rem_pio2+0x26e>
 8007802:	4b4c      	ldr	r3, [pc, #304]	; (8007934 <__kernel_rem_pio2+0x334>)
 8007804:	2200      	movs	r2, #0
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 feb9 	bl	8000580 <__aeabi_dmul>
 800780e:	f7f9 f967 	bl	8000ae0 <__aeabi_d2iz>
 8007812:	f7f8 fe4b 	bl	80004ac <__aeabi_i2d>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	ec43 2b18 	vmov	d8, r2, r3
 800781e:	4b46      	ldr	r3, [pc, #280]	; (8007938 <__kernel_rem_pio2+0x338>)
 8007820:	2200      	movs	r2, #0
 8007822:	f7f8 fead 	bl	8000580 <__aeabi_dmul>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f8 fcef 	bl	8000210 <__aeabi_dsub>
 8007832:	f7f9 f955 	bl	8000ae0 <__aeabi_d2iz>
 8007836:	e9d5 2300 	ldrd	r2, r3, [r5]
 800783a:	f84b 0b04 	str.w	r0, [fp], #4
 800783e:	ec51 0b18 	vmov	r0, r1, d8
 8007842:	f7f8 fce7 	bl	8000214 <__adddf3>
 8007846:	f109 39ff 	add.w	r9, r9, #4294967295
 800784a:	4606      	mov	r6, r0
 800784c:	460f      	mov	r7, r1
 800784e:	e75b      	b.n	8007708 <__kernel_rem_pio2+0x108>
 8007850:	d106      	bne.n	8007860 <__kernel_rem_pio2+0x260>
 8007852:	1e63      	subs	r3, r4, #1
 8007854:	aa0e      	add	r2, sp, #56	; 0x38
 8007856:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800785a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800785e:	e79d      	b.n	800779c <__kernel_rem_pio2+0x19c>
 8007860:	4b36      	ldr	r3, [pc, #216]	; (800793c <__kernel_rem_pio2+0x33c>)
 8007862:	2200      	movs	r2, #0
 8007864:	f7f9 f912 	bl	8000a8c <__aeabi_dcmpge>
 8007868:	2800      	cmp	r0, #0
 800786a:	d13d      	bne.n	80078e8 <__kernel_rem_pio2+0x2e8>
 800786c:	4683      	mov	fp, r0
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 f8eb 	bl	8000a50 <__aeabi_dcmpeq>
 800787a:	2800      	cmp	r0, #0
 800787c:	f000 80c0 	beq.w	8007a00 <__kernel_rem_pio2+0x400>
 8007880:	1e65      	subs	r5, r4, #1
 8007882:	462b      	mov	r3, r5
 8007884:	2200      	movs	r2, #0
 8007886:	9902      	ldr	r1, [sp, #8]
 8007888:	428b      	cmp	r3, r1
 800788a:	da6c      	bge.n	8007966 <__kernel_rem_pio2+0x366>
 800788c:	2a00      	cmp	r2, #0
 800788e:	f000 8089 	beq.w	80079a4 <__kernel_rem_pio2+0x3a4>
 8007892:	ab0e      	add	r3, sp, #56	; 0x38
 8007894:	f1aa 0a18 	sub.w	sl, sl, #24
 8007898:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 80ad 	beq.w	80079fc <__kernel_rem_pio2+0x3fc>
 80078a2:	4650      	mov	r0, sl
 80078a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007920 <__kernel_rem_pio2+0x320>
 80078a8:	f000 fcee 	bl	8008288 <scalbn>
 80078ac:	ab9a      	add	r3, sp, #616	; 0x268
 80078ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80078b2:	ec57 6b10 	vmov	r6, r7, d0
 80078b6:	00ec      	lsls	r4, r5, #3
 80078b8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80078bc:	46aa      	mov	sl, r5
 80078be:	f1ba 0f00 	cmp.w	sl, #0
 80078c2:	f280 80d6 	bge.w	8007a72 <__kernel_rem_pio2+0x472>
 80078c6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007918 <__kernel_rem_pio2+0x318>
 80078ca:	462e      	mov	r6, r5
 80078cc:	2e00      	cmp	r6, #0
 80078ce:	f2c0 8104 	blt.w	8007ada <__kernel_rem_pio2+0x4da>
 80078d2:	ab72      	add	r3, sp, #456	; 0x1c8
 80078d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80078d8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007940 <__kernel_rem_pio2+0x340>
 80078dc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80078e0:	f04f 0800 	mov.w	r8, #0
 80078e4:	1baf      	subs	r7, r5, r6
 80078e6:	e0ea      	b.n	8007abe <__kernel_rem_pio2+0x4be>
 80078e8:	f04f 0b02 	mov.w	fp, #2
 80078ec:	e759      	b.n	80077a2 <__kernel_rem_pio2+0x1a2>
 80078ee:	f8d8 3000 	ldr.w	r3, [r8]
 80078f2:	b955      	cbnz	r5, 800790a <__kernel_rem_pio2+0x30a>
 80078f4:	b123      	cbz	r3, 8007900 <__kernel_rem_pio2+0x300>
 80078f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80078fa:	f8c8 3000 	str.w	r3, [r8]
 80078fe:	2301      	movs	r3, #1
 8007900:	3201      	adds	r2, #1
 8007902:	f108 0804 	add.w	r8, r8, #4
 8007906:	461d      	mov	r5, r3
 8007908:	e752      	b.n	80077b0 <__kernel_rem_pio2+0x1b0>
 800790a:	1acb      	subs	r3, r1, r3
 800790c:	f8c8 3000 	str.w	r3, [r8]
 8007910:	462b      	mov	r3, r5
 8007912:	e7f5      	b.n	8007900 <__kernel_rem_pio2+0x300>
 8007914:	f3af 8000 	nop.w
	...
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	08008650 	.word	0x08008650
 800792c:	40200000 	.word	0x40200000
 8007930:	3ff00000 	.word	0x3ff00000
 8007934:	3e700000 	.word	0x3e700000
 8007938:	41700000 	.word	0x41700000
 800793c:	3fe00000 	.word	0x3fe00000
 8007940:	08008610 	.word	0x08008610
 8007944:	1e62      	subs	r2, r4, #1
 8007946:	ab0e      	add	r3, sp, #56	; 0x38
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007950:	a90e      	add	r1, sp, #56	; 0x38
 8007952:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007956:	e739      	b.n	80077cc <__kernel_rem_pio2+0x1cc>
 8007958:	1e62      	subs	r2, r4, #1
 800795a:	ab0e      	add	r3, sp, #56	; 0x38
 800795c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007960:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007964:	e7f4      	b.n	8007950 <__kernel_rem_pio2+0x350>
 8007966:	a90e      	add	r1, sp, #56	; 0x38
 8007968:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800796c:	3b01      	subs	r3, #1
 800796e:	430a      	orrs	r2, r1
 8007970:	e789      	b.n	8007886 <__kernel_rem_pio2+0x286>
 8007972:	3301      	adds	r3, #1
 8007974:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007978:	2900      	cmp	r1, #0
 800797a:	d0fa      	beq.n	8007972 <__kernel_rem_pio2+0x372>
 800797c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800797e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007982:	446a      	add	r2, sp
 8007984:	3a98      	subs	r2, #152	; 0x98
 8007986:	920a      	str	r2, [sp, #40]	; 0x28
 8007988:	9a08      	ldr	r2, [sp, #32]
 800798a:	18e3      	adds	r3, r4, r3
 800798c:	18a5      	adds	r5, r4, r2
 800798e:	aa22      	add	r2, sp, #136	; 0x88
 8007990:	f104 0801 	add.w	r8, r4, #1
 8007994:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	4543      	cmp	r3, r8
 800799e:	da04      	bge.n	80079aa <__kernel_rem_pio2+0x3aa>
 80079a0:	461c      	mov	r4, r3
 80079a2:	e6a3      	b.n	80076ec <__kernel_rem_pio2+0xec>
 80079a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079a6:	2301      	movs	r3, #1
 80079a8:	e7e4      	b.n	8007974 <__kernel_rem_pio2+0x374>
 80079aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80079b0:	f7f8 fd7c 	bl	80004ac <__aeabi_i2d>
 80079b4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80079b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ba:	46ab      	mov	fp, r5
 80079bc:	461c      	mov	r4, r3
 80079be:	f04f 0900 	mov.w	r9, #0
 80079c2:	2600      	movs	r6, #0
 80079c4:	2700      	movs	r7, #0
 80079c6:	9b06      	ldr	r3, [sp, #24]
 80079c8:	4599      	cmp	r9, r3
 80079ca:	dd06      	ble.n	80079da <__kernel_rem_pio2+0x3da>
 80079cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ce:	e8e3 6702 	strd	r6, r7, [r3], #8
 80079d2:	f108 0801 	add.w	r8, r8, #1
 80079d6:	930a      	str	r3, [sp, #40]	; 0x28
 80079d8:	e7df      	b.n	800799a <__kernel_rem_pio2+0x39a>
 80079da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80079de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80079e2:	f7f8 fdcd 	bl	8000580 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 fc11 	bl	8000214 <__adddf3>
 80079f2:	f109 0901 	add.w	r9, r9, #1
 80079f6:	4606      	mov	r6, r0
 80079f8:	460f      	mov	r7, r1
 80079fa:	e7e4      	b.n	80079c6 <__kernel_rem_pio2+0x3c6>
 80079fc:	3d01      	subs	r5, #1
 80079fe:	e748      	b.n	8007892 <__kernel_rem_pio2+0x292>
 8007a00:	ec47 6b10 	vmov	d0, r6, r7
 8007a04:	f1ca 0000 	rsb	r0, sl, #0
 8007a08:	f000 fc3e 	bl	8008288 <scalbn>
 8007a0c:	ec57 6b10 	vmov	r6, r7, d0
 8007a10:	4ba0      	ldr	r3, [pc, #640]	; (8007c94 <__kernel_rem_pio2+0x694>)
 8007a12:	ee10 0a10 	vmov	r0, s0
 8007a16:	2200      	movs	r2, #0
 8007a18:	4639      	mov	r1, r7
 8007a1a:	f7f9 f837 	bl	8000a8c <__aeabi_dcmpge>
 8007a1e:	b1f8      	cbz	r0, 8007a60 <__kernel_rem_pio2+0x460>
 8007a20:	4b9d      	ldr	r3, [pc, #628]	; (8007c98 <__kernel_rem_pio2+0x698>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	4630      	mov	r0, r6
 8007a26:	4639      	mov	r1, r7
 8007a28:	f7f8 fdaa 	bl	8000580 <__aeabi_dmul>
 8007a2c:	f7f9 f858 	bl	8000ae0 <__aeabi_d2iz>
 8007a30:	4680      	mov	r8, r0
 8007a32:	f7f8 fd3b 	bl	80004ac <__aeabi_i2d>
 8007a36:	4b97      	ldr	r3, [pc, #604]	; (8007c94 <__kernel_rem_pio2+0x694>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f7f8 fda1 	bl	8000580 <__aeabi_dmul>
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4602      	mov	r2, r0
 8007a42:	4639      	mov	r1, r7
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7f8 fbe3 	bl	8000210 <__aeabi_dsub>
 8007a4a:	f7f9 f849 	bl	8000ae0 <__aeabi_d2iz>
 8007a4e:	1c65      	adds	r5, r4, #1
 8007a50:	ab0e      	add	r3, sp, #56	; 0x38
 8007a52:	f10a 0a18 	add.w	sl, sl, #24
 8007a56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a5a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007a5e:	e720      	b.n	80078a2 <__kernel_rem_pio2+0x2a2>
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f9 f83c 	bl	8000ae0 <__aeabi_d2iz>
 8007a68:	ab0e      	add	r3, sp, #56	; 0x38
 8007a6a:	4625      	mov	r5, r4
 8007a6c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a70:	e717      	b.n	80078a2 <__kernel_rem_pio2+0x2a2>
 8007a72:	ab0e      	add	r3, sp, #56	; 0x38
 8007a74:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007a78:	f7f8 fd18 	bl	80004ac <__aeabi_i2d>
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	463b      	mov	r3, r7
 8007a80:	f7f8 fd7e 	bl	8000580 <__aeabi_dmul>
 8007a84:	4b84      	ldr	r3, [pc, #528]	; (8007c98 <__kernel_rem_pio2+0x698>)
 8007a86:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7f8 fd76 	bl	8000580 <__aeabi_dmul>
 8007a94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	e70f      	b.n	80078be <__kernel_rem_pio2+0x2be>
 8007a9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007aa2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007aa6:	f7f8 fd6b 	bl	8000580 <__aeabi_dmul>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab2:	f7f8 fbaf 	bl	8000214 <__adddf3>
 8007ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aba:	f108 0801 	add.w	r8, r8, #1
 8007abe:	9b02      	ldr	r3, [sp, #8]
 8007ac0:	4598      	cmp	r8, r3
 8007ac2:	dc01      	bgt.n	8007ac8 <__kernel_rem_pio2+0x4c8>
 8007ac4:	45b8      	cmp	r8, r7
 8007ac6:	ddea      	ble.n	8007a9e <__kernel_rem_pio2+0x49e>
 8007ac8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007acc:	ab4a      	add	r3, sp, #296	; 0x128
 8007ace:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ad2:	ed87 7b00 	vstr	d7, [r7]
 8007ad6:	3e01      	subs	r6, #1
 8007ad8:	e6f8      	b.n	80078cc <__kernel_rem_pio2+0x2cc>
 8007ada:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	dc0b      	bgt.n	8007af8 <__kernel_rem_pio2+0x4f8>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dc35      	bgt.n	8007b50 <__kernel_rem_pio2+0x550>
 8007ae4:	d059      	beq.n	8007b9a <__kernel_rem_pio2+0x59a>
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	f003 0007 	and.w	r0, r3, #7
 8007aec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007af0:	ecbd 8b02 	vpop	{d8}
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d1f3      	bne.n	8007ae6 <__kernel_rem_pio2+0x4e6>
 8007afe:	ab4a      	add	r3, sp, #296	; 0x128
 8007b00:	4423      	add	r3, r4
 8007b02:	9306      	str	r3, [sp, #24]
 8007b04:	461c      	mov	r4, r3
 8007b06:	469a      	mov	sl, r3
 8007b08:	9502      	str	r5, [sp, #8]
 8007b0a:	9b02      	ldr	r3, [sp, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007b12:	dc6b      	bgt.n	8007bec <__kernel_rem_pio2+0x5ec>
 8007b14:	46aa      	mov	sl, r5
 8007b16:	f1ba 0f01 	cmp.w	sl, #1
 8007b1a:	f1a4 0408 	sub.w	r4, r4, #8
 8007b1e:	f300 8085 	bgt.w	8007c2c <__kernel_rem_pio2+0x62c>
 8007b22:	9c06      	ldr	r4, [sp, #24]
 8007b24:	2000      	movs	r0, #0
 8007b26:	3408      	adds	r4, #8
 8007b28:	2100      	movs	r1, #0
 8007b2a:	2d01      	cmp	r5, #1
 8007b2c:	f300 809d 	bgt.w	8007c6a <__kernel_rem_pio2+0x66a>
 8007b30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007b34:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007b38:	f1bb 0f00 	cmp.w	fp, #0
 8007b3c:	f040 809b 	bne.w	8007c76 <__kernel_rem_pio2+0x676>
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	e9c3 5600 	strd	r5, r6, [r3]
 8007b46:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007b4a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007b4e:	e7ca      	b.n	8007ae6 <__kernel_rem_pio2+0x4e6>
 8007b50:	3408      	adds	r4, #8
 8007b52:	ab4a      	add	r3, sp, #296	; 0x128
 8007b54:	441c      	add	r4, r3
 8007b56:	462e      	mov	r6, r5
 8007b58:	2000      	movs	r0, #0
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	2e00      	cmp	r6, #0
 8007b5e:	da36      	bge.n	8007bce <__kernel_rem_pio2+0x5ce>
 8007b60:	f1bb 0f00 	cmp.w	fp, #0
 8007b64:	d039      	beq.n	8007bda <__kernel_rem_pio2+0x5da>
 8007b66:	4602      	mov	r2, r0
 8007b68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b6c:	9c01      	ldr	r4, [sp, #4]
 8007b6e:	e9c4 2300 	strd	r2, r3, [r4]
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007b7a:	f7f8 fb49 	bl	8000210 <__aeabi_dsub>
 8007b7e:	ae4c      	add	r6, sp, #304	; 0x130
 8007b80:	2401      	movs	r4, #1
 8007b82:	42a5      	cmp	r5, r4
 8007b84:	da2c      	bge.n	8007be0 <__kernel_rem_pio2+0x5e0>
 8007b86:	f1bb 0f00 	cmp.w	fp, #0
 8007b8a:	d002      	beq.n	8007b92 <__kernel_rem_pio2+0x592>
 8007b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b90:	4619      	mov	r1, r3
 8007b92:	9b01      	ldr	r3, [sp, #4]
 8007b94:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007b98:	e7a5      	b.n	8007ae6 <__kernel_rem_pio2+0x4e6>
 8007b9a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007b9e:	eb0d 0403 	add.w	r4, sp, r3
 8007ba2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	da09      	bge.n	8007bc2 <__kernel_rem_pio2+0x5c2>
 8007bae:	f1bb 0f00 	cmp.w	fp, #0
 8007bb2:	d002      	beq.n	8007bba <__kernel_rem_pio2+0x5ba>
 8007bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bb8:	4619      	mov	r1, r3
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	e9c3 0100 	strd	r0, r1, [r3]
 8007bc0:	e791      	b.n	8007ae6 <__kernel_rem_pio2+0x4e6>
 8007bc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007bc6:	f7f8 fb25 	bl	8000214 <__adddf3>
 8007bca:	3d01      	subs	r5, #1
 8007bcc:	e7ed      	b.n	8007baa <__kernel_rem_pio2+0x5aa>
 8007bce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007bd2:	f7f8 fb1f 	bl	8000214 <__adddf3>
 8007bd6:	3e01      	subs	r6, #1
 8007bd8:	e7c0      	b.n	8007b5c <__kernel_rem_pio2+0x55c>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	e7c5      	b.n	8007b6c <__kernel_rem_pio2+0x56c>
 8007be0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007be4:	f7f8 fb16 	bl	8000214 <__adddf3>
 8007be8:	3401      	adds	r4, #1
 8007bea:	e7ca      	b.n	8007b82 <__kernel_rem_pio2+0x582>
 8007bec:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bf0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	9302      	str	r3, [sp, #8]
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	4640      	mov	r0, r8
 8007c00:	4649      	mov	r1, r9
 8007c02:	f7f8 fb07 	bl	8000214 <__adddf3>
 8007c06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 fafd 	bl	8000210 <__aeabi_dsub>
 8007c16:	4632      	mov	r2, r6
 8007c18:	463b      	mov	r3, r7
 8007c1a:	f7f8 fafb 	bl	8000214 <__adddf3>
 8007c1e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007c22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c26:	ed8a 7b00 	vstr	d7, [sl]
 8007c2a:	e76e      	b.n	8007b0a <__kernel_rem_pio2+0x50a>
 8007c2c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007c30:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007c34:	4640      	mov	r0, r8
 8007c36:	4632      	mov	r2, r6
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 faea 	bl	8000214 <__adddf3>
 8007c40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	f7f8 fae0 	bl	8000210 <__aeabi_dsub>
 8007c50:	4632      	mov	r2, r6
 8007c52:	463b      	mov	r3, r7
 8007c54:	f7f8 fade 	bl	8000214 <__adddf3>
 8007c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c60:	ed84 7b00 	vstr	d7, [r4]
 8007c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c68:	e755      	b.n	8007b16 <__kernel_rem_pio2+0x516>
 8007c6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c6e:	f7f8 fad1 	bl	8000214 <__adddf3>
 8007c72:	3d01      	subs	r5, #1
 8007c74:	e759      	b.n	8007b2a <__kernel_rem_pio2+0x52a>
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	9a01      	ldr	r2, [sp, #4]
 8007c7a:	601d      	str	r5, [r3, #0]
 8007c7c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007c80:	605c      	str	r4, [r3, #4]
 8007c82:	609f      	str	r7, [r3, #8]
 8007c84:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007c88:	60d3      	str	r3, [r2, #12]
 8007c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c8e:	6110      	str	r0, [r2, #16]
 8007c90:	6153      	str	r3, [r2, #20]
 8007c92:	e728      	b.n	8007ae6 <__kernel_rem_pio2+0x4e6>
 8007c94:	41700000 	.word	0x41700000
 8007c98:	3e700000 	.word	0x3e700000
 8007c9c:	00000000 	.word	0x00000000

08007ca0 <__kernel_sin>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	ed2d 8b04 	vpush	{d8-d9}
 8007ca8:	eeb0 8a41 	vmov.f32	s16, s2
 8007cac:	eef0 8a61 	vmov.f32	s17, s3
 8007cb0:	ec55 4b10 	vmov	r4, r5, d0
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007cba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007cbe:	9001      	str	r0, [sp, #4]
 8007cc0:	da06      	bge.n	8007cd0 <__kernel_sin+0x30>
 8007cc2:	ee10 0a10 	vmov	r0, s0
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 ff0a 	bl	8000ae0 <__aeabi_d2iz>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d051      	beq.n	8007d74 <__kernel_sin+0xd4>
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fc52 	bl	8000580 <__aeabi_dmul>
 8007cdc:	4682      	mov	sl, r0
 8007cde:	468b      	mov	fp, r1
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fc4a 	bl	8000580 <__aeabi_dmul>
 8007cec:	a341      	add	r3, pc, #260	; (adr r3, 8007df4 <__kernel_sin+0x154>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	4689      	mov	r9, r1
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	f7f8 fc41 	bl	8000580 <__aeabi_dmul>
 8007cfe:	a33f      	add	r3, pc, #252	; (adr r3, 8007dfc <__kernel_sin+0x15c>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fa84 	bl	8000210 <__aeabi_dsub>
 8007d08:	4652      	mov	r2, sl
 8007d0a:	465b      	mov	r3, fp
 8007d0c:	f7f8 fc38 	bl	8000580 <__aeabi_dmul>
 8007d10:	a33c      	add	r3, pc, #240	; (adr r3, 8007e04 <__kernel_sin+0x164>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fa7d 	bl	8000214 <__adddf3>
 8007d1a:	4652      	mov	r2, sl
 8007d1c:	465b      	mov	r3, fp
 8007d1e:	f7f8 fc2f 	bl	8000580 <__aeabi_dmul>
 8007d22:	a33a      	add	r3, pc, #232	; (adr r3, 8007e0c <__kernel_sin+0x16c>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fa72 	bl	8000210 <__aeabi_dsub>
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	465b      	mov	r3, fp
 8007d30:	f7f8 fc26 	bl	8000580 <__aeabi_dmul>
 8007d34:	a337      	add	r3, pc, #220	; (adr r3, 8007e14 <__kernel_sin+0x174>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fa6b 	bl	8000214 <__adddf3>
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	b9eb      	cbnz	r3, 8007d82 <__kernel_sin+0xe2>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	f7f8 fc17 	bl	8000580 <__aeabi_dmul>
 8007d52:	a325      	add	r3, pc, #148	; (adr r3, 8007de8 <__kernel_sin+0x148>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fa5a 	bl	8000210 <__aeabi_dsub>
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	f7f8 fc0e 	bl	8000580 <__aeabi_dmul>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	f7f8 fa52 	bl	8000214 <__adddf3>
 8007d70:	4604      	mov	r4, r0
 8007d72:	460d      	mov	r5, r1
 8007d74:	ec45 4b10 	vmov	d0, r4, r5
 8007d78:	b003      	add	sp, #12
 8007d7a:	ecbd 8b04 	vpop	{d8-d9}
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d82:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <__kernel_sin+0x150>)
 8007d84:	ec51 0b18 	vmov	r0, r1, d8
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f7f8 fbf9 	bl	8000580 <__aeabi_dmul>
 8007d8e:	4632      	mov	r2, r6
 8007d90:	ec41 0b19 	vmov	d9, r0, r1
 8007d94:	463b      	mov	r3, r7
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fbf1 	bl	8000580 <__aeabi_dmul>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	ec51 0b19 	vmov	r0, r1, d9
 8007da6:	f7f8 fa33 	bl	8000210 <__aeabi_dsub>
 8007daa:	4652      	mov	r2, sl
 8007dac:	465b      	mov	r3, fp
 8007dae:	f7f8 fbe7 	bl	8000580 <__aeabi_dmul>
 8007db2:	ec53 2b18 	vmov	r2, r3, d8
 8007db6:	f7f8 fa2b 	bl	8000210 <__aeabi_dsub>
 8007dba:	a30b      	add	r3, pc, #44	; (adr r3, 8007de8 <__kernel_sin+0x148>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	460f      	mov	r7, r1
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	f7f8 fbda 	bl	8000580 <__aeabi_dmul>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fa1e 	bl	8000214 <__adddf3>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7f8 fa16 	bl	8000210 <__aeabi_dsub>
 8007de4:	e7c4      	b.n	8007d70 <__kernel_sin+0xd0>
 8007de6:	bf00      	nop
 8007de8:	55555549 	.word	0x55555549
 8007dec:	3fc55555 	.word	0x3fc55555
 8007df0:	3fe00000 	.word	0x3fe00000
 8007df4:	5acfd57c 	.word	0x5acfd57c
 8007df8:	3de5d93a 	.word	0x3de5d93a
 8007dfc:	8a2b9ceb 	.word	0x8a2b9ceb
 8007e00:	3e5ae5e6 	.word	0x3e5ae5e6
 8007e04:	57b1fe7d 	.word	0x57b1fe7d
 8007e08:	3ec71de3 	.word	0x3ec71de3
 8007e0c:	19c161d5 	.word	0x19c161d5
 8007e10:	3f2a01a0 	.word	0x3f2a01a0
 8007e14:	1110f8a6 	.word	0x1110f8a6
 8007e18:	3f811111 	.word	0x3f811111
 8007e1c:	00000000 	.word	0x00000000

08007e20 <atan>:
 8007e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ec55 4b10 	vmov	r4, r5, d0
 8007e28:	4bc3      	ldr	r3, [pc, #780]	; (8008138 <atan+0x318>)
 8007e2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	46ab      	mov	fp, r5
 8007e32:	dd18      	ble.n	8007e66 <atan+0x46>
 8007e34:	4bc1      	ldr	r3, [pc, #772]	; (800813c <atan+0x31c>)
 8007e36:	429e      	cmp	r6, r3
 8007e38:	dc01      	bgt.n	8007e3e <atan+0x1e>
 8007e3a:	d109      	bne.n	8007e50 <atan+0x30>
 8007e3c:	b144      	cbz	r4, 8007e50 <atan+0x30>
 8007e3e:	4622      	mov	r2, r4
 8007e40:	462b      	mov	r3, r5
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 f9e5 	bl	8000214 <__adddf3>
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	e006      	b.n	8007e5e <atan+0x3e>
 8007e50:	f1bb 0f00 	cmp.w	fp, #0
 8007e54:	f300 8131 	bgt.w	80080ba <atan+0x29a>
 8007e58:	a59b      	add	r5, pc, #620	; (adr r5, 80080c8 <atan+0x2a8>)
 8007e5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e5e:	ec45 4b10 	vmov	d0, r4, r5
 8007e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	4bb6      	ldr	r3, [pc, #728]	; (8008140 <atan+0x320>)
 8007e68:	429e      	cmp	r6, r3
 8007e6a:	dc14      	bgt.n	8007e96 <atan+0x76>
 8007e6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007e70:	429e      	cmp	r6, r3
 8007e72:	dc0d      	bgt.n	8007e90 <atan+0x70>
 8007e74:	a396      	add	r3, pc, #600	; (adr r3, 80080d0 <atan+0x2b0>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	ee10 0a10 	vmov	r0, s0
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 f9c8 	bl	8000214 <__adddf3>
 8007e84:	4baf      	ldr	r3, [pc, #700]	; (8008144 <atan+0x324>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fe0a 	bl	8000aa0 <__aeabi_dcmpgt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d1e6      	bne.n	8007e5e <atan+0x3e>
 8007e90:	f04f 3aff 	mov.w	sl, #4294967295
 8007e94:	e02b      	b.n	8007eee <atan+0xce>
 8007e96:	f000 f963 	bl	8008160 <fabs>
 8007e9a:	4bab      	ldr	r3, [pc, #684]	; (8008148 <atan+0x328>)
 8007e9c:	429e      	cmp	r6, r3
 8007e9e:	ec55 4b10 	vmov	r4, r5, d0
 8007ea2:	f300 80bf 	bgt.w	8008024 <atan+0x204>
 8007ea6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007eaa:	429e      	cmp	r6, r3
 8007eac:	f300 80a0 	bgt.w	8007ff0 <atan+0x1d0>
 8007eb0:	ee10 2a10 	vmov	r2, s0
 8007eb4:	ee10 0a10 	vmov	r0, s0
 8007eb8:	462b      	mov	r3, r5
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 f9aa 	bl	8000214 <__adddf3>
 8007ec0:	4ba0      	ldr	r3, [pc, #640]	; (8008144 <atan+0x324>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7f8 f9a4 	bl	8000210 <__aeabi_dsub>
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7f8 f99d 	bl	8000214 <__adddf3>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 fc77 	bl	80007d4 <__aeabi_ddiv>
 8007ee6:	f04f 0a00 	mov.w	sl, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	460d      	mov	r5, r1
 8007eee:	4622      	mov	r2, r4
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7f8 fb43 	bl	8000580 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	f7f8 fb3d 	bl	8000580 <__aeabi_dmul>
 8007f06:	a374      	add	r3, pc, #464	; (adr r3, 80080d8 <atan+0x2b8>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	460f      	mov	r7, r1
 8007f10:	f7f8 fb36 	bl	8000580 <__aeabi_dmul>
 8007f14:	a372      	add	r3, pc, #456	; (adr r3, 80080e0 <atan+0x2c0>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f97b 	bl	8000214 <__adddf3>
 8007f1e:	4632      	mov	r2, r6
 8007f20:	463b      	mov	r3, r7
 8007f22:	f7f8 fb2d 	bl	8000580 <__aeabi_dmul>
 8007f26:	a370      	add	r3, pc, #448	; (adr r3, 80080e8 <atan+0x2c8>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f972 	bl	8000214 <__adddf3>
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	f7f8 fb24 	bl	8000580 <__aeabi_dmul>
 8007f38:	a36d      	add	r3, pc, #436	; (adr r3, 80080f0 <atan+0x2d0>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f969 	bl	8000214 <__adddf3>
 8007f42:	4632      	mov	r2, r6
 8007f44:	463b      	mov	r3, r7
 8007f46:	f7f8 fb1b 	bl	8000580 <__aeabi_dmul>
 8007f4a:	a36b      	add	r3, pc, #428	; (adr r3, 80080f8 <atan+0x2d8>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f960 	bl	8000214 <__adddf3>
 8007f54:	4632      	mov	r2, r6
 8007f56:	463b      	mov	r3, r7
 8007f58:	f7f8 fb12 	bl	8000580 <__aeabi_dmul>
 8007f5c:	a368      	add	r3, pc, #416	; (adr r3, 8008100 <atan+0x2e0>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f957 	bl	8000214 <__adddf3>
 8007f66:	4642      	mov	r2, r8
 8007f68:	464b      	mov	r3, r9
 8007f6a:	f7f8 fb09 	bl	8000580 <__aeabi_dmul>
 8007f6e:	a366      	add	r3, pc, #408	; (adr r3, 8008108 <atan+0x2e8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4680      	mov	r8, r0
 8007f76:	4689      	mov	r9, r1
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fb00 	bl	8000580 <__aeabi_dmul>
 8007f80:	a363      	add	r3, pc, #396	; (adr r3, 8008110 <atan+0x2f0>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f943 	bl	8000210 <__aeabi_dsub>
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	f7f8 faf7 	bl	8000580 <__aeabi_dmul>
 8007f92:	a361      	add	r3, pc, #388	; (adr r3, 8008118 <atan+0x2f8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f93a 	bl	8000210 <__aeabi_dsub>
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	f7f8 faee 	bl	8000580 <__aeabi_dmul>
 8007fa4:	a35e      	add	r3, pc, #376	; (adr r3, 8008120 <atan+0x300>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f931 	bl	8000210 <__aeabi_dsub>
 8007fae:	4632      	mov	r2, r6
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	f7f8 fae5 	bl	8000580 <__aeabi_dmul>
 8007fb6:	a35c      	add	r3, pc, #368	; (adr r3, 8008128 <atan+0x308>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f928 	bl	8000210 <__aeabi_dsub>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	f7f8 fadc 	bl	8000580 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 f920 	bl	8000214 <__adddf3>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f7f8 fad2 	bl	8000580 <__aeabi_dmul>
 8007fdc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	d14b      	bne.n	800807e <atan+0x25e>
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7f8 f911 	bl	8000210 <__aeabi_dsub>
 8007fee:	e72c      	b.n	8007e4a <atan+0x2a>
 8007ff0:	ee10 0a10 	vmov	r0, s0
 8007ff4:	4b53      	ldr	r3, [pc, #332]	; (8008144 <atan+0x324>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 f909 	bl	8000210 <__aeabi_dsub>
 8007ffe:	4b51      	ldr	r3, [pc, #324]	; (8008144 <atan+0x324>)
 8008000:	4606      	mov	r6, r0
 8008002:	460f      	mov	r7, r1
 8008004:	2200      	movs	r2, #0
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f903 	bl	8000214 <__adddf3>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fbdd 	bl	80007d4 <__aeabi_ddiv>
 800801a:	f04f 0a01 	mov.w	sl, #1
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	e764      	b.n	8007eee <atan+0xce>
 8008024:	4b49      	ldr	r3, [pc, #292]	; (800814c <atan+0x32c>)
 8008026:	429e      	cmp	r6, r3
 8008028:	da1d      	bge.n	8008066 <atan+0x246>
 800802a:	ee10 0a10 	vmov	r0, s0
 800802e:	4b48      	ldr	r3, [pc, #288]	; (8008150 <atan+0x330>)
 8008030:	2200      	movs	r2, #0
 8008032:	4629      	mov	r1, r5
 8008034:	f7f8 f8ec 	bl	8000210 <__aeabi_dsub>
 8008038:	4b45      	ldr	r3, [pc, #276]	; (8008150 <atan+0x330>)
 800803a:	4606      	mov	r6, r0
 800803c:	460f      	mov	r7, r1
 800803e:	2200      	movs	r2, #0
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	f7f8 fa9c 	bl	8000580 <__aeabi_dmul>
 8008048:	4b3e      	ldr	r3, [pc, #248]	; (8008144 <atan+0x324>)
 800804a:	2200      	movs	r2, #0
 800804c:	f7f8 f8e2 	bl	8000214 <__adddf3>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 fbbc 	bl	80007d4 <__aeabi_ddiv>
 800805c:	f04f 0a02 	mov.w	sl, #2
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	e743      	b.n	8007eee <atan+0xce>
 8008066:	462b      	mov	r3, r5
 8008068:	ee10 2a10 	vmov	r2, s0
 800806c:	4939      	ldr	r1, [pc, #228]	; (8008154 <atan+0x334>)
 800806e:	2000      	movs	r0, #0
 8008070:	f7f8 fbb0 	bl	80007d4 <__aeabi_ddiv>
 8008074:	f04f 0a03 	mov.w	sl, #3
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	e737      	b.n	8007eee <atan+0xce>
 800807e:	4b36      	ldr	r3, [pc, #216]	; (8008158 <atan+0x338>)
 8008080:	4e36      	ldr	r6, [pc, #216]	; (800815c <atan+0x33c>)
 8008082:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008086:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800808a:	e9da 2300 	ldrd	r2, r3, [sl]
 800808e:	f7f8 f8bf 	bl	8000210 <__aeabi_dsub>
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	f7f8 f8bb 	bl	8000210 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080a2:	f7f8 f8b5 	bl	8000210 <__aeabi_dsub>
 80080a6:	f1bb 0f00 	cmp.w	fp, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	460d      	mov	r5, r1
 80080ae:	f6bf aed6 	bge.w	8007e5e <atan+0x3e>
 80080b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080b6:	461d      	mov	r5, r3
 80080b8:	e6d1      	b.n	8007e5e <atan+0x3e>
 80080ba:	a51d      	add	r5, pc, #116	; (adr r5, 8008130 <atan+0x310>)
 80080bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080c0:	e6cd      	b.n	8007e5e <atan+0x3e>
 80080c2:	bf00      	nop
 80080c4:	f3af 8000 	nop.w
 80080c8:	54442d18 	.word	0x54442d18
 80080cc:	bff921fb 	.word	0xbff921fb
 80080d0:	8800759c 	.word	0x8800759c
 80080d4:	7e37e43c 	.word	0x7e37e43c
 80080d8:	e322da11 	.word	0xe322da11
 80080dc:	3f90ad3a 	.word	0x3f90ad3a
 80080e0:	24760deb 	.word	0x24760deb
 80080e4:	3fa97b4b 	.word	0x3fa97b4b
 80080e8:	a0d03d51 	.word	0xa0d03d51
 80080ec:	3fb10d66 	.word	0x3fb10d66
 80080f0:	c54c206e 	.word	0xc54c206e
 80080f4:	3fb745cd 	.word	0x3fb745cd
 80080f8:	920083ff 	.word	0x920083ff
 80080fc:	3fc24924 	.word	0x3fc24924
 8008100:	5555550d 	.word	0x5555550d
 8008104:	3fd55555 	.word	0x3fd55555
 8008108:	2c6a6c2f 	.word	0x2c6a6c2f
 800810c:	bfa2b444 	.word	0xbfa2b444
 8008110:	52defd9a 	.word	0x52defd9a
 8008114:	3fadde2d 	.word	0x3fadde2d
 8008118:	af749a6d 	.word	0xaf749a6d
 800811c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008120:	fe231671 	.word	0xfe231671
 8008124:	3fbc71c6 	.word	0x3fbc71c6
 8008128:	9998ebc4 	.word	0x9998ebc4
 800812c:	3fc99999 	.word	0x3fc99999
 8008130:	54442d18 	.word	0x54442d18
 8008134:	3ff921fb 	.word	0x3ff921fb
 8008138:	440fffff 	.word	0x440fffff
 800813c:	7ff00000 	.word	0x7ff00000
 8008140:	3fdbffff 	.word	0x3fdbffff
 8008144:	3ff00000 	.word	0x3ff00000
 8008148:	3ff2ffff 	.word	0x3ff2ffff
 800814c:	40038000 	.word	0x40038000
 8008150:	3ff80000 	.word	0x3ff80000
 8008154:	bff00000 	.word	0xbff00000
 8008158:	08008680 	.word	0x08008680
 800815c:	08008660 	.word	0x08008660

08008160 <fabs>:
 8008160:	ec51 0b10 	vmov	r0, r1, d0
 8008164:	ee10 2a10 	vmov	r2, s0
 8008168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800816c:	ec43 2b10 	vmov	d0, r2, r3
 8008170:	4770      	bx	lr
 8008172:	0000      	movs	r0, r0
 8008174:	0000      	movs	r0, r0
	...

08008178 <floor>:
 8008178:	ec51 0b10 	vmov	r0, r1, d0
 800817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008180:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008184:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008188:	2e13      	cmp	r6, #19
 800818a:	ee10 5a10 	vmov	r5, s0
 800818e:	ee10 8a10 	vmov	r8, s0
 8008192:	460c      	mov	r4, r1
 8008194:	dc32      	bgt.n	80081fc <floor+0x84>
 8008196:	2e00      	cmp	r6, #0
 8008198:	da14      	bge.n	80081c4 <floor+0x4c>
 800819a:	a333      	add	r3, pc, #204	; (adr r3, 8008268 <floor+0xf0>)
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f7f8 f838 	bl	8000214 <__adddf3>
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	f7f8 fc7a 	bl	8000aa0 <__aeabi_dcmpgt>
 80081ac:	b138      	cbz	r0, 80081be <floor+0x46>
 80081ae:	2c00      	cmp	r4, #0
 80081b0:	da57      	bge.n	8008262 <floor+0xea>
 80081b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80081b6:	431d      	orrs	r5, r3
 80081b8:	d001      	beq.n	80081be <floor+0x46>
 80081ba:	4c2d      	ldr	r4, [pc, #180]	; (8008270 <floor+0xf8>)
 80081bc:	2500      	movs	r5, #0
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	e025      	b.n	8008210 <floor+0x98>
 80081c4:	4f2b      	ldr	r7, [pc, #172]	; (8008274 <floor+0xfc>)
 80081c6:	4137      	asrs	r7, r6
 80081c8:	ea01 0307 	and.w	r3, r1, r7
 80081cc:	4303      	orrs	r3, r0
 80081ce:	d01f      	beq.n	8008210 <floor+0x98>
 80081d0:	a325      	add	r3, pc, #148	; (adr r3, 8008268 <floor+0xf0>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 f81d 	bl	8000214 <__adddf3>
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	f7f8 fc5f 	bl	8000aa0 <__aeabi_dcmpgt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d0eb      	beq.n	80081be <floor+0x46>
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	bfbe      	ittt	lt
 80081ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80081ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80081f2:	19a4      	addlt	r4, r4, r6
 80081f4:	ea24 0407 	bic.w	r4, r4, r7
 80081f8:	2500      	movs	r5, #0
 80081fa:	e7e0      	b.n	80081be <floor+0x46>
 80081fc:	2e33      	cmp	r6, #51	; 0x33
 80081fe:	dd0b      	ble.n	8008218 <floor+0xa0>
 8008200:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008204:	d104      	bne.n	8008210 <floor+0x98>
 8008206:	ee10 2a10 	vmov	r2, s0
 800820a:	460b      	mov	r3, r1
 800820c:	f7f8 f802 	bl	8000214 <__adddf3>
 8008210:	ec41 0b10 	vmov	d0, r0, r1
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800821c:	f04f 33ff 	mov.w	r3, #4294967295
 8008220:	fa23 f707 	lsr.w	r7, r3, r7
 8008224:	4207      	tst	r7, r0
 8008226:	d0f3      	beq.n	8008210 <floor+0x98>
 8008228:	a30f      	add	r3, pc, #60	; (adr r3, 8008268 <floor+0xf0>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f7 fff1 	bl	8000214 <__adddf3>
 8008232:	2200      	movs	r2, #0
 8008234:	2300      	movs	r3, #0
 8008236:	f7f8 fc33 	bl	8000aa0 <__aeabi_dcmpgt>
 800823a:	2800      	cmp	r0, #0
 800823c:	d0bf      	beq.n	80081be <floor+0x46>
 800823e:	2c00      	cmp	r4, #0
 8008240:	da02      	bge.n	8008248 <floor+0xd0>
 8008242:	2e14      	cmp	r6, #20
 8008244:	d103      	bne.n	800824e <floor+0xd6>
 8008246:	3401      	adds	r4, #1
 8008248:	ea25 0507 	bic.w	r5, r5, r7
 800824c:	e7b7      	b.n	80081be <floor+0x46>
 800824e:	2301      	movs	r3, #1
 8008250:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008254:	fa03 f606 	lsl.w	r6, r3, r6
 8008258:	4435      	add	r5, r6
 800825a:	4545      	cmp	r5, r8
 800825c:	bf38      	it	cc
 800825e:	18e4      	addcc	r4, r4, r3
 8008260:	e7f2      	b.n	8008248 <floor+0xd0>
 8008262:	2500      	movs	r5, #0
 8008264:	462c      	mov	r4, r5
 8008266:	e7aa      	b.n	80081be <floor+0x46>
 8008268:	8800759c 	.word	0x8800759c
 800826c:	7e37e43c 	.word	0x7e37e43c
 8008270:	bff00000 	.word	0xbff00000
 8008274:	000fffff 	.word	0x000fffff

08008278 <nan>:
 8008278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008280 <nan+0x8>
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	00000000 	.word	0x00000000
 8008284:	7ff80000 	.word	0x7ff80000

08008288 <scalbn>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	ec55 4b10 	vmov	r4, r5, d0
 800828e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008292:	4606      	mov	r6, r0
 8008294:	462b      	mov	r3, r5
 8008296:	b99a      	cbnz	r2, 80082c0 <scalbn+0x38>
 8008298:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800829c:	4323      	orrs	r3, r4
 800829e:	d036      	beq.n	800830e <scalbn+0x86>
 80082a0:	4b39      	ldr	r3, [pc, #228]	; (8008388 <scalbn+0x100>)
 80082a2:	4629      	mov	r1, r5
 80082a4:	ee10 0a10 	vmov	r0, s0
 80082a8:	2200      	movs	r2, #0
 80082aa:	f7f8 f969 	bl	8000580 <__aeabi_dmul>
 80082ae:	4b37      	ldr	r3, [pc, #220]	; (800838c <scalbn+0x104>)
 80082b0:	429e      	cmp	r6, r3
 80082b2:	4604      	mov	r4, r0
 80082b4:	460d      	mov	r5, r1
 80082b6:	da10      	bge.n	80082da <scalbn+0x52>
 80082b8:	a32b      	add	r3, pc, #172	; (adr r3, 8008368 <scalbn+0xe0>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	e03a      	b.n	8008336 <scalbn+0xae>
 80082c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80082c4:	428a      	cmp	r2, r1
 80082c6:	d10c      	bne.n	80082e2 <scalbn+0x5a>
 80082c8:	ee10 2a10 	vmov	r2, s0
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f7 ffa0 	bl	8000214 <__adddf3>
 80082d4:	4604      	mov	r4, r0
 80082d6:	460d      	mov	r5, r1
 80082d8:	e019      	b.n	800830e <scalbn+0x86>
 80082da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082de:	460b      	mov	r3, r1
 80082e0:	3a36      	subs	r2, #54	; 0x36
 80082e2:	4432      	add	r2, r6
 80082e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80082e8:	428a      	cmp	r2, r1
 80082ea:	dd08      	ble.n	80082fe <scalbn+0x76>
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	a120      	add	r1, pc, #128	; (adr r1, 8008370 <scalbn+0xe8>)
 80082f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f4:	da1c      	bge.n	8008330 <scalbn+0xa8>
 80082f6:	a120      	add	r1, pc, #128	; (adr r1, 8008378 <scalbn+0xf0>)
 80082f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082fc:	e018      	b.n	8008330 <scalbn+0xa8>
 80082fe:	2a00      	cmp	r2, #0
 8008300:	dd08      	ble.n	8008314 <scalbn+0x8c>
 8008302:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008306:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800830a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800830e:	ec45 4b10 	vmov	d0, r4, r5
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008318:	da19      	bge.n	800834e <scalbn+0xc6>
 800831a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800831e:	429e      	cmp	r6, r3
 8008320:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008324:	dd0a      	ble.n	800833c <scalbn+0xb4>
 8008326:	a112      	add	r1, pc, #72	; (adr r1, 8008370 <scalbn+0xe8>)
 8008328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e2      	bne.n	80082f6 <scalbn+0x6e>
 8008330:	a30f      	add	r3, pc, #60	; (adr r3, 8008370 <scalbn+0xe8>)
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	f7f8 f923 	bl	8000580 <__aeabi_dmul>
 800833a:	e7cb      	b.n	80082d4 <scalbn+0x4c>
 800833c:	a10a      	add	r1, pc, #40	; (adr r1, 8008368 <scalbn+0xe0>)
 800833e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0b8      	beq.n	80082b8 <scalbn+0x30>
 8008346:	a10e      	add	r1, pc, #56	; (adr r1, 8008380 <scalbn+0xf8>)
 8008348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834c:	e7b4      	b.n	80082b8 <scalbn+0x30>
 800834e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008352:	3236      	adds	r2, #54	; 0x36
 8008354:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008358:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800835c:	4620      	mov	r0, r4
 800835e:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <scalbn+0x108>)
 8008360:	2200      	movs	r2, #0
 8008362:	e7e8      	b.n	8008336 <scalbn+0xae>
 8008364:	f3af 8000 	nop.w
 8008368:	c2f8f359 	.word	0xc2f8f359
 800836c:	01a56e1f 	.word	0x01a56e1f
 8008370:	8800759c 	.word	0x8800759c
 8008374:	7e37e43c 	.word	0x7e37e43c
 8008378:	8800759c 	.word	0x8800759c
 800837c:	fe37e43c 	.word	0xfe37e43c
 8008380:	c2f8f359 	.word	0xc2f8f359
 8008384:	81a56e1f 	.word	0x81a56e1f
 8008388:	43500000 	.word	0x43500000
 800838c:	ffff3cb0 	.word	0xffff3cb0
 8008390:	3c900000 	.word	0x3c900000

08008394 <__errno>:
 8008394:	4b01      	ldr	r3, [pc, #4]	; (800839c <__errno+0x8>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	2000008c 	.word	0x2000008c

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4d0d      	ldr	r5, [pc, #52]	; (80083d8 <__libc_init_array+0x38>)
 80083a4:	4c0d      	ldr	r4, [pc, #52]	; (80083dc <__libc_init_array+0x3c>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	2600      	movs	r6, #0
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	4d0b      	ldr	r5, [pc, #44]	; (80083e0 <__libc_init_array+0x40>)
 80083b2:	4c0c      	ldr	r4, [pc, #48]	; (80083e4 <__libc_init_array+0x44>)
 80083b4:	f000 f82e 	bl	8008414 <_init>
 80083b8:	1b64      	subs	r4, r4, r5
 80083ba:	10a4      	asrs	r4, r4, #2
 80083bc:	2600      	movs	r6, #0
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	080086a8 	.word	0x080086a8
 80083dc:	080086a8 	.word	0x080086a8
 80083e0:	080086a8 	.word	0x080086a8
 80083e4:	080086b0 	.word	0x080086b0

080083e8 <memcpy>:
 80083e8:	440a      	add	r2, r1
 80083ea:	4291      	cmp	r1, r2
 80083ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xc>
 80083f2:	4770      	bx	lr
 80083f4:	b510      	push	{r4, lr}
 80083f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fe:	4291      	cmp	r1, r2
 8008400:	d1f9      	bne.n	80083f6 <memcpy+0xe>
 8008402:	bd10      	pop	{r4, pc}

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr

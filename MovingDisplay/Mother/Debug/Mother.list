
Mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080074b8  080074b8  000174b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007720  08007720  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007728  08007728  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000009c  080077d0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080077d0  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001647e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ce  00000000  00000000  0003654a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00038d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00039c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e31  00000000  00000000  0003ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe9  00000000  00000000  0005f959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d577d  00000000  00000000  00073942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001490bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047fc  00000000  00000000  00149110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000009c 	.word	0x2000009c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800749c 	.word	0x0800749c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a0 	.word	0x200000a0
 8000204:	0800749c 	.word	0x0800749c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b974 	b.w	8000f10 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468e      	mov	lr, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14d      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	4694      	mov	ip, r2
 8000c52:	d969      	bls.n	8000d28 <__udivmoddi4+0xe8>
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	b152      	cbz	r2, 8000c70 <__udivmoddi4+0x30>
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	f1c2 0120 	rsb	r1, r2, #32
 8000c62:	fa20 f101 	lsr.w	r1, r0, r1
 8000c66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	0c21      	lsrs	r1, r4, #16
 8000c76:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7a:	fa1f f78c 	uxth.w	r7, ip
 8000c7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c86:	fb06 f107 	mul.w	r1, r6, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c96:	f080 811f 	bcs.w	8000ed8 <__udivmoddi4+0x298>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 811c 	bls.w	8000ed8 <__udivmoddi4+0x298>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb00 f707 	mul.w	r7, r0, r7
 8000cb8:	42a7      	cmp	r7, r4
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x92>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	f080 810a 	bcs.w	8000edc <__udivmoddi4+0x29c>
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	f240 8107 	bls.w	8000edc <__udivmoddi4+0x29c>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	1be4      	subs	r4, r4, r7
 8000cd8:	2600      	movs	r6, #0
 8000cda:	b11d      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cdc:	40d4      	lsrs	r4, r2
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0xc2>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80ef 	beq.w	8000ed2 <__udivmoddi4+0x292>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x160>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xd4>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80f9 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e0      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d26:	e7dd      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d28:	b902      	cbnz	r2, 8000d2c <__udivmoddi4+0xec>
 8000d2a:	deff      	udf	#255	; 0xff
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	f040 8092 	bne.w	8000e5a <__udivmoddi4+0x21a>
 8000d36:	eba1 010c 	sub.w	r1, r1, ip
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2601      	movs	r6, #1
 8000d44:	0c20      	lsrs	r0, r4, #16
 8000d46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	fb0e f003 	mul.w	r0, lr, r3
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x12c>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x12a>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	1a09      	subs	r1, r1, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1110 	mls	r1, r7, r0, r1
 8000d78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x156>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x154>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2ca>
 8000d94:	4608      	mov	r0, r1
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	e79c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000da0:	f1c6 0720 	rsb	r7, r6, #32
 8000da4:	40b3      	lsls	r3, r6
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa20 f407 	lsr.w	r4, r0, r7
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	431c      	orrs	r4, r3
 8000db8:	40f9      	lsrs	r1, r7
 8000dba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc6:	0c20      	lsrs	r0, r4, #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	fa02 f206 	lsl.w	r2, r2, r6
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2bc>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2bc>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e00:	fb09 1110 	mls	r1, r9, r0, r1
 8000e04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0c:	458e      	cmp	lr, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1e2>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1a:	458e      	cmp	lr, r1
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e26:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2a:	eba1 010e 	sub.w	r1, r1, lr
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46a6      	mov	lr, r4
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x212>
 8000e3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e42:	fa01 f707 	lsl.w	r7, r1, r7
 8000e46:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4a:	40f1      	lsrs	r1, r6
 8000e4c:	431f      	orrs	r7, r3
 8000e4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e78:	fb07 3610 	mls	r6, r7, r0, r3
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e82:	fb00 f60e 	mul.w	r6, r0, lr
 8000e86:	429e      	cmp	r6, r3
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x260>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1b9b      	subs	r3, r3, r6
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x28a>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0x104>
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e705      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6f8      	b.n	8000cd2 <__udivmoddi4+0x92>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f8>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f8>
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x28a>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1e2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b8>
 8000f00:	3b02      	subs	r3, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x12c>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e709      	b.n	8000d1e <__udivmoddi4+0xde>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x156>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000f14:	b084      	sub	sp, #16
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af02      	add	r7, sp, #8
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	f107 001c 	add.w	r0, r7, #28
 8000f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	f107 011c 	add.w	r1, r7, #28
 8000f2e:	2254      	movs	r2, #84	; 0x54
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fa9d 	bl	8007470 <memcpy>
	device_address_ = device_address;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000f3c:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000f3e:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f42:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f44:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	f107 001c 	add.w	r0, r7, #28
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f001 fe3e 	bl	8002bdc <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f60:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f64:	f001 f9fa 	bl	800235c <HAL_Delay>
}
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f74:	b004      	add	sp, #16
 8000f76:	4770      	bx	lr

08000f78 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b099      	sub	sp, #100	; 0x64
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f80:	2320      	movs	r3, #32
 8000f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	1d18      	adds	r0, r3, #4
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	b299      	uxth	r1, r3
 8000f94:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f001 fe1d 	bl	8002bdc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	1d18      	adds	r0, r3, #4
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2308      	movs	r3, #8
 8000fba:	f001 ff0d 	bl	8002dd8 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fe6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000ffa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 800100e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
 8001026:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a08 	vstr	s15, [r7, #32]
 800103e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001056:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eddf 6a12 	vldr	s13, [pc, #72]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800106e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800107c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800107e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001084:	ee06 0a10 	vmov	s12, r0
 8001088:	ee06 1a90 	vmov	s13, r1
 800108c:	ee07 2a10 	vmov	s14, r2
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a46 	vmov.f32	s0, s12
 8001098:	eef0 0a66 	vmov.f32	s1, s13
 800109c:	eeb0 1a47 	vmov.f32	s2, s14
 80010a0:	eef0 1a67 	vmov.f32	s3, s15
 80010a4:	375c      	adds	r7, #92	; 0x5c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	46800000 	.word	0x46800000

080010b0 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b09a      	sub	sp, #104	; 0x68
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff ff5d 	bl	8000f78 <_ZN6BNO05514get_quaternionEv>
 80010be:	eeb0 6a40 	vmov.f32	s12, s0
 80010c2:	eef0 6a60 	vmov.f32	s13, s1
 80010c6:	eeb0 7a41 	vmov.f32	s14, s2
 80010ca:	eef0 7a61 	vmov.f32	s15, s3
 80010ce:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80010d2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80010d6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80010da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 80010de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff f9e7 	bl	80004d0 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	f7ff f885 	bl	8000214 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 8001112:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001116:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff f9cd 	bl	80004d0 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f7ff f86b 	bl	8000214 <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4960      	ldr	r1, [pc, #384]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 8001148:	f7ff f862 	bl	8000210 <__aeabi_dsub>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001154:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001158:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800115c:	f004 fc28 	bl	80059b0 <atan2>
 8001160:	ec53 2b10 	vmov	r2, r3, d0
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd02 	bl	8000b70 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001170:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001174:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001180:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	ee17 0a90 	vmov	r0, s15
 8001190:	f7ff f99e 	bl	80004d0 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	f7ff f83c 	bl	8000214 <__adddf3>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 80011a4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80011a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fc69 	bl	8000a8c <__aeabi_dcmpge>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00e      	beq.n	80011de <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 80011c0:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80011c4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80012c0 <_ZN6BNO0559get_eularEv+0x210>
 80011c8:	f004 fb54 	bl	8005874 <copysign>
 80011cc:	ec53 2b10 	vmov	r2, r3, d0
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fccc 	bl	8000b70 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	e00b      	b.n	80011f6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 80011de:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011e2:	f004 fbb1 	bl	8005948 <asin>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcbf 	bl	8000b70 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001202:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800120a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f95b 	bl	80004d0 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	f7fe fff9 	bl	8000214 <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 800122a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800122e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800123a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800123e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f941 	bl	80004d0 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	f7fe ffdf 	bl	8000214 <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	491a      	ldr	r1, [pc, #104]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 8001260:	f7fe ffd6 	bl	8000210 <__aeabi_dsub>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800126c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001270:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001274:	f004 fb9c 	bl	80059b0 <atan2>
 8001278:	ec53 2b10 	vmov	r2, r3, d0
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc76 	bl	8000b70 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	623b      	str	r3, [r7, #32]

	return e;
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	f107 0218 	add.w	r2, r7, #24
 8001290:	ca07      	ldmia	r2, {r0, r1, r2}
 8001292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001296:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129c:	ee06 1a90 	vmov	s13, r1
 80012a0:	ee07 2a10 	vmov	s14, r2
 80012a4:	ee07 3a90 	vmov	s15, r3
}
 80012a8:	eeb0 0a66 	vmov.f32	s0, s13
 80012ac:	eef0 0a47 	vmov.f32	s1, s14
 80012b0:	eeb0 1a67 	vmov.f32	s2, s15
 80012b4:	3768      	adds	r7, #104	; 0x68
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	54411744 	.word	0x54411744
 80012c4:	3ff921fb 	.word	0x3ff921fb
 80012c8:	3ff00000 	.word	0x3ff00000

080012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>:
#include "m_transmit.h"

M_TRANSMIT::M_TRANSMIT(UART_HandleTypeDef* uart, uint8_t id){
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	4613      	mov	r3, r2
 80012d8:	71fb      	strb	r3, [r7, #7]
    UART=uart;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	605a      	str	r2, [r3, #4]
    ID=id;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	70da      	strb	r2, [r3, #3]
    send_ID = id + 190;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b42      	subs	r3, #66	; 0x42
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	721a      	strb	r2, [r3, #8]
}
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZN10M_TRANSMIT10get_travelEv>:

int M_TRANSMIT::get_travel(){
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(UART, &send_ID, 1, 100);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6858      	ldr	r0, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f103 0108 	add.w	r1, r3, #8
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	2201      	movs	r2, #1
 8001314:	f003 fe97 	bl	8005046 <HAL_UART_Transmit>
    HAL_UART_Receive(UART, rcvBuf, 3, 100);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6858      	ldr	r0, [r3, #4]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2203      	movs	r2, #3
 8001322:	f003 ff22 	bl	800516a <HAL_UART_Receive>

    int hyaku = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
    int travel = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

    for(int j = 1; j <3 ; j++){
 800132e:	2301      	movs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc13      	bgt.n	8001360 <_ZN10M_TRANSMIT10get_travelEv+0x62>
        travel = travel + (rcvBuf[j]*hyaku);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4413      	add	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        hyaku = hyaku*100;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
    for(int j = 1; j <3 ; j++){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e7e8      	b.n	8001332 <_ZN10M_TRANSMIT10get_travelEv+0x34>
    }
    travel-=5000;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8001366:	3b08      	subs	r3, #8
 8001368:	613b      	str	r3, [r7, #16]
    HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fff6 	bl	800235c <HAL_Delay>

    return travel;
 8001370:	693b      	ldr	r3, [r7, #16]

 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <_Z9set_arrayiiihh>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_array(int tx, int cx, int cz, uint8_t r, uint8_t h){
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	70fb      	strb	r3, [r7, #3]
	send_array[0]=220;
 800138a:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <_Z9set_arrayiiihh+0x140>)
 800138c:	22dc      	movs	r2, #220	; 0xdc
 800138e:	701a      	strb	r2, [r3, #0]
	tx += 5000; cx += 5000; cz += 5000;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001396:	3308      	adds	r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013a0:	3308      	adds	r3, #8
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013aa:	3308      	adds	r3, #8
 80013ac:	607b      	str	r3, [r7, #4]
	uint8_t h_out = h/2.5;
 80013ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f87a 	bl	80004ac <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <_Z9set_arrayiiihh+0x144>)
 80013be:	f7ff fa09 	bl	80007d4 <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbb1 	bl	8000b30 <__aeabi_d2uiz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	77fb      	strb	r3, [r7, #31]
	for(int i = 1; i <3 ;i++){
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	dc1c      	bgt.n	8001416 <_Z9set_arrayiiihh+0x9a>
		send_array[i] = tx%100;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <_Z9set_arrayiiihh+0x148>)
 80013e0:	fb82 1203 	smull	r1, r2, r2, r3
 80013e4:	1151      	asrs	r1, r2, #5
 80013e6:	17da      	asrs	r2, r3, #31
 80013e8:	1a8a      	subs	r2, r1, r2
 80013ea:	2164      	movs	r1, #100	; 0x64
 80013ec:	fb01 f202 	mul.w	r2, r1, r2
 80013f0:	1a9a      	subs	r2, r3, r2
 80013f2:	b2d1      	uxtb	r1, r2
 80013f4:	4a31      	ldr	r2, [pc, #196]	; (80014bc <_Z9set_arrayiiihh+0x140>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4413      	add	r3, r2
 80013fa:	460a      	mov	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
		tx = (int)tx/100;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <_Z9set_arrayiiihh+0x148>)
 8001402:	fb82 1203 	smull	r1, r2, r2, r3
 8001406:	1152      	asrs	r2, r2, #5
 8001408:	17db      	asrs	r3, r3, #31
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i <3 ;i++){
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	3301      	adds	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	e7df      	b.n	80013d6 <_Z9set_arrayiiihh+0x5a>
	}
	for(int i = 3; i <5 ;i++){
 8001416:	2303      	movs	r3, #3
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b04      	cmp	r3, #4
 800141e:	dc1c      	bgt.n	800145a <_Z9set_arrayiiihh+0xde>
		send_array[i] = cx%100;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <_Z9set_arrayiiihh+0x148>)
 8001424:	fb82 1203 	smull	r1, r2, r2, r3
 8001428:	1151      	asrs	r1, r2, #5
 800142a:	17da      	asrs	r2, r3, #31
 800142c:	1a8a      	subs	r2, r1, r2
 800142e:	2164      	movs	r1, #100	; 0x64
 8001430:	fb01 f202 	mul.w	r2, r1, r2
 8001434:	1a9a      	subs	r2, r3, r2
 8001436:	b2d1      	uxtb	r1, r2
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <_Z9set_arrayiiihh+0x140>)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	460a      	mov	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
		cx = (int)cx/100;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <_Z9set_arrayiiihh+0x148>)
 8001446:	fb82 1203 	smull	r1, r2, r2, r3
 800144a:	1152      	asrs	r2, r2, #5
 800144c:	17db      	asrs	r3, r3, #31
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	60bb      	str	r3, [r7, #8]
	for(int i = 3; i <5 ;i++){
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e7df      	b.n	800141a <_Z9set_arrayiiihh+0x9e>
	}
	for(int i = 5; i <7 ;i++){
 800145a:	2305      	movs	r3, #5
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b06      	cmp	r3, #6
 8001462:	dc1c      	bgt.n	800149e <_Z9set_arrayiiihh+0x122>
		send_array[i] = cz%100;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <_Z9set_arrayiiihh+0x148>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1151      	asrs	r1, r2, #5
 800146e:	17da      	asrs	r2, r3, #31
 8001470:	1a8a      	subs	r2, r1, r2
 8001472:	2164      	movs	r1, #100	; 0x64
 8001474:	fb01 f202 	mul.w	r2, r1, r2
 8001478:	1a9a      	subs	r2, r3, r2
 800147a:	b2d1      	uxtb	r1, r2
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <_Z9set_arrayiiihh+0x140>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4413      	add	r3, r2
 8001482:	460a      	mov	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
		cz = (int)cz/100;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <_Z9set_arrayiiihh+0x148>)
 800148a:	fb82 1203 	smull	r1, r2, r2, r3
 800148e:	1152      	asrs	r2, r2, #5
 8001490:	17db      	asrs	r3, r3, #31
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	607b      	str	r3, [r7, #4]
	for(int i = 5; i <7 ;i++){
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3301      	adds	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	e7df      	b.n	800145e <_Z9set_arrayiiihh+0xe2>
	}
	send_array[7] = r;
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <_Z9set_arrayiiihh+0x140>)
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	71d3      	strb	r3, [r2, #7]
	if(h_out > 100){h_out = 100;}
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <_Z9set_arrayiiihh+0x132>
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	77fb      	strb	r3, [r7, #31]
	send_array[8] = h_out;
 80014ae:	4a03      	ldr	r2, [pc, #12]	; (80014bc <_Z9set_arrayiiihh+0x140>)
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	7213      	strb	r3, [r2, #8]
}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000254 	.word	0x20000254
 80014c0:	40040000 	.word	0x40040000
 80014c4:	51eb851f 	.word	0x51eb851f

080014c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
//
//
//    	set_array(0, (-1)*-10, cz, 5, 200);
//    	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 9, 100);
//    }
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e4:	b0b2      	sub	sp, #200	; 0xc8
 80014e6:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e8:	f000 fec6 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 f9c6 	bl	800187c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f000 fb26 	bl	8001b40 <_ZL12MX_GPIO_Initv>
  MX_USART6_UART_Init();
 80014f4:	f000 faf6 	bl	8001ae4 <_ZL19MX_USART6_UART_Initv>
  MX_USART3_UART_Init();
 80014f8:	f000 fac6 	bl	8001a88 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80014fc:	f000 fa34 	bl	8001968 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001500:	f000 fa66 	bl	80019d0 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001508:	f000 ff28 	bl	800235c <HAL_Delay>
  while (!ready) {
 800150c:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <main+0x1e0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d116      	bne.n	8001542 <main+0x62>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 8001514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001518:	220a      	movs	r2, #10
 800151a:	2150      	movs	r1, #80	; 0x50
 800151c:	4869      	ldr	r0, [pc, #420]	; (80016c4 <main+0x1e4>)
 800151e:	f001 fe81 	bl	8003224 <HAL_I2C_IsDeviceReady>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <main+0x5a>
      ready = 1;
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <main+0x1e0>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e7e8      	b.n	800150c <main+0x2c>
    } else {
      HAL_Delay(100);
 800153a:	2064      	movs	r0, #100	; 0x64
 800153c:	f000 ff0e 	bl	800235c <HAL_Delay>
  while (!ready) {
 8001540:	e7e4      	b.n	800150c <main+0x2c>
    }
  }

  xf = -1*odom1.get_travel();
 8001542:	4861      	ldr	r0, [pc, #388]	; (80016c8 <main+0x1e8>)
 8001544:	f7ff fedb 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001548:	4603      	mov	r3, r0
 800154a:	425b      	negs	r3, r3
 800154c:	4a5f      	ldr	r2, [pc, #380]	; (80016cc <main+0x1ec>)
 800154e:	6013      	str	r3, [r2, #0]
  if(odom1.get_travel() <=-5000){Error = 1;}
 8001550:	485d      	ldr	r0, [pc, #372]	; (80016c8 <main+0x1e8>)
 8001552:	f7ff fed4 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001556:	4603      	mov	r3, r0
 8001558:	4a5d      	ldr	r2, [pc, #372]	; (80016d0 <main+0x1f0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	bfb4      	ite	lt
 800155e:	2301      	movlt	r3, #1
 8001560:	2300      	movge	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <main+0x8e>
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <main+0x1f4>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
  yf = -1*odom2.get_travel();
 800156e:	485a      	ldr	r0, [pc, #360]	; (80016d8 <main+0x1f8>)
 8001570:	f7ff fec5 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001574:	4603      	mov	r3, r0
 8001576:	425b      	negs	r3, r3
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <main+0x1fc>)
 800157a:	6013      	str	r3, [r2, #0]
  if(odom2.get_travel() <=-5000){Error = 1;}
 800157c:	4856      	ldr	r0, [pc, #344]	; (80016d8 <main+0x1f8>)
 800157e:	f7ff febe 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001582:	4603      	mov	r3, r0
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <main+0x1f0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	bfb4      	ite	lt
 800158a:	2301      	movlt	r3, #1
 800158c:	2300      	movge	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <main+0xba>
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <main+0x1f4>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2104      	movs	r1, #4
 800159e:	4850      	ldr	r0, [pc, #320]	; (80016e0 <main+0x200>)
 80015a0:	f001 f9be 	bl	8002920 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim3);
 80015a4:	484f      	ldr	r0, [pc, #316]	; (80016e4 <main+0x204>)
 80015a6:	f003 f8cf 	bl	8004748 <HAL_TIM_Base_Start_IT>

  goal_travel_x = coord_array[0][0];
 80015aa:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <main+0x208>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <main+0x20c>)
 80015b0:	6013      	str	r3, [r2, #0]
  goal_travel_y = coord_array[0][1];
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <main+0x208>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <main+0x210>)
 80015b8:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 80015ba:	2328      	movs	r3, #40	; 0x28
 80015bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  BNO055 bno055(hi2c1,address);
 80015c0:	4e40      	ldr	r6, [pc, #256]	; (80016c4 <main+0x1e4>)
 80015c2:	f107 081c 	add.w	r8, r7, #28
 80015c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80015ca:	9312      	str	r3, [sp, #72]	; 0x48
 80015cc:	4668      	mov	r0, sp
 80015ce:	f106 030c 	add.w	r3, r6, #12
 80015d2:	2248      	movs	r2, #72	; 0x48
 80015d4:	4619      	mov	r1, r3
 80015d6:	f005 ff4b 	bl	8007470 <memcpy>
 80015da:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80015de:	4640      	mov	r0, r8
 80015e0:	f7ff fc98 	bl	8000f14 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)==1){go_speed = 50;
 80015e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e8:	483d      	ldr	r0, [pc, #244]	; (80016e0 <main+0x200>)
 80015ea:	f001 f981 	bl	80028f0 <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <main+0x126>
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <main+0x214>)
 8001600:	2232      	movs	r2, #50	; 0x32
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e002      	b.n	800160c <main+0x12c>
	}else{go_speed = 0;}
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <main+0x214>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

    travel_x = -1*odom1.get_travel() - xf;
 800160c:	482e      	ldr	r0, [pc, #184]	; (80016c8 <main+0x1e8>)
 800160e:	f7ff fe76 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001612:	4603      	mov	r3, r0
 8001614:	425a      	negs	r2, r3
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <main+0x1ec>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <main+0x218>)
 800161e:	6013      	str	r3, [r2, #0]
    travel_y = -1*odom2.get_travel() - yf;
 8001620:	482d      	ldr	r0, [pc, #180]	; (80016d8 <main+0x1f8>)
 8001622:	f7ff fe6c 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001626:	4603      	mov	r3, r0
 8001628:	425a      	negs	r2, r3
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <main+0x1fc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	4a32      	ldr	r2, [pc, #200]	; (80016fc <main+0x21c>)
 8001632:	6013      	str	r3, [r2, #0]

    e = bno055.get_eular();
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fd39 	bl	80010b0 <_ZN6BNO0559get_eularEv>
 800163e:	eef0 6a40 	vmov.f32	s13, s0
 8001642:	eeb0 7a60 	vmov.f32	s14, s1
 8001646:	eef0 7a41 	vmov.f32	s15, s2
 800164a:	edc7 6a00 	vstr	s13, [r7]
 800164e:	ed87 7a01 	vstr	s14, [r7, #4]
 8001652:	edc7 7a02 	vstr	s15, [r7, #8]
    rotate = -1*(e.z/3.1415)*180;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff39 	bl	80004d0 <__aeabi_f2d>
 800165e:	a316      	add	r3, pc, #88	; (adr r3, 80016b8 <main+0x1d8>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7ff f8b6 	bl	80007d4 <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <main+0x220>)
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe ff80 	bl	8000580 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa72 	bl	8000b70 <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <main+0x224>)
 8001690:	6013      	str	r3, [r2, #0]
    rotate = (int)rotate;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <main+0x224>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <main+0x224>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]

    if(travel_x>200){
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <main+0x218>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2bc8      	cmp	r3, #200	; 0xc8
 80016ac:	dd2c      	ble.n	8001708 <main+0x228>
    	goal_travel_x = 0;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <main+0x20c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e02f      	b.n	8001716 <main+0x236>
 80016b6:	bf00      	nop
 80016b8:	c083126f 	.word	0xc083126f
 80016bc:	400921ca 	.word	0x400921ca
 80016c0:	20000204 	.word	0x20000204
 80016c4:	200000b8 	.word	0x200000b8
 80016c8:	200001ec 	.word	0x200001ec
 80016cc:	200001e0 	.word	0x200001e0
 80016d0:	ffffec79 	.word	0xffffec79
 80016d4:	20000250 	.word	0x20000250
 80016d8:	200001f8 	.word	0x200001f8
 80016dc:	200001e8 	.word	0x200001e8
 80016e0:	40020400 	.word	0x40020400
 80016e4:	2000010c 	.word	0x2000010c
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000248 	.word	0x20000248
 80016f0:	2000024c 	.word	0x2000024c
 80016f4:	20000004 	.word	0x20000004
 80016f8:	200001dc 	.word	0x200001dc
 80016fc:	200001e4 	.word	0x200001e4
 8001700:	40668000 	.word	0x40668000
 8001704:	20000208 	.word	0x20000208
    }else if(travel_x <=0){
 8001708:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <main+0x360>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dc02      	bgt.n	8001716 <main+0x236>
    	goal_travel_x = 200;
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <main+0x364>)
 8001712:	22c8      	movs	r2, #200	; 0xc8
 8001714:	601a      	str	r2, [r3, #0]
    }

    go_degree = atan2(goal_travel_x - travel_x, -(travel_y) )/ PI*180;
 8001716:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <main+0x364>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <main+0x360>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	1ad2      	subs	r2, r2, r3
 8001720:	4b49      	ldr	r3, [pc, #292]	; (8001848 <main+0x368>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	425b      	negs	r3, r3
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f000 fa7a 	bl	8001c22 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800172e:	ec51 0b10 	vmov	r0, r1, d0
 8001732:	a341      	add	r3, pc, #260	; (adr r3, 8001838 <main+0x358>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7ff f84c 	bl	80007d4 <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <main+0x36c>)
 800174a:	f7fe ff19 	bl	8000580 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f9c3 	bl	8000ae0 <__aeabi_d2iz>
 800175a:	4603      	mov	r3, r0
 800175c:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <main+0x370>)
 800175e:	6013      	str	r3, [r2, #0]

    motor_A.calcurate(rotate, go_degree, go_speed);
 8001760:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <main+0x374>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176a:	ee17 3a90 	vmov	r3, s15
 800176e:	b219      	sxth	r1, r3
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <main+0x370>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <main+0x378>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4837      	ldr	r0, [pc, #220]	; (800185c <main+0x37c>)
 800177e:	f000 fad3 	bl	8001d28 <_ZN4MOVE9calcurateEsss>
	  motor_A.set_array(Buf);
 8001782:	4937      	ldr	r1, [pc, #220]	; (8001860 <main+0x380>)
 8001784:	4835      	ldr	r0, [pc, #212]	; (800185c <main+0x37c>)
 8001786:	f000 fb83 	bl	8001e90 <_ZN4MOVE9set_arrayEPh>
	  motor_B.calcurate(rotate, go_degree, go_speed);
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <main+0x374>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
 8001798:	b219      	sxth	r1, r3
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <main+0x370>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b21a      	sxth	r2, r3
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <main+0x378>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	482f      	ldr	r0, [pc, #188]	; (8001864 <main+0x384>)
 80017a8:	f000 fabe 	bl	8001d28 <_ZN4MOVE9calcurateEsss>
	  motor_B.set_array(Buf);
 80017ac:	492c      	ldr	r1, [pc, #176]	; (8001860 <main+0x380>)
 80017ae:	482d      	ldr	r0, [pc, #180]	; (8001864 <main+0x384>)
 80017b0:	f000 fb6e 	bl	8001e90 <_ZN4MOVE9set_arrayEPh>
	  motor_C.calcurate(rotate, go_degree, go_speed);
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <main+0x374>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	b219      	sxth	r1, r3
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <main+0x370>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <main+0x378>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4825      	ldr	r0, [pc, #148]	; (8001868 <main+0x388>)
 80017d2:	f000 faa9 	bl	8001d28 <_ZN4MOVE9calcurateEsss>
	  motor_C.set_array(Buf);
 80017d6:	4922      	ldr	r1, [pc, #136]	; (8001860 <main+0x380>)
 80017d8:	4823      	ldr	r0, [pc, #140]	; (8001868 <main+0x388>)
 80017da:	f000 fb59 	bl	8001e90 <_ZN4MOVE9set_arrayEPh>
	  motor_D.calcurate(rotate, go_degree, go_speed);
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <main+0x374>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e8:	ee17 3a90 	vmov	r3, s15
 80017ec:	b219      	sxth	r1, r3
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <main+0x370>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <main+0x378>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <main+0x38c>)
 80017fc:	f000 fa94 	bl	8001d28 <_ZN4MOVE9calcurateEsss>
	  motor_D.set_array(Buf);
 8001800:	4917      	ldr	r1, [pc, #92]	; (8001860 <main+0x380>)
 8001802:	481a      	ldr	r0, [pc, #104]	; (800186c <main+0x38c>)
 8001804:	f000 fb44 	bl	8001e90 <_ZN4MOVE9set_arrayEPh>

//	  check_coord();

	  set_array((-1)*travel_x, (-1)*50, 24, 12, 0);
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <main+0x360>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4258      	negs	r0, r3
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	230c      	movs	r3, #12
 8001814:	2218      	movs	r2, #24
 8001816:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800181a:	f7ff fdaf 	bl	800137c <_Z9set_arrayiiihh>


	  HAL_UART_Transmit(&huart6, (uint8_t*)&Buf, 12, 100);
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	220c      	movs	r2, #12
 8001822:	490f      	ldr	r1, [pc, #60]	; (8001860 <main+0x380>)
 8001824:	4812      	ldr	r0, [pc, #72]	; (8001870 <main+0x390>)
 8001826:	f003 fc0e 	bl	8005046 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 9, 100);
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	2209      	movs	r2, #9
 800182e:	4911      	ldr	r1, [pc, #68]	; (8001874 <main+0x394>)
 8001830:	4811      	ldr	r0, [pc, #68]	; (8001878 <main+0x398>)
 8001832:	f003 fc08 	bl	8005046 <HAL_UART_Transmit>
	if(HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)==1){go_speed = 50;
 8001836:	e6d5      	b.n	80015e4 <main+0x104>
 8001838:	c083126f 	.word	0xc083126f
 800183c:	400921ca 	.word	0x400921ca
 8001840:	200001dc 	.word	0x200001dc
 8001844:	20000248 	.word	0x20000248
 8001848:	200001e4 	.word	0x200001e4
 800184c:	40668000 	.word	0x40668000
 8001850:	20000000 	.word	0x20000000
 8001854:	20000208 	.word	0x20000208
 8001858:	20000004 	.word	0x20000004
 800185c:	2000020c 	.word	0x2000020c
 8001860:	2000023c 	.word	0x2000023c
 8001864:	20000218 	.word	0x20000218
 8001868:	20000224 	.word	0x20000224
 800186c:	20000230 	.word	0x20000230
 8001870:	20000198 	.word	0x20000198
 8001874:	20000254 	.word	0x20000254
 8001878:	20000154 	.word	0x20000154

0800187c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	; 0x50
 8001880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2234      	movs	r2, #52	; 0x34
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f005 fdfe 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <_Z18SystemClock_Configv+0xe4>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <_Z18SystemClock_Configv+0xe4>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <_Z18SystemClock_Configv+0xe4>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <_Z18SystemClock_Configv+0xe8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c8:	4a26      	ldr	r2, [pc, #152]	; (8001964 <_Z18SystemClock_Configv+0xe8>)
 80018ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <_Z18SystemClock_Configv+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018f0:	2310      	movs	r3, #16
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018f4:	23c0      	movs	r3, #192	; 0xc0
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80018f8:	2306      	movs	r3, #6
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fc2f 	bl	800416c <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800191e:	f000 f97b 	bl	8001c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001922:	230f      	movs	r3, #15
 8001924:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001926:	2302      	movs	r3, #2
 8001928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f8cd 	bl	8003adc <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001952:	f000 f961 	bl	8001c18 <Error_Handler>
  }
}
 8001956:	bf00      	nop
 8001958:	3750      	adds	r7, #80	; 0x50
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <_ZL12MX_I2C1_Initv+0x60>)
 8001970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <_ZL12MX_I2C1_Initv+0x64>)
 8001976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a4:	4807      	ldr	r0, [pc, #28]	; (80019c4 <_ZL12MX_I2C1_Initv+0x5c>)
 80019a6:	f000 ffd5 	bl	8002954 <HAL_I2C_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80019ba:	f000 f92d 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200000b8 	.word	0x200000b8
 80019c8:	40005400 	.word	0x40005400
 80019cc:	000186a0 	.word	0x000186a0

080019d0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 80019ee:	4a25      	ldr	r2, [pc, #148]	; (8001a84 <_ZL12MX_TIM3_Initv+0xb4>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 80019f4:	221f      	movs	r2, #31
 80019f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a00:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a12:	481b      	ldr	r0, [pc, #108]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a14:	f002 fe48 	bl	80046a8 <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001a28:	f000 f8f6 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	4811      	ldr	r0, [pc, #68]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a3a:	f002 fffd 	bl	8004a38 <HAL_TIM_ConfigClockSource>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001a4e:	f000 f8e3 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4808      	ldr	r0, [pc, #32]	; (8001a80 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a60:	f003 fa14 	bl	8004e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001a74:	f000 f8d0 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000010c 	.word	0x2000010c
 8001a84:	40000400 	.word	0x40000400

08001a88 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001abe:	4807      	ldr	r0, [pc, #28]	; (8001adc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001ac0:	f003 fa74 	bl	8004fac <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001ad4:	f000 f8a0 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000154 	.word	0x20000154
 8001ae0:	40004800 	.word	0x40004800

08001ae4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001aea:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_ZL19MX_USART6_UART_Initv+0x58>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001b1c:	f003 fa46 	bl	8004fac <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001b30:	f000 f872 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000198 	.word	0x20000198
 8001b3c:	40011400 	.word	0x40011400

08001b40 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a2b      	ldr	r2, [pc, #172]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <_ZL12MX_GPIO_Initv+0xcc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2104      	movs	r1, #4
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <_ZL12MX_GPIO_Initv+0xd0>)
 8001bb0:	f000 feb6 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <_ZL12MX_GPIO_Initv+0xd0>)
 8001bcc:	f000 fcfc 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8001bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	480a      	ldr	r0, [pc, #40]	; (8001c10 <_ZL12MX_GPIO_Initv+0xd0>)
 8001be6:	f000 fcef 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : READ_Pin */
  GPIO_InitStruct.Pin = READ_Pin;
 8001bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(READ_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <_ZL12MX_GPIO_Initv+0xd4>)
 8001c00:	f000 fce2 	bl	80025c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c04:	bf00      	nop
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <Error_Handler+0x8>

08001c22 <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 8001c22:	b5b0      	push	{r4, r5, r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7fe fc3d 	bl	80004ac <__aeabi_i2d>
 8001c32:	4604      	mov	r4, r0
 8001c34:	460d      	mov	r5, r1
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f7fe fc38 	bl	80004ac <__aeabi_i2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ec43 2b11 	vmov	d1, r2, r3
 8001c44:	ec45 4b10 	vmov	d0, r4, r5
 8001c48:	f003 feb2 	bl	80059b0 <atan2>
 8001c4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c50:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001c54:	eeb0 0a47 	vmov.f32	s0, s14
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c64 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d124      	bne.n	8001cbe <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d11f      	bne.n	8001cbe <_Z41__static_initialization_and_destruction_0ii+0x5a>
M_TRANSMIT odom1(&huart6,0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4911      	ldr	r1, [pc, #68]	; (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001c84:	f7ff fb22 	bl	80012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
M_TRANSMIT odom2(&huart6,1);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	490f      	ldr	r1, [pc, #60]	; (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001c8c:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001c8e:	f7ff fb1d 	bl	80012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
MOVE motor_A(0, 45);
 8001c92:	222d      	movs	r2, #45	; 0x2d
 8001c94:	2100      	movs	r1, #0
 8001c96:	480f      	ldr	r0, [pc, #60]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001c98:	f000 f82c 	bl	8001cf4 <_ZN4MOVEC1Ehs>
MOVE motor_B(1, 135);
 8001c9c:	2287      	movs	r2, #135	; 0x87
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001ca2:	f000 f827 	bl	8001cf4 <_ZN4MOVEC1Ehs>
MOVE motor_C(2, -135);
 8001ca6:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8001caa:	2102      	movs	r1, #2
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001cae:	f000 f821 	bl	8001cf4 <_ZN4MOVEC1Ehs>
MOVE motor_D(3, -45);
 8001cb2:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001cba:	f000 f81b 	bl	8001cf4 <_ZN4MOVEC1Ehs>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000198 	.word	0x20000198
 8001ccc:	200001ec 	.word	0x200001ec
 8001cd0:	200001f8 	.word	0x200001f8
 8001cd4:	2000020c 	.word	0x2000020c
 8001cd8:	20000218 	.word	0x20000218
 8001cdc:	20000224 	.word	0x20000224
 8001ce0:	20000230 	.word	0x20000230

08001ce4 <_GLOBAL__sub_I_hi2c1>:
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff ffb9 	bl	8001c64 <_Z41__static_initialization_and_destruction_0ii>
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZN4MOVEC1Ehs>:

#include "move.h"

MOVE::MOVE(uint8_t motor_id, int16_t motor_degree){
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
 8001d00:	4613      	mov	r3, r2
 8001d02:	803b      	strh	r3, [r7, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <_ZN4MOVEC1Ehs+0x30>)
 8001d08:	609a      	str	r2, [r3, #8]
    MOTOR_ID = motor_id;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	701a      	strb	r2, [r3, #0]
    MOTOR_DEGREE = motor_degree;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	883a      	ldrh	r2, [r7, #0]
 8001d14:	805a      	strh	r2, [r3, #2]
}
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	3f333333 	.word	0x3f333333

08001d28 <_ZN4MOVE9calcurateEsss>:

void MOVE::calcurate(int16_t gyro_degree, int16_t goal_degree, int16_t goal_speed){
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 8001d42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d46:	2bb4      	cmp	r3, #180	; 0xb4
 8001d48:	dd05      	ble.n	8001d56 <_ZN4MOVE9calcurateEsss+0x2e>
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	817b      	strh	r3, [r7, #10]
 8001d54:	e009      	b.n	8001d6a <_ZN4MOVE9calcurateEsss+0x42>
    else if(gyro_degree <-180){gyro_degree += 360;}
 8001d56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d5a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001d5e:	da04      	bge.n	8001d6a <_ZN4MOVE9calcurateEsss+0x42>
 8001d60:	897b      	ldrh	r3, [r7, #10]
 8001d62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	817b      	strh	r3, [r7, #10]

    if (gyro_degree > 0){
 8001d6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	dd14      	ble.n	8001d9c <_ZN4MOVE9calcurateEsss+0x74>
        roll_speed = -10 + (-gyro_degree * 3);
 8001d72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d76:	461a      	mov	r2, r3
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	3b0a      	subs	r3, #10
 8001d7e:	617b      	str	r3, [r7, #20]
        if (gyro_degree < 6){
 8001d80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	dc01      	bgt.n	8001d8c <_ZN4MOVE9calcurateEsss+0x64>
            roll_speed = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed < -150){
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8001d92:	da1d      	bge.n	8001dd0 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = -150;
 8001d94:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e019      	b.n	8001dd0 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else if (gyro_degree < 0){
 8001d9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	da13      	bge.n	8001dcc <_ZN4MOVE9calcurateEsss+0xa4>
        roll_speed = 10 + (-gyro_degree * 3);
 8001da4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001da8:	461a      	mov	r2, r3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	330a      	adds	r3, #10
 8001db0:	617b      	str	r3, [r7, #20]
        if (gyro_degree > -6){
 8001db2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001db6:	f113 0f05 	cmn.w	r3, #5
 8001dba:	db01      	blt.n	8001dc0 <_ZN4MOVE9calcurateEsss+0x98>
            roll_speed = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed > 150){
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b96      	cmp	r3, #150	; 0x96
 8001dc4:	dd04      	ble.n	8001dd0 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = 150;
 8001dc6:	2396      	movs	r3, #150	; 0x96
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e001      	b.n	8001dd0 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else{
        roll_speed = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
    }

    motor_speed = (int)goal_speed*sin((PI/180)*(goal_degree - MOTOR_DEGREE));
 8001dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb69 	bl	80004ac <__aeabi_i2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb5e 	bl	80004ac <__aeabi_i2d>
 8001df0:	a325      	add	r3, pc, #148	; (adr r3, 8001e88 <_ZN4MOVE9calcurateEsss+0x160>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fbc3 	bl	8000580 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	ec43 2b17 	vmov	d7, r2, r3
 8001e02:	eeb0 0a47 	vmov.f32	s0, s14
 8001e06:	eef0 0a67 	vmov.f32	s1, s15
 8001e0a:	f003 fd45 	bl	8005898 <sin>
 8001e0e:	ec53 2b10 	vmov	r2, r3, d0
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fbb3 	bl	8000580 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fe5d 	bl	8000ae0 <__aeabi_d2iz>
 8001e26:	4603      	mov	r3, r0
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	809a      	strh	r2, [r3, #4]
    motor_speed = (int)(motor_speed * motor_rate) + (roll_speed * (1 - motor_rate));
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e72:	ee17 3a90 	vmov	r3, s15
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	809a      	strh	r2, [r3, #4]

}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	f3af 8000 	nop.w
 8001e88:	171ea105 	.word	0x171ea105
 8001e8c:	3f91df24 	.word	0x3f91df24

08001e90 <_ZN4MOVE9set_arrayEPh>:

void MOVE::set_array(uint8_t *send_array){
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    send_array[MOTOR_ID*3]=250+MOTOR_ID;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	440b      	add	r3, r1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	440b      	add	r3, r1
 8001eb0:	3a06      	subs	r2, #6
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]
    int16_t send_speed = motor_speed;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	889b      	ldrh	r3, [r3, #4]
 8001eba:	81fb      	strh	r3, [r7, #14]
    send_speed += 5000;
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8001ec8:	2301      	movs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	dc26      	bgt.n	8001f20 <_ZN4MOVE9set_arrayEPh+0x90>
		send_array[MOTOR_ID*3+i] = send_speed%100;
 8001ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <_ZN4MOVE9set_arrayEPh+0x9c>)
 8001ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8001edc:	1151      	asrs	r1, r2, #5
 8001ede:	17da      	asrs	r2, r3, #31
 8001ee0:	1a8a      	subs	r2, r1, r2
 8001ee2:	2164      	movs	r1, #100	; 0x64
 8001ee4:	fb01 f202 	mul.w	r2, r1, r2
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	b219      	sxth	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	441a      	add	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4413      	add	r3, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
		send_speed = (int)send_speed/100;
 8001f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <_ZN4MOVE9set_arrayEPh+0x9c>)
 8001f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f10:	1152      	asrs	r2, r2, #5
 8001f12:	17db      	asrs	r3, r3, #31
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	e7d5      	b.n	8001ecc <_ZN4MOVE9set_arrayEPh+0x3c>
	}
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	51eb851f 	.word	0x51eb851f

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_I2C_MspInit+0x84>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12c      	bne.n	8001ffc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a17      	ldr	r2, [pc, #92]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001fbe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc4:	2312      	movs	r3, #18
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	480c      	ldr	r0, [pc, #48]	; (800200c <HAL_I2C_MspInit+0x8c>)
 8001fdc:	f000 faf4 	bl	80025c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_I2C_MspInit+0x88>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40005400 	.word	0x40005400
 8002008:	40023800 	.word	0x40023800
 800200c:	40020400 	.word	0x40020400

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_TIM_Base_MspInit+0x48>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d115      	bne.n	800204e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <HAL_TIM_Base_MspInit+0x4c>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201d      	movs	r0, #29
 8002044:	f000 fa89 	bl	800255a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002048:	201d      	movs	r0, #29
 800204a:	f000 faa2 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40000400 	.word	0x40000400
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_UART_MspInit+0x124>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d14b      	bne.n	800211a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_UART_MspInit+0x128>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_UART_MspInit+0x128>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_UART_MspInit+0x128>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_UART_MspInit+0x128>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a38      	ldr	r2, [pc, #224]	; (8002188 <HAL_UART_MspInit+0x128>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_UART_MspInit+0x128>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_UART_MspInit+0x128>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a31      	ldr	r2, [pc, #196]	; (8002188 <HAL_UART_MspInit+0x128>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_UART_MspInit+0x128>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020d6:	2320      	movs	r3, #32
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e6:	2307      	movs	r3, #7
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4826      	ldr	r0, [pc, #152]	; (800218c <HAL_UART_MspInit+0x12c>)
 80020f2:	f000 fa69 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002108:	2307      	movs	r3, #7
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4619      	mov	r1, r3
 8002112:	481f      	ldr	r0, [pc, #124]	; (8002190 <HAL_UART_MspInit+0x130>)
 8002114:	f000 fa58 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002118:	e030      	b.n	800217c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_UART_MspInit+0x134>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d12b      	bne.n	800217c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_UART_MspInit+0x128>)
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_UART_MspInit+0x128>)
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	6453      	str	r3, [r2, #68]	; 0x44
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_UART_MspInit+0x128>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_UART_MspInit+0x128>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_UART_MspInit+0x128>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_UART_MspInit+0x128>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800216c:	2308      	movs	r3, #8
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_UART_MspInit+0x12c>)
 8002178:	f000 fa26 	bl	80025c8 <HAL_GPIO_Init>
}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40004800 	.word	0x40004800
 8002188:	40023800 	.word	0x40023800
 800218c:	40020800 	.word	0x40020800
 8002190:	40020400 	.word	0x40020400
 8002194:	40011400 	.word	0x40011400

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e4:	f000 f89a 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM3_IRQHandler+0x10>)
 80021f2:	f002 fb19 	bl	8004828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000010c 	.word	0x2000010c

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	; (8002270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224e:	f7ff ffd7 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f005 f8e9 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7ff f943 	bl	80014e0 <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002268:	08007734 	.word	0x08007734
  ldr r2, =_sbss
 800226c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002270:	20000264 	.word	0x20000264

08002274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_Init+0x40>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_Init+0x40>)
 800228e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_Init+0x40>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 f94f 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f808 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fe40 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f967 	bl	80025ae <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 f92f 	bl	800255a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	2000002c 	.word	0x2000002c
 8002314:	20000034 	.word	0x20000034
 8002318:	20000030 	.word	0x20000030

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000034 	.word	0x20000034
 8002340:	20000260 	.word	0x20000260

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000260 	.word	0x20000260

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000034 	.word	0x20000034

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002510:	d301      	bcc.n	8002516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2301      	movs	r3, #1
 8002514:	e00f      	b.n	8002536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <SysTick_Config+0x40>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251e:	210f      	movs	r1, #15
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f7ff ff8e 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <SysTick_Config+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SysTick_Config+0x40>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff29 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff3e 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff8e 	bl	8002498 <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5d 	bl	8002444 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff31 	bl	8002408 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffa2 	bl	8002500 <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e165      	b.n	80028b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8154 	bne.w	80028aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d005      	beq.n	800261a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002616:	2b02      	cmp	r3, #2
 8002618:	d130      	bne.n	800267c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 0201 	and.w	r2, r3, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b03      	cmp	r3, #3
 8002686:	d017      	beq.n	80026b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d123      	bne.n	800270c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80ae 	beq.w	80028aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_GPIO_Init+0x300>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a5c      	ldr	r2, [pc, #368]	; (80028c8 <HAL_GPIO_Init+0x300>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_GPIO_Init+0x300>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_GPIO_Init+0x304>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4f      	ldr	r2, [pc, #316]	; (80028d0 <HAL_GPIO_Init+0x308>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x21a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4e      	ldr	r2, [pc, #312]	; (80028d4 <HAL_GPIO_Init+0x30c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x216>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4d      	ldr	r2, [pc, #308]	; (80028d8 <HAL_GPIO_Init+0x310>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x212>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_GPIO_Init+0x314>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4b      	ldr	r2, [pc, #300]	; (80028e0 <HAL_GPIO_Init+0x318>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x20a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4a      	ldr	r2, [pc, #296]	; (80028e4 <HAL_GPIO_Init+0x31c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x206>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <HAL_GPIO_Init+0x320>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x202>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e00c      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e00a      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_GPIO_Init+0x304>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_GPIO_Init+0x324>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a31      	ldr	r2, [pc, #196]	; (80028ec <HAL_GPIO_Init+0x324>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_GPIO_Init+0x324>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_GPIO_Init+0x324>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_GPIO_Init+0x324>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_GPIO_Init+0x324>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_GPIO_Init+0x324>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_GPIO_Init+0x324>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f ae96 	bls.w	80025e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40021800 	.word	0x40021800
 80028ec:	40013c00 	.word	0x40013c00

080028f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e12b      	b.n	8002bbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fb00 	bl	8001f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2224      	movs	r2, #36	; 0x24
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029b8:	f001 f982 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 80029bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a81      	ldr	r2, [pc, #516]	; (8002bc8 <HAL_I2C_Init+0x274>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d807      	bhi.n	80029d8 <HAL_I2C_Init+0x84>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a80      	ldr	r2, [pc, #512]	; (8002bcc <HAL_I2C_Init+0x278>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bf94      	ite	ls
 80029d0:	2301      	movls	r3, #1
 80029d2:	2300      	movhi	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e006      	b.n	80029e6 <HAL_I2C_Init+0x92>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a7d      	ldr	r2, [pc, #500]	; (8002bd0 <HAL_I2C_Init+0x27c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	bf94      	ite	ls
 80029e0:	2301      	movls	r3, #1
 80029e2:	2300      	movhi	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0e7      	b.n	8002bbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a78      	ldr	r2, [pc, #480]	; (8002bd4 <HAL_I2C_Init+0x280>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9b      	lsrs	r3, r3, #18
 80029f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <HAL_I2C_Init+0x274>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d802      	bhi.n	8002a28 <HAL_I2C_Init+0xd4>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3301      	adds	r3, #1
 8002a26:	e009      	b.n	8002a3c <HAL_I2C_Init+0xe8>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <HAL_I2C_Init+0x284>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	495c      	ldr	r1, [pc, #368]	; (8002bc8 <HAL_I2C_Init+0x274>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d819      	bhi.n	8002a90 <HAL_I2C_Init+0x13c>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e59      	subs	r1, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6a:	1c59      	adds	r1, r3, #1
 8002a6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a70:	400b      	ands	r3, r1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_I2C_Init+0x138>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e59      	subs	r1, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	e051      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	e04f      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <HAL_I2C_Init+0x168>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e012      	b.n	8002ae2 <HAL_I2C_Init+0x18e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Init+0x196>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e022      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10e      	bne.n	8002b10 <HAL_I2C_Init+0x1bc>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1e58      	subs	r0, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0e:	e00f      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e58      	subs	r0, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	0099      	lsls	r1, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	6809      	ldr	r1, [r1, #0]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6911      	ldr	r1, [r2, #16]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	000186a0 	.word	0x000186a0
 8002bcc:	001e847f 	.word	0x001e847f
 8002bd0:	003d08ff 	.word	0x003d08ff
 8002bd4:	431bde83 	.word	0x431bde83
 8002bd8:	10624dd3 	.word	0x10624dd3

08002bdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	461a      	mov	r2, r3
 8002be8:	460b      	mov	r3, r1
 8002bea:	817b      	strh	r3, [r7, #10]
 8002bec:	4613      	mov	r3, r2
 8002bee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff fba8 	bl	8002344 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	f040 80e0 	bne.w	8002dc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2319      	movs	r3, #25
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4970      	ldr	r1, [pc, #448]	; (8002dd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fd86 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e0d3      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Transmit+0x50>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d007      	beq.n	8002c52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2221      	movs	r2, #33	; 0x21
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a50      	ldr	r2, [pc, #320]	; (8002dd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fbf0 	bl	8003480 <I2C_MasterRequestWrite>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e08d      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc0:	e066      	b.n	8002d90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	6a39      	ldr	r1, [r7, #32]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fe00 	bl	80038cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d107      	bne.n	8002cea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d11b      	bne.n	8002d64 <HAL_I2C_Master_Transmit+0x188>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d017      	beq.n	8002d64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	6a39      	ldr	r1, [r7, #32]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fdf0 	bl	800394e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d107      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e01a      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d194      	bne.n	8002cc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	00100002 	.word	0x00100002
 8002dd4:	ffff0000 	.word	0xffff0000

08002dd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	460b      	mov	r3, r1
 8002de6:	817b      	strh	r3, [r7, #10]
 8002de8:	4613      	mov	r3, r2
 8002dea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff faaa 	bl	8002344 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	f040 820b 	bne.w	8003216 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2319      	movs	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	497c      	ldr	r1, [pc, #496]	; (8002ffc <HAL_I2C_Master_Receive+0x224>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fc88 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	e1fe      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_I2C_Master_Receive+0x50>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e1f7      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d007      	beq.n	8002e4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2222      	movs	r2, #34	; 0x22
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_I2C_Master_Receive+0x228>)
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e90:	8979      	ldrh	r1, [r7, #10]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fb74 	bl	8003584 <I2C_MasterRequestRead>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e1b8      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d113      	bne.n	8002ed6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e18c      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d11b      	bne.n	8002f16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e16c      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d11b      	bne.n	8002f56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	e14c      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f7c:	e138      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	f200 80f1 	bhi.w	800316a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d123      	bne.n	8002fd8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fd1b 	bl	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e139      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd6:	e10b      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d14e      	bne.n	800307e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_I2C_Master_Receive+0x22c>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fb98 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e10e      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
 8002ffa:	bf00      	nop
 8002ffc:	00100002 	.word	0x00100002
 8003000:	ffff0000 	.word	0xffff0000
 8003004:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800307c:	e0b8      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	2200      	movs	r2, #0
 8003086:	4966      	ldr	r1, [pc, #408]	; (8003220 <HAL_I2C_Master_Receive+0x448>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fb49 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0bf      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2200      	movs	r2, #0
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_I2C_Master_Receive+0x448>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fb1b 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e091      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003168:	e042      	b.n	80031f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fc2e 	bl	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e04c      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d118      	bne.n	80031f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f aec2 	bne.w	8002f7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010004 	.word	0x00010004

08003224 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	460b      	mov	r3, r1
 8003232:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff f886 	bl	8002344 <HAL_GetTick>
 8003238:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	f040 8111 	bne.w	800346e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	4988      	ldr	r1, [pc, #544]	; (8003478 <HAL_I2C_IsDeviceReady+0x254>)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fa62 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	e104      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_IsDeviceReady+0x50>
 8003270:	2302      	movs	r3, #2
 8003272:	e0fd      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d007      	beq.n	800329a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2224      	movs	r2, #36	; 0x24
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a70      	ldr	r2, [pc, #448]	; (800347c <HAL_I2C_IsDeviceReady+0x258>)
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fa20 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f4:	d103      	bne.n	80032fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0b6      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff f817 	bl	8002344 <HAL_GetTick>
 8003316:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003346:	e025      	b.n	8003394 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003348:	f7fe fffc 	bl	8002344 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <HAL_I2C_IsDeviceReady+0x13a>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	22a0      	movs	r2, #160	; 0xa0
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2ba0      	cmp	r3, #160	; 0xa0
 800339e:	d005      	beq.n	80033ac <HAL_I2C_IsDeviceReady+0x188>
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_I2C_IsDeviceReady+0x188>
 80033a6:	7dbb      	ldrb	r3, [r7, #22]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0cd      	beq.n	8003348 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d129      	bne.n	8003416 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2319      	movs	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	4921      	ldr	r1, [pc, #132]	; (8003478 <HAL_I2C_IsDeviceReady+0x254>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f994 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e036      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e02c      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2319      	movs	r3, #25
 8003436:	2201      	movs	r2, #1
 8003438:	490f      	ldr	r1, [pc, #60]	; (8003478 <HAL_I2C_IsDeviceReady+0x254>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f970 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e012      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3301      	adds	r3, #1
 800344e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	f4ff af32 	bcc.w	80032be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00100002 	.word	0x00100002
 800347c:	ffff0000 	.word	0xffff0000

08003480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	460b      	mov	r3, r1
 800348e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d006      	beq.n	80034aa <I2C_MasterRequestWrite+0x2a>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d003      	beq.n	80034aa <I2C_MasterRequestWrite+0x2a>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a8:	d108      	bne.n	80034bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e00b      	b.n	80034d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	2b12      	cmp	r3, #18
 80034c2:	d107      	bne.n	80034d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f91d 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fa:	d103      	bne.n	8003504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e035      	b.n	8003574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003510:	d108      	bne.n	8003524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003512:	897b      	ldrh	r3, [r7, #10]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003520:	611a      	str	r2, [r3, #16]
 8003522:	e01b      	b.n	800355c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003524:	897b      	ldrh	r3, [r7, #10]
 8003526:	11db      	asrs	r3, r3, #7
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f003 0306 	and.w	r3, r3, #6
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f063 030f 	orn	r3, r3, #15
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <I2C_MasterRequestWrite+0xfc>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f943 	bl	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e010      	b.n	8003574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4907      	ldr	r1, [pc, #28]	; (8003580 <I2C_MasterRequestWrite+0x100>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f933 	bl	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00010008 	.word	0x00010008
 8003580:	00010002 	.word	0x00010002

08003584 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d006      	beq.n	80035be <I2C_MasterRequestRead+0x3a>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d003      	beq.n	80035be <I2C_MasterRequestRead+0x3a>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035bc:	d108      	bne.n	80035d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e00b      	b.n	80035e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	2b11      	cmp	r3, #17
 80035d6:	d107      	bne.n	80035e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f893 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d103      	bne.n	8003618 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e079      	b.n	8003710 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003624:	d108      	bne.n	8003638 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e05f      	b.n	80036f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	11db      	asrs	r3, r3, #7
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0306 	and.w	r3, r3, #6
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f063 030f 	orn	r3, r3, #15
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4930      	ldr	r1, [pc, #192]	; (8003718 <I2C_MasterRequestRead+0x194>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f8b9 	bl	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e054      	b.n	8003710 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4929      	ldr	r1, [pc, #164]	; (800371c <I2C_MasterRequestRead+0x198>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8a9 	bl	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e044      	b.n	8003710 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f831 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d2:	d103      	bne.n	80036dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e017      	b.n	8003710 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036e0:	897b      	ldrh	r3, [r7, #10]
 80036e2:	11db      	asrs	r3, r3, #7
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f063 030e 	orn	r3, r3, #14
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <I2C_MasterRequestRead+0x198>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f865 	bl	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	00010008 	.word	0x00010008
 800371c:	00010002 	.word	0x00010002

08003720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003730:	e025      	b.n	800377e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d021      	beq.n	800377e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7fe fe03 	bl	8002344 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d116      	bne.n	800377e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e023      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d10d      	bne.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	e00c      	b.n	80037be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d0b6      	beq.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037dc:	e051      	b.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ec:	d123      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003806:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e046      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d021      	beq.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe fd81 	bl	8002344 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d116      	bne.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e020      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10c      	bne.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e00b      	b.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d18d      	bne.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	e02d      	b.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f8ce 	bl	8003a7c <I2C_IsAcknowledgeFailed>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e02d      	b.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d021      	beq.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7fe fd27 	bl	8002344 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d116      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e007      	b.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d1ca      	bne.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800395a:	e02d      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f88d 	bl	8003a7c <I2C_IsAcknowledgeFailed>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e02d      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d021      	beq.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003974:	f7fe fce6 	bl	8002344 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	d302      	bcc.n	800398a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e007      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d1ca      	bne.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039dc:	e042      	b.n	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d119      	bne.n	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0210 	mvn.w	r2, #16
 80039f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e029      	b.n	8003a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fe fc90 	bl	8002344 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d116      	bne.n	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e007      	b.n	8003a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d1b5      	bne.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d11b      	bne.n	8003acc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0cc      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af0:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d90c      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0b8      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a58      	ldr	r2, [pc, #352]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b48:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	494d      	ldr	r1, [pc, #308]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d044      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d119      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e06f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003baa:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e067      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4934      	ldr	r1, [pc, #208]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fbba 	bl	8002344 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fe fbb6 	bl	8002344 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e04f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 020c 	and.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1eb      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d20c      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0a:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e032      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4916      	ldr	r1, [pc, #88]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c62:	f000 f855 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490a      	ldr	r1, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe fb1a 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023c00 	.word	0x40023c00
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	080074b8 	.word	0x080074b8
 8003ca0:	2000002c 	.word	0x2000002c
 8003ca4:	20000030 	.word	0x20000030

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	2000002c 	.word	0x2000002c

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	080074c8 	.word	0x080074c8

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cec:	f7ff ffdc 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4903      	ldr	r1, [pc, #12]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	080074c8 	.word	0x080074c8

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b0ae      	sub	sp, #184	; 0xb8
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d36:	4bcb      	ldr	r3, [pc, #812]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	f200 8204 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x43c>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	0800414d 	.word	0x0800414d
 8003d54:	0800414d 	.word	0x0800414d
 8003d58:	0800414d 	.word	0x0800414d
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	0800414d 	.word	0x0800414d
 8003d64:	0800414d 	.word	0x0800414d
 8003d68:	0800414d 	.word	0x0800414d
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	0800414d 	.word	0x0800414d
 8003d74:	0800414d 	.word	0x0800414d
 8003d78:	0800414d 	.word	0x0800414d
 8003d7c:	08003f81 	.word	0x08003f81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4bb9      	ldr	r3, [pc, #740]	; (8004068 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d86:	e1e5      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d88:	4bb7      	ldr	r3, [pc, #732]	; (8004068 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d8e:	e1e1      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d90:	4bb4      	ldr	r3, [pc, #720]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9c:	4bb1      	ldr	r3, [pc, #708]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d071      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4bae      	ldr	r3, [pc, #696]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003db4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dce:	4622      	mov	r2, r4
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4621      	mov	r1, r4
 8003de8:	1a51      	subs	r1, r2, r1
 8003dea:	6439      	str	r1, [r7, #64]	; 0x40
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb63 0301 	sbc.w	r3, r3, r1
 8003df2:	647b      	str	r3, [r7, #68]	; 0x44
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e00:	4649      	mov	r1, r9
 8003e02:	018b      	lsls	r3, r1, #6
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	018a      	lsls	r2, r1, #6
 8003e0e:	4641      	mov	r1, r8
 8003e10:	1a51      	subs	r1, r2, r1
 8003e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e14:	4649      	mov	r1, r9
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e28:	4649      	mov	r1, r9
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4641      	mov	r1, r8
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
 8003e42:	462b      	mov	r3, r5
 8003e44:	460a      	mov	r2, r1
 8003e46:	eb42 0303 	adc.w	r3, r2, r3
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e58:	4629      	mov	r1, r5
 8003e5a:	028b      	lsls	r3, r1, #10
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e62:	4621      	mov	r1, r4
 8003e64:	028a      	lsls	r2, r1, #10
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e7c:	f7fc fec8 	bl	8000c10 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e8a:	e067      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8c:	4b75      	ldr	r3, [pc, #468]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eaa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4641      	mov	r1, r8
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	4641      	mov	r1, r8
 8003ef0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0e:	4692      	mov	sl, r2
 8003f10:	469b      	mov	fp, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb1a 0303 	adds.w	r3, sl, r3
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	028b      	lsls	r3, r1, #10
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f38:	4621      	mov	r1, r4
 8003f3a:	028a      	lsls	r2, r1, #10
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f44:	2200      	movs	r2, #0
 8003f46:	673b      	str	r3, [r7, #112]	; 0x70
 8003f48:	677a      	str	r2, [r7, #116]	; 0x74
 8003f4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f4e:	f7fc fe5f 	bl	8000c10 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4613      	mov	r3, r2
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f5c:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f7e:	e0e9      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d069      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	663b      	str	r3, [r7, #96]	; 0x60
 8003fac:	2300      	movs	r3, #0
 8003fae:	667b      	str	r3, [r7, #100]	; 0x64
 8003fb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0159      	lsls	r1, r3, #5
 8003fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc6:	0150      	lsls	r0, r2, #5
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4621      	mov	r1, r4
 8003fce:	1a51      	subs	r1, r2, r1
 8003fd0:	61b9      	str	r1, [r7, #24]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	018b      	lsls	r3, r1, #6
 8003fea:	4651      	mov	r1, sl
 8003fec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	018a      	lsls	r2, r1, #6
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ebb2 0801 	subs.w	r8, r2, r1
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	eb63 0901 	sbc.w	r9, r3, r1
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004010:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004014:	4690      	mov	r8, r2
 8004016:	4699      	mov	r9, r3
 8004018:	4623      	mov	r3, r4
 800401a:	eb18 0303 	adds.w	r3, r8, r3
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	462b      	mov	r3, r5
 8004022:	eb49 0303 	adc.w	r3, r9, r3
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004034:	4629      	mov	r1, r5
 8004036:	028b      	lsls	r3, r1, #10
 8004038:	4621      	mov	r1, r4
 800403a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800403e:	4621      	mov	r1, r4
 8004040:	028a      	lsls	r2, r1, #10
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800404a:	2200      	movs	r2, #0
 800404c:	65bb      	str	r3, [r7, #88]	; 0x58
 800404e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004050:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004054:	f7fc fddc 	bl	8000c10 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004062:	e063      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x41c>
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406c:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_RCC_GetSysClockFreq+0x454>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	2200      	movs	r2, #0
 8004074:	4618      	mov	r0, r3
 8004076:	4611      	mov	r1, r2
 8004078:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407c:	653b      	str	r3, [r7, #80]	; 0x50
 800407e:	2300      	movs	r3, #0
 8004080:	657b      	str	r3, [r7, #84]	; 0x54
 8004082:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004086:	4642      	mov	r2, r8
 8004088:	464b      	mov	r3, r9
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4641      	mov	r1, r8
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	4649      	mov	r1, r9
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040b8:	4659      	mov	r1, fp
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4651      	mov	r1, sl
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4651      	mov	r1, sl
 80040c8:	1a54      	subs	r4, r2, r1
 80040ca:	4659      	mov	r1, fp
 80040cc:	eb63 0501 	sbc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	464b      	mov	r3, r9
 80040ec:	eb45 0303 	adc.w	r3, r5, r3
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fe:	4629      	mov	r1, r5
 8004100:	028b      	lsls	r3, r1, #10
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004108:	4621      	mov	r1, r4
 800410a:	028a      	lsls	r2, r1, #10
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004114:	2200      	movs	r2, #0
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
 8004118:	64fa      	str	r2, [r7, #76]	; 0x4c
 800411a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800411e:	f7fc fd77 	bl	8000c10 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCC_GetSysClockFreq+0x454>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0f1b      	lsrs	r3, r3, #28
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800413a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800413e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800414a:	e003      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_GetSysClockFreq+0x458>)
 800414e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004158:	4618      	mov	r0, r3
 800415a:	37b8      	adds	r7, #184	; 0xb8
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400

0800416c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e28d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8083 	beq.w	8004292 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800418c:	4b94      	ldr	r3, [pc, #592]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b04      	cmp	r3, #4
 8004196:	d019      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004198:	4b91      	ldr	r3, [pc, #580]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041a4:	4b8e      	ldr	r3, [pc, #568]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d00c      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b2:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	4b84      	ldr	r3, [pc, #528]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_OscConfig+0x124>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d157      	bne.n	8004290 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e25a      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x90>
 80041ee:	4b7c      	ldr	r3, [pc, #496]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0xb4>
 8004206:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a72      	ldr	r2, [pc, #456]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 8004220:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6e      	ldr	r2, [pc, #440]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b6c      	ldr	r3, [pc, #432]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe f880 	bl	8002344 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004248:	f7fe f87c 	bl	8002344 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	; 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e21f      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xdc>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe f86c 	bl	8002344 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe f868 	bl	8002344 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e20b      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b57      	ldr	r3, [pc, #348]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x104>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06f      	beq.n	800437e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800429e:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042aa:	4b4d      	ldr	r3, [pc, #308]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d105      	bne.n	80042c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042b6:	4b4a      	ldr	r3, [pc, #296]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1d3      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4937      	ldr	r1, [pc, #220]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fe f815 	bl	8002344 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431e:	f7fe f811 	bl	8002344 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1b4      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4925      	ldr	r1, [pc, #148]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd fff4 	bl	8002344 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004360:	f7fd fff0 	bl	8002344 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e193      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d036      	beq.n	80043f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd ffd4 	bl	8002344 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fd ffd0 	bl	8002344 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e173      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x234>
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fd ffbd 	bl	8002344 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00e      	b.n	80043ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fd ffb9 	bl	8002344 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d907      	bls.n	80043ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e15c      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	42470000 	.word	0x42470000
 80043e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b8a      	ldr	r3, [pc, #552]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ea      	bne.n	80043ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8097 	beq.w	8004534 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b83      	ldr	r3, [pc, #524]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4b7f      	ldr	r3, [pc, #508]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a7e      	ldr	r2, [pc, #504]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
 8004426:	4b7c      	ldr	r3, [pc, #496]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b79      	ldr	r3, [pc, #484]	; (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b76      	ldr	r3, [pc, #472]	; (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	; (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fd ff79 	bl	8002344 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fd ff75 	bl	8002344 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e118      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b6c      	ldr	r3, [pc, #432]	; (800461c <HAL_RCC_OscConfig+0x4b0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x31e>
 800447c:	4b66      	ldr	r3, [pc, #408]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a65      	ldr	r2, [pc, #404]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x340>
 8004492:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a60      	ldr	r2, [pc, #384]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	; 0x70
 800449e:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a5d      	ldr	r2, [pc, #372]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 80044ac:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a59      	ldr	r2, [pc, #356]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	4b57      	ldr	r3, [pc, #348]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	4a56      	ldr	r2, [pc, #344]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044be:	f023 0304 	bic.w	r3, r3, #4
 80044c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd ff3a 	bl	8002344 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd ff36 	bl	8002344 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0d7      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ee      	beq.n	80044d4 <HAL_RCC_OscConfig+0x368>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd ff24 	bl	8002344 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fd ff20 	bl	8002344 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0c1      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	4b40      	ldr	r3, [pc, #256]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ee      	bne.n	8004500 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	4a3a      	ldr	r2, [pc, #232]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80ad 	beq.w	8004698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d060      	beq.n	800460c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d145      	bne.n	80045de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCC_OscConfig+0x4b4>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fef4 	bl	8002344 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd fef0 	bl	8002344 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e093      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	491b      	ldr	r1, [pc, #108]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fd fec5 	bl	8002344 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045be:	f7fd fec1 	bl	8002344 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e064      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x452>
 80045dc:	e05c      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd feae 	bl	8002344 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd feaa 	bl	8002344 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x480>
 800460a:	e045      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e040      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <HAL_RCC_OscConfig+0x538>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d030      	beq.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d129      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d122      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d119      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d10f      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e041      	b.n	800473e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd fc9e 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f000 fa96 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e04e      	b.n	80047fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a23      	ldr	r2, [pc, #140]	; (800480c <HAL_TIM_Base_Start_IT+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d01d      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <HAL_TIM_Base_Start_IT+0xc8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_TIM_Base_Start_IT+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	; (8004818 <HAL_TIM_Base_Start_IT+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_TIM_Base_Start_IT+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d111      	bne.n	80047ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d010      	beq.n	80047fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e007      	b.n	80047fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40014000 	.word	0x40014000
 8004824:	40001800 	.word	0x40001800

08004828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d122      	bne.n	8004884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d11b      	bne.n	8004884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0202 	mvn.w	r2, #2
 8004854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f9b5 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9a7 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f9b8 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d122      	bne.n	80048d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d11b      	bne.n	80048d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0204 	mvn.w	r2, #4
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f98b 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f97d 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f98e 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d122      	bne.n	800492c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d11b      	bne.n	800492c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0208 	mvn.w	r2, #8
 80048fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2204      	movs	r2, #4
 8004902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f961 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 8004918:	e005      	b.n	8004926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f953 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f964 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b10      	cmp	r3, #16
 8004938:	d122      	bne.n	8004980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b10      	cmp	r3, #16
 8004946:	d11b      	bne.n	8004980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0210 	mvn.w	r2, #16
 8004950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2208      	movs	r2, #8
 8004956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f937 	bl	8004bda <HAL_TIM_IC_CaptureCallback>
 800496c:	e005      	b.n	800497a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f929 	bl	8004bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f93a 	bl	8004bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10e      	bne.n	80049ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0201 	mvn.w	r2, #1
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fd8e 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b80      	cmp	r3, #128	; 0x80
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fae0 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8ff 	bl	8004c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0220 	mvn.w	r2, #32
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 faaa 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_ConfigClockSource+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0b4      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x186>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d03e      	beq.n	8004b0c <HAL_TIM_ConfigClockSource+0xd4>
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	f200 8087 	bhi.w	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	f000 8086 	beq.w	8004baa <HAL_TIM_ConfigClockSource+0x172>
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d87f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b70      	cmp	r3, #112	; 0x70
 8004aa6:	d01a      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xa6>
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d87b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b60      	cmp	r3, #96	; 0x60
 8004aae:	d050      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x11a>
 8004ab0:	2b60      	cmp	r3, #96	; 0x60
 8004ab2:	d877      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b50      	cmp	r3, #80	; 0x50
 8004ab6:	d03c      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xfa>
 8004ab8:	2b50      	cmp	r3, #80	; 0x50
 8004aba:	d873      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d058      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x13a>
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d86f      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d064      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d86b      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d060      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d867      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d05a      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	e062      	b.n	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f000 f9ad 	bl	8004e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
      break;
 8004b0a:	e04f      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f000 f996 	bl	8004e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b2e:	609a      	str	r2, [r3, #8]
      break;
 8004b30:	e03c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 f90a 	bl	8004d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2150      	movs	r1, #80	; 0x50
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f963 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e02c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 f929 	bl	8004db6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2160      	movs	r1, #96	; 0x60
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f953 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004b70:	e01c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 f8ea 	bl	8004d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f943 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004b90:	e00c      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f000 f93a 	bl	8004e16 <TIM_ITRx_SetConfig>
      break;
 8004ba2:	e003      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e000      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d108      	bne.n	8004c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d02b      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d027      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d023      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01f      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01b      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d017      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <TIM_Base_SetConfig+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	; (8004d50 <TIM_Base_SetConfig+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <TIM_Base_SetConfig+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d108      	bne.n	8004cdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40010400 	.word	0x40010400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800
 8004d4c:	40001800 	.word	0x40001800
 8004d50:	40001c00 	.word	0x40001c00
 8004d54:	40002000 	.word	0x40002000

08004d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 030a 	bic.w	r3, r3, #10
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b087      	sub	sp, #28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0210 	bic.w	r2, r3, #16
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f043 0307 	orr.w	r3, r3, #7
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	021a      	lsls	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e05a      	b.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d01d      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10c      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40010400 	.word	0x40010400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40001800 	.word	0x40001800

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e03f      	b.n	800503e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fd f844 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f9cb 	bl	800538c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b08a      	sub	sp, #40	; 0x28
 800504a:	af02      	add	r7, sp, #8
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b20      	cmp	r3, #32
 8005064:	d17c      	bne.n	8005160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_UART_Transmit+0x2c>
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e075      	b.n	8005162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_UART_Transmit+0x3e>
 8005080:	2302      	movs	r3, #2
 8005082:	e06e      	b.n	8005162 <HAL_UART_Transmit+0x11c>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2221      	movs	r2, #33	; 0x21
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800509a:	f7fd f953 	bl	8002344 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	88fa      	ldrh	r2, [r7, #6]
 80050aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x82>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050d8:	e02a      	b.n	8005130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f8e2 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e036      	b.n	8005162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	3302      	adds	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e007      	b.n	8005122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1cf      	bne.n	80050da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	2140      	movs	r1, #64	; 0x40
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f8b2 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e006      	b.n	8005162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005160:	2302      	movs	r3, #2
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b08a      	sub	sp, #40	; 0x28
 800516e:	af02      	add	r7, sp, #8
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b20      	cmp	r3, #32
 8005188:	f040 808c 	bne.w	80052a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Receive+0x2e>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e084      	b.n	80052a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Receive+0x40>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e07d      	b.n	80052a6 <HAL_UART_Receive+0x13c>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2222      	movs	r2, #34	; 0x22
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c6:	f7fd f8bd 	bl	8002344 <HAL_GetTick>
 80051ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e0:	d108      	bne.n	80051f4 <HAL_UART_Receive+0x8a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e003      	b.n	80051fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005204:	e043      	b.n	800528e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2120      	movs	r1, #32
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f84c 	bl	80052ae <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e042      	b.n	80052a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10c      	bne.n	8005240 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	b29a      	uxth	r2, r3
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	3302      	adds	r3, #2
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e01f      	b.n	8005280 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005248:	d007      	beq.n	800525a <HAL_UART_Receive+0xf0>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <HAL_UART_Receive+0xfe>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e008      	b.n	800527a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005274:	b2da      	uxtb	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3301      	adds	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1b6      	bne.n	8005206 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b090      	sub	sp, #64	; 0x40
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052be:	e050      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d04c      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
 80052ce:	f7fd f839 	bl	8002344 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052da:	429a      	cmp	r2, r3
 80052dc:	d241      	bcs.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005300:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	613b      	str	r3, [r7, #16]
   return(result);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f023 0301 	bic.w	r3, r3, #1
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005332:	623a      	str	r2, [r7, #32]
 8005334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	69f9      	ldr	r1, [r7, #28]
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e5      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d09f      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3740      	adds	r7, #64	; 0x40
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005390:	b0c0      	sub	sp, #256	; 0x100
 8005392:	af00      	add	r7, sp, #0
 8005394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	68d9      	ldr	r1, [r3, #12]
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	ea40 0301 	orr.w	r3, r0, r1
 80053b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053e4:	f021 010c 	bic.w	r1, r1, #12
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053f2:	430b      	orrs	r3, r1
 80053f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	6999      	ldr	r1, [r3, #24]
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	ea40 0301 	orr.w	r3, r0, r1
 8005412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b8f      	ldr	r3, [pc, #572]	; (8005658 <UART_SetConfig+0x2cc>)
 800541c:	429a      	cmp	r2, r3
 800541e:	d005      	beq.n	800542c <UART_SetConfig+0xa0>
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8d      	ldr	r3, [pc, #564]	; (800565c <UART_SetConfig+0x2d0>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d104      	bne.n	8005436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800542c:	f7fe fc5c 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 8005430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005434:	e003      	b.n	800543e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005436:	f7fe fc43 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 800543a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005448:	f040 810c 	bne.w	8005664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800544c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005450:	2200      	movs	r2, #0
 8005452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800545a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800545e:	4622      	mov	r2, r4
 8005460:	462b      	mov	r3, r5
 8005462:	1891      	adds	r1, r2, r2
 8005464:	65b9      	str	r1, [r7, #88]	; 0x58
 8005466:	415b      	adcs	r3, r3
 8005468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800546e:	4621      	mov	r1, r4
 8005470:	eb12 0801 	adds.w	r8, r2, r1
 8005474:	4629      	mov	r1, r5
 8005476:	eb43 0901 	adc.w	r9, r3, r1
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548e:	4690      	mov	r8, r2
 8005490:	4699      	mov	r9, r3
 8005492:	4623      	mov	r3, r4
 8005494:	eb18 0303 	adds.w	r3, r8, r3
 8005498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800549c:	462b      	mov	r3, r5
 800549e:	eb49 0303 	adc.w	r3, r9, r3
 80054a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054ba:	460b      	mov	r3, r1
 80054bc:	18db      	adds	r3, r3, r3
 80054be:	653b      	str	r3, [r7, #80]	; 0x50
 80054c0:	4613      	mov	r3, r2
 80054c2:	eb42 0303 	adc.w	r3, r2, r3
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
 80054c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054d0:	f7fb fb9e 	bl	8000c10 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b61      	ldr	r3, [pc, #388]	; (8005660 <UART_SetConfig+0x2d4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011c      	lsls	r4, r3, #4
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80054fc:	415b      	adcs	r3, r3
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005504:	4641      	mov	r1, r8
 8005506:	eb12 0a01 	adds.w	sl, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb43 0b01 	adc.w	fp, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800551c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005524:	4692      	mov	sl, r2
 8005526:	469b      	mov	fp, r3
 8005528:	4643      	mov	r3, r8
 800552a:	eb1a 0303 	adds.w	r3, sl, r3
 800552e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005532:	464b      	mov	r3, r9
 8005534:	eb4b 0303 	adc.w	r3, fp, r3
 8005538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800554c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005550:	460b      	mov	r3, r1
 8005552:	18db      	adds	r3, r3, r3
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
 8005556:	4613      	mov	r3, r2
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
 800555e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005566:	f7fb fb53 	bl	8000c10 <__aeabi_uldivmod>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4611      	mov	r1, r2
 8005570:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <UART_SetConfig+0x2d4>)
 8005572:	fba3 2301 	umull	r2, r3, r3, r1
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2264      	movs	r2, #100	; 0x64
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	1acb      	subs	r3, r1, r3
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005586:	4b36      	ldr	r3, [pc, #216]	; (8005660 <UART_SetConfig+0x2d4>)
 8005588:	fba3 2302 	umull	r2, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005594:	441c      	add	r4, r3
 8005596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	1891      	adds	r1, r2, r2
 80055ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80055b0:	415b      	adcs	r3, r3
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055b8:	4641      	mov	r1, r8
 80055ba:	1851      	adds	r1, r2, r1
 80055bc:	6339      	str	r1, [r7, #48]	; 0x30
 80055be:	4649      	mov	r1, r9
 80055c0:	414b      	adcs	r3, r1
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055d0:	4659      	mov	r1, fp
 80055d2:	00cb      	lsls	r3, r1, #3
 80055d4:	4651      	mov	r1, sl
 80055d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055da:	4651      	mov	r1, sl
 80055dc:	00ca      	lsls	r2, r1, #3
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	4642      	mov	r2, r8
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055ec:	464b      	mov	r3, r9
 80055ee:	460a      	mov	r2, r1
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800560c:	460b      	mov	r3, r1
 800560e:	18db      	adds	r3, r3, r3
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
 8005612:	4613      	mov	r3, r2
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800561e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005622:	f7fb faf5 	bl	8000c10 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <UART_SetConfig+0x2d4>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	; 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	3332      	adds	r3, #50	; 0x32
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <UART_SetConfig+0x2d4>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f003 0207 	and.w	r2, r3, #7
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4422      	add	r2, r4
 8005652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005654:	e105      	b.n	8005862 <UART_SetConfig+0x4d6>
 8005656:	bf00      	nop
 8005658:	40011000 	.word	0x40011000
 800565c:	40011400 	.word	0x40011400
 8005660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005668:	2200      	movs	r2, #0
 800566a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800566e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005676:	4642      	mov	r2, r8
 8005678:	464b      	mov	r3, r9
 800567a:	1891      	adds	r1, r2, r2
 800567c:	6239      	str	r1, [r7, #32]
 800567e:	415b      	adcs	r3, r3
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005686:	4641      	mov	r1, r8
 8005688:	1854      	adds	r4, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0501 	adc.w	r5, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	00eb      	lsls	r3, r5, #3
 800569a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569e:	00e2      	lsls	r2, r4, #3
 80056a0:	4614      	mov	r4, r2
 80056a2:	461d      	mov	r5, r3
 80056a4:	4643      	mov	r3, r8
 80056a6:	18e3      	adds	r3, r4, r3
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ac:	464b      	mov	r3, r9
 80056ae:	eb45 0303 	adc.w	r3, r5, r3
 80056b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056d2:	4629      	mov	r1, r5
 80056d4:	008b      	lsls	r3, r1, #2
 80056d6:	4621      	mov	r1, r4
 80056d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056dc:	4621      	mov	r1, r4
 80056de:	008a      	lsls	r2, r1, #2
 80056e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056e4:	f7fb fa94 	bl	8000c10 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <UART_SetConfig+0x4e4>)
 80056ee:	fba3 2302 	umull	r2, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	011c      	lsls	r4, r3, #4
 80056f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	1891      	adds	r1, r2, r2
 800570e:	61b9      	str	r1, [r7, #24]
 8005710:	415b      	adcs	r3, r3
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005718:	4641      	mov	r1, r8
 800571a:	1851      	adds	r1, r2, r1
 800571c:	6139      	str	r1, [r7, #16]
 800571e:	4649      	mov	r1, r9
 8005720:	414b      	adcs	r3, r1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005730:	4659      	mov	r1, fp
 8005732:	00cb      	lsls	r3, r1, #3
 8005734:	4651      	mov	r1, sl
 8005736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573a:	4651      	mov	r1, sl
 800573c:	00ca      	lsls	r2, r1, #3
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	4603      	mov	r3, r0
 8005744:	4642      	mov	r2, r8
 8005746:	189b      	adds	r3, r3, r2
 8005748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800574c:	464b      	mov	r3, r9
 800574e:	460a      	mov	r2, r1
 8005750:	eb42 0303 	adc.w	r3, r2, r3
 8005754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	67bb      	str	r3, [r7, #120]	; 0x78
 8005762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005770:	4649      	mov	r1, r9
 8005772:	008b      	lsls	r3, r1, #2
 8005774:	4641      	mov	r1, r8
 8005776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577a:	4641      	mov	r1, r8
 800577c:	008a      	lsls	r2, r1, #2
 800577e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005782:	f7fb fa45 	bl	8000c10 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4b39      	ldr	r3, [pc, #228]	; (8005870 <UART_SetConfig+0x4e4>)
 800578c:	fba3 1302 	umull	r1, r3, r3, r2
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	2164      	movs	r1, #100	; 0x64
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	3332      	adds	r3, #50	; 0x32
 800579e:	4a34      	ldr	r2, [pc, #208]	; (8005870 <UART_SetConfig+0x4e4>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057aa:	441c      	add	r4, r3
 80057ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b0:	2200      	movs	r2, #0
 80057b2:	673b      	str	r3, [r7, #112]	; 0x70
 80057b4:	677a      	str	r2, [r7, #116]	; 0x74
 80057b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057ba:	4642      	mov	r2, r8
 80057bc:	464b      	mov	r3, r9
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	415b      	adcs	r3, r3
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ca:	4641      	mov	r1, r8
 80057cc:	1851      	adds	r1, r2, r1
 80057ce:	6039      	str	r1, [r7, #0]
 80057d0:	4649      	mov	r1, r9
 80057d2:	414b      	adcs	r3, r1
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057e2:	4659      	mov	r1, fp
 80057e4:	00cb      	lsls	r3, r1, #3
 80057e6:	4651      	mov	r1, sl
 80057e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ec:	4651      	mov	r1, sl
 80057ee:	00ca      	lsls	r2, r1, #3
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	4603      	mov	r3, r0
 80057f6:	4642      	mov	r2, r8
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	464b      	mov	r3, r9
 80057fe:	460a      	mov	r2, r1
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	663b      	str	r3, [r7, #96]	; 0x60
 8005810:	667a      	str	r2, [r7, #100]	; 0x64
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800581e:	4649      	mov	r1, r9
 8005820:	008b      	lsls	r3, r1, #2
 8005822:	4641      	mov	r1, r8
 8005824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005828:	4641      	mov	r1, r8
 800582a:	008a      	lsls	r2, r1, #2
 800582c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005830:	f7fb f9ee 	bl	8000c10 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <UART_SetConfig+0x4e4>)
 800583a:	fba3 1302 	umull	r1, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	; 0x32
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <UART_SetConfig+0x4e4>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4422      	add	r2, r4
 8005860:	609a      	str	r2, [r3, #8]
}
 8005862:	bf00      	nop
 8005864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586e:	bf00      	nop
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <copysign>:
 8005874:	b082      	sub	sp, #8
 8005876:	ec51 0b10 	vmov	r0, r1, d0
 800587a:	ed8d 1b00 	vstr	d1, [sp]
 800587e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8005882:	9901      	ldr	r1, [sp, #4]
 8005884:	ee10 2a10 	vmov	r2, s0
 8005888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800588c:	ea40 0301 	orr.w	r3, r0, r1
 8005890:	ec43 2b10 	vmov	d0, r2, r3
 8005894:	b002      	add	sp, #8
 8005896:	4770      	bx	lr

08005898 <sin>:
 8005898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800589a:	ec53 2b10 	vmov	r2, r3, d0
 800589e:	4828      	ldr	r0, [pc, #160]	; (8005940 <sin+0xa8>)
 80058a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058a4:	4281      	cmp	r1, r0
 80058a6:	dc07      	bgt.n	80058b8 <sin+0x20>
 80058a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005938 <sin+0xa0>
 80058ac:	2000      	movs	r0, #0
 80058ae:	b005      	add	sp, #20
 80058b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b4:	f001 ba38 	b.w	8006d28 <__kernel_sin>
 80058b8:	4822      	ldr	r0, [pc, #136]	; (8005944 <sin+0xac>)
 80058ba:	4281      	cmp	r1, r0
 80058bc:	dd09      	ble.n	80058d2 <sin+0x3a>
 80058be:	ee10 0a10 	vmov	r0, s0
 80058c2:	4619      	mov	r1, r3
 80058c4:	f7fa fca4 	bl	8000210 <__aeabi_dsub>
 80058c8:	ec41 0b10 	vmov	d0, r0, r1
 80058cc:	b005      	add	sp, #20
 80058ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80058d2:	4668      	mov	r0, sp
 80058d4:	f000 fb50 	bl	8005f78 <__ieee754_rem_pio2>
 80058d8:	f000 0003 	and.w	r0, r0, #3
 80058dc:	2801      	cmp	r0, #1
 80058de:	d00c      	beq.n	80058fa <sin+0x62>
 80058e0:	2802      	cmp	r0, #2
 80058e2:	d011      	beq.n	8005908 <sin+0x70>
 80058e4:	b9f0      	cbnz	r0, 8005924 <sin+0x8c>
 80058e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058ea:	ed9d 0b00 	vldr	d0, [sp]
 80058ee:	2001      	movs	r0, #1
 80058f0:	f001 fa1a 	bl	8006d28 <__kernel_sin>
 80058f4:	ec51 0b10 	vmov	r0, r1, d0
 80058f8:	e7e6      	b.n	80058c8 <sin+0x30>
 80058fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058fe:	ed9d 0b00 	vldr	d0, [sp]
 8005902:	f000 fdf9 	bl	80064f8 <__kernel_cos>
 8005906:	e7f5      	b.n	80058f4 <sin+0x5c>
 8005908:	ed9d 1b02 	vldr	d1, [sp, #8]
 800590c:	ed9d 0b00 	vldr	d0, [sp]
 8005910:	2001      	movs	r0, #1
 8005912:	f001 fa09 	bl	8006d28 <__kernel_sin>
 8005916:	ec53 2b10 	vmov	r2, r3, d0
 800591a:	ee10 0a10 	vmov	r0, s0
 800591e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005922:	e7d1      	b.n	80058c8 <sin+0x30>
 8005924:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005928:	ed9d 0b00 	vldr	d0, [sp]
 800592c:	f000 fde4 	bl	80064f8 <__kernel_cos>
 8005930:	e7f1      	b.n	8005916 <sin+0x7e>
 8005932:	bf00      	nop
 8005934:	f3af 8000 	nop.w
	...
 8005940:	3fe921fb 	.word	0x3fe921fb
 8005944:	7fefffff 	.word	0x7fefffff

08005948 <asin>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	ed2d 8b02 	vpush	{d8}
 800594e:	ec55 4b10 	vmov	r4, r5, d0
 8005952:	f000 f831 	bl	80059b8 <__ieee754_asin>
 8005956:	4622      	mov	r2, r4
 8005958:	462b      	mov	r3, r5
 800595a:	4620      	mov	r0, r4
 800595c:	4629      	mov	r1, r5
 800595e:	eeb0 8a40 	vmov.f32	s16, s0
 8005962:	eef0 8a60 	vmov.f32	s17, s1
 8005966:	f7fb f8a5 	bl	8000ab4 <__aeabi_dcmpun>
 800596a:	b9a8      	cbnz	r0, 8005998 <asin+0x50>
 800596c:	ec45 4b10 	vmov	d0, r4, r5
 8005970:	f001 fc3a 	bl	80071e8 <fabs>
 8005974:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <asin+0x60>)
 8005976:	ec51 0b10 	vmov	r0, r1, d0
 800597a:	2200      	movs	r2, #0
 800597c:	f7fb f890 	bl	8000aa0 <__aeabi_dcmpgt>
 8005980:	b150      	cbz	r0, 8005998 <asin+0x50>
 8005982:	f001 fd4b 	bl	800741c <__errno>
 8005986:	ecbd 8b02 	vpop	{d8}
 800598a:	2321      	movs	r3, #33	; 0x21
 800598c:	6003      	str	r3, [r0, #0]
 800598e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005992:	4806      	ldr	r0, [pc, #24]	; (80059ac <asin+0x64>)
 8005994:	f001 bcb4 	b.w	8007300 <nan>
 8005998:	eeb0 0a48 	vmov.f32	s0, s16
 800599c:	eef0 0a68 	vmov.f32	s1, s17
 80059a0:	ecbd 8b02 	vpop	{d8}
 80059a4:	bd38      	pop	{r3, r4, r5, pc}
 80059a6:	bf00      	nop
 80059a8:	3ff00000 	.word	0x3ff00000
 80059ac:	080074d0 	.word	0x080074d0

080059b0 <atan2>:
 80059b0:	f000 ba16 	b.w	8005de0 <__ieee754_atan2>
 80059b4:	0000      	movs	r0, r0
	...

080059b8 <__ieee754_asin>:
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	ed2d 8b04 	vpush	{d8-d9}
 80059c0:	ec55 4b10 	vmov	r4, r5, d0
 80059c4:	4bcc      	ldr	r3, [pc, #816]	; (8005cf8 <__ieee754_asin+0x340>)
 80059c6:	b083      	sub	sp, #12
 80059c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80059cc:	4598      	cmp	r8, r3
 80059ce:	9501      	str	r5, [sp, #4]
 80059d0:	dd35      	ble.n	8005a3e <__ieee754_asin+0x86>
 80059d2:	ee10 3a10 	vmov	r3, s0
 80059d6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80059da:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80059de:	ea58 0303 	orrs.w	r3, r8, r3
 80059e2:	d117      	bne.n	8005a14 <__ieee754_asin+0x5c>
 80059e4:	a3aa      	add	r3, pc, #680	; (adr r3, 8005c90 <__ieee754_asin+0x2d8>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	ee10 0a10 	vmov	r0, s0
 80059ee:	4629      	mov	r1, r5
 80059f0:	f7fa fdc6 	bl	8000580 <__aeabi_dmul>
 80059f4:	a3a8      	add	r3, pc, #672	; (adr r3, 8005c98 <__ieee754_asin+0x2e0>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	4606      	mov	r6, r0
 80059fc:	460f      	mov	r7, r1
 80059fe:	4620      	mov	r0, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7fa fdbd 	bl	8000580 <__aeabi_dmul>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fa fc01 	bl	8000214 <__adddf3>
 8005a12:	e00b      	b.n	8005a2c <__ieee754_asin+0x74>
 8005a14:	ee10 2a10 	vmov	r2, s0
 8005a18:	462b      	mov	r3, r5
 8005a1a:	ee10 0a10 	vmov	r0, s0
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f7fa fbf6 	bl	8000210 <__aeabi_dsub>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	f7fa fed4 	bl	80007d4 <__aeabi_ddiv>
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
 8005a30:	ec45 4b10 	vmov	d0, r4, r5
 8005a34:	b003      	add	sp, #12
 8005a36:	ecbd 8b04 	vpop	{d8-d9}
 8005a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3e:	4baf      	ldr	r3, [pc, #700]	; (8005cfc <__ieee754_asin+0x344>)
 8005a40:	4598      	cmp	r8, r3
 8005a42:	dc11      	bgt.n	8005a68 <__ieee754_asin+0xb0>
 8005a44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005a48:	f280 80ae 	bge.w	8005ba8 <__ieee754_asin+0x1f0>
 8005a4c:	a394      	add	r3, pc, #592	; (adr r3, 8005ca0 <__ieee754_asin+0x2e8>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	ee10 0a10 	vmov	r0, s0
 8005a56:	4629      	mov	r1, r5
 8005a58:	f7fa fbdc 	bl	8000214 <__adddf3>
 8005a5c:	4ba8      	ldr	r3, [pc, #672]	; (8005d00 <__ieee754_asin+0x348>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f7fb f81e 	bl	8000aa0 <__aeabi_dcmpgt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1e3      	bne.n	8005a30 <__ieee754_asin+0x78>
 8005a68:	ec45 4b10 	vmov	d0, r4, r5
 8005a6c:	f001 fbbc 	bl	80071e8 <fabs>
 8005a70:	49a3      	ldr	r1, [pc, #652]	; (8005d00 <__ieee754_asin+0x348>)
 8005a72:	ec53 2b10 	vmov	r2, r3, d0
 8005a76:	2000      	movs	r0, #0
 8005a78:	f7fa fbca 	bl	8000210 <__aeabi_dsub>
 8005a7c:	4ba1      	ldr	r3, [pc, #644]	; (8005d04 <__ieee754_asin+0x34c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f7fa fd7e 	bl	8000580 <__aeabi_dmul>
 8005a84:	a388      	add	r3, pc, #544	; (adr r3, 8005ca8 <__ieee754_asin+0x2f0>)
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	f7fa fd77 	bl	8000580 <__aeabi_dmul>
 8005a92:	a387      	add	r3, pc, #540	; (adr r3, 8005cb0 <__ieee754_asin+0x2f8>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fbbc 	bl	8000214 <__adddf3>
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	f7fa fd6e 	bl	8000580 <__aeabi_dmul>
 8005aa4:	a384      	add	r3, pc, #528	; (adr r3, 8005cb8 <__ieee754_asin+0x300>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f7fa fbb1 	bl	8000210 <__aeabi_dsub>
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	f7fa fd65 	bl	8000580 <__aeabi_dmul>
 8005ab6:	a382      	add	r3, pc, #520	; (adr r3, 8005cc0 <__ieee754_asin+0x308>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f7fa fbaa 	bl	8000214 <__adddf3>
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	f7fa fd5c 	bl	8000580 <__aeabi_dmul>
 8005ac8:	a37f      	add	r3, pc, #508	; (adr r3, 8005cc8 <__ieee754_asin+0x310>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fb9f 	bl	8000210 <__aeabi_dsub>
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	f7fa fd53 	bl	8000580 <__aeabi_dmul>
 8005ada:	a37d      	add	r3, pc, #500	; (adr r3, 8005cd0 <__ieee754_asin+0x318>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fa fb98 	bl	8000214 <__adddf3>
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	f7fa fd4a 	bl	8000580 <__aeabi_dmul>
 8005aec:	a37a      	add	r3, pc, #488	; (adr r3, 8005cd8 <__ieee754_asin+0x320>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	ec41 0b18 	vmov	d8, r0, r1
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa fd41 	bl	8000580 <__aeabi_dmul>
 8005afe:	a378      	add	r3, pc, #480	; (adr r3, 8005ce0 <__ieee754_asin+0x328>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fb84 	bl	8000210 <__aeabi_dsub>
 8005b08:	4622      	mov	r2, r4
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	f7fa fd38 	bl	8000580 <__aeabi_dmul>
 8005b10:	a375      	add	r3, pc, #468	; (adr r3, 8005ce8 <__ieee754_asin+0x330>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f7fa fb7d 	bl	8000214 <__adddf3>
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	f7fa fd2f 	bl	8000580 <__aeabi_dmul>
 8005b22:	a373      	add	r3, pc, #460	; (adr r3, 8005cf0 <__ieee754_asin+0x338>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fb72 	bl	8000210 <__aeabi_dsub>
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	462b      	mov	r3, r5
 8005b30:	f7fa fd26 	bl	8000580 <__aeabi_dmul>
 8005b34:	4b72      	ldr	r3, [pc, #456]	; (8005d00 <__ieee754_asin+0x348>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	f7fa fb6c 	bl	8000214 <__adddf3>
 8005b3c:	ec45 4b10 	vmov	d0, r4, r5
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	f000 fc24 	bl	8006390 <__ieee754_sqrt>
 8005b48:	4b6f      	ldr	r3, [pc, #444]	; (8005d08 <__ieee754_asin+0x350>)
 8005b4a:	4598      	cmp	r8, r3
 8005b4c:	ec5b ab10 	vmov	sl, fp, d0
 8005b50:	f340 80dc 	ble.w	8005d0c <__ieee754_asin+0x354>
 8005b54:	4632      	mov	r2, r6
 8005b56:	463b      	mov	r3, r7
 8005b58:	ec51 0b18 	vmov	r0, r1, d8
 8005b5c:	f7fa fe3a 	bl	80007d4 <__aeabi_ddiv>
 8005b60:	4652      	mov	r2, sl
 8005b62:	465b      	mov	r3, fp
 8005b64:	f7fa fd0c 	bl	8000580 <__aeabi_dmul>
 8005b68:	4652      	mov	r2, sl
 8005b6a:	465b      	mov	r3, fp
 8005b6c:	f7fa fb52 	bl	8000214 <__adddf3>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	f7fa fb4e 	bl	8000214 <__adddf3>
 8005b78:	a347      	add	r3, pc, #284	; (adr r3, 8005c98 <__ieee754_asin+0x2e0>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fb47 	bl	8000210 <__aeabi_dsub>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	a142      	add	r1, pc, #264	; (adr r1, 8005c90 <__ieee754_asin+0x2d8>)
 8005b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8c:	f7fa fb40 	bl	8000210 <__aeabi_dsub>
 8005b90:	9b01      	ldr	r3, [sp, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfdc      	itt	le
 8005b96:	4602      	movle	r2, r0
 8005b98:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	bfdc      	itt	le
 8005ba2:	4614      	movle	r4, r2
 8005ba4:	461d      	movle	r5, r3
 8005ba6:	e743      	b.n	8005a30 <__ieee754_asin+0x78>
 8005ba8:	ee10 2a10 	vmov	r2, s0
 8005bac:	ee10 0a10 	vmov	r0, s0
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7fa fce4 	bl	8000580 <__aeabi_dmul>
 8005bb8:	a33b      	add	r3, pc, #236	; (adr r3, 8005ca8 <__ieee754_asin+0x2f0>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	f7fa fcdd 	bl	8000580 <__aeabi_dmul>
 8005bc6:	a33a      	add	r3, pc, #232	; (adr r3, 8005cb0 <__ieee754_asin+0x2f8>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fb22 	bl	8000214 <__adddf3>
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	f7fa fcd4 	bl	8000580 <__aeabi_dmul>
 8005bd8:	a337      	add	r3, pc, #220	; (adr r3, 8005cb8 <__ieee754_asin+0x300>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fb17 	bl	8000210 <__aeabi_dsub>
 8005be2:	4632      	mov	r2, r6
 8005be4:	463b      	mov	r3, r7
 8005be6:	f7fa fccb 	bl	8000580 <__aeabi_dmul>
 8005bea:	a335      	add	r3, pc, #212	; (adr r3, 8005cc0 <__ieee754_asin+0x308>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f7fa fb10 	bl	8000214 <__adddf3>
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	f7fa fcc2 	bl	8000580 <__aeabi_dmul>
 8005bfc:	a332      	add	r3, pc, #200	; (adr r3, 8005cc8 <__ieee754_asin+0x310>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f7fa fb05 	bl	8000210 <__aeabi_dsub>
 8005c06:	4632      	mov	r2, r6
 8005c08:	463b      	mov	r3, r7
 8005c0a:	f7fa fcb9 	bl	8000580 <__aeabi_dmul>
 8005c0e:	a330      	add	r3, pc, #192	; (adr r3, 8005cd0 <__ieee754_asin+0x318>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fafe 	bl	8000214 <__adddf3>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	f7fa fcb0 	bl	8000580 <__aeabi_dmul>
 8005c20:	a32d      	add	r3, pc, #180	; (adr r3, 8005cd8 <__ieee754_asin+0x320>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	4680      	mov	r8, r0
 8005c28:	4689      	mov	r9, r1
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	f7fa fca7 	bl	8000580 <__aeabi_dmul>
 8005c32:	a32b      	add	r3, pc, #172	; (adr r3, 8005ce0 <__ieee754_asin+0x328>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa faea 	bl	8000210 <__aeabi_dsub>
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	f7fa fc9e 	bl	8000580 <__aeabi_dmul>
 8005c44:	a328      	add	r3, pc, #160	; (adr r3, 8005ce8 <__ieee754_asin+0x330>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fae3 	bl	8000214 <__adddf3>
 8005c4e:	4632      	mov	r2, r6
 8005c50:	463b      	mov	r3, r7
 8005c52:	f7fa fc95 	bl	8000580 <__aeabi_dmul>
 8005c56:	a326      	add	r3, pc, #152	; (adr r3, 8005cf0 <__ieee754_asin+0x338>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f7fa fad8 	bl	8000210 <__aeabi_dsub>
 8005c60:	4632      	mov	r2, r6
 8005c62:	463b      	mov	r3, r7
 8005c64:	f7fa fc8c 	bl	8000580 <__aeabi_dmul>
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <__ieee754_asin+0x348>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f7fa fad2 	bl	8000214 <__adddf3>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4640      	mov	r0, r8
 8005c76:	4649      	mov	r1, r9
 8005c78:	f7fa fdac 	bl	80007d4 <__aeabi_ddiv>
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	462b      	mov	r3, r5
 8005c80:	f7fa fc7e 	bl	8000580 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	e6bf      	b.n	8005a0e <__ieee754_asin+0x56>
 8005c8e:	bf00      	nop
 8005c90:	54442d18 	.word	0x54442d18
 8005c94:	3ff921fb 	.word	0x3ff921fb
 8005c98:	33145c07 	.word	0x33145c07
 8005c9c:	3c91a626 	.word	0x3c91a626
 8005ca0:	8800759c 	.word	0x8800759c
 8005ca4:	7e37e43c 	.word	0x7e37e43c
 8005ca8:	0dfdf709 	.word	0x0dfdf709
 8005cac:	3f023de1 	.word	0x3f023de1
 8005cb0:	7501b288 	.word	0x7501b288
 8005cb4:	3f49efe0 	.word	0x3f49efe0
 8005cb8:	b5688f3b 	.word	0xb5688f3b
 8005cbc:	3fa48228 	.word	0x3fa48228
 8005cc0:	0e884455 	.word	0x0e884455
 8005cc4:	3fc9c155 	.word	0x3fc9c155
 8005cc8:	03eb6f7d 	.word	0x03eb6f7d
 8005ccc:	3fd4d612 	.word	0x3fd4d612
 8005cd0:	55555555 	.word	0x55555555
 8005cd4:	3fc55555 	.word	0x3fc55555
 8005cd8:	b12e9282 	.word	0xb12e9282
 8005cdc:	3fb3b8c5 	.word	0x3fb3b8c5
 8005ce0:	1b8d0159 	.word	0x1b8d0159
 8005ce4:	3fe6066c 	.word	0x3fe6066c
 8005ce8:	9c598ac8 	.word	0x9c598ac8
 8005cec:	40002ae5 	.word	0x40002ae5
 8005cf0:	1c8a2d4b 	.word	0x1c8a2d4b
 8005cf4:	40033a27 	.word	0x40033a27
 8005cf8:	3fefffff 	.word	0x3fefffff
 8005cfc:	3fdfffff 	.word	0x3fdfffff
 8005d00:	3ff00000 	.word	0x3ff00000
 8005d04:	3fe00000 	.word	0x3fe00000
 8005d08:	3fef3332 	.word	0x3fef3332
 8005d0c:	ee10 2a10 	vmov	r2, s0
 8005d10:	ee10 0a10 	vmov	r0, s0
 8005d14:	465b      	mov	r3, fp
 8005d16:	4659      	mov	r1, fp
 8005d18:	f7fa fa7c 	bl	8000214 <__adddf3>
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	463b      	mov	r3, r7
 8005d20:	ec41 0b19 	vmov	d9, r0, r1
 8005d24:	ec51 0b18 	vmov	r0, r1, d8
 8005d28:	f7fa fd54 	bl	80007d4 <__aeabi_ddiv>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	ec51 0b19 	vmov	r0, r1, d9
 8005d34:	f7fa fc24 	bl	8000580 <__aeabi_dmul>
 8005d38:	f04f 0800 	mov.w	r8, #0
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	4642      	mov	r2, r8
 8005d42:	465b      	mov	r3, fp
 8005d44:	4640      	mov	r0, r8
 8005d46:	4659      	mov	r1, fp
 8005d48:	f7fa fc1a 	bl	8000580 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4620      	mov	r0, r4
 8005d52:	4629      	mov	r1, r5
 8005d54:	f7fa fa5c 	bl	8000210 <__aeabi_dsub>
 8005d58:	4642      	mov	r2, r8
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	465b      	mov	r3, fp
 8005d60:	4650      	mov	r0, sl
 8005d62:	4659      	mov	r1, fp
 8005d64:	f7fa fa56 	bl	8000214 <__adddf3>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fd30 	bl	80007d4 <__aeabi_ddiv>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	f7fa fa4c 	bl	8000214 <__adddf3>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	a113      	add	r1, pc, #76	; (adr r1, 8005dd0 <__ieee754_asin+0x418>)
 8005d82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d86:	f7fa fa43 	bl	8000210 <__aeabi_dsub>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4630      	mov	r0, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fa3d 	bl	8000210 <__aeabi_dsub>
 8005d96:	4642      	mov	r2, r8
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	465b      	mov	r3, fp
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4659      	mov	r1, fp
 8005da2:	f7fa fa37 	bl	8000214 <__adddf3>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	a10b      	add	r1, pc, #44	; (adr r1, 8005dd8 <__ieee754_asin+0x420>)
 8005dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005db0:	f7fa fa2e 	bl	8000210 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4620      	mov	r0, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa fa28 	bl	8000210 <__aeabi_dsub>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	a104      	add	r1, pc, #16	; (adr r1, 8005dd8 <__ieee754_asin+0x420>)
 8005dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dca:	e6df      	b.n	8005b8c <__ieee754_asin+0x1d4>
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	33145c07 	.word	0x33145c07
 8005dd4:	3c91a626 	.word	0x3c91a626
 8005dd8:	54442d18 	.word	0x54442d18
 8005ddc:	3fe921fb 	.word	0x3fe921fb

08005de0 <__ieee754_atan2>:
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	ec57 6b11 	vmov	r6, r7, d1
 8005de8:	4273      	negs	r3, r6
 8005dea:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005f70 <__ieee754_atan2+0x190>
 8005dee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005df2:	4333      	orrs	r3, r6
 8005df4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005df8:	4573      	cmp	r3, lr
 8005dfa:	ec51 0b10 	vmov	r0, r1, d0
 8005dfe:	ee11 8a10 	vmov	r8, s2
 8005e02:	d80a      	bhi.n	8005e1a <__ieee754_atan2+0x3a>
 8005e04:	4244      	negs	r4, r0
 8005e06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e0a:	4304      	orrs	r4, r0
 8005e0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005e10:	4574      	cmp	r4, lr
 8005e12:	ee10 9a10 	vmov	r9, s0
 8005e16:	468c      	mov	ip, r1
 8005e18:	d907      	bls.n	8005e2a <__ieee754_atan2+0x4a>
 8005e1a:	4632      	mov	r2, r6
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	f7fa f9f9 	bl	8000214 <__adddf3>
 8005e22:	ec41 0b10 	vmov	d0, r0, r1
 8005e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005e2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e32:	4334      	orrs	r4, r6
 8005e34:	d103      	bne.n	8005e3e <__ieee754_atan2+0x5e>
 8005e36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e3a:	f001 b835 	b.w	8006ea8 <atan>
 8005e3e:	17bc      	asrs	r4, r7, #30
 8005e40:	f004 0402 	and.w	r4, r4, #2
 8005e44:	ea53 0909 	orrs.w	r9, r3, r9
 8005e48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005e4c:	d107      	bne.n	8005e5e <__ieee754_atan2+0x7e>
 8005e4e:	2c02      	cmp	r4, #2
 8005e50:	d060      	beq.n	8005f14 <__ieee754_atan2+0x134>
 8005e52:	2c03      	cmp	r4, #3
 8005e54:	d1e5      	bne.n	8005e22 <__ieee754_atan2+0x42>
 8005e56:	a142      	add	r1, pc, #264	; (adr r1, 8005f60 <__ieee754_atan2+0x180>)
 8005e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e5c:	e7e1      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005e5e:	ea52 0808 	orrs.w	r8, r2, r8
 8005e62:	d106      	bne.n	8005e72 <__ieee754_atan2+0x92>
 8005e64:	f1bc 0f00 	cmp.w	ip, #0
 8005e68:	da5f      	bge.n	8005f2a <__ieee754_atan2+0x14a>
 8005e6a:	a13f      	add	r1, pc, #252	; (adr r1, 8005f68 <__ieee754_atan2+0x188>)
 8005e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e70:	e7d7      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005e72:	4572      	cmp	r2, lr
 8005e74:	d10f      	bne.n	8005e96 <__ieee754_atan2+0xb6>
 8005e76:	4293      	cmp	r3, r2
 8005e78:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e7c:	d107      	bne.n	8005e8e <__ieee754_atan2+0xae>
 8005e7e:	2c02      	cmp	r4, #2
 8005e80:	d84c      	bhi.n	8005f1c <__ieee754_atan2+0x13c>
 8005e82:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <__ieee754_atan2+0x178>)
 8005e84:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005e88:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005e8c:	e7c9      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005e8e:	2c02      	cmp	r4, #2
 8005e90:	d848      	bhi.n	8005f24 <__ieee754_atan2+0x144>
 8005e92:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <__ieee754_atan2+0x17c>)
 8005e94:	e7f6      	b.n	8005e84 <__ieee754_atan2+0xa4>
 8005e96:	4573      	cmp	r3, lr
 8005e98:	d0e4      	beq.n	8005e64 <__ieee754_atan2+0x84>
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005ea0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005ea4:	da1e      	bge.n	8005ee4 <__ieee754_atan2+0x104>
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	da01      	bge.n	8005eae <__ieee754_atan2+0xce>
 8005eaa:	323c      	adds	r2, #60	; 0x3c
 8005eac:	db1e      	blt.n	8005eec <__ieee754_atan2+0x10c>
 8005eae:	4632      	mov	r2, r6
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	f7fa fc8f 	bl	80007d4 <__aeabi_ddiv>
 8005eb6:	ec41 0b10 	vmov	d0, r0, r1
 8005eba:	f001 f995 	bl	80071e8 <fabs>
 8005ebe:	f000 fff3 	bl	8006ea8 <atan>
 8005ec2:	ec51 0b10 	vmov	r0, r1, d0
 8005ec6:	2c01      	cmp	r4, #1
 8005ec8:	d013      	beq.n	8005ef2 <__ieee754_atan2+0x112>
 8005eca:	2c02      	cmp	r4, #2
 8005ecc:	d015      	beq.n	8005efa <__ieee754_atan2+0x11a>
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	d0a7      	beq.n	8005e22 <__ieee754_atan2+0x42>
 8005ed2:	a319      	add	r3, pc, #100	; (adr r3, 8005f38 <__ieee754_atan2+0x158>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa f99a 	bl	8000210 <__aeabi_dsub>
 8005edc:	a318      	add	r3, pc, #96	; (adr r3, 8005f40 <__ieee754_atan2+0x160>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	e014      	b.n	8005f0e <__ieee754_atan2+0x12e>
 8005ee4:	a118      	add	r1, pc, #96	; (adr r1, 8005f48 <__ieee754_atan2+0x168>)
 8005ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eea:	e7ec      	b.n	8005ec6 <__ieee754_atan2+0xe6>
 8005eec:	2000      	movs	r0, #0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	e7e9      	b.n	8005ec6 <__ieee754_atan2+0xe6>
 8005ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	e793      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005efa:	a30f      	add	r3, pc, #60	; (adr r3, 8005f38 <__ieee754_atan2+0x158>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f986 	bl	8000210 <__aeabi_dsub>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	a10d      	add	r1, pc, #52	; (adr r1, 8005f40 <__ieee754_atan2+0x160>)
 8005f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0e:	f7fa f97f 	bl	8000210 <__aeabi_dsub>
 8005f12:	e786      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005f14:	a10a      	add	r1, pc, #40	; (adr r1, 8005f40 <__ieee754_atan2+0x160>)
 8005f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f1a:	e782      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005f1c:	a10c      	add	r1, pc, #48	; (adr r1, 8005f50 <__ieee754_atan2+0x170>)
 8005f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f22:	e77e      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005f24:	2000      	movs	r0, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	e77b      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005f2a:	a107      	add	r1, pc, #28	; (adr r1, 8005f48 <__ieee754_atan2+0x168>)
 8005f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f30:	e777      	b.n	8005e22 <__ieee754_atan2+0x42>
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	33145c07 	.word	0x33145c07
 8005f3c:	3ca1a626 	.word	0x3ca1a626
 8005f40:	54442d18 	.word	0x54442d18
 8005f44:	400921fb 	.word	0x400921fb
 8005f48:	54442d18 	.word	0x54442d18
 8005f4c:	3ff921fb 	.word	0x3ff921fb
 8005f50:	54442d18 	.word	0x54442d18
 8005f54:	3fe921fb 	.word	0x3fe921fb
 8005f58:	080074d8 	.word	0x080074d8
 8005f5c:	080074f0 	.word	0x080074f0
 8005f60:	54442d18 	.word	0x54442d18
 8005f64:	c00921fb 	.word	0xc00921fb
 8005f68:	54442d18 	.word	0x54442d18
 8005f6c:	bff921fb 	.word	0xbff921fb
 8005f70:	7ff00000 	.word	0x7ff00000
 8005f74:	00000000 	.word	0x00000000

08005f78 <__ieee754_rem_pio2>:
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	ed2d 8b02 	vpush	{d8}
 8005f80:	ec55 4b10 	vmov	r4, r5, d0
 8005f84:	4bca      	ldr	r3, [pc, #808]	; (80062b0 <__ieee754_rem_pio2+0x338>)
 8005f86:	b08b      	sub	sp, #44	; 0x2c
 8005f88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005f8c:	4598      	cmp	r8, r3
 8005f8e:	4682      	mov	sl, r0
 8005f90:	9502      	str	r5, [sp, #8]
 8005f92:	dc08      	bgt.n	8005fa6 <__ieee754_rem_pio2+0x2e>
 8005f94:	2200      	movs	r2, #0
 8005f96:	2300      	movs	r3, #0
 8005f98:	ed80 0b00 	vstr	d0, [r0]
 8005f9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005fa0:	f04f 0b00 	mov.w	fp, #0
 8005fa4:	e028      	b.n	8005ff8 <__ieee754_rem_pio2+0x80>
 8005fa6:	4bc3      	ldr	r3, [pc, #780]	; (80062b4 <__ieee754_rem_pio2+0x33c>)
 8005fa8:	4598      	cmp	r8, r3
 8005faa:	dc78      	bgt.n	800609e <__ieee754_rem_pio2+0x126>
 8005fac:	9b02      	ldr	r3, [sp, #8]
 8005fae:	4ec2      	ldr	r6, [pc, #776]	; (80062b8 <__ieee754_rem_pio2+0x340>)
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	ee10 0a10 	vmov	r0, s0
 8005fb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006278 <__ieee754_rem_pio2+0x300>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	dd39      	ble.n	8006034 <__ieee754_rem_pio2+0xbc>
 8005fc0:	f7fa f926 	bl	8000210 <__aeabi_dsub>
 8005fc4:	45b0      	cmp	r8, r6
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	460d      	mov	r5, r1
 8005fca:	d01b      	beq.n	8006004 <__ieee754_rem_pio2+0x8c>
 8005fcc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006280 <__ieee754_rem_pio2+0x308>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f91d 	bl	8000210 <__aeabi_dsub>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	e9ca 2300 	strd	r2, r3, [sl]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa f915 	bl	8000210 <__aeabi_dsub>
 8005fe6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006280 <__ieee754_rem_pio2+0x308>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa f910 	bl	8000210 <__aeabi_dsub>
 8005ff0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ff4:	f04f 0b01 	mov.w	fp, #1
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	b00b      	add	sp, #44	; 0x2c
 8005ffc:	ecbd 8b02 	vpop	{d8}
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006004:	a3a0      	add	r3, pc, #640	; (adr r3, 8006288 <__ieee754_rem_pio2+0x310>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f7fa f901 	bl	8000210 <__aeabi_dsub>
 800600e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006290 <__ieee754_rem_pio2+0x318>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	4604      	mov	r4, r0
 8006016:	460d      	mov	r5, r1
 8006018:	f7fa f8fa 	bl	8000210 <__aeabi_dsub>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	e9ca 2300 	strd	r2, r3, [sl]
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa f8f2 	bl	8000210 <__aeabi_dsub>
 800602c:	a398      	add	r3, pc, #608	; (adr r3, 8006290 <__ieee754_rem_pio2+0x318>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	e7db      	b.n	8005fec <__ieee754_rem_pio2+0x74>
 8006034:	f7fa f8ee 	bl	8000214 <__adddf3>
 8006038:	45b0      	cmp	r8, r6
 800603a:	4604      	mov	r4, r0
 800603c:	460d      	mov	r5, r1
 800603e:	d016      	beq.n	800606e <__ieee754_rem_pio2+0xf6>
 8006040:	a38f      	add	r3, pc, #572	; (adr r3, 8006280 <__ieee754_rem_pio2+0x308>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	f7fa f8e5 	bl	8000214 <__adddf3>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	e9ca 2300 	strd	r2, r3, [sl]
 8006052:	4620      	mov	r0, r4
 8006054:	4629      	mov	r1, r5
 8006056:	f7fa f8db 	bl	8000210 <__aeabi_dsub>
 800605a:	a389      	add	r3, pc, #548	; (adr r3, 8006280 <__ieee754_rem_pio2+0x308>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f7fa f8d8 	bl	8000214 <__adddf3>
 8006064:	f04f 3bff 	mov.w	fp, #4294967295
 8006068:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800606c:	e7c4      	b.n	8005ff8 <__ieee754_rem_pio2+0x80>
 800606e:	a386      	add	r3, pc, #536	; (adr r3, 8006288 <__ieee754_rem_pio2+0x310>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa f8ce 	bl	8000214 <__adddf3>
 8006078:	a385      	add	r3, pc, #532	; (adr r3, 8006290 <__ieee754_rem_pio2+0x318>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	4604      	mov	r4, r0
 8006080:	460d      	mov	r5, r1
 8006082:	f7fa f8c7 	bl	8000214 <__adddf3>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	e9ca 2300 	strd	r2, r3, [sl]
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa f8bd 	bl	8000210 <__aeabi_dsub>
 8006096:	a37e      	add	r3, pc, #504	; (adr r3, 8006290 <__ieee754_rem_pio2+0x318>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	e7e0      	b.n	8006060 <__ieee754_rem_pio2+0xe8>
 800609e:	4b87      	ldr	r3, [pc, #540]	; (80062bc <__ieee754_rem_pio2+0x344>)
 80060a0:	4598      	cmp	r8, r3
 80060a2:	f300 80d9 	bgt.w	8006258 <__ieee754_rem_pio2+0x2e0>
 80060a6:	f001 f89f 	bl	80071e8 <fabs>
 80060aa:	ec55 4b10 	vmov	r4, r5, d0
 80060ae:	ee10 0a10 	vmov	r0, s0
 80060b2:	a379      	add	r3, pc, #484	; (adr r3, 8006298 <__ieee754_rem_pio2+0x320>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa fa61 	bl	8000580 <__aeabi_dmul>
 80060be:	4b80      	ldr	r3, [pc, #512]	; (80062c0 <__ieee754_rem_pio2+0x348>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	f7fa f8a7 	bl	8000214 <__adddf3>
 80060c6:	f7fa fd0b 	bl	8000ae0 <__aeabi_d2iz>
 80060ca:	4683      	mov	fp, r0
 80060cc:	f7fa f9ee 	bl	80004ac <__aeabi_i2d>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	ec43 2b18 	vmov	d8, r2, r3
 80060d8:	a367      	add	r3, pc, #412	; (adr r3, 8006278 <__ieee754_rem_pio2+0x300>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fa4f 	bl	8000580 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa f891 	bl	8000210 <__aeabi_dsub>
 80060ee:	a364      	add	r3, pc, #400	; (adr r3, 8006280 <__ieee754_rem_pio2+0x308>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	ec51 0b18 	vmov	r0, r1, d8
 80060fc:	f7fa fa40 	bl	8000580 <__aeabi_dmul>
 8006100:	f1bb 0f1f 	cmp.w	fp, #31
 8006104:	4604      	mov	r4, r0
 8006106:	460d      	mov	r5, r1
 8006108:	dc0d      	bgt.n	8006126 <__ieee754_rem_pio2+0x1ae>
 800610a:	4b6e      	ldr	r3, [pc, #440]	; (80062c4 <__ieee754_rem_pio2+0x34c>)
 800610c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	4543      	cmp	r3, r8
 8006116:	d006      	beq.n	8006126 <__ieee754_rem_pio2+0x1ae>
 8006118:	4622      	mov	r2, r4
 800611a:	462b      	mov	r3, r5
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa f876 	bl	8000210 <__aeabi_dsub>
 8006124:	e00f      	b.n	8006146 <__ieee754_rem_pio2+0x1ce>
 8006126:	462b      	mov	r3, r5
 8006128:	4622      	mov	r2, r4
 800612a:	4630      	mov	r0, r6
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa f86f 	bl	8000210 <__aeabi_dsub>
 8006132:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006136:	9303      	str	r3, [sp, #12]
 8006138:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800613c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006140:	f1b8 0f10 	cmp.w	r8, #16
 8006144:	dc02      	bgt.n	800614c <__ieee754_rem_pio2+0x1d4>
 8006146:	e9ca 0100 	strd	r0, r1, [sl]
 800614a:	e039      	b.n	80061c0 <__ieee754_rem_pio2+0x248>
 800614c:	a34e      	add	r3, pc, #312	; (adr r3, 8006288 <__ieee754_rem_pio2+0x310>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	ec51 0b18 	vmov	r0, r1, d8
 8006156:	f7fa fa13 	bl	8000580 <__aeabi_dmul>
 800615a:	4604      	mov	r4, r0
 800615c:	460d      	mov	r5, r1
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4630      	mov	r0, r6
 8006164:	4639      	mov	r1, r7
 8006166:	f7fa f853 	bl	8000210 <__aeabi_dsub>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4680      	mov	r8, r0
 8006170:	4689      	mov	r9, r1
 8006172:	4630      	mov	r0, r6
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa f84b 	bl	8000210 <__aeabi_dsub>
 800617a:	4622      	mov	r2, r4
 800617c:	462b      	mov	r3, r5
 800617e:	f7fa f847 	bl	8000210 <__aeabi_dsub>
 8006182:	a343      	add	r3, pc, #268	; (adr r3, 8006290 <__ieee754_rem_pio2+0x318>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	4604      	mov	r4, r0
 800618a:	460d      	mov	r5, r1
 800618c:	ec51 0b18 	vmov	r0, r1, d8
 8006190:	f7fa f9f6 	bl	8000580 <__aeabi_dmul>
 8006194:	4622      	mov	r2, r4
 8006196:	462b      	mov	r3, r5
 8006198:	f7fa f83a 	bl	8000210 <__aeabi_dsub>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	4640      	mov	r0, r8
 80061a6:	4649      	mov	r1, r9
 80061a8:	f7fa f832 	bl	8000210 <__aeabi_dsub>
 80061ac:	9a03      	ldr	r2, [sp, #12]
 80061ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b31      	cmp	r3, #49	; 0x31
 80061b6:	dc24      	bgt.n	8006202 <__ieee754_rem_pio2+0x28a>
 80061b8:	e9ca 0100 	strd	r0, r1, [sl]
 80061bc:	4646      	mov	r6, r8
 80061be:	464f      	mov	r7, r9
 80061c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80061c4:	4630      	mov	r0, r6
 80061c6:	4642      	mov	r2, r8
 80061c8:	464b      	mov	r3, r9
 80061ca:	4639      	mov	r1, r7
 80061cc:	f7fa f820 	bl	8000210 <__aeabi_dsub>
 80061d0:	462b      	mov	r3, r5
 80061d2:	4622      	mov	r2, r4
 80061d4:	f7fa f81c 	bl	8000210 <__aeabi_dsub>
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80061e0:	f6bf af0a 	bge.w	8005ff8 <__ieee754_rem_pio2+0x80>
 80061e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80061e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80061ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061f0:	f8ca 8000 	str.w	r8, [sl]
 80061f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80061f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80061fc:	f1cb 0b00 	rsb	fp, fp, #0
 8006200:	e6fa      	b.n	8005ff8 <__ieee754_rem_pio2+0x80>
 8006202:	a327      	add	r3, pc, #156	; (adr r3, 80062a0 <__ieee754_rem_pio2+0x328>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	ec51 0b18 	vmov	r0, r1, d8
 800620c:	f7fa f9b8 	bl	8000580 <__aeabi_dmul>
 8006210:	4604      	mov	r4, r0
 8006212:	460d      	mov	r5, r1
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4640      	mov	r0, r8
 800621a:	4649      	mov	r1, r9
 800621c:	f7f9 fff8 	bl	8000210 <__aeabi_dsub>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4606      	mov	r6, r0
 8006226:	460f      	mov	r7, r1
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	f7f9 fff0 	bl	8000210 <__aeabi_dsub>
 8006230:	4622      	mov	r2, r4
 8006232:	462b      	mov	r3, r5
 8006234:	f7f9 ffec 	bl	8000210 <__aeabi_dsub>
 8006238:	a31b      	add	r3, pc, #108	; (adr r3, 80062a8 <__ieee754_rem_pio2+0x330>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	ec51 0b18 	vmov	r0, r1, d8
 8006246:	f7fa f99b 	bl	8000580 <__aeabi_dmul>
 800624a:	4622      	mov	r2, r4
 800624c:	462b      	mov	r3, r5
 800624e:	f7f9 ffdf 	bl	8000210 <__aeabi_dsub>
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	e75f      	b.n	8006118 <__ieee754_rem_pio2+0x1a0>
 8006258:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <__ieee754_rem_pio2+0x350>)
 800625a:	4598      	cmp	r8, r3
 800625c:	dd36      	ble.n	80062cc <__ieee754_rem_pio2+0x354>
 800625e:	ee10 2a10 	vmov	r2, s0
 8006262:	462b      	mov	r3, r5
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7f9 ffd2 	bl	8000210 <__aeabi_dsub>
 800626c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006270:	e9ca 0100 	strd	r0, r1, [sl]
 8006274:	e694      	b.n	8005fa0 <__ieee754_rem_pio2+0x28>
 8006276:	bf00      	nop
 8006278:	54400000 	.word	0x54400000
 800627c:	3ff921fb 	.word	0x3ff921fb
 8006280:	1a626331 	.word	0x1a626331
 8006284:	3dd0b461 	.word	0x3dd0b461
 8006288:	1a600000 	.word	0x1a600000
 800628c:	3dd0b461 	.word	0x3dd0b461
 8006290:	2e037073 	.word	0x2e037073
 8006294:	3ba3198a 	.word	0x3ba3198a
 8006298:	6dc9c883 	.word	0x6dc9c883
 800629c:	3fe45f30 	.word	0x3fe45f30
 80062a0:	2e000000 	.word	0x2e000000
 80062a4:	3ba3198a 	.word	0x3ba3198a
 80062a8:	252049c1 	.word	0x252049c1
 80062ac:	397b839a 	.word	0x397b839a
 80062b0:	3fe921fb 	.word	0x3fe921fb
 80062b4:	4002d97b 	.word	0x4002d97b
 80062b8:	3ff921fb 	.word	0x3ff921fb
 80062bc:	413921fb 	.word	0x413921fb
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	08007508 	.word	0x08007508
 80062c8:	7fefffff 	.word	0x7fefffff
 80062cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80062d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80062d4:	ee10 0a10 	vmov	r0, s0
 80062d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80062dc:	ee10 6a10 	vmov	r6, s0
 80062e0:	460f      	mov	r7, r1
 80062e2:	f7fa fbfd 	bl	8000ae0 <__aeabi_d2iz>
 80062e6:	f7fa f8e1 	bl	80004ac <__aeabi_i2d>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4630      	mov	r0, r6
 80062f0:	4639      	mov	r1, r7
 80062f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062f6:	f7f9 ff8b 	bl	8000210 <__aeabi_dsub>
 80062fa:	4b23      	ldr	r3, [pc, #140]	; (8006388 <__ieee754_rem_pio2+0x410>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	f7fa f93f 	bl	8000580 <__aeabi_dmul>
 8006302:	460f      	mov	r7, r1
 8006304:	4606      	mov	r6, r0
 8006306:	f7fa fbeb 	bl	8000ae0 <__aeabi_d2iz>
 800630a:	f7fa f8cf 	bl	80004ac <__aeabi_i2d>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800631a:	f7f9 ff79 	bl	8000210 <__aeabi_dsub>
 800631e:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <__ieee754_rem_pio2+0x410>)
 8006320:	2200      	movs	r2, #0
 8006322:	f7fa f92d 	bl	8000580 <__aeabi_dmul>
 8006326:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800632a:	ad04      	add	r5, sp, #16
 800632c:	f04f 0803 	mov.w	r8, #3
 8006330:	46a9      	mov	r9, r5
 8006332:	2600      	movs	r6, #0
 8006334:	2700      	movs	r7, #0
 8006336:	4632      	mov	r2, r6
 8006338:	463b      	mov	r3, r7
 800633a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800633e:	46c3      	mov	fp, r8
 8006340:	3d08      	subs	r5, #8
 8006342:	f108 38ff 	add.w	r8, r8, #4294967295
 8006346:	f7fa fb83 	bl	8000a50 <__aeabi_dcmpeq>
 800634a:	2800      	cmp	r0, #0
 800634c:	d1f3      	bne.n	8006336 <__ieee754_rem_pio2+0x3be>
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <__ieee754_rem_pio2+0x414>)
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	2302      	movs	r3, #2
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	4622      	mov	r2, r4
 8006358:	465b      	mov	r3, fp
 800635a:	4651      	mov	r1, sl
 800635c:	4648      	mov	r0, r9
 800635e:	f000 f993 	bl	8006688 <__kernel_rem_pio2>
 8006362:	9b02      	ldr	r3, [sp, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	4683      	mov	fp, r0
 8006368:	f6bf ae46 	bge.w	8005ff8 <__ieee754_rem_pio2+0x80>
 800636c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006370:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006374:	e9ca 2300 	strd	r2, r3, [sl]
 8006378:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800637c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006380:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006384:	e73a      	b.n	80061fc <__ieee754_rem_pio2+0x284>
 8006386:	bf00      	nop
 8006388:	41700000 	.word	0x41700000
 800638c:	08007588 	.word	0x08007588

08006390 <__ieee754_sqrt>:
 8006390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006394:	ec55 4b10 	vmov	r4, r5, d0
 8006398:	4e55      	ldr	r6, [pc, #340]	; (80064f0 <__ieee754_sqrt+0x160>)
 800639a:	43ae      	bics	r6, r5
 800639c:	ee10 0a10 	vmov	r0, s0
 80063a0:	ee10 3a10 	vmov	r3, s0
 80063a4:	462a      	mov	r2, r5
 80063a6:	4629      	mov	r1, r5
 80063a8:	d110      	bne.n	80063cc <__ieee754_sqrt+0x3c>
 80063aa:	ee10 2a10 	vmov	r2, s0
 80063ae:	462b      	mov	r3, r5
 80063b0:	f7fa f8e6 	bl	8000580 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7f9 ff2a 	bl	8000214 <__adddf3>
 80063c0:	4604      	mov	r4, r0
 80063c2:	460d      	mov	r5, r1
 80063c4:	ec45 4b10 	vmov	d0, r4, r5
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	dc10      	bgt.n	80063f2 <__ieee754_sqrt+0x62>
 80063d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80063d4:	4330      	orrs	r0, r6
 80063d6:	d0f5      	beq.n	80063c4 <__ieee754_sqrt+0x34>
 80063d8:	b15d      	cbz	r5, 80063f2 <__ieee754_sqrt+0x62>
 80063da:	ee10 2a10 	vmov	r2, s0
 80063de:	462b      	mov	r3, r5
 80063e0:	ee10 0a10 	vmov	r0, s0
 80063e4:	f7f9 ff14 	bl	8000210 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	f7fa f9f2 	bl	80007d4 <__aeabi_ddiv>
 80063f0:	e7e6      	b.n	80063c0 <__ieee754_sqrt+0x30>
 80063f2:	1512      	asrs	r2, r2, #20
 80063f4:	d074      	beq.n	80064e0 <__ieee754_sqrt+0x150>
 80063f6:	07d4      	lsls	r4, r2, #31
 80063f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80063fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006404:	bf5e      	ittt	pl
 8006406:	0fda      	lsrpl	r2, r3, #31
 8006408:	005b      	lslpl	r3, r3, #1
 800640a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800640e:	2400      	movs	r4, #0
 8006410:	0fda      	lsrs	r2, r3, #31
 8006412:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006416:	107f      	asrs	r7, r7, #1
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	2516      	movs	r5, #22
 800641c:	4620      	mov	r0, r4
 800641e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006422:	1886      	adds	r6, r0, r2
 8006424:	428e      	cmp	r6, r1
 8006426:	bfde      	ittt	le
 8006428:	1b89      	suble	r1, r1, r6
 800642a:	18b0      	addle	r0, r6, r2
 800642c:	18a4      	addle	r4, r4, r2
 800642e:	0049      	lsls	r1, r1, #1
 8006430:	3d01      	subs	r5, #1
 8006432:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006436:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800643a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800643e:	d1f0      	bne.n	8006422 <__ieee754_sqrt+0x92>
 8006440:	462a      	mov	r2, r5
 8006442:	f04f 0e20 	mov.w	lr, #32
 8006446:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800644a:	4281      	cmp	r1, r0
 800644c:	eb06 0c05 	add.w	ip, r6, r5
 8006450:	dc02      	bgt.n	8006458 <__ieee754_sqrt+0xc8>
 8006452:	d113      	bne.n	800647c <__ieee754_sqrt+0xec>
 8006454:	459c      	cmp	ip, r3
 8006456:	d811      	bhi.n	800647c <__ieee754_sqrt+0xec>
 8006458:	f1bc 0f00 	cmp.w	ip, #0
 800645c:	eb0c 0506 	add.w	r5, ip, r6
 8006460:	da43      	bge.n	80064ea <__ieee754_sqrt+0x15a>
 8006462:	2d00      	cmp	r5, #0
 8006464:	db41      	blt.n	80064ea <__ieee754_sqrt+0x15a>
 8006466:	f100 0801 	add.w	r8, r0, #1
 800646a:	1a09      	subs	r1, r1, r0
 800646c:	459c      	cmp	ip, r3
 800646e:	bf88      	it	hi
 8006470:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006474:	eba3 030c 	sub.w	r3, r3, ip
 8006478:	4432      	add	r2, r6
 800647a:	4640      	mov	r0, r8
 800647c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006480:	f1be 0e01 	subs.w	lr, lr, #1
 8006484:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006488:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800648c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006490:	d1db      	bne.n	800644a <__ieee754_sqrt+0xba>
 8006492:	430b      	orrs	r3, r1
 8006494:	d006      	beq.n	80064a4 <__ieee754_sqrt+0x114>
 8006496:	1c50      	adds	r0, r2, #1
 8006498:	bf13      	iteet	ne
 800649a:	3201      	addne	r2, #1
 800649c:	3401      	addeq	r4, #1
 800649e:	4672      	moveq	r2, lr
 80064a0:	f022 0201 	bicne.w	r2, r2, #1
 80064a4:	1063      	asrs	r3, r4, #1
 80064a6:	0852      	lsrs	r2, r2, #1
 80064a8:	07e1      	lsls	r1, r4, #31
 80064aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80064ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80064b2:	bf48      	it	mi
 80064b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80064b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80064bc:	4614      	mov	r4, r2
 80064be:	e781      	b.n	80063c4 <__ieee754_sqrt+0x34>
 80064c0:	0ad9      	lsrs	r1, r3, #11
 80064c2:	3815      	subs	r0, #21
 80064c4:	055b      	lsls	r3, r3, #21
 80064c6:	2900      	cmp	r1, #0
 80064c8:	d0fa      	beq.n	80064c0 <__ieee754_sqrt+0x130>
 80064ca:	02cd      	lsls	r5, r1, #11
 80064cc:	d50a      	bpl.n	80064e4 <__ieee754_sqrt+0x154>
 80064ce:	f1c2 0420 	rsb	r4, r2, #32
 80064d2:	fa23 f404 	lsr.w	r4, r3, r4
 80064d6:	1e55      	subs	r5, r2, #1
 80064d8:	4093      	lsls	r3, r2
 80064da:	4321      	orrs	r1, r4
 80064dc:	1b42      	subs	r2, r0, r5
 80064de:	e78a      	b.n	80063f6 <__ieee754_sqrt+0x66>
 80064e0:	4610      	mov	r0, r2
 80064e2:	e7f0      	b.n	80064c6 <__ieee754_sqrt+0x136>
 80064e4:	0049      	lsls	r1, r1, #1
 80064e6:	3201      	adds	r2, #1
 80064e8:	e7ef      	b.n	80064ca <__ieee754_sqrt+0x13a>
 80064ea:	4680      	mov	r8, r0
 80064ec:	e7bd      	b.n	800646a <__ieee754_sqrt+0xda>
 80064ee:	bf00      	nop
 80064f0:	7ff00000 	.word	0x7ff00000
 80064f4:	00000000 	.word	0x00000000

080064f8 <__kernel_cos>:
 80064f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	ec57 6b10 	vmov	r6, r7, d0
 8006500:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006504:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006508:	ed8d 1b00 	vstr	d1, [sp]
 800650c:	da07      	bge.n	800651e <__kernel_cos+0x26>
 800650e:	ee10 0a10 	vmov	r0, s0
 8006512:	4639      	mov	r1, r7
 8006514:	f7fa fae4 	bl	8000ae0 <__aeabi_d2iz>
 8006518:	2800      	cmp	r0, #0
 800651a:	f000 8088 	beq.w	800662e <__kernel_cos+0x136>
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	4630      	mov	r0, r6
 8006524:	4639      	mov	r1, r7
 8006526:	f7fa f82b 	bl	8000580 <__aeabi_dmul>
 800652a:	4b51      	ldr	r3, [pc, #324]	; (8006670 <__kernel_cos+0x178>)
 800652c:	2200      	movs	r2, #0
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	f7fa f825 	bl	8000580 <__aeabi_dmul>
 8006536:	a340      	add	r3, pc, #256	; (adr r3, 8006638 <__kernel_cos+0x140>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	4682      	mov	sl, r0
 800653e:	468b      	mov	fp, r1
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7fa f81c 	bl	8000580 <__aeabi_dmul>
 8006548:	a33d      	add	r3, pc, #244	; (adr r3, 8006640 <__kernel_cos+0x148>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 fe61 	bl	8000214 <__adddf3>
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f7fa f813 	bl	8000580 <__aeabi_dmul>
 800655a:	a33b      	add	r3, pc, #236	; (adr r3, 8006648 <__kernel_cos+0x150>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7f9 fe56 	bl	8000210 <__aeabi_dsub>
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	f7fa f80a 	bl	8000580 <__aeabi_dmul>
 800656c:	a338      	add	r3, pc, #224	; (adr r3, 8006650 <__kernel_cos+0x158>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f7f9 fe4f 	bl	8000214 <__adddf3>
 8006576:	4622      	mov	r2, r4
 8006578:	462b      	mov	r3, r5
 800657a:	f7fa f801 	bl	8000580 <__aeabi_dmul>
 800657e:	a336      	add	r3, pc, #216	; (adr r3, 8006658 <__kernel_cos+0x160>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7f9 fe44 	bl	8000210 <__aeabi_dsub>
 8006588:	4622      	mov	r2, r4
 800658a:	462b      	mov	r3, r5
 800658c:	f7f9 fff8 	bl	8000580 <__aeabi_dmul>
 8006590:	a333      	add	r3, pc, #204	; (adr r3, 8006660 <__kernel_cos+0x168>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 fe3d 	bl	8000214 <__adddf3>
 800659a:	4622      	mov	r2, r4
 800659c:	462b      	mov	r3, r5
 800659e:	f7f9 ffef 	bl	8000580 <__aeabi_dmul>
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	f7f9 ffeb 	bl	8000580 <__aeabi_dmul>
 80065aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7f9 ffe3 	bl	8000580 <__aeabi_dmul>
 80065ba:	460b      	mov	r3, r1
 80065bc:	4602      	mov	r2, r0
 80065be:	4629      	mov	r1, r5
 80065c0:	4620      	mov	r0, r4
 80065c2:	f7f9 fe25 	bl	8000210 <__aeabi_dsub>
 80065c6:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <__kernel_cos+0x17c>)
 80065c8:	4598      	cmp	r8, r3
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	dc10      	bgt.n	80065f2 <__kernel_cos+0xfa>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4650      	mov	r0, sl
 80065d6:	4659      	mov	r1, fp
 80065d8:	f7f9 fe1a 	bl	8000210 <__aeabi_dsub>
 80065dc:	460b      	mov	r3, r1
 80065de:	4926      	ldr	r1, [pc, #152]	; (8006678 <__kernel_cos+0x180>)
 80065e0:	4602      	mov	r2, r0
 80065e2:	2000      	movs	r0, #0
 80065e4:	f7f9 fe14 	bl	8000210 <__aeabi_dsub>
 80065e8:	ec41 0b10 	vmov	d0, r0, r1
 80065ec:	b003      	add	sp, #12
 80065ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f2:	4b22      	ldr	r3, [pc, #136]	; (800667c <__kernel_cos+0x184>)
 80065f4:	4920      	ldr	r1, [pc, #128]	; (8006678 <__kernel_cos+0x180>)
 80065f6:	4598      	cmp	r8, r3
 80065f8:	bfcc      	ite	gt
 80065fa:	4d21      	ldrgt	r5, [pc, #132]	; (8006680 <__kernel_cos+0x188>)
 80065fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006600:	2400      	movs	r4, #0
 8006602:	4622      	mov	r2, r4
 8006604:	462b      	mov	r3, r5
 8006606:	2000      	movs	r0, #0
 8006608:	f7f9 fe02 	bl	8000210 <__aeabi_dsub>
 800660c:	4622      	mov	r2, r4
 800660e:	4680      	mov	r8, r0
 8006610:	4689      	mov	r9, r1
 8006612:	462b      	mov	r3, r5
 8006614:	4650      	mov	r0, sl
 8006616:	4659      	mov	r1, fp
 8006618:	f7f9 fdfa 	bl	8000210 <__aeabi_dsub>
 800661c:	4632      	mov	r2, r6
 800661e:	463b      	mov	r3, r7
 8006620:	f7f9 fdf6 	bl	8000210 <__aeabi_dsub>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	e7da      	b.n	80065e4 <__kernel_cos+0xec>
 800662e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006668 <__kernel_cos+0x170>
 8006632:	e7db      	b.n	80065ec <__kernel_cos+0xf4>
 8006634:	f3af 8000 	nop.w
 8006638:	be8838d4 	.word	0xbe8838d4
 800663c:	bda8fae9 	.word	0xbda8fae9
 8006640:	bdb4b1c4 	.word	0xbdb4b1c4
 8006644:	3e21ee9e 	.word	0x3e21ee9e
 8006648:	809c52ad 	.word	0x809c52ad
 800664c:	3e927e4f 	.word	0x3e927e4f
 8006650:	19cb1590 	.word	0x19cb1590
 8006654:	3efa01a0 	.word	0x3efa01a0
 8006658:	16c15177 	.word	0x16c15177
 800665c:	3f56c16c 	.word	0x3f56c16c
 8006660:	5555554c 	.word	0x5555554c
 8006664:	3fa55555 	.word	0x3fa55555
 8006668:	00000000 	.word	0x00000000
 800666c:	3ff00000 	.word	0x3ff00000
 8006670:	3fe00000 	.word	0x3fe00000
 8006674:	3fd33332 	.word	0x3fd33332
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	3fe90000 	.word	0x3fe90000
 8006680:	3fd20000 	.word	0x3fd20000
 8006684:	00000000 	.word	0x00000000

08006688 <__kernel_rem_pio2>:
 8006688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668c:	ed2d 8b02 	vpush	{d8}
 8006690:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006694:	f112 0f14 	cmn.w	r2, #20
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	9101      	str	r1, [sp, #4]
 800669c:	4bc4      	ldr	r3, [pc, #784]	; (80069b0 <__kernel_rem_pio2+0x328>)
 800669e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80066a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80066a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	9b08      	ldr	r3, [sp, #32]
 80066aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80066ae:	bfa8      	it	ge
 80066b0:	1ed4      	subge	r4, r2, #3
 80066b2:	9306      	str	r3, [sp, #24]
 80066b4:	bfb2      	itee	lt
 80066b6:	2400      	movlt	r4, #0
 80066b8:	2318      	movge	r3, #24
 80066ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80066be:	f06f 0317 	mvn.w	r3, #23
 80066c2:	fb04 3303 	mla	r3, r4, r3, r3
 80066c6:	eb03 0a02 	add.w	sl, r3, r2
 80066ca:	9b02      	ldr	r3, [sp, #8]
 80066cc:	9a06      	ldr	r2, [sp, #24]
 80066ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80069a0 <__kernel_rem_pio2+0x318>
 80066d2:	eb03 0802 	add.w	r8, r3, r2
 80066d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80066d8:	1aa7      	subs	r7, r4, r2
 80066da:	ae22      	add	r6, sp, #136	; 0x88
 80066dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80066e0:	2500      	movs	r5, #0
 80066e2:	4545      	cmp	r5, r8
 80066e4:	dd13      	ble.n	800670e <__kernel_rem_pio2+0x86>
 80066e6:	9b08      	ldr	r3, [sp, #32]
 80066e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80069a0 <__kernel_rem_pio2+0x318>
 80066ec:	aa22      	add	r2, sp, #136	; 0x88
 80066ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80066f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80066f6:	f04f 0800 	mov.w	r8, #0
 80066fa:	9b02      	ldr	r3, [sp, #8]
 80066fc:	4598      	cmp	r8, r3
 80066fe:	dc2f      	bgt.n	8006760 <__kernel_rem_pio2+0xd8>
 8006700:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006704:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006708:	462f      	mov	r7, r5
 800670a:	2600      	movs	r6, #0
 800670c:	e01b      	b.n	8006746 <__kernel_rem_pio2+0xbe>
 800670e:	42ef      	cmn	r7, r5
 8006710:	d407      	bmi.n	8006722 <__kernel_rem_pio2+0x9a>
 8006712:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006716:	f7f9 fec9 	bl	80004ac <__aeabi_i2d>
 800671a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800671e:	3501      	adds	r5, #1
 8006720:	e7df      	b.n	80066e2 <__kernel_rem_pio2+0x5a>
 8006722:	ec51 0b18 	vmov	r0, r1, d8
 8006726:	e7f8      	b.n	800671a <__kernel_rem_pio2+0x92>
 8006728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006730:	f7f9 ff26 	bl	8000580 <__aeabi_dmul>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800673c:	f7f9 fd6a 	bl	8000214 <__adddf3>
 8006740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006744:	3601      	adds	r6, #1
 8006746:	9b06      	ldr	r3, [sp, #24]
 8006748:	429e      	cmp	r6, r3
 800674a:	f1a7 0708 	sub.w	r7, r7, #8
 800674e:	ddeb      	ble.n	8006728 <__kernel_rem_pio2+0xa0>
 8006750:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006754:	f108 0801 	add.w	r8, r8, #1
 8006758:	ecab 7b02 	vstmia	fp!, {d7}
 800675c:	3508      	adds	r5, #8
 800675e:	e7cc      	b.n	80066fa <__kernel_rem_pio2+0x72>
 8006760:	9b02      	ldr	r3, [sp, #8]
 8006762:	aa0e      	add	r2, sp, #56	; 0x38
 8006764:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006768:	930d      	str	r3, [sp, #52]	; 0x34
 800676a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800676c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006770:	9c02      	ldr	r4, [sp, #8]
 8006772:	930c      	str	r3, [sp, #48]	; 0x30
 8006774:	00e3      	lsls	r3, r4, #3
 8006776:	930a      	str	r3, [sp, #40]	; 0x28
 8006778:	ab9a      	add	r3, sp, #616	; 0x268
 800677a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800677e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006782:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006786:	ab72      	add	r3, sp, #456	; 0x1c8
 8006788:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800678c:	46c3      	mov	fp, r8
 800678e:	46a1      	mov	r9, r4
 8006790:	f1b9 0f00 	cmp.w	r9, #0
 8006794:	f1a5 0508 	sub.w	r5, r5, #8
 8006798:	dc77      	bgt.n	800688a <__kernel_rem_pio2+0x202>
 800679a:	ec47 6b10 	vmov	d0, r6, r7
 800679e:	4650      	mov	r0, sl
 80067a0:	f000 fdb6 	bl	8007310 <scalbn>
 80067a4:	ec57 6b10 	vmov	r6, r7, d0
 80067a8:	2200      	movs	r2, #0
 80067aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80067ae:	ee10 0a10 	vmov	r0, s0
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7f9 fee4 	bl	8000580 <__aeabi_dmul>
 80067b8:	ec41 0b10 	vmov	d0, r0, r1
 80067bc:	f000 fd20 	bl	8007200 <floor>
 80067c0:	4b7c      	ldr	r3, [pc, #496]	; (80069b4 <__kernel_rem_pio2+0x32c>)
 80067c2:	ec51 0b10 	vmov	r0, r1, d0
 80067c6:	2200      	movs	r2, #0
 80067c8:	f7f9 feda 	bl	8000580 <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7f9 fd1c 	bl	8000210 <__aeabi_dsub>
 80067d8:	460f      	mov	r7, r1
 80067da:	4606      	mov	r6, r0
 80067dc:	f7fa f980 	bl	8000ae0 <__aeabi_d2iz>
 80067e0:	9004      	str	r0, [sp, #16]
 80067e2:	f7f9 fe63 	bl	80004ac <__aeabi_i2d>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7f9 fd0f 	bl	8000210 <__aeabi_dsub>
 80067f2:	f1ba 0f00 	cmp.w	sl, #0
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	dd6d      	ble.n	80068d8 <__kernel_rem_pio2+0x250>
 80067fc:	1e62      	subs	r2, r4, #1
 80067fe:	ab0e      	add	r3, sp, #56	; 0x38
 8006800:	9d04      	ldr	r5, [sp, #16]
 8006802:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006806:	f1ca 0118 	rsb	r1, sl, #24
 800680a:	fa40 f301 	asr.w	r3, r0, r1
 800680e:	441d      	add	r5, r3
 8006810:	408b      	lsls	r3, r1
 8006812:	1ac0      	subs	r0, r0, r3
 8006814:	ab0e      	add	r3, sp, #56	; 0x38
 8006816:	9504      	str	r5, [sp, #16]
 8006818:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800681c:	f1ca 0317 	rsb	r3, sl, #23
 8006820:	fa40 fb03 	asr.w	fp, r0, r3
 8006824:	f1bb 0f00 	cmp.w	fp, #0
 8006828:	dd65      	ble.n	80068f6 <__kernel_rem_pio2+0x26e>
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	2200      	movs	r2, #0
 800682e:	3301      	adds	r3, #1
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	4615      	mov	r5, r2
 8006834:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006838:	4294      	cmp	r4, r2
 800683a:	f300 809c 	bgt.w	8006976 <__kernel_rem_pio2+0x2ee>
 800683e:	f1ba 0f00 	cmp.w	sl, #0
 8006842:	dd07      	ble.n	8006854 <__kernel_rem_pio2+0x1cc>
 8006844:	f1ba 0f01 	cmp.w	sl, #1
 8006848:	f000 80c0 	beq.w	80069cc <__kernel_rem_pio2+0x344>
 800684c:	f1ba 0f02 	cmp.w	sl, #2
 8006850:	f000 80c6 	beq.w	80069e0 <__kernel_rem_pio2+0x358>
 8006854:	f1bb 0f02 	cmp.w	fp, #2
 8006858:	d14d      	bne.n	80068f6 <__kernel_rem_pio2+0x26e>
 800685a:	4632      	mov	r2, r6
 800685c:	463b      	mov	r3, r7
 800685e:	4956      	ldr	r1, [pc, #344]	; (80069b8 <__kernel_rem_pio2+0x330>)
 8006860:	2000      	movs	r0, #0
 8006862:	f7f9 fcd5 	bl	8000210 <__aeabi_dsub>
 8006866:	4606      	mov	r6, r0
 8006868:	460f      	mov	r7, r1
 800686a:	2d00      	cmp	r5, #0
 800686c:	d043      	beq.n	80068f6 <__kernel_rem_pio2+0x26e>
 800686e:	4650      	mov	r0, sl
 8006870:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80069a8 <__kernel_rem_pio2+0x320>
 8006874:	f000 fd4c 	bl	8007310 <scalbn>
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	ec53 2b10 	vmov	r2, r3, d0
 8006880:	f7f9 fcc6 	bl	8000210 <__aeabi_dsub>
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	e035      	b.n	80068f6 <__kernel_rem_pio2+0x26e>
 800688a:	4b4c      	ldr	r3, [pc, #304]	; (80069bc <__kernel_rem_pio2+0x334>)
 800688c:	2200      	movs	r2, #0
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7f9 fe75 	bl	8000580 <__aeabi_dmul>
 8006896:	f7fa f923 	bl	8000ae0 <__aeabi_d2iz>
 800689a:	f7f9 fe07 	bl	80004ac <__aeabi_i2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	ec43 2b18 	vmov	d8, r2, r3
 80068a6:	4b46      	ldr	r3, [pc, #280]	; (80069c0 <__kernel_rem_pio2+0x338>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	f7f9 fe69 	bl	8000580 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7f9 fcab 	bl	8000210 <__aeabi_dsub>
 80068ba:	f7fa f911 	bl	8000ae0 <__aeabi_d2iz>
 80068be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068c2:	f84b 0b04 	str.w	r0, [fp], #4
 80068c6:	ec51 0b18 	vmov	r0, r1, d8
 80068ca:	f7f9 fca3 	bl	8000214 <__adddf3>
 80068ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80068d2:	4606      	mov	r6, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	e75b      	b.n	8006790 <__kernel_rem_pio2+0x108>
 80068d8:	d106      	bne.n	80068e8 <__kernel_rem_pio2+0x260>
 80068da:	1e63      	subs	r3, r4, #1
 80068dc:	aa0e      	add	r2, sp, #56	; 0x38
 80068de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80068e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80068e6:	e79d      	b.n	8006824 <__kernel_rem_pio2+0x19c>
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <__kernel_rem_pio2+0x33c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	f7fa f8ce 	bl	8000a8c <__aeabi_dcmpge>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d13d      	bne.n	8006970 <__kernel_rem_pio2+0x2e8>
 80068f4:	4683      	mov	fp, r0
 80068f6:	2200      	movs	r2, #0
 80068f8:	2300      	movs	r3, #0
 80068fa:	4630      	mov	r0, r6
 80068fc:	4639      	mov	r1, r7
 80068fe:	f7fa f8a7 	bl	8000a50 <__aeabi_dcmpeq>
 8006902:	2800      	cmp	r0, #0
 8006904:	f000 80c0 	beq.w	8006a88 <__kernel_rem_pio2+0x400>
 8006908:	1e65      	subs	r5, r4, #1
 800690a:	462b      	mov	r3, r5
 800690c:	2200      	movs	r2, #0
 800690e:	9902      	ldr	r1, [sp, #8]
 8006910:	428b      	cmp	r3, r1
 8006912:	da6c      	bge.n	80069ee <__kernel_rem_pio2+0x366>
 8006914:	2a00      	cmp	r2, #0
 8006916:	f000 8089 	beq.w	8006a2c <__kernel_rem_pio2+0x3a4>
 800691a:	ab0e      	add	r3, sp, #56	; 0x38
 800691c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006920:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80ad 	beq.w	8006a84 <__kernel_rem_pio2+0x3fc>
 800692a:	4650      	mov	r0, sl
 800692c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80069a8 <__kernel_rem_pio2+0x320>
 8006930:	f000 fcee 	bl	8007310 <scalbn>
 8006934:	ab9a      	add	r3, sp, #616	; 0x268
 8006936:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800693a:	ec57 6b10 	vmov	r6, r7, d0
 800693e:	00ec      	lsls	r4, r5, #3
 8006940:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006944:	46aa      	mov	sl, r5
 8006946:	f1ba 0f00 	cmp.w	sl, #0
 800694a:	f280 80d6 	bge.w	8006afa <__kernel_rem_pio2+0x472>
 800694e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80069a0 <__kernel_rem_pio2+0x318>
 8006952:	462e      	mov	r6, r5
 8006954:	2e00      	cmp	r6, #0
 8006956:	f2c0 8104 	blt.w	8006b62 <__kernel_rem_pio2+0x4da>
 800695a:	ab72      	add	r3, sp, #456	; 0x1c8
 800695c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006960:	f8df a064 	ldr.w	sl, [pc, #100]	; 80069c8 <__kernel_rem_pio2+0x340>
 8006964:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006968:	f04f 0800 	mov.w	r8, #0
 800696c:	1baf      	subs	r7, r5, r6
 800696e:	e0ea      	b.n	8006b46 <__kernel_rem_pio2+0x4be>
 8006970:	f04f 0b02 	mov.w	fp, #2
 8006974:	e759      	b.n	800682a <__kernel_rem_pio2+0x1a2>
 8006976:	f8d8 3000 	ldr.w	r3, [r8]
 800697a:	b955      	cbnz	r5, 8006992 <__kernel_rem_pio2+0x30a>
 800697c:	b123      	cbz	r3, 8006988 <__kernel_rem_pio2+0x300>
 800697e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006982:	f8c8 3000 	str.w	r3, [r8]
 8006986:	2301      	movs	r3, #1
 8006988:	3201      	adds	r2, #1
 800698a:	f108 0804 	add.w	r8, r8, #4
 800698e:	461d      	mov	r5, r3
 8006990:	e752      	b.n	8006838 <__kernel_rem_pio2+0x1b0>
 8006992:	1acb      	subs	r3, r1, r3
 8006994:	f8c8 3000 	str.w	r3, [r8]
 8006998:	462b      	mov	r3, r5
 800699a:	e7f5      	b.n	8006988 <__kernel_rem_pio2+0x300>
 800699c:	f3af 8000 	nop.w
	...
 80069ac:	3ff00000 	.word	0x3ff00000
 80069b0:	080076d0 	.word	0x080076d0
 80069b4:	40200000 	.word	0x40200000
 80069b8:	3ff00000 	.word	0x3ff00000
 80069bc:	3e700000 	.word	0x3e700000
 80069c0:	41700000 	.word	0x41700000
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	08007690 	.word	0x08007690
 80069cc:	1e62      	subs	r2, r4, #1
 80069ce:	ab0e      	add	r3, sp, #56	; 0x38
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80069d8:	a90e      	add	r1, sp, #56	; 0x38
 80069da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80069de:	e739      	b.n	8006854 <__kernel_rem_pio2+0x1cc>
 80069e0:	1e62      	subs	r2, r4, #1
 80069e2:	ab0e      	add	r3, sp, #56	; 0x38
 80069e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80069ec:	e7f4      	b.n	80069d8 <__kernel_rem_pio2+0x350>
 80069ee:	a90e      	add	r1, sp, #56	; 0x38
 80069f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	430a      	orrs	r2, r1
 80069f8:	e789      	b.n	800690e <__kernel_rem_pio2+0x286>
 80069fa:	3301      	adds	r3, #1
 80069fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d0fa      	beq.n	80069fa <__kernel_rem_pio2+0x372>
 8006a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006a0a:	446a      	add	r2, sp
 8006a0c:	3a98      	subs	r2, #152	; 0x98
 8006a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8006a10:	9a08      	ldr	r2, [sp, #32]
 8006a12:	18e3      	adds	r3, r4, r3
 8006a14:	18a5      	adds	r5, r4, r2
 8006a16:	aa22      	add	r2, sp, #136	; 0x88
 8006a18:	f104 0801 	add.w	r8, r4, #1
 8006a1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	4543      	cmp	r3, r8
 8006a26:	da04      	bge.n	8006a32 <__kernel_rem_pio2+0x3aa>
 8006a28:	461c      	mov	r4, r3
 8006a2a:	e6a3      	b.n	8006774 <__kernel_rem_pio2+0xec>
 8006a2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e7e4      	b.n	80069fc <__kernel_rem_pio2+0x374>
 8006a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006a38:	f7f9 fd38 	bl	80004ac <__aeabi_i2d>
 8006a3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a42:	46ab      	mov	fp, r5
 8006a44:	461c      	mov	r4, r3
 8006a46:	f04f 0900 	mov.w	r9, #0
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	2700      	movs	r7, #0
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	4599      	cmp	r9, r3
 8006a52:	dd06      	ble.n	8006a62 <__kernel_rem_pio2+0x3da>
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006a5a:	f108 0801 	add.w	r8, r8, #1
 8006a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a60:	e7df      	b.n	8006a22 <__kernel_rem_pio2+0x39a>
 8006a62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006a66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006a6a:	f7f9 fd89 	bl	8000580 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4630      	mov	r0, r6
 8006a74:	4639      	mov	r1, r7
 8006a76:	f7f9 fbcd 	bl	8000214 <__adddf3>
 8006a7a:	f109 0901 	add.w	r9, r9, #1
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	e7e4      	b.n	8006a4e <__kernel_rem_pio2+0x3c6>
 8006a84:	3d01      	subs	r5, #1
 8006a86:	e748      	b.n	800691a <__kernel_rem_pio2+0x292>
 8006a88:	ec47 6b10 	vmov	d0, r6, r7
 8006a8c:	f1ca 0000 	rsb	r0, sl, #0
 8006a90:	f000 fc3e 	bl	8007310 <scalbn>
 8006a94:	ec57 6b10 	vmov	r6, r7, d0
 8006a98:	4ba0      	ldr	r3, [pc, #640]	; (8006d1c <__kernel_rem_pio2+0x694>)
 8006a9a:	ee10 0a10 	vmov	r0, s0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7f9 fff3 	bl	8000a8c <__aeabi_dcmpge>
 8006aa6:	b1f8      	cbz	r0, 8006ae8 <__kernel_rem_pio2+0x460>
 8006aa8:	4b9d      	ldr	r3, [pc, #628]	; (8006d20 <__kernel_rem_pio2+0x698>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 fd66 	bl	8000580 <__aeabi_dmul>
 8006ab4:	f7fa f814 	bl	8000ae0 <__aeabi_d2iz>
 8006ab8:	4680      	mov	r8, r0
 8006aba:	f7f9 fcf7 	bl	80004ac <__aeabi_i2d>
 8006abe:	4b97      	ldr	r3, [pc, #604]	; (8006d1c <__kernel_rem_pio2+0x694>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f7f9 fd5d 	bl	8000580 <__aeabi_dmul>
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4639      	mov	r1, r7
 8006acc:	4630      	mov	r0, r6
 8006ace:	f7f9 fb9f 	bl	8000210 <__aeabi_dsub>
 8006ad2:	f7fa f805 	bl	8000ae0 <__aeabi_d2iz>
 8006ad6:	1c65      	adds	r5, r4, #1
 8006ad8:	ab0e      	add	r3, sp, #56	; 0x38
 8006ada:	f10a 0a18 	add.w	sl, sl, #24
 8006ade:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ae2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006ae6:	e720      	b.n	800692a <__kernel_rem_pio2+0x2a2>
 8006ae8:	4630      	mov	r0, r6
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7f9 fff8 	bl	8000ae0 <__aeabi_d2iz>
 8006af0:	ab0e      	add	r3, sp, #56	; 0x38
 8006af2:	4625      	mov	r5, r4
 8006af4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006af8:	e717      	b.n	800692a <__kernel_rem_pio2+0x2a2>
 8006afa:	ab0e      	add	r3, sp, #56	; 0x38
 8006afc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006b00:	f7f9 fcd4 	bl	80004ac <__aeabi_i2d>
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	f7f9 fd3a 	bl	8000580 <__aeabi_dmul>
 8006b0c:	4b84      	ldr	r3, [pc, #528]	; (8006d20 <__kernel_rem_pio2+0x698>)
 8006b0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006b12:	2200      	movs	r2, #0
 8006b14:	4630      	mov	r0, r6
 8006b16:	4639      	mov	r1, r7
 8006b18:	f7f9 fd32 	bl	8000580 <__aeabi_dmul>
 8006b1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b20:	4606      	mov	r6, r0
 8006b22:	460f      	mov	r7, r1
 8006b24:	e70f      	b.n	8006946 <__kernel_rem_pio2+0x2be>
 8006b26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006b2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006b2e:	f7f9 fd27 	bl	8000580 <__aeabi_dmul>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3a:	f7f9 fb6b 	bl	8000214 <__adddf3>
 8006b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b42:	f108 0801 	add.w	r8, r8, #1
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	4598      	cmp	r8, r3
 8006b4a:	dc01      	bgt.n	8006b50 <__kernel_rem_pio2+0x4c8>
 8006b4c:	45b8      	cmp	r8, r7
 8006b4e:	ddea      	ble.n	8006b26 <__kernel_rem_pio2+0x49e>
 8006b50:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006b54:	ab4a      	add	r3, sp, #296	; 0x128
 8006b56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b5a:	ed87 7b00 	vstr	d7, [r7]
 8006b5e:	3e01      	subs	r6, #1
 8006b60:	e6f8      	b.n	8006954 <__kernel_rem_pio2+0x2cc>
 8006b62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	dc0b      	bgt.n	8006b80 <__kernel_rem_pio2+0x4f8>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dc35      	bgt.n	8006bd8 <__kernel_rem_pio2+0x550>
 8006b6c:	d059      	beq.n	8006c22 <__kernel_rem_pio2+0x59a>
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	f003 0007 	and.w	r0, r3, #7
 8006b74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006b78:	ecbd 8b02 	vpop	{d8}
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d1f3      	bne.n	8006b6e <__kernel_rem_pio2+0x4e6>
 8006b86:	ab4a      	add	r3, sp, #296	; 0x128
 8006b88:	4423      	add	r3, r4
 8006b8a:	9306      	str	r3, [sp, #24]
 8006b8c:	461c      	mov	r4, r3
 8006b8e:	469a      	mov	sl, r3
 8006b90:	9502      	str	r5, [sp, #8]
 8006b92:	9b02      	ldr	r3, [sp, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f1aa 0a08 	sub.w	sl, sl, #8
 8006b9a:	dc6b      	bgt.n	8006c74 <__kernel_rem_pio2+0x5ec>
 8006b9c:	46aa      	mov	sl, r5
 8006b9e:	f1ba 0f01 	cmp.w	sl, #1
 8006ba2:	f1a4 0408 	sub.w	r4, r4, #8
 8006ba6:	f300 8085 	bgt.w	8006cb4 <__kernel_rem_pio2+0x62c>
 8006baa:	9c06      	ldr	r4, [sp, #24]
 8006bac:	2000      	movs	r0, #0
 8006bae:	3408      	adds	r4, #8
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	2d01      	cmp	r5, #1
 8006bb4:	f300 809d 	bgt.w	8006cf2 <__kernel_rem_pio2+0x66a>
 8006bb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006bbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006bc0:	f1bb 0f00 	cmp.w	fp, #0
 8006bc4:	f040 809b 	bne.w	8006cfe <__kernel_rem_pio2+0x676>
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	e9c3 5600 	strd	r5, r6, [r3]
 8006bce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006bd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006bd6:	e7ca      	b.n	8006b6e <__kernel_rem_pio2+0x4e6>
 8006bd8:	3408      	adds	r4, #8
 8006bda:	ab4a      	add	r3, sp, #296	; 0x128
 8006bdc:	441c      	add	r4, r3
 8006bde:	462e      	mov	r6, r5
 8006be0:	2000      	movs	r0, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	2e00      	cmp	r6, #0
 8006be6:	da36      	bge.n	8006c56 <__kernel_rem_pio2+0x5ce>
 8006be8:	f1bb 0f00 	cmp.w	fp, #0
 8006bec:	d039      	beq.n	8006c62 <__kernel_rem_pio2+0x5da>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bf4:	9c01      	ldr	r4, [sp, #4]
 8006bf6:	e9c4 2300 	strd	r2, r3, [r4]
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006c02:	f7f9 fb05 	bl	8000210 <__aeabi_dsub>
 8006c06:	ae4c      	add	r6, sp, #304	; 0x130
 8006c08:	2401      	movs	r4, #1
 8006c0a:	42a5      	cmp	r5, r4
 8006c0c:	da2c      	bge.n	8006c68 <__kernel_rem_pio2+0x5e0>
 8006c0e:	f1bb 0f00 	cmp.w	fp, #0
 8006c12:	d002      	beq.n	8006c1a <__kernel_rem_pio2+0x592>
 8006c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c18:	4619      	mov	r1, r3
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006c20:	e7a5      	b.n	8006b6e <__kernel_rem_pio2+0x4e6>
 8006c22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006c26:	eb0d 0403 	add.w	r4, sp, r3
 8006c2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006c2e:	2000      	movs	r0, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	da09      	bge.n	8006c4a <__kernel_rem_pio2+0x5c2>
 8006c36:	f1bb 0f00 	cmp.w	fp, #0
 8006c3a:	d002      	beq.n	8006c42 <__kernel_rem_pio2+0x5ba>
 8006c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c40:	4619      	mov	r1, r3
 8006c42:	9b01      	ldr	r3, [sp, #4]
 8006c44:	e9c3 0100 	strd	r0, r1, [r3]
 8006c48:	e791      	b.n	8006b6e <__kernel_rem_pio2+0x4e6>
 8006c4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c4e:	f7f9 fae1 	bl	8000214 <__adddf3>
 8006c52:	3d01      	subs	r5, #1
 8006c54:	e7ed      	b.n	8006c32 <__kernel_rem_pio2+0x5aa>
 8006c56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c5a:	f7f9 fadb 	bl	8000214 <__adddf3>
 8006c5e:	3e01      	subs	r6, #1
 8006c60:	e7c0      	b.n	8006be4 <__kernel_rem_pio2+0x55c>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	e7c5      	b.n	8006bf4 <__kernel_rem_pio2+0x56c>
 8006c68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006c6c:	f7f9 fad2 	bl	8000214 <__adddf3>
 8006c70:	3401      	adds	r4, #1
 8006c72:	e7ca      	b.n	8006c0a <__kernel_rem_pio2+0x582>
 8006c74:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006c7c:	9b02      	ldr	r3, [sp, #8]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	9302      	str	r3, [sp, #8]
 8006c82:	4632      	mov	r2, r6
 8006c84:	463b      	mov	r3, r7
 8006c86:	4640      	mov	r0, r8
 8006c88:	4649      	mov	r1, r9
 8006c8a:	f7f9 fac3 	bl	8000214 <__adddf3>
 8006c8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	f7f9 fab9 	bl	8000210 <__aeabi_dsub>
 8006c9e:	4632      	mov	r2, r6
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	f7f9 fab7 	bl	8000214 <__adddf3>
 8006ca6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006caa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cae:	ed8a 7b00 	vstr	d7, [sl]
 8006cb2:	e76e      	b.n	8006b92 <__kernel_rem_pio2+0x50a>
 8006cb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006cb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	f7f9 faa6 	bl	8000214 <__adddf3>
 8006cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	f7f9 fa9c 	bl	8000210 <__aeabi_dsub>
 8006cd8:	4632      	mov	r2, r6
 8006cda:	463b      	mov	r3, r7
 8006cdc:	f7f9 fa9a 	bl	8000214 <__adddf3>
 8006ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ce4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ce8:	ed84 7b00 	vstr	d7, [r4]
 8006cec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf0:	e755      	b.n	8006b9e <__kernel_rem_pio2+0x516>
 8006cf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006cf6:	f7f9 fa8d 	bl	8000214 <__adddf3>
 8006cfa:	3d01      	subs	r5, #1
 8006cfc:	e759      	b.n	8006bb2 <__kernel_rem_pio2+0x52a>
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	9a01      	ldr	r2, [sp, #4]
 8006d02:	601d      	str	r5, [r3, #0]
 8006d04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006d08:	605c      	str	r4, [r3, #4]
 8006d0a:	609f      	str	r7, [r3, #8]
 8006d0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006d10:	60d3      	str	r3, [r2, #12]
 8006d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d16:	6110      	str	r0, [r2, #16]
 8006d18:	6153      	str	r3, [r2, #20]
 8006d1a:	e728      	b.n	8006b6e <__kernel_rem_pio2+0x4e6>
 8006d1c:	41700000 	.word	0x41700000
 8006d20:	3e700000 	.word	0x3e700000
 8006d24:	00000000 	.word	0x00000000

08006d28 <__kernel_sin>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	ed2d 8b04 	vpush	{d8-d9}
 8006d30:	eeb0 8a41 	vmov.f32	s16, s2
 8006d34:	eef0 8a61 	vmov.f32	s17, s3
 8006d38:	ec55 4b10 	vmov	r4, r5, d0
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006d46:	9001      	str	r0, [sp, #4]
 8006d48:	da06      	bge.n	8006d58 <__kernel_sin+0x30>
 8006d4a:	ee10 0a10 	vmov	r0, s0
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fec6 	bl	8000ae0 <__aeabi_d2iz>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d051      	beq.n	8006dfc <__kernel_sin+0xd4>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fc0e 	bl	8000580 <__aeabi_dmul>
 8006d64:	4682      	mov	sl, r0
 8006d66:	468b      	mov	fp, r1
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	4629      	mov	r1, r5
 8006d70:	f7f9 fc06 	bl	8000580 <__aeabi_dmul>
 8006d74:	a341      	add	r3, pc, #260	; (adr r3, 8006e7c <__kernel_sin+0x154>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	4650      	mov	r0, sl
 8006d80:	4659      	mov	r1, fp
 8006d82:	f7f9 fbfd 	bl	8000580 <__aeabi_dmul>
 8006d86:	a33f      	add	r3, pc, #252	; (adr r3, 8006e84 <__kernel_sin+0x15c>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fa40 	bl	8000210 <__aeabi_dsub>
 8006d90:	4652      	mov	r2, sl
 8006d92:	465b      	mov	r3, fp
 8006d94:	f7f9 fbf4 	bl	8000580 <__aeabi_dmul>
 8006d98:	a33c      	add	r3, pc, #240	; (adr r3, 8006e8c <__kernel_sin+0x164>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f7f9 fa39 	bl	8000214 <__adddf3>
 8006da2:	4652      	mov	r2, sl
 8006da4:	465b      	mov	r3, fp
 8006da6:	f7f9 fbeb 	bl	8000580 <__aeabi_dmul>
 8006daa:	a33a      	add	r3, pc, #232	; (adr r3, 8006e94 <__kernel_sin+0x16c>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f7f9 fa2e 	bl	8000210 <__aeabi_dsub>
 8006db4:	4652      	mov	r2, sl
 8006db6:	465b      	mov	r3, fp
 8006db8:	f7f9 fbe2 	bl	8000580 <__aeabi_dmul>
 8006dbc:	a337      	add	r3, pc, #220	; (adr r3, 8006e9c <__kernel_sin+0x174>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 fa27 	bl	8000214 <__adddf3>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	4606      	mov	r6, r0
 8006dca:	460f      	mov	r7, r1
 8006dcc:	b9eb      	cbnz	r3, 8006e0a <__kernel_sin+0xe2>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	f7f9 fbd3 	bl	8000580 <__aeabi_dmul>
 8006dda:	a325      	add	r3, pc, #148	; (adr r3, 8006e70 <__kernel_sin+0x148>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fa16 	bl	8000210 <__aeabi_dsub>
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	f7f9 fbca 	bl	8000580 <__aeabi_dmul>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7f9 fa0e 	bl	8000214 <__adddf3>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	ec45 4b10 	vmov	d0, r4, r5
 8006e00:	b003      	add	sp, #12
 8006e02:	ecbd 8b04 	vpop	{d8-d9}
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <__kernel_sin+0x150>)
 8006e0c:	ec51 0b18 	vmov	r0, r1, d8
 8006e10:	2200      	movs	r2, #0
 8006e12:	f7f9 fbb5 	bl	8000580 <__aeabi_dmul>
 8006e16:	4632      	mov	r2, r6
 8006e18:	ec41 0b19 	vmov	d9, r0, r1
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4649      	mov	r1, r9
 8006e22:	f7f9 fbad 	bl	8000580 <__aeabi_dmul>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	ec51 0b19 	vmov	r0, r1, d9
 8006e2e:	f7f9 f9ef 	bl	8000210 <__aeabi_dsub>
 8006e32:	4652      	mov	r2, sl
 8006e34:	465b      	mov	r3, fp
 8006e36:	f7f9 fba3 	bl	8000580 <__aeabi_dmul>
 8006e3a:	ec53 2b18 	vmov	r2, r3, d8
 8006e3e:	f7f9 f9e7 	bl	8000210 <__aeabi_dsub>
 8006e42:	a30b      	add	r3, pc, #44	; (adr r3, 8006e70 <__kernel_sin+0x148>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	4606      	mov	r6, r0
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 fb96 	bl	8000580 <__aeabi_dmul>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4630      	mov	r0, r6
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	f7f9 f9da 	bl	8000214 <__adddf3>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4620      	mov	r0, r4
 8006e66:	4629      	mov	r1, r5
 8006e68:	f7f9 f9d2 	bl	8000210 <__aeabi_dsub>
 8006e6c:	e7c4      	b.n	8006df8 <__kernel_sin+0xd0>
 8006e6e:	bf00      	nop
 8006e70:	55555549 	.word	0x55555549
 8006e74:	3fc55555 	.word	0x3fc55555
 8006e78:	3fe00000 	.word	0x3fe00000
 8006e7c:	5acfd57c 	.word	0x5acfd57c
 8006e80:	3de5d93a 	.word	0x3de5d93a
 8006e84:	8a2b9ceb 	.word	0x8a2b9ceb
 8006e88:	3e5ae5e6 	.word	0x3e5ae5e6
 8006e8c:	57b1fe7d 	.word	0x57b1fe7d
 8006e90:	3ec71de3 	.word	0x3ec71de3
 8006e94:	19c161d5 	.word	0x19c161d5
 8006e98:	3f2a01a0 	.word	0x3f2a01a0
 8006e9c:	1110f8a6 	.word	0x1110f8a6
 8006ea0:	3f811111 	.word	0x3f811111
 8006ea4:	00000000 	.word	0x00000000

08006ea8 <atan>:
 8006ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	ec55 4b10 	vmov	r4, r5, d0
 8006eb0:	4bc3      	ldr	r3, [pc, #780]	; (80071c0 <atan+0x318>)
 8006eb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006eb6:	429e      	cmp	r6, r3
 8006eb8:	46ab      	mov	fp, r5
 8006eba:	dd18      	ble.n	8006eee <atan+0x46>
 8006ebc:	4bc1      	ldr	r3, [pc, #772]	; (80071c4 <atan+0x31c>)
 8006ebe:	429e      	cmp	r6, r3
 8006ec0:	dc01      	bgt.n	8006ec6 <atan+0x1e>
 8006ec2:	d109      	bne.n	8006ed8 <atan+0x30>
 8006ec4:	b144      	cbz	r4, 8006ed8 <atan+0x30>
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	462b      	mov	r3, r5
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7f9 f9a1 	bl	8000214 <__adddf3>
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	e006      	b.n	8006ee6 <atan+0x3e>
 8006ed8:	f1bb 0f00 	cmp.w	fp, #0
 8006edc:	f300 8131 	bgt.w	8007142 <atan+0x29a>
 8006ee0:	a59b      	add	r5, pc, #620	; (adr r5, 8007150 <atan+0x2a8>)
 8006ee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ee6:	ec45 4b10 	vmov	d0, r4, r5
 8006eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eee:	4bb6      	ldr	r3, [pc, #728]	; (80071c8 <atan+0x320>)
 8006ef0:	429e      	cmp	r6, r3
 8006ef2:	dc14      	bgt.n	8006f1e <atan+0x76>
 8006ef4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006ef8:	429e      	cmp	r6, r3
 8006efa:	dc0d      	bgt.n	8006f18 <atan+0x70>
 8006efc:	a396      	add	r3, pc, #600	; (adr r3, 8007158 <atan+0x2b0>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	ee10 0a10 	vmov	r0, s0
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 f984 	bl	8000214 <__adddf3>
 8006f0c:	4baf      	ldr	r3, [pc, #700]	; (80071cc <atan+0x324>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f7f9 fdc6 	bl	8000aa0 <__aeabi_dcmpgt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d1e6      	bne.n	8006ee6 <atan+0x3e>
 8006f18:	f04f 3aff 	mov.w	sl, #4294967295
 8006f1c:	e02b      	b.n	8006f76 <atan+0xce>
 8006f1e:	f000 f963 	bl	80071e8 <fabs>
 8006f22:	4bab      	ldr	r3, [pc, #684]	; (80071d0 <atan+0x328>)
 8006f24:	429e      	cmp	r6, r3
 8006f26:	ec55 4b10 	vmov	r4, r5, d0
 8006f2a:	f300 80bf 	bgt.w	80070ac <atan+0x204>
 8006f2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006f32:	429e      	cmp	r6, r3
 8006f34:	f300 80a0 	bgt.w	8007078 <atan+0x1d0>
 8006f38:	ee10 2a10 	vmov	r2, s0
 8006f3c:	ee10 0a10 	vmov	r0, s0
 8006f40:	462b      	mov	r3, r5
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 f966 	bl	8000214 <__adddf3>
 8006f48:	4ba0      	ldr	r3, [pc, #640]	; (80071cc <atan+0x324>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f7f9 f960 	bl	8000210 <__aeabi_dsub>
 8006f50:	2200      	movs	r2, #0
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f959 	bl	8000214 <__adddf3>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 fc33 	bl	80007d4 <__aeabi_ddiv>
 8006f6e:	f04f 0a00 	mov.w	sl, #0
 8006f72:	4604      	mov	r4, r0
 8006f74:	460d      	mov	r5, r1
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 faff 	bl	8000580 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4680      	mov	r8, r0
 8006f88:	4689      	mov	r9, r1
 8006f8a:	f7f9 faf9 	bl	8000580 <__aeabi_dmul>
 8006f8e:	a374      	add	r3, pc, #464	; (adr r3, 8007160 <atan+0x2b8>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	f7f9 faf2 	bl	8000580 <__aeabi_dmul>
 8006f9c:	a372      	add	r3, pc, #456	; (adr r3, 8007168 <atan+0x2c0>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f7f9 f937 	bl	8000214 <__adddf3>
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	463b      	mov	r3, r7
 8006faa:	f7f9 fae9 	bl	8000580 <__aeabi_dmul>
 8006fae:	a370      	add	r3, pc, #448	; (adr r3, 8007170 <atan+0x2c8>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 f92e 	bl	8000214 <__adddf3>
 8006fb8:	4632      	mov	r2, r6
 8006fba:	463b      	mov	r3, r7
 8006fbc:	f7f9 fae0 	bl	8000580 <__aeabi_dmul>
 8006fc0:	a36d      	add	r3, pc, #436	; (adr r3, 8007178 <atan+0x2d0>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 f925 	bl	8000214 <__adddf3>
 8006fca:	4632      	mov	r2, r6
 8006fcc:	463b      	mov	r3, r7
 8006fce:	f7f9 fad7 	bl	8000580 <__aeabi_dmul>
 8006fd2:	a36b      	add	r3, pc, #428	; (adr r3, 8007180 <atan+0x2d8>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 f91c 	bl	8000214 <__adddf3>
 8006fdc:	4632      	mov	r2, r6
 8006fde:	463b      	mov	r3, r7
 8006fe0:	f7f9 face 	bl	8000580 <__aeabi_dmul>
 8006fe4:	a368      	add	r3, pc, #416	; (adr r3, 8007188 <atan+0x2e0>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f7f9 f913 	bl	8000214 <__adddf3>
 8006fee:	4642      	mov	r2, r8
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	f7f9 fac5 	bl	8000580 <__aeabi_dmul>
 8006ff6:	a366      	add	r3, pc, #408	; (adr r3, 8007190 <atan+0x2e8>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	4689      	mov	r9, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 fabc 	bl	8000580 <__aeabi_dmul>
 8007008:	a363      	add	r3, pc, #396	; (adr r3, 8007198 <atan+0x2f0>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 f8ff 	bl	8000210 <__aeabi_dsub>
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	f7f9 fab3 	bl	8000580 <__aeabi_dmul>
 800701a:	a361      	add	r3, pc, #388	; (adr r3, 80071a0 <atan+0x2f8>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f7f9 f8f6 	bl	8000210 <__aeabi_dsub>
 8007024:	4632      	mov	r2, r6
 8007026:	463b      	mov	r3, r7
 8007028:	f7f9 faaa 	bl	8000580 <__aeabi_dmul>
 800702c:	a35e      	add	r3, pc, #376	; (adr r3, 80071a8 <atan+0x300>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f8ed 	bl	8000210 <__aeabi_dsub>
 8007036:	4632      	mov	r2, r6
 8007038:	463b      	mov	r3, r7
 800703a:	f7f9 faa1 	bl	8000580 <__aeabi_dmul>
 800703e:	a35c      	add	r3, pc, #368	; (adr r3, 80071b0 <atan+0x308>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f7f9 f8e4 	bl	8000210 <__aeabi_dsub>
 8007048:	4632      	mov	r2, r6
 800704a:	463b      	mov	r3, r7
 800704c:	f7f9 fa98 	bl	8000580 <__aeabi_dmul>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4640      	mov	r0, r8
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 f8dc 	bl	8000214 <__adddf3>
 800705c:	4622      	mov	r2, r4
 800705e:	462b      	mov	r3, r5
 8007060:	f7f9 fa8e 	bl	8000580 <__aeabi_dmul>
 8007064:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	d14b      	bne.n	8007106 <atan+0x25e>
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 f8cd 	bl	8000210 <__aeabi_dsub>
 8007076:	e72c      	b.n	8006ed2 <atan+0x2a>
 8007078:	ee10 0a10 	vmov	r0, s0
 800707c:	4b53      	ldr	r3, [pc, #332]	; (80071cc <atan+0x324>)
 800707e:	2200      	movs	r2, #0
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 f8c5 	bl	8000210 <__aeabi_dsub>
 8007086:	4b51      	ldr	r3, [pc, #324]	; (80071cc <atan+0x324>)
 8007088:	4606      	mov	r6, r0
 800708a:	460f      	mov	r7, r1
 800708c:	2200      	movs	r2, #0
 800708e:	4620      	mov	r0, r4
 8007090:	4629      	mov	r1, r5
 8007092:	f7f9 f8bf 	bl	8000214 <__adddf3>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fb99 	bl	80007d4 <__aeabi_ddiv>
 80070a2:	f04f 0a01 	mov.w	sl, #1
 80070a6:	4604      	mov	r4, r0
 80070a8:	460d      	mov	r5, r1
 80070aa:	e764      	b.n	8006f76 <atan+0xce>
 80070ac:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <atan+0x32c>)
 80070ae:	429e      	cmp	r6, r3
 80070b0:	da1d      	bge.n	80070ee <atan+0x246>
 80070b2:	ee10 0a10 	vmov	r0, s0
 80070b6:	4b48      	ldr	r3, [pc, #288]	; (80071d8 <atan+0x330>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	4629      	mov	r1, r5
 80070bc:	f7f9 f8a8 	bl	8000210 <__aeabi_dsub>
 80070c0:	4b45      	ldr	r3, [pc, #276]	; (80071d8 <atan+0x330>)
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	2200      	movs	r2, #0
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 fa58 	bl	8000580 <__aeabi_dmul>
 80070d0:	4b3e      	ldr	r3, [pc, #248]	; (80071cc <atan+0x324>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7f9 f89e 	bl	8000214 <__adddf3>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f7f9 fb78 	bl	80007d4 <__aeabi_ddiv>
 80070e4:	f04f 0a02 	mov.w	sl, #2
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	e743      	b.n	8006f76 <atan+0xce>
 80070ee:	462b      	mov	r3, r5
 80070f0:	ee10 2a10 	vmov	r2, s0
 80070f4:	4939      	ldr	r1, [pc, #228]	; (80071dc <atan+0x334>)
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7f9 fb6c 	bl	80007d4 <__aeabi_ddiv>
 80070fc:	f04f 0a03 	mov.w	sl, #3
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	e737      	b.n	8006f76 <atan+0xce>
 8007106:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <atan+0x338>)
 8007108:	4e36      	ldr	r6, [pc, #216]	; (80071e4 <atan+0x33c>)
 800710a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800710e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007112:	e9da 2300 	ldrd	r2, r3, [sl]
 8007116:	f7f9 f87b 	bl	8000210 <__aeabi_dsub>
 800711a:	4622      	mov	r2, r4
 800711c:	462b      	mov	r3, r5
 800711e:	f7f9 f877 	bl	8000210 <__aeabi_dsub>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	e9d6 0100 	ldrd	r0, r1, [r6]
 800712a:	f7f9 f871 	bl	8000210 <__aeabi_dsub>
 800712e:	f1bb 0f00 	cmp.w	fp, #0
 8007132:	4604      	mov	r4, r0
 8007134:	460d      	mov	r5, r1
 8007136:	f6bf aed6 	bge.w	8006ee6 <atan+0x3e>
 800713a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800713e:	461d      	mov	r5, r3
 8007140:	e6d1      	b.n	8006ee6 <atan+0x3e>
 8007142:	a51d      	add	r5, pc, #116	; (adr r5, 80071b8 <atan+0x310>)
 8007144:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007148:	e6cd      	b.n	8006ee6 <atan+0x3e>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	54442d18 	.word	0x54442d18
 8007154:	bff921fb 	.word	0xbff921fb
 8007158:	8800759c 	.word	0x8800759c
 800715c:	7e37e43c 	.word	0x7e37e43c
 8007160:	e322da11 	.word	0xe322da11
 8007164:	3f90ad3a 	.word	0x3f90ad3a
 8007168:	24760deb 	.word	0x24760deb
 800716c:	3fa97b4b 	.word	0x3fa97b4b
 8007170:	a0d03d51 	.word	0xa0d03d51
 8007174:	3fb10d66 	.word	0x3fb10d66
 8007178:	c54c206e 	.word	0xc54c206e
 800717c:	3fb745cd 	.word	0x3fb745cd
 8007180:	920083ff 	.word	0x920083ff
 8007184:	3fc24924 	.word	0x3fc24924
 8007188:	5555550d 	.word	0x5555550d
 800718c:	3fd55555 	.word	0x3fd55555
 8007190:	2c6a6c2f 	.word	0x2c6a6c2f
 8007194:	bfa2b444 	.word	0xbfa2b444
 8007198:	52defd9a 	.word	0x52defd9a
 800719c:	3fadde2d 	.word	0x3fadde2d
 80071a0:	af749a6d 	.word	0xaf749a6d
 80071a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80071a8:	fe231671 	.word	0xfe231671
 80071ac:	3fbc71c6 	.word	0x3fbc71c6
 80071b0:	9998ebc4 	.word	0x9998ebc4
 80071b4:	3fc99999 	.word	0x3fc99999
 80071b8:	54442d18 	.word	0x54442d18
 80071bc:	3ff921fb 	.word	0x3ff921fb
 80071c0:	440fffff 	.word	0x440fffff
 80071c4:	7ff00000 	.word	0x7ff00000
 80071c8:	3fdbffff 	.word	0x3fdbffff
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	3ff2ffff 	.word	0x3ff2ffff
 80071d4:	40038000 	.word	0x40038000
 80071d8:	3ff80000 	.word	0x3ff80000
 80071dc:	bff00000 	.word	0xbff00000
 80071e0:	08007700 	.word	0x08007700
 80071e4:	080076e0 	.word	0x080076e0

080071e8 <fabs>:
 80071e8:	ec51 0b10 	vmov	r0, r1, d0
 80071ec:	ee10 2a10 	vmov	r2, s0
 80071f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071f4:	ec43 2b10 	vmov	d0, r2, r3
 80071f8:	4770      	bx	lr
 80071fa:	0000      	movs	r0, r0
 80071fc:	0000      	movs	r0, r0
	...

08007200 <floor>:
 8007200:	ec51 0b10 	vmov	r0, r1, d0
 8007204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007208:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800720c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007210:	2e13      	cmp	r6, #19
 8007212:	ee10 5a10 	vmov	r5, s0
 8007216:	ee10 8a10 	vmov	r8, s0
 800721a:	460c      	mov	r4, r1
 800721c:	dc32      	bgt.n	8007284 <floor+0x84>
 800721e:	2e00      	cmp	r6, #0
 8007220:	da14      	bge.n	800724c <floor+0x4c>
 8007222:	a333      	add	r3, pc, #204	; (adr r3, 80072f0 <floor+0xf0>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f8 fff4 	bl	8000214 <__adddf3>
 800722c:	2200      	movs	r2, #0
 800722e:	2300      	movs	r3, #0
 8007230:	f7f9 fc36 	bl	8000aa0 <__aeabi_dcmpgt>
 8007234:	b138      	cbz	r0, 8007246 <floor+0x46>
 8007236:	2c00      	cmp	r4, #0
 8007238:	da57      	bge.n	80072ea <floor+0xea>
 800723a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800723e:	431d      	orrs	r5, r3
 8007240:	d001      	beq.n	8007246 <floor+0x46>
 8007242:	4c2d      	ldr	r4, [pc, #180]	; (80072f8 <floor+0xf8>)
 8007244:	2500      	movs	r5, #0
 8007246:	4621      	mov	r1, r4
 8007248:	4628      	mov	r0, r5
 800724a:	e025      	b.n	8007298 <floor+0x98>
 800724c:	4f2b      	ldr	r7, [pc, #172]	; (80072fc <floor+0xfc>)
 800724e:	4137      	asrs	r7, r6
 8007250:	ea01 0307 	and.w	r3, r1, r7
 8007254:	4303      	orrs	r3, r0
 8007256:	d01f      	beq.n	8007298 <floor+0x98>
 8007258:	a325      	add	r3, pc, #148	; (adr r3, 80072f0 <floor+0xf0>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f8 ffd9 	bl	8000214 <__adddf3>
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	f7f9 fc1b 	bl	8000aa0 <__aeabi_dcmpgt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d0eb      	beq.n	8007246 <floor+0x46>
 800726e:	2c00      	cmp	r4, #0
 8007270:	bfbe      	ittt	lt
 8007272:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007276:	fa43 f606 	asrlt.w	r6, r3, r6
 800727a:	19a4      	addlt	r4, r4, r6
 800727c:	ea24 0407 	bic.w	r4, r4, r7
 8007280:	2500      	movs	r5, #0
 8007282:	e7e0      	b.n	8007246 <floor+0x46>
 8007284:	2e33      	cmp	r6, #51	; 0x33
 8007286:	dd0b      	ble.n	80072a0 <floor+0xa0>
 8007288:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800728c:	d104      	bne.n	8007298 <floor+0x98>
 800728e:	ee10 2a10 	vmov	r2, s0
 8007292:	460b      	mov	r3, r1
 8007294:	f7f8 ffbe 	bl	8000214 <__adddf3>
 8007298:	ec41 0b10 	vmov	d0, r0, r1
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	fa23 f707 	lsr.w	r7, r3, r7
 80072ac:	4207      	tst	r7, r0
 80072ae:	d0f3      	beq.n	8007298 <floor+0x98>
 80072b0:	a30f      	add	r3, pc, #60	; (adr r3, 80072f0 <floor+0xf0>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f8 ffad 	bl	8000214 <__adddf3>
 80072ba:	2200      	movs	r2, #0
 80072bc:	2300      	movs	r3, #0
 80072be:	f7f9 fbef 	bl	8000aa0 <__aeabi_dcmpgt>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d0bf      	beq.n	8007246 <floor+0x46>
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	da02      	bge.n	80072d0 <floor+0xd0>
 80072ca:	2e14      	cmp	r6, #20
 80072cc:	d103      	bne.n	80072d6 <floor+0xd6>
 80072ce:	3401      	adds	r4, #1
 80072d0:	ea25 0507 	bic.w	r5, r5, r7
 80072d4:	e7b7      	b.n	8007246 <floor+0x46>
 80072d6:	2301      	movs	r3, #1
 80072d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80072dc:	fa03 f606 	lsl.w	r6, r3, r6
 80072e0:	4435      	add	r5, r6
 80072e2:	4545      	cmp	r5, r8
 80072e4:	bf38      	it	cc
 80072e6:	18e4      	addcc	r4, r4, r3
 80072e8:	e7f2      	b.n	80072d0 <floor+0xd0>
 80072ea:	2500      	movs	r5, #0
 80072ec:	462c      	mov	r4, r5
 80072ee:	e7aa      	b.n	8007246 <floor+0x46>
 80072f0:	8800759c 	.word	0x8800759c
 80072f4:	7e37e43c 	.word	0x7e37e43c
 80072f8:	bff00000 	.word	0xbff00000
 80072fc:	000fffff 	.word	0x000fffff

08007300 <nan>:
 8007300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007308 <nan+0x8>
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	00000000 	.word	0x00000000
 800730c:	7ff80000 	.word	0x7ff80000

08007310 <scalbn>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	ec55 4b10 	vmov	r4, r5, d0
 8007316:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800731a:	4606      	mov	r6, r0
 800731c:	462b      	mov	r3, r5
 800731e:	b99a      	cbnz	r2, 8007348 <scalbn+0x38>
 8007320:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007324:	4323      	orrs	r3, r4
 8007326:	d036      	beq.n	8007396 <scalbn+0x86>
 8007328:	4b39      	ldr	r3, [pc, #228]	; (8007410 <scalbn+0x100>)
 800732a:	4629      	mov	r1, r5
 800732c:	ee10 0a10 	vmov	r0, s0
 8007330:	2200      	movs	r2, #0
 8007332:	f7f9 f925 	bl	8000580 <__aeabi_dmul>
 8007336:	4b37      	ldr	r3, [pc, #220]	; (8007414 <scalbn+0x104>)
 8007338:	429e      	cmp	r6, r3
 800733a:	4604      	mov	r4, r0
 800733c:	460d      	mov	r5, r1
 800733e:	da10      	bge.n	8007362 <scalbn+0x52>
 8007340:	a32b      	add	r3, pc, #172	; (adr r3, 80073f0 <scalbn+0xe0>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e03a      	b.n	80073be <scalbn+0xae>
 8007348:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800734c:	428a      	cmp	r2, r1
 800734e:	d10c      	bne.n	800736a <scalbn+0x5a>
 8007350:	ee10 2a10 	vmov	r2, s0
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f8 ff5c 	bl	8000214 <__adddf3>
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	e019      	b.n	8007396 <scalbn+0x86>
 8007362:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007366:	460b      	mov	r3, r1
 8007368:	3a36      	subs	r2, #54	; 0x36
 800736a:	4432      	add	r2, r6
 800736c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007370:	428a      	cmp	r2, r1
 8007372:	dd08      	ble.n	8007386 <scalbn+0x76>
 8007374:	2d00      	cmp	r5, #0
 8007376:	a120      	add	r1, pc, #128	; (adr r1, 80073f8 <scalbn+0xe8>)
 8007378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737c:	da1c      	bge.n	80073b8 <scalbn+0xa8>
 800737e:	a120      	add	r1, pc, #128	; (adr r1, 8007400 <scalbn+0xf0>)
 8007380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007384:	e018      	b.n	80073b8 <scalbn+0xa8>
 8007386:	2a00      	cmp	r2, #0
 8007388:	dd08      	ble.n	800739c <scalbn+0x8c>
 800738a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800738e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007392:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007396:	ec45 4b10 	vmov	d0, r4, r5
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80073a0:	da19      	bge.n	80073d6 <scalbn+0xc6>
 80073a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073a6:	429e      	cmp	r6, r3
 80073a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80073ac:	dd0a      	ble.n	80073c4 <scalbn+0xb4>
 80073ae:	a112      	add	r1, pc, #72	; (adr r1, 80073f8 <scalbn+0xe8>)
 80073b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e2      	bne.n	800737e <scalbn+0x6e>
 80073b8:	a30f      	add	r3, pc, #60	; (adr r3, 80073f8 <scalbn+0xe8>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f7f9 f8df 	bl	8000580 <__aeabi_dmul>
 80073c2:	e7cb      	b.n	800735c <scalbn+0x4c>
 80073c4:	a10a      	add	r1, pc, #40	; (adr r1, 80073f0 <scalbn+0xe0>)
 80073c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0b8      	beq.n	8007340 <scalbn+0x30>
 80073ce:	a10e      	add	r1, pc, #56	; (adr r1, 8007408 <scalbn+0xf8>)
 80073d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d4:	e7b4      	b.n	8007340 <scalbn+0x30>
 80073d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073da:	3236      	adds	r2, #54	; 0x36
 80073dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80073e4:	4620      	mov	r0, r4
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <scalbn+0x108>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	e7e8      	b.n	80073be <scalbn+0xae>
 80073ec:	f3af 8000 	nop.w
 80073f0:	c2f8f359 	.word	0xc2f8f359
 80073f4:	01a56e1f 	.word	0x01a56e1f
 80073f8:	8800759c 	.word	0x8800759c
 80073fc:	7e37e43c 	.word	0x7e37e43c
 8007400:	8800759c 	.word	0x8800759c
 8007404:	fe37e43c 	.word	0xfe37e43c
 8007408:	c2f8f359 	.word	0xc2f8f359
 800740c:	81a56e1f 	.word	0x81a56e1f
 8007410:	43500000 	.word	0x43500000
 8007414:	ffff3cb0 	.word	0xffff3cb0
 8007418:	3c900000 	.word	0x3c900000

0800741c <__errno>:
 800741c:	4b01      	ldr	r3, [pc, #4]	; (8007424 <__errno+0x8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000038 	.word	0x20000038

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4d0d      	ldr	r5, [pc, #52]	; (8007460 <__libc_init_array+0x38>)
 800742c:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	2600      	movs	r6, #0
 8007434:	42a6      	cmp	r6, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	4d0b      	ldr	r5, [pc, #44]	; (8007468 <__libc_init_array+0x40>)
 800743a:	4c0c      	ldr	r4, [pc, #48]	; (800746c <__libc_init_array+0x44>)
 800743c:	f000 f82e 	bl	800749c <_init>
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	2600      	movs	r6, #0
 8007446:	42a6      	cmp	r6, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007450:	4798      	blx	r3
 8007452:	3601      	adds	r6, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f855 3b04 	ldr.w	r3, [r5], #4
 800745a:	4798      	blx	r3
 800745c:	3601      	adds	r6, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	08007728 	.word	0x08007728
 8007464:	08007728 	.word	0x08007728
 8007468:	08007728 	.word	0x08007728
 800746c:	08007730 	.word	0x08007730

08007470 <memcpy>:
 8007470:	440a      	add	r2, r1
 8007472:	4291      	cmp	r1, r2
 8007474:	f100 33ff 	add.w	r3, r0, #4294967295
 8007478:	d100      	bne.n	800747c <memcpy+0xc>
 800747a:	4770      	bx	lr
 800747c:	b510      	push	{r4, lr}
 800747e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007486:	4291      	cmp	r1, r2
 8007488:	d1f9      	bne.n	800747e <memcpy+0xe>
 800748a:	bd10      	pop	{r4, pc}

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <_init>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	bf00      	nop
 80074a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a2:	bc08      	pop	{r3}
 80074a4:	469e      	mov	lr, r3
 80074a6:	4770      	bx	lr

080074a8 <_fini>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr

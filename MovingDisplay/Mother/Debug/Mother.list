
Mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000824c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008418  08008418  00018418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008688  08008688  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008690  08008690  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800869c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000078  08008714  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08008714  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172f0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa6  00000000  00000000  00037398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00039e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002501e  00000000  00000000  0003bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015102  00000000  00000000  00060dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ab1  00000000  00000000  00075eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab4  00000000  00000000  0014b9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080083fc 	.word	0x080083fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	080083fc 	.word	0x080083fc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b974 	b.w	8000f10 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	4604      	mov	r4, r0
 8000c48:	468e      	mov	lr, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d14d      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	4694      	mov	ip, r2
 8000c52:	d969      	bls.n	8000d28 <__udivmoddi4+0xe8>
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	b152      	cbz	r2, 8000c70 <__udivmoddi4+0x30>
 8000c5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5e:	f1c2 0120 	rsb	r1, r2, #32
 8000c62:	fa20 f101 	lsr.w	r1, r0, r1
 8000c66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6e:	4094      	lsls	r4, r2
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	0c21      	lsrs	r1, r4, #16
 8000c76:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7a:	fa1f f78c 	uxth.w	r7, ip
 8000c7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c86:	fb06 f107 	mul.w	r1, r6, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c96:	f080 811f 	bcs.w	8000ed8 <__udivmoddi4+0x298>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 811c 	bls.w	8000ed8 <__udivmoddi4+0x298>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a5b      	subs	r3, r3, r1
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb4:	fb00 f707 	mul.w	r7, r0, r7
 8000cb8:	42a7      	cmp	r7, r4
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x92>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc4:	f080 810a 	bcs.w	8000edc <__udivmoddi4+0x29c>
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	f240 8107 	bls.w	8000edc <__udivmoddi4+0x29c>
 8000cce:	4464      	add	r4, ip
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	1be4      	subs	r4, r4, r7
 8000cd8:	2600      	movs	r6, #0
 8000cda:	b11d      	cbz	r5, 8000ce4 <__udivmoddi4+0xa4>
 8000cdc:	40d4      	lsrs	r4, r2
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0xc2>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80ef 	beq.w	8000ed2 <__udivmoddi4+0x292>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x160>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xd4>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80f9 	bhi.w	8000f06 <__udivmoddi4+0x2c6>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e0      	beq.n	8000ce4 <__udivmoddi4+0xa4>
 8000d22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d26:	e7dd      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000d28:	b902      	cbnz	r2, 8000d2c <__udivmoddi4+0xec>
 8000d2a:	deff      	udf	#255	; 0xff
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	f040 8092 	bne.w	8000e5a <__udivmoddi4+0x21a>
 8000d36:	eba1 010c 	sub.w	r1, r1, ip
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2601      	movs	r6, #1
 8000d44:	0c20      	lsrs	r0, r4, #16
 8000d46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d52:	fb0e f003 	mul.w	r0, lr, r3
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x12c>
 8000d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x12a>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2c0>
 8000d6a:	4643      	mov	r3, r8
 8000d6c:	1a09      	subs	r1, r1, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d74:	fb07 1110 	mls	r1, r7, r0, r1
 8000d78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x156>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x154>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2ca>
 8000d94:	4608      	mov	r0, r1
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	e79c      	b.n	8000cda <__udivmoddi4+0x9a>
 8000da0:	f1c6 0720 	rsb	r7, r6, #32
 8000da4:	40b3      	lsls	r3, r6
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa20 f407 	lsr.w	r4, r0, r7
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	431c      	orrs	r4, r3
 8000db8:	40f9      	lsrs	r1, r7
 8000dba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc6:	0c20      	lsrs	r0, r4, #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	fa02 f206 	lsl.w	r2, r2, r6
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b8>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2bc>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2bc>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e00:	fb09 1110 	mls	r1, r9, r0, r1
 8000e04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0c:	458e      	cmp	lr, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1e2>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1a:	458e      	cmp	lr, r1
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2b4>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e26:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2a:	eba1 010e 	sub.w	r1, r1, lr
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46a6      	mov	lr, r4
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x2a0>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x212>
 8000e3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e42:	fa01 f707 	lsl.w	r7, r1, r7
 8000e46:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4a:	40f1      	lsrs	r1, r6
 8000e4c:	431f      	orrs	r7, r3
 8000e4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	f1c2 0320 	rsb	r3, r2, #32
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e78:	fb07 3610 	mls	r6, r7, r0, r3
 8000e7c:	0c0b      	lsrs	r3, r1, #16
 8000e7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e82:	fb00 f60e 	mul.w	r6, r0, lr
 8000e86:	429e      	cmp	r6, r3
 8000e88:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x260>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b8>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1b9b      	subs	r3, r3, r6
 8000ea2:	b289      	uxth	r1, r1
 8000ea4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea8:	fb07 3316 	mls	r3, r7, r6, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x28a>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2b0>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0x104>
 8000ed2:	462e      	mov	r6, r5
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	e705      	b.n	8000ce4 <__udivmoddi4+0xa4>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	e6e3      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6f8      	b.n	8000cd2 <__udivmoddi4+0x92>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f8>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eec:	3801      	subs	r0, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f8>
 8000ef0:	4646      	mov	r6, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x28a>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1e2>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x260>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b8>
 8000f00:	3b02      	subs	r3, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x12c>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e709      	b.n	8000d1e <__udivmoddi4+0xde>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x156>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000f14:	b084      	sub	sp, #16
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af02      	add	r7, sp, #8
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	f107 001c 	add.w	r0, r7, #28
 8000f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	f107 011c 	add.w	r1, r7, #28
 8000f2e:	2254      	movs	r2, #84	; 0x54
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 fa4d 	bl	80083d0 <memcpy>
	device_address_ = device_address;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000f3c:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000f3e:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f42:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f44:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	f107 001c 	add.w	r0, r7, #28
 8000f56:	2364      	movs	r3, #100	; 0x64
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f002 fb72 	bl	8003644 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f60:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f64:	f001 fbbe 	bl	80026e4 <HAL_Delay>
}
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f74:	b004      	add	sp, #16
 8000f76:	4770      	bx	lr

08000f78 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b099      	sub	sp, #100	; 0x64
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f80:	2320      	movs	r3, #32
 8000f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	1d18      	adds	r0, r3, #4
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	b299      	uxth	r1, r3
 8000f94:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f002 fb51 	bl	8003644 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	1d18      	adds	r0, r3, #4
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2308      	movs	r3, #8
 8000fba:	f002 fc41 	bl	8003840 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fe6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000ffa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 800100e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
 8001026:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a08 	vstr	s15, [r7, #32]
 800103e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001056:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eddf 6a12 	vldr	s13, [pc, #72]	; 80010ac <_ZN6BNO05514get_quaternionEv+0x134>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800106e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800107c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800107e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001084:	ee06 0a10 	vmov	s12, r0
 8001088:	ee06 1a90 	vmov	s13, r1
 800108c:	ee07 2a10 	vmov	s14, r2
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a46 	vmov.f32	s0, s12
 8001098:	eef0 0a66 	vmov.f32	s1, s13
 800109c:	eeb0 1a47 	vmov.f32	s2, s14
 80010a0:	eef0 1a67 	vmov.f32	s3, s15
 80010a4:	375c      	adds	r7, #92	; 0x5c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	46800000 	.word	0x46800000

080010b0 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b09a      	sub	sp, #104	; 0x68
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff ff5d 	bl	8000f78 <_ZN6BNO05514get_quaternionEv>
 80010be:	eeb0 6a40 	vmov.f32	s12, s0
 80010c2:	eef0 6a60 	vmov.f32	s13, s1
 80010c6:	eeb0 7a41 	vmov.f32	s14, s2
 80010ca:	eef0 7a61 	vmov.f32	s15, s3
 80010ce:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80010d2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80010d6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80010da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 80010de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff f9e7 	bl	80004d0 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	f7ff f885 	bl	8000214 <__adddf3>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 8001112:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001116:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff f9cd 	bl	80004d0 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f7ff f86b 	bl	8000214 <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4960      	ldr	r1, [pc, #384]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 8001148:	f7ff f862 	bl	8000210 <__aeabi_dsub>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001154:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001158:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800115c:	f005 fbd8 	bl	8006910 <atan2>
 8001160:	ec53 2b10 	vmov	r2, r3, d0
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd02 	bl	8000b70 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001170:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001174:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001180:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	ee17 0a90 	vmov	r0, s15
 8001190:	f7ff f99e 	bl	80004d0 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	f7ff f83c 	bl	8000214 <__adddf3>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 80011a4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80011a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fc69 	bl	8000a8c <__aeabi_dcmpge>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00e      	beq.n	80011de <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 80011c0:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80011c4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80012c0 <_ZN6BNO0559get_eularEv+0x210>
 80011c8:	f005 fb04 	bl	80067d4 <copysign>
 80011cc:	ec53 2b10 	vmov	r2, r3, d0
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fccc 	bl	8000b70 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	e00b      	b.n	80011f6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 80011de:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011e2:	f005 fb61 	bl	80068a8 <asin>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcbf 	bl	8000b70 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001202:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800120a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f95b 	bl	80004d0 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	f7fe fff9 	bl	8000214 <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 800122a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800122e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001236:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800123a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800123e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f941 	bl	80004d0 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	f7fe ffdf 	bl	8000214 <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	491a      	ldr	r1, [pc, #104]	; (80012c8 <_ZN6BNO0559get_eularEv+0x218>)
 8001260:	f7fe ffd6 	bl	8000210 <__aeabi_dsub>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800126c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001270:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001274:	f005 fb4c 	bl	8006910 <atan2>
 8001278:	ec53 2b10 	vmov	r2, r3, d0
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc76 	bl	8000b70 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	623b      	str	r3, [r7, #32]

	return e;
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	f107 0218 	add.w	r2, r7, #24
 8001290:	ca07      	ldmia	r2, {r0, r1, r2}
 8001292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001296:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129c:	ee06 1a90 	vmov	s13, r1
 80012a0:	ee07 2a10 	vmov	s14, r2
 80012a4:	ee07 3a90 	vmov	s15, r3
}
 80012a8:	eeb0 0a66 	vmov.f32	s0, s13
 80012ac:	eef0 0a47 	vmov.f32	s1, s14
 80012b0:	eeb0 1a67 	vmov.f32	s2, s15
 80012b4:	3768      	adds	r7, #104	; 0x68
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	54411744 	.word	0x54411744
 80012c4:	3ff921fb 	.word	0x3ff921fb
 80012c8:	3ff00000 	.word	0x3ff00000

080012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>:
#include "m_transmit.h"

M_TRANSMIT::M_TRANSMIT(UART_HandleTypeDef* uart, uint8_t id){
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	4613      	mov	r3, r2
 80012d8:	71fb      	strb	r3, [r7, #7]
    UART=uart;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	605a      	str	r2, [r3, #4]
    ID=id;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	70da      	strb	r2, [r3, #3]
    send_ID = id + 190;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	3b42      	subs	r3, #66	; 0x42
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	721a      	strb	r2, [r3, #8]
}
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZN10M_TRANSMIT10get_travelEv>:

int M_TRANSMIT::get_travel(){
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(UART, &send_ID, 1, 100);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6858      	ldr	r0, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f103 0108 	add.w	r1, r3, #8
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	2201      	movs	r2, #1
 8001314:	f004 fbcb 	bl	8005aae <HAL_UART_Transmit>
    HAL_UART_Receive(UART, rcvBuf, 3, 100);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6858      	ldr	r0, [r3, #4]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2203      	movs	r2, #3
 8001322:	f004 fc56 	bl	8005bd2 <HAL_UART_Receive>

    int hyaku = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
    int travel = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

    for(int j = 1; j <3 ; j++){
 800132e:	2301      	movs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	dc13      	bgt.n	8001360 <_ZN10M_TRANSMIT10get_travelEv+0x62>
        travel = travel + (rcvBuf[j]*hyaku);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4413      	add	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        hyaku = hyaku*100;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
    for(int j = 1; j <3 ; j++){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e7e8      	b.n	8001332 <_ZN10M_TRANSMIT10get_travelEv+0x34>
    }
    travel-=5000;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8001366:	3b08      	subs	r3, #8
 8001368:	613b      	str	r3, [r7, #16]
    HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f001 f9ba 	bl	80026e4 <HAL_Delay>

    return travel;
 8001370:	693b      	ldr	r3, [r7, #16]

 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <_Z9set_arrayiiihhh>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_array(int tx, int cx, int cz, uint8_t r, uint8_t h, uint8_t h2){
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	70fb      	strb	r3, [r7, #3]
	send_array[0]=220;
 800138a:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 800138c:	22dc      	movs	r2, #220	; 0xdc
 800138e:	701a      	strb	r2, [r3, #0]
	tx += 5000; cx += 5000; cz += 5000;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001396:	3308      	adds	r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013a0:	3308      	adds	r3, #8
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80013aa:	3308      	adds	r3, #8
 80013ac:	607b      	str	r3, [r7, #4]
	uint8_t h_out = h/2.5;
 80013ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f87a 	bl	80004ac <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <_Z9set_arrayiiihhh+0x178>)
 80013be:	f7ff fa09 	bl	80007d4 <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbb1 	bl	8000b30 <__aeabi_d2uiz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	77fb      	strb	r3, [r7, #31]
	uint8_t h_out2 = h2/2.5;
 80013d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f868 	bl	80004ac <__aeabi_i2d>
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <_Z9set_arrayiiihhh+0x178>)
 80013e2:	f7ff f9f7 	bl	80007d4 <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fb9f 	bl	8000b30 <__aeabi_d2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	77bb      	strb	r3, [r7, #30]
	for(int i = 1; i <3 ;i++){
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	dc1c      	bgt.n	800143a <_Z9set_arrayiiihhh+0xbe>
		send_array[i] = tx%100;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4a3d      	ldr	r2, [pc, #244]	; (80014f8 <_Z9set_arrayiiihhh+0x17c>)
 8001404:	fb82 1203 	smull	r1, r2, r2, r3
 8001408:	1151      	asrs	r1, r2, #5
 800140a:	17da      	asrs	r2, r3, #31
 800140c:	1a8a      	subs	r2, r1, r2
 800140e:	2164      	movs	r1, #100	; 0x64
 8001410:	fb01 f202 	mul.w	r2, r1, r2
 8001414:	1a9a      	subs	r2, r3, r2
 8001416:	b2d1      	uxtb	r1, r2
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4413      	add	r3, r2
 800141e:	460a      	mov	r2, r1
 8001420:	701a      	strb	r2, [r3, #0]
		tx = (int)tx/100;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4a34      	ldr	r2, [pc, #208]	; (80014f8 <_Z9set_arrayiiihhh+0x17c>)
 8001426:	fb82 1203 	smull	r1, r2, r2, r3
 800142a:	1152      	asrs	r2, r2, #5
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	60fb      	str	r3, [r7, #12]
	for(int i = 1; i <3 ;i++){
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	3301      	adds	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	e7df      	b.n	80013fa <_Z9set_arrayiiihhh+0x7e>
	}
	for(int i = 3; i <5 ;i++){
 800143a:	2303      	movs	r3, #3
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b04      	cmp	r3, #4
 8001442:	dc1c      	bgt.n	800147e <_Z9set_arrayiiihhh+0x102>
		send_array[i] = cx%100;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4a2c      	ldr	r2, [pc, #176]	; (80014f8 <_Z9set_arrayiiihhh+0x17c>)
 8001448:	fb82 1203 	smull	r1, r2, r2, r3
 800144c:	1151      	asrs	r1, r2, #5
 800144e:	17da      	asrs	r2, r3, #31
 8001450:	1a8a      	subs	r2, r1, r2
 8001452:	2164      	movs	r1, #100	; 0x64
 8001454:	fb01 f202 	mul.w	r2, r1, r2
 8001458:	1a9a      	subs	r2, r3, r2
 800145a:	b2d1      	uxtb	r1, r2
 800145c:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	460a      	mov	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
		cx = (int)cx/100;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <_Z9set_arrayiiihhh+0x17c>)
 800146a:	fb82 1203 	smull	r1, r2, r2, r3
 800146e:	1152      	asrs	r2, r2, #5
 8001470:	17db      	asrs	r3, r3, #31
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	60bb      	str	r3, [r7, #8]
	for(int i = 3; i <5 ;i++){
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e7df      	b.n	800143e <_Z9set_arrayiiihhh+0xc2>
	}
	for(int i = 5; i <7 ;i++){
 800147e:	2305      	movs	r3, #5
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b06      	cmp	r3, #6
 8001486:	dc1c      	bgt.n	80014c2 <_Z9set_arrayiiihhh+0x146>
		send_array[i] = cz%100;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <_Z9set_arrayiiihhh+0x17c>)
 800148c:	fb82 1203 	smull	r1, r2, r2, r3
 8001490:	1151      	asrs	r1, r2, #5
 8001492:	17da      	asrs	r2, r3, #31
 8001494:	1a8a      	subs	r2, r1, r2
 8001496:	2164      	movs	r1, #100	; 0x64
 8001498:	fb01 f202 	mul.w	r2, r1, r2
 800149c:	1a9a      	subs	r2, r3, r2
 800149e:	b2d1      	uxtb	r1, r2
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4413      	add	r3, r2
 80014a6:	460a      	mov	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
		cz = (int)cz/100;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_Z9set_arrayiiihhh+0x17c>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1152      	asrs	r2, r2, #5
 80014b4:	17db      	asrs	r3, r3, #31
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	607b      	str	r3, [r7, #4]
	for(int i = 5; i <7 ;i++){
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	3301      	adds	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	e7df      	b.n	8001482 <_Z9set_arrayiiihhh+0x106>
	}
	send_array[7] = r;
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	71d3      	strb	r3, [r2, #7]
	if(h_out > 100){h_out = 100;}
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <_Z9set_arrayiiihhh+0x156>
 80014ce:	2364      	movs	r3, #100	; 0x64
 80014d0:	77fb      	strb	r3, [r7, #31]
	send_array[8] = h_out;
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	7213      	strb	r3, [r2, #8]
	if(h_out2 > 100){h_out2 = 100;}
 80014d8:	7fbb      	ldrb	r3, [r7, #30]
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <_Z9set_arrayiiihhh+0x166>
 80014de:	2364      	movs	r3, #100	; 0x64
 80014e0:	77bb      	strb	r3, [r7, #30]
	send_array[9] = h_out2;
 80014e2:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <_Z9set_arrayiiihhh+0x174>)
 80014e4:	7fbb      	ldrb	r3, [r7, #30]
 80014e6:	7253      	strb	r3, [r2, #9]
}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200002d0 	.word	0x200002d0
 80014f4:	40040000 	.word	0x40040000
 80014f8:	51eb851f 	.word	0x51eb851f

080014fc <HAL_TIM_PeriodElapsedCallback>:

void check_buf();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
//
//
//    	set_array(0, (-1)*-10, cz, 5, 200);
//    	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 9, 100);
//    }
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001514:	b0b2      	sub	sp, #200	; 0xc8
 8001516:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001518:	f001 f872 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151c:	f000 f9e8 	bl	80018f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001520:	f000 fb96 	bl	8001c50 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001524:	f000 fb74 	bl	8001c10 <_ZL11MX_DMA_Initv>
  MX_USART6_UART_Init();
 8001528:	f000 fb44 	bl	8001bb4 <_ZL19MX_USART6_UART_Initv>
  MX_USART3_UART_Init();
 800152c:	f000 fb14 	bl	8001b58 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8001530:	f000 fa54 	bl	80019dc <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001534:	f000 fa86 	bl	8001a44 <_ZL12MX_TIM3_Initv>
  MX_UART5_Init();
 8001538:	f000 fae0 	bl	8001afc <_ZL13MX_UART5_Initv>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 800153c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001540:	f001 f8d0 	bl	80026e4 <HAL_Delay>

  while (!ready) {
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <main+0x1e0>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d116      	bne.n	800157a <main+0x6a>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 800154c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001550:	220a      	movs	r2, #10
 8001552:	2150      	movs	r1, #80	; 0x50
 8001554:	4867      	ldr	r0, [pc, #412]	; (80016f4 <main+0x1e4>)
 8001556:	f002 fb99 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <main+0x62>
      ready = 1;
 800156a:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <main+0x1e0>)
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e7e8      	b.n	8001544 <main+0x34>
    } else {
      HAL_Delay(100);
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f001 f8b6 	bl	80026e4 <HAL_Delay>
  while (!ready) {
 8001578:	e7e4      	b.n	8001544 <main+0x34>
    }
  }

  xf = -1*odom1.get_travel();
 800157a:	485f      	ldr	r0, [pc, #380]	; (80016f8 <main+0x1e8>)
 800157c:	f7ff febf 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001580:	4603      	mov	r3, r0
 8001582:	425b      	negs	r3, r3
 8001584:	4a5d      	ldr	r2, [pc, #372]	; (80016fc <main+0x1ec>)
 8001586:	6013      	str	r3, [r2, #0]
  if(odom1.get_travel() <=-5000){Error = 1;}
 8001588:	485b      	ldr	r0, [pc, #364]	; (80016f8 <main+0x1e8>)
 800158a:	f7ff feb8 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 800158e:	4603      	mov	r3, r0
 8001590:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <main+0x1f0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	bfb4      	ite	lt
 8001596:	2301      	movlt	r3, #1
 8001598:	2300      	movge	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <main+0x96>
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <main+0x1f4>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
  yf = -1*odom2.get_travel();
 80015a6:	4858      	ldr	r0, [pc, #352]	; (8001708 <main+0x1f8>)
 80015a8:	f7ff fea9 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	425b      	negs	r3, r3
 80015b0:	4a56      	ldr	r2, [pc, #344]	; (800170c <main+0x1fc>)
 80015b2:	6013      	str	r3, [r2, #0]
  if(odom2.get_travel() <=-5000){Error = 1;}
 80015b4:	4854      	ldr	r0, [pc, #336]	; (8001708 <main+0x1f8>)
 80015b6:	f7ff fea2 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <main+0x1f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	bfb4      	ite	lt
 80015c2:	2301      	movlt	r3, #1
 80015c4:	2300      	movge	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <main+0xc2>
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <main+0x1f4>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2104      	movs	r1, #4
 80015d6:	484e      	ldr	r0, [pc, #312]	; (8001710 <main+0x200>)
 80015d8:	f001 fed6 	bl	8003388 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim3);
 80015dc:	484d      	ldr	r0, [pc, #308]	; (8001714 <main+0x204>)
 80015de:	f003 fde7 	bl	80051b0 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart5, rxBuf, sizeof(rxBuf));
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	494c      	ldr	r1, [pc, #304]	; (8001718 <main+0x208>)
 80015e6:	484d      	ldr	r0, [pc, #308]	; (800171c <main+0x20c>)
 80015e8:	f004 fb95 	bl	8005d16 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  unsigned char address = 0x28;
 80015ec:	2328      	movs	r3, #40	; 0x28
 80015ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  BNO055 bno055(hi2c1,address);
 80015f2:	4e40      	ldr	r6, [pc, #256]	; (80016f4 <main+0x1e4>)
 80015f4:	f107 081c 	add.w	r8, r7, #28
 80015f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80015fc:	9312      	str	r3, [sp, #72]	; 0x48
 80015fe:	4668      	mov	r0, sp
 8001600:	f106 030c 	add.w	r3, r6, #12
 8001604:	2248      	movs	r2, #72	; 0x48
 8001606:	4619      	mov	r1, r3
 8001608:	f006 fee2 	bl	80083d0 <memcpy>
 800160c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff fc7f 	bl	8000f14 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)==1){go_speed = 50;
 8001616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161a:	483d      	ldr	r0, [pc, #244]	; (8001710 <main+0x200>)
 800161c:	f001 fe9c 	bl	8003358 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <main+0x128>
 8001630:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <main+0x210>)
 8001632:	2232      	movs	r2, #50	; 0x32
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e002      	b.n	800163e <main+0x12e>
	}else{go_speed = 0;}
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <main+0x210>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

    travel_x = -1*odom1.get_travel() - xf;
 800163e:	482e      	ldr	r0, [pc, #184]	; (80016f8 <main+0x1e8>)
 8001640:	f7ff fe5d 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001644:	4603      	mov	r3, r0
 8001646:	425a      	negs	r2, r3
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <main+0x1ec>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a35      	ldr	r2, [pc, #212]	; (8001724 <main+0x214>)
 8001650:	6013      	str	r3, [r2, #0]
    travel_y = -1*odom2.get_travel() - yf;
 8001652:	482d      	ldr	r0, [pc, #180]	; (8001708 <main+0x1f8>)
 8001654:	f7ff fe53 	bl	80012fe <_ZN10M_TRANSMIT10get_travelEv>
 8001658:	4603      	mov	r3, r0
 800165a:	425a      	negs	r2, r3
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <main+0x1fc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <main+0x218>)
 8001664:	6013      	str	r3, [r2, #0]


    e = bno055.get_eular();
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd20 	bl	80010b0 <_ZN6BNO0559get_eularEv>
 8001670:	eef0 6a40 	vmov.f32	s13, s0
 8001674:	eeb0 7a60 	vmov.f32	s14, s1
 8001678:	eef0 7a41 	vmov.f32	s15, s2
 800167c:	edc7 6a00 	vstr	s13, [r7]
 8001680:	ed87 7a01 	vstr	s14, [r7, #4]
 8001684:	edc7 7a02 	vstr	s15, [r7, #8]
    rotate = -1*(e.z/3.1415)*180;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff20 	bl	80004d0 <__aeabi_f2d>
 8001690:	a315      	add	r3, pc, #84	; (adr r3, 80016e8 <main+0x1d8>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7ff f89d 	bl	80007d4 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <main+0x21c>)
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe ff67 	bl	8000580 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa59 	bl	8000b70 <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <main+0x220>)
 80016c2:	6013      	str	r3, [r2, #0]
    rotate = (int)rotate;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <main+0x220>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <main+0x220>)
 80016d4:	edc3 7a00 	vstr	s15, [r3]

    if(travel_x>200){
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <main+0x214>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2bc8      	cmp	r3, #200	; 0xc8
 80016de:	dd2b      	ble.n	8001738 <main+0x228>
    	goal_travel_x = 0;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <main+0x224>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e02e      	b.n	8001746 <main+0x236>
 80016e8:	c083126f 	.word	0xc083126f
 80016ec:	400921ca 	.word	0x400921ca
 80016f0:	20000284 	.word	0x20000284
 80016f4:	20000094 	.word	0x20000094
 80016f8:	2000026c 	.word	0x2000026c
 80016fc:	20000260 	.word	0x20000260
 8001700:	ffffec79 	.word	0xffffec79
 8001704:	200002cc 	.word	0x200002cc
 8001708:	20000278 	.word	0x20000278
 800170c:	20000268 	.word	0x20000268
 8001710:	40020400 	.word	0x40020400
 8001714:	200000e8 	.word	0x200000e8
 8001718:	200002e0 	.word	0x200002e0
 800171c:	20000130 	.word	0x20000130
 8001720:	20000004 	.word	0x20000004
 8001724:	2000025c 	.word	0x2000025c
 8001728:	20000264 	.word	0x20000264
 800172c:	40668000 	.word	0x40668000
 8001730:	20000288 	.word	0x20000288
 8001734:	200002c8 	.word	0x200002c8
    }else if(travel_x <=0){
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <main+0x3a0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	dc02      	bgt.n	8001746 <main+0x236>
    	goal_travel_x = 200;
 8001740:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <main+0x3a4>)
 8001742:	22c8      	movs	r2, #200	; 0xc8
 8001744:	601a      	str	r2, [r3, #0]
    }

    go_degree = atan2(goal_travel_x - travel_x, -(travel_y) )/ PI*180;
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <main+0x3a4>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <main+0x3a0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <main+0x3a8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	425b      	negs	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f000 fb90 	bl	8001e7e <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800175e:	ec51 0b10 	vmov	r0, r1, d0
 8001762:	a34f      	add	r3, pc, #316	; (adr r3, 80018a0 <main+0x390>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f834 	bl	80007d4 <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <main+0x3ac>)
 800177a:	f7fe ff01 	bl	8000580 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9ab 	bl	8000ae0 <__aeabi_d2iz>
 800178a:	4603      	mov	r3, r0
 800178c:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <main+0x3b0>)
 800178e:	6013      	str	r3, [r2, #0]

    motor_A.calcurate(rotate, go_degree, go_speed);
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <main+0x3b4>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179a:	ee17 3a90 	vmov	r3, s15
 800179e:	b219      	sxth	r1, r3
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <main+0x3b0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <main+0x3b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4847      	ldr	r0, [pc, #284]	; (80018cc <main+0x3bc>)
 80017ae:	f000 fbeb 	bl	8001f88 <_ZN4MOVE9calcurateEsss>
	motor_A.set_array(Buf);
 80017b2:	4947      	ldr	r1, [pc, #284]	; (80018d0 <main+0x3c0>)
 80017b4:	4845      	ldr	r0, [pc, #276]	; (80018cc <main+0x3bc>)
 80017b6:	f000 fc9b 	bl	80020f0 <_ZN4MOVE9set_arrayEPh>
	motor_B.calcurate(rotate, go_degree, go_speed);
 80017ba:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <main+0x3b4>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	b219      	sxth	r1, r3
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <main+0x3b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <main+0x3b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	483f      	ldr	r0, [pc, #252]	; (80018d4 <main+0x3c4>)
 80017d8:	f000 fbd6 	bl	8001f88 <_ZN4MOVE9calcurateEsss>
	motor_B.set_array(Buf);
 80017dc:	493c      	ldr	r1, [pc, #240]	; (80018d0 <main+0x3c0>)
 80017de:	483d      	ldr	r0, [pc, #244]	; (80018d4 <main+0x3c4>)
 80017e0:	f000 fc86 	bl	80020f0 <_ZN4MOVE9set_arrayEPh>
	motor_C.calcurate(rotate, go_degree, go_speed);
 80017e4:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <main+0x3b4>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	b219      	sxth	r1, r3
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <main+0x3b0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <main+0x3b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4835      	ldr	r0, [pc, #212]	; (80018d8 <main+0x3c8>)
 8001802:	f000 fbc1 	bl	8001f88 <_ZN4MOVE9calcurateEsss>
	motor_C.set_array(Buf);
 8001806:	4932      	ldr	r1, [pc, #200]	; (80018d0 <main+0x3c0>)
 8001808:	4833      	ldr	r0, [pc, #204]	; (80018d8 <main+0x3c8>)
 800180a:	f000 fc71 	bl	80020f0 <_ZN4MOVE9set_arrayEPh>
	motor_D.calcurate(rotate, go_degree, go_speed);
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <main+0x3b4>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001818:	ee17 3a90 	vmov	r3, s15
 800181c:	b219      	sxth	r1, r3
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <main+0x3b0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b21a      	sxth	r2, r3
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <main+0x3b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b21b      	sxth	r3, r3
 800182a:	482c      	ldr	r0, [pc, #176]	; (80018dc <main+0x3cc>)
 800182c:	f000 fbac 	bl	8001f88 <_ZN4MOVE9calcurateEsss>
	motor_D.set_array(Buf);
 8001830:	4927      	ldr	r1, [pc, #156]	; (80018d0 <main+0x3c0>)
 8001832:	482a      	ldr	r0, [pc, #168]	; (80018dc <main+0x3cc>)
 8001834:	f000 fc5c 	bl	80020f0 <_ZN4MOVE9set_arrayEPh>

//	  check_coord();

	set_array((-1)*travel_x, (-1)*-24, 24, 12+((-1)*travel_y*0.2), hue, 0);
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <main+0x3a0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	425e      	negs	r6, r3
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <main+0x3a8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	425b      	negs	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe31 	bl	80004ac <__aeabi_i2d>
 800184a:	a317      	add	r3, pc, #92	; (adr r3, 80018a8 <main+0x398>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fe96 	bl	8000580 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <main+0x3d0>)
 8001862:	f7fe fcd7 	bl	8000214 <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f95f 	bl	8000b30 <__aeabi_d2uiz>
 8001872:	4603      	mov	r3, r0
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <main+0x3d4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2100      	movs	r1, #0
 800187e:	9101      	str	r1, [sp, #4]
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	2218      	movs	r2, #24
 8001886:	2118      	movs	r1, #24
 8001888:	4630      	mov	r0, r6
 800188a:	f7ff fd77 	bl	800137c <_Z9set_arrayiiihhh>


//	HAL_UART_Transmit(&huart6, (uint8_t*)&Buf, 12, 100);
	HAL_UART_Transmit(&huart3,(uint8_t*)&send_array, 10, 100);
 800188e:	2364      	movs	r3, #100	; 0x64
 8001890:	220a      	movs	r2, #10
 8001892:	4915      	ldr	r1, [pc, #84]	; (80018e8 <main+0x3d8>)
 8001894:	4815      	ldr	r0, [pc, #84]	; (80018ec <main+0x3dc>)
 8001896:	f004 f90a 	bl	8005aae <HAL_UART_Transmit>

	check_buf();
 800189a:	f000 fa53 	bl	8001d44 <_Z9check_bufv>
	if(HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin)==1){go_speed = 50;
 800189e:	e6ba      	b.n	8001616 <main+0x106>
 80018a0:	c083126f 	.word	0xc083126f
 80018a4:	400921ca 	.word	0x400921ca
 80018a8:	9999999a 	.word	0x9999999a
 80018ac:	3fc99999 	.word	0x3fc99999
 80018b0:	2000025c 	.word	0x2000025c
 80018b4:	200002c8 	.word	0x200002c8
 80018b8:	20000264 	.word	0x20000264
 80018bc:	40668000 	.word	0x40668000
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000288 	.word	0x20000288
 80018c8:	20000004 	.word	0x20000004
 80018cc:	2000028c 	.word	0x2000028c
 80018d0:	200002bc 	.word	0x200002bc
 80018d4:	20000298 	.word	0x20000298
 80018d8:	200002a4 	.word	0x200002a4
 80018dc:	200002b0 	.word	0x200002b0
 80018e0:	40280000 	.word	0x40280000
 80018e4:	2000037c 	.word	0x2000037c
 80018e8:	200002d0 	.word	0x200002d0
 80018ec:	20000174 	.word	0x20000174

080018f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	; 0x50
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	2234      	movs	r2, #52	; 0x34
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 fd74 	bl	80083ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <_Z18SystemClock_Configv+0xe4>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <_Z18SystemClock_Configv+0xe4>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <_Z18SystemClock_Configv+0xe4>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <_Z18SystemClock_Configv+0xe8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800193c:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <_Z18SystemClock_Configv+0xe8>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <_Z18SystemClock_Configv+0xe8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001964:	2310      	movs	r3, #16
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800196c:	2306      	movs	r3, #6
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001970:	2302      	movs	r3, #2
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4618      	mov	r0, r3
 800197e:	f003 f929 	bl	8004bd4 <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001992:	f000 fa6f 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001996:	230f      	movs	r3, #15
 8001998:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199a:	2302      	movs	r3, #2
 800199c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fdc7 	bl	8004544 <HAL_RCC_ClockConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80019c6:	f000 fa55 	bl	8001e74 <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3750      	adds	r7, #80	; 0x50
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000

080019dc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <_ZL12MX_I2C1_Initv+0x60>)
 80019e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <_ZL12MX_I2C1_Initv+0x64>)
 80019ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 80019fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <_ZL12MX_I2C1_Initv+0x5c>)
 8001a1a:	f001 fccf 	bl	80033bc <HAL_I2C_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001a2e:	f000 fa21 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000094 	.word	0x20000094
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	000186a0 	.word	0x000186a0

08001a44 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a62:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a68:	221f      	movs	r2, #31
 8001a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a74:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a86:	481b      	ldr	r0, [pc, #108]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a88:	f003 fb42 	bl	8005110 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001a9c:	f000 f9ea 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4811      	ldr	r0, [pc, #68]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001aae:	f003 fcf7 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001ac2:	f000 f9d7 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ace:	463b      	mov	r3, r7
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4808      	ldr	r0, [pc, #32]	; (8001af4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001ad4:	f003 ff0e 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001ae8:	f000 f9c4 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200000e8 	.word	0x200000e8
 8001af8:	40000400 	.word	0x40000400

08001afc <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <_ZL13MX_UART5_Initv+0x58>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <_ZL13MX_UART5_Initv+0x54>)
 8001b34:	f003 ff6e 	bl	8005a14 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8001b48:	f000 f994 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000130 	.word	0x20000130
 8001b54:	40005000 	.word	0x40005000

08001b58 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b5e:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b90:	f003 ff40 	bl	8005a14 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001ba4:	f000 f966 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000174 	.word	0x20000174
 8001bb0:	40004800 	.word	0x40004800

08001bb4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_ZL19MX_USART6_UART_Initv+0x58>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001bec:	f003 ff12 	bl	8005a14 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bf14      	ite	ne
 8001bf6:	2301      	movne	r3, #1
 8001bf8:	2300      	moveq	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001c00:	f000 f938 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200001b8 	.word	0x200001b8
 8001c0c:	40011400 	.word	0x40011400

08001c10 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <_ZL11MX_DMA_Initv+0x3c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <_ZL11MX_DMA_Initv+0x3c>)
 8001c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <_ZL11MX_DMA_Initv+0x3c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	200b      	movs	r0, #11
 8001c38:	f000 fe53 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c3c:	200b      	movs	r0, #11
 8001c3e:	f000 fe6c 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800

08001c50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2104      	movs	r1, #4
 8001cda:	4818      	ldr	r0, [pc, #96]	; (8001d3c <_ZL12MX_GPIO_Initv+0xec>)
 8001cdc:	f001 fb54 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4811      	ldr	r0, [pc, #68]	; (8001d3c <_ZL12MX_GPIO_Initv+0xec>)
 8001cf8:	f001 f99a 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8001cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480a      	ldr	r0, [pc, #40]	; (8001d3c <_ZL12MX_GPIO_Initv+0xec>)
 8001d12:	f001 f98d 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : READ_Pin */
  GPIO_InitStruct.Pin = READ_Pin;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(READ_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <_ZL12MX_GPIO_Initv+0xf0>)
 8001d2c:	f001 f980 	bl	8003030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800

08001d44 <_Z9check_bufv>:

/* USER CODE BEGIN 4 */

void check_buf(){
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
	index = huart5.hdmarx->Instance->NDTR;//バッファー残容量
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <_Z9check_bufv+0x110>)
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a41      	ldr	r2, [pc, #260]	; (8001e58 <_Z9check_bufv+0x114>)
 8001d54:	6013      	str	r3, [r2, #0]
 	index = sizeof(rxBuf) - index;//最新の受信データ位置
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <_Z9check_bufv+0x114>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <_Z9check_bufv+0x114>)
 8001d60:	6013      	str	r3, [r2, #0]

 	int check_buf_point = index - 10;
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <_Z9check_bufv+0x114>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3b0a      	subs	r3, #10
 8001d68:	617b      	str	r3, [r7, #20]
 	if(check_buf_point < 0){check_buf_point = check_buf_point + sizeof(rxBuf);}
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da02      	bge.n	8001d76 <_Z9check_bufv+0x32>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3380      	adds	r3, #128	; 0x80
 8001d74:	617b      	str	r3, [r7, #20]
 	//読み込み済みデータ位置より最新の受信データ位置が前にある時(バッファー内で受信データが一周してた場合)値を補正

	while(1){
		readData = rxBuf[check_buf_point];
 8001d76:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <_Z9check_bufv+0x118>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <_Z9check_bufv+0x11c>)
 8001d82:	601a      	str	r2, [r3, #0]
		if(readData == 250){
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <_Z9check_bufv+0x11c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2bfa      	cmp	r3, #250	; 0xfa
 8001d8a:	d11c      	bne.n	8001dc6 <_Z9check_bufv+0x82>
			for(int i=1; i<5; i++){
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	dc2b      	bgt.n	8001dee <_Z9check_bufv+0xaa>
				int read_buf_point = check_buf_point + i;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
				if(read_buf_point>sizeof(rxBuf)-1){read_buf_point = read_buf_point - sizeof(rxBuf);}
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b7f      	cmp	r3, #127	; 0x7f
 8001da2:	d902      	bls.n	8001daa <_Z9check_bufv+0x66>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3b80      	subs	r3, #128	; 0x80
 8001da8:	60fb      	str	r3, [r7, #12]
				rcvBuf[i-1] = rxBuf[read_buf_point];
 8001daa:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <_Z9check_bufv+0x118>)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	4611      	mov	r1, r2
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <_Z9check_bufv+0x120>)
 8001dba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i=1; i<5; i++){
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e7e4      	b.n	8001d90 <_Z9check_bufv+0x4c>
			}
			break;
		}
		check_buf_point++;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
		if(check_buf_point>sizeof(rxBuf)-1){check_buf_point = check_buf_point - sizeof(rxBuf);}
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd0:	d902      	bls.n	8001dd8 <_Z9check_bufv+0x94>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3b80      	subs	r3, #128	; 0x80
 8001dd6:	617b      	str	r3, [r7, #20]
		if(check_buf_point==index){break;}
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <_Z9check_bufv+0x114>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	bf0c      	ite	eq
 8001de2:	2301      	moveq	r3, #1
 8001de4:	2300      	movne	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_Z9check_bufv+0xae>
	}
 8001dec:	e7c3      	b.n	8001d76 <_Z9check_bufv+0x32>
			break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <_Z9check_bufv+0xb0>
		if(check_buf_point==index){break;}
 8001df2:	bf00      	nop

 	mode = rcvBuf[0];
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <_Z9check_bufv+0x120>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <_Z9check_bufv+0x124>)
 8001dfa:	6013      	str	r3, [r2, #0]

	clock = 0;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <_Z9check_bufv+0x128>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 	int hyaku = 1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
	for(int i = 2; i >=1 ; i--){
 8001e06:	2302      	movs	r3, #2
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dd16      	ble.n	8001e3e <_Z9check_bufv+0xfa>
		clock = clock + ((rcvBuf[i]-5)*hyaku);
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_Z9check_bufv+0x120>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	3b05      	subs	r3, #5
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	fb03 f202 	mul.w	r2, r3, r2
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <_Z9check_bufv+0x128>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <_Z9check_bufv+0x128>)
 8001e28:	6013      	str	r3, [r2, #0]
		hyaku = hyaku*240;
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	60bb      	str	r3, [r7, #8]
	for(int i = 2; i >=1 ; i--){
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	e7e5      	b.n	8001e0a <_Z9check_bufv+0xc6>
	}

	hue = rcvBuf[3];
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <_Z9check_bufv+0x120>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <_Z9check_bufv+0x12c>)
 8001e44:	6013      	str	r3, [r2, #0]

}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000130 	.word	0x20000130
 8001e58:	200002dc 	.word	0x200002dc
 8001e5c:	200002e0 	.word	0x200002e0
 8001e60:	20000370 	.word	0x20000370
 8001e64:	20000360 	.word	0x20000360
 8001e68:	20000374 	.word	0x20000374
 8001e6c:	20000378 	.word	0x20000378
 8001e70:	2000037c 	.word	0x2000037c

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>

08001e7e <_ZSt5atan2IiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
 8001e7e:	b5b0      	push	{r4, r5, r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe fb0f 	bl	80004ac <__aeabi_i2d>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	460d      	mov	r5, r1
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f7fe fb0a 	bl	80004ac <__aeabi_i2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	ec43 2b11 	vmov	d1, r2, r3
 8001ea0:	ec45 4b10 	vmov	d0, r4, r5
 8001ea4:	f004 fd34 	bl	8006910 <atan2>
 8001ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8001eac:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb4:	eef0 0a67 	vmov.f32	s1, s15
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ec0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d124      	bne.n	8001f1a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d11f      	bne.n	8001f1a <_Z41__static_initialization_and_destruction_0ii+0x5a>
M_TRANSMIT odom1(&huart6,0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	4911      	ldr	r1, [pc, #68]	; (8001f24 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001ede:	4812      	ldr	r0, [pc, #72]	; (8001f28 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001ee0:	f7ff f9f4 	bl	80012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
M_TRANSMIT odom2(&huart6,1);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	490f      	ldr	r1, [pc, #60]	; (8001f24 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001eea:	f7ff f9ef 	bl	80012cc <_ZN10M_TRANSMITC1EP20__UART_HandleTypeDefh>
MOVE motor_A(0, 45);
 8001eee:	222d      	movs	r2, #45	; 0x2d
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480f      	ldr	r0, [pc, #60]	; (8001f30 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001ef4:	f000 f82c 	bl	8001f50 <_ZN4MOVEC1Ehs>
MOVE motor_B(1, 135);
 8001ef8:	2287      	movs	r2, #135	; 0x87
 8001efa:	2101      	movs	r1, #1
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001efe:	f000 f827 	bl	8001f50 <_ZN4MOVEC1Ehs>
MOVE motor_C(2, -135);
 8001f02:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8001f06:	2102      	movs	r1, #2
 8001f08:	480b      	ldr	r0, [pc, #44]	; (8001f38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001f0a:	f000 f821 	bl	8001f50 <_ZN4MOVEC1Ehs>
MOVE motor_D(3, -45);
 8001f0e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8001f12:	2103      	movs	r1, #3
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001f16:	f000 f81b 	bl	8001f50 <_ZN4MOVEC1Ehs>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200001b8 	.word	0x200001b8
 8001f28:	2000026c 	.word	0x2000026c
 8001f2c:	20000278 	.word	0x20000278
 8001f30:	2000028c 	.word	0x2000028c
 8001f34:	20000298 	.word	0x20000298
 8001f38:	200002a4 	.word	0x200002a4
 8001f3c:	200002b0 	.word	0x200002b0

08001f40 <_GLOBAL__sub_I_hi2c1>:
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff ffb9 	bl	8001ec0 <_Z41__static_initialization_and_destruction_0ii>
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_ZN4MOVEC1Ehs>:

#include "move.h"

MOVE::MOVE(uint8_t motor_id, int16_t motor_degree){
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	803b      	strh	r3, [r7, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <_ZN4MOVEC1Ehs+0x30>)
 8001f64:	609a      	str	r2, [r3, #8]
    MOTOR_ID = motor_id;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	701a      	strb	r2, [r3, #0]
    MOTOR_DEGREE = motor_degree;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	883a      	ldrh	r2, [r7, #0]
 8001f70:	805a      	strh	r2, [r3, #2]
}
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	3f333333 	.word	0x3f333333
 8001f84:	00000000 	.word	0x00000000

08001f88 <_ZN4MOVE9calcurateEsss>:

void MOVE::calcurate(int16_t gyro_degree, int16_t goal_degree, int16_t goal_speed){
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	817b      	strh	r3, [r7, #10]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	813b      	strh	r3, [r7, #8]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 8001fa2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fa6:	2bb4      	cmp	r3, #180	; 0xb4
 8001fa8:	dd05      	ble.n	8001fb6 <_ZN4MOVE9calcurateEsss+0x2e>
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	e009      	b.n	8001fca <_ZN4MOVE9calcurateEsss+0x42>
    else if(gyro_degree <-180){gyro_degree += 360;}
 8001fb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fba:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001fbe:	da04      	bge.n	8001fca <_ZN4MOVE9calcurateEsss+0x42>
 8001fc0:	897b      	ldrh	r3, [r7, #10]
 8001fc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	817b      	strh	r3, [r7, #10]

    if (gyro_degree > 0){
 8001fca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	dd14      	ble.n	8001ffc <_ZN4MOVE9calcurateEsss+0x74>
        roll_speed = -10 + (-gyro_degree * 3);
 8001fd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	3b0a      	subs	r3, #10
 8001fde:	617b      	str	r3, [r7, #20]
        if (gyro_degree < 6){
 8001fe0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	dc01      	bgt.n	8001fec <_ZN4MOVE9calcurateEsss+0x64>
            roll_speed = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed < -150){
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8001ff2:	da1d      	bge.n	8002030 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = -150;
 8001ff4:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e019      	b.n	8002030 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else if (gyro_degree < 0){
 8001ffc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002000:	2b00      	cmp	r3, #0
 8002002:	da13      	bge.n	800202c <_ZN4MOVE9calcurateEsss+0xa4>
        roll_speed = 10 + (-gyro_degree * 3);
 8002004:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002008:	461a      	mov	r2, r3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	330a      	adds	r3, #10
 8002010:	617b      	str	r3, [r7, #20]
        if (gyro_degree > -6){
 8002012:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002016:	f113 0f05 	cmn.w	r3, #5
 800201a:	db01      	blt.n	8002020 <_ZN4MOVE9calcurateEsss+0x98>
            roll_speed = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
        }
        if (roll_speed > 150){
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b96      	cmp	r3, #150	; 0x96
 8002024:	dd04      	ble.n	8002030 <_ZN4MOVE9calcurateEsss+0xa8>
            roll_speed = 150;
 8002026:	2396      	movs	r3, #150	; 0x96
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e001      	b.n	8002030 <_ZN4MOVE9calcurateEsss+0xa8>
        }
    }else{
        roll_speed = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
    }

    motor_speed = (int)goal_speed*sin((PI/180)*(goal_degree - MOTOR_DEGREE));
 8002030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa39 	bl	80004ac <__aeabi_i2d>
 800203a:	4604      	mov	r4, r0
 800203c:	460d      	mov	r5, r1
 800203e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fa2e 	bl	80004ac <__aeabi_i2d>
 8002050:	a325      	add	r3, pc, #148	; (adr r3, 80020e8 <_ZN4MOVE9calcurateEsss+0x160>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002056:	f7fe fa93 	bl	8000580 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	ec43 2b17 	vmov	d7, r2, r3
 8002062:	eeb0 0a47 	vmov.f32	s0, s14
 8002066:	eef0 0a67 	vmov.f32	s1, s15
 800206a:	f004 fbc5 	bl	80067f8 <sin>
 800206e:	ec53 2b10 	vmov	r2, r3, d0
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe fa83 	bl	8000580 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fd2d 	bl	8000ae0 <__aeabi_d2iz>
 8002086:	4603      	mov	r3, r0
 8002088:	b21a      	sxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	809a      	strh	r2, [r3, #4]
    motor_speed = (int)(motor_speed * motor_rate) + (roll_speed * (1 - motor_rate));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80020be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80020c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80020c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d2:	ee17 3a90 	vmov	r3, s15
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	809a      	strh	r2, [r3, #4]

}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdb0      	pop	{r4, r5, r7, pc}
 80020e4:	f3af 8000 	nop.w
 80020e8:	171ea105 	.word	0x171ea105
 80020ec:	3f91df24 	.word	0x3f91df24

080020f0 <_ZN4MOVE9set_arrayEPh>:

void MOVE::set_array(uint8_t *send_array){
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    send_array[MOTOR_ID*3]=250+MOTOR_ID;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	460b      	mov	r3, r1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	440b      	add	r3, r1
 800210a:	4619      	mov	r1, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	440b      	add	r3, r1
 8002110:	3a06      	subs	r2, #6
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]
    int16_t send_speed = motor_speed;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	889b      	ldrh	r3, [r3, #4]
 800211a:	81fb      	strh	r3, [r7, #14]
    send_speed += 5000;
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002122:	3308      	adds	r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8002128:	2301      	movs	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b02      	cmp	r3, #2
 8002130:	dc26      	bgt.n	8002180 <_ZN4MOVE9set_arrayEPh+0x90>
		send_array[MOTOR_ID*3+i] = send_speed%100;
 8002132:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <_ZN4MOVE9set_arrayEPh+0x9c>)
 8002138:	fb82 1203 	smull	r1, r2, r2, r3
 800213c:	1151      	asrs	r1, r2, #5
 800213e:	17da      	asrs	r2, r3, #31
 8002140:	1a8a      	subs	r2, r1, r2
 8002142:	2164      	movs	r1, #100	; 0x64
 8002144:	fb01 f202 	mul.w	r2, r1, r2
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	b219      	sxth	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	441a      	add	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4413      	add	r3, r2
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
		send_speed = (int)send_speed/100;
 8002166:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <_ZN4MOVE9set_arrayEPh+0x9c>)
 800216c:	fb82 1203 	smull	r1, r2, r2, r3
 8002170:	1152      	asrs	r2, r2, #5
 8002172:	17db      	asrs	r3, r3, #31
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	81fb      	strh	r3, [r7, #14]
	for(int i = 1; i <3 ;i++){
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3301      	adds	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	e7d5      	b.n	800212c <_ZN4MOVE9set_arrayEPh+0x3c>
	}
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	51eb851f 	.word	0x51eb851f

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <HAL_MspInit+0x4c>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_MspInit+0x4c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_MspInit+0x4c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_MspInit+0x4c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_I2C_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12c      	bne.n	800225c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_I2C_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_I2C_MspInit+0x88>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_I2C_MspInit+0x88>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800221e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002224:	2312      	movs	r3, #18
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002230:	2304      	movs	r3, #4
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	480c      	ldr	r0, [pc, #48]	; (800226c <HAL_I2C_MspInit+0x8c>)
 800223c:	f000 fef8 	bl	8003030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_I2C_MspInit+0x88>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_I2C_MspInit+0x88>)
 800224a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_I2C_MspInit+0x88>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40005400 	.word	0x40005400
 8002268:	40023800 	.word	0x40023800
 800226c:	40020400 	.word	0x40020400

08002270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_TIM_Base_MspInit+0x48>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d115      	bne.n	80022ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_TIM_Base_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_TIM_Base_MspInit+0x4c>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_TIM_Base_MspInit+0x4c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	201d      	movs	r0, #29
 80022a4:	f000 fb1d 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022a8:	201d      	movs	r0, #29
 80022aa:	f000 fb36 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b090      	sub	sp, #64	; 0x40
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a82      	ldr	r2, [pc, #520]	; (80024e8 <HAL_UART_MspInit+0x228>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d17b      	bne.n	80023da <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e6:	4b81      	ldr	r3, [pc, #516]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a80      	ldr	r2, [pc, #512]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80022ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b7e      	ldr	r3, [pc, #504]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a79      	ldr	r2, [pc, #484]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b77      	ldr	r3, [pc, #476]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a72      	ldr	r2, [pc, #456]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_UART_MspInit+0x22c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002348:	2308      	movs	r3, #8
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	4867      	ldr	r0, [pc, #412]	; (80024f0 <HAL_UART_MspInit+0x230>)
 8002354:	f000 fe6c 	bl	8003030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002358:	2304      	movs	r3, #4
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002368:	2308      	movs	r3, #8
 800236a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002370:	4619      	mov	r1, r3
 8002372:	4860      	ldr	r0, [pc, #384]	; (80024f4 <HAL_UART_MspInit+0x234>)
 8002374:	f000 fe5c 	bl	8003030 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_UART_MspInit+0x238>)
 800237a:	4a60      	ldr	r2, [pc, #384]	; (80024fc <HAL_UART_MspInit+0x23c>)
 800237c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800237e:	4b5e      	ldr	r3, [pc, #376]	; (80024f8 <HAL_UART_MspInit+0x238>)
 8002380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002384:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_UART_MspInit+0x238>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <HAL_UART_MspInit+0x238>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_UART_MspInit+0x238>)
 8002394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002398:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800239a:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <HAL_UART_MspInit+0x238>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80023a6:	4b54      	ldr	r3, [pc, #336]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023ae:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023b4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80023bc:	484e      	ldr	r0, [pc, #312]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023be:	f000 fac7 	bl	8002950 <HAL_DMA_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80023c8:	f7ff fd54 	bl	8001e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
 80023d2:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_UART_MspInit+0x238>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80023d8:	e081      	b.n	80024de <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a48      	ldr	r2, [pc, #288]	; (8002500 <HAL_UART_MspInit+0x240>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d14b      	bne.n	800247c <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80023ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
 80023f4:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	4b39      	ldr	r3, [pc, #228]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a38      	ldr	r2, [pc, #224]	; (80024ec <HAL_UART_MspInit+0x22c>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a31      	ldr	r2, [pc, #196]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_UART_MspInit+0x22c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002438:	2320      	movs	r3, #32
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002448:	2307      	movs	r3, #7
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002450:	4619      	mov	r1, r3
 8002452:	4827      	ldr	r0, [pc, #156]	; (80024f0 <HAL_UART_MspInit+0x230>)
 8002454:	f000 fdec 	bl	8003030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800246a:	2307      	movs	r3, #7
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002472:	4619      	mov	r1, r3
 8002474:	4823      	ldr	r0, [pc, #140]	; (8002504 <HAL_UART_MspInit+0x244>)
 8002476:	f000 fddb 	bl	8003030 <HAL_GPIO_Init>
}
 800247a:	e030      	b.n	80024de <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART6)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a21      	ldr	r2, [pc, #132]	; (8002508 <HAL_UART_MspInit+0x248>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_UART_MspInit+0x22c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002490:	f043 0320 	orr.w	r3, r3, #32
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_UART_MspInit+0x22c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_UART_MspInit+0x22c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024be:	23c0      	movs	r3, #192	; 0xc0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024ce:	2308      	movs	r3, #8
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d6:	4619      	mov	r1, r3
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <HAL_UART_MspInit+0x230>)
 80024da:	f000 fda9 	bl	8003030 <HAL_GPIO_Init>
}
 80024de:	bf00      	nop
 80024e0:	3740      	adds	r7, #64	; 0x40
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40005000 	.word	0x40005000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	200001fc 	.word	0x200001fc
 80024fc:	40026010 	.word	0x40026010
 8002500:	40004800 	.word	0x40004800
 8002504:	40020400 	.word	0x40020400
 8002508:	40011400 	.word	0x40011400

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <NMI_Handler+0x4>

08002512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <HardFault_Handler+0x4>

08002518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <MemManage_Handler+0x4>

0800251e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <BusFault_Handler+0x4>

08002524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <UsageFault_Handler+0x4>

0800252a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002558:	f000 f8a4 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <DMA1_Stream0_IRQHandler+0x10>)
 8002566:	f000 faf9 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200001fc 	.word	0x200001fc

08002574 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TIM3_IRQHandler+0x10>)
 800257a:	f002 fe89 	bl	8005290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200000e8 	.word	0x200000e8

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d6:	f7ff ffd7 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f005 fed5 	bl	8008388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7fe ff97 	bl	8001510 <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80025f0:	0800869c 	.word	0x0800869c
  ldr r2, =_sbss
 80025f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80025f8:	20000384 	.word	0x20000384

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f94f 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fdac 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f967 	bl	8002936 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 f92f 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000008 	.word	0x20000008
 800269c:	20000010 	.word	0x20000010
 80026a0:	2000000c 	.word	0x2000000c

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000010 	.word	0x20000010
 80026c8:	20000380 	.word	0x20000380

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000380 	.word	0x20000380

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000010 	.word	0x20000010

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff feb6 	bl	80026cc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e099      	b.n	8002aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	e00f      	b.n	80029ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298e:	f7ff fe9d 	bl	80026cc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d908      	bls.n	80029ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e078      	b.n	8002aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e8      	bne.n	800298e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_DMA_Init+0x158>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4313      	orrs	r3, r2
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0307 	bic.w	r3, r3, #7
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d117      	bne.n	8002a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa6f 	bl	8002f38 <DMA_CheckFifoParam>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e016      	b.n	8002aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa26 	bl	8002ecc <DMA_CalcBaseAndBitshift>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	223f      	movs	r2, #63	; 0x3f
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	f010803f 	.word	0xf010803f

08002aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_DMA_Start_IT+0x26>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e040      	b.n	8002b54 <HAL_DMA_Start_IT+0xa8>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d12f      	bne.n	8002b46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f9b8 	bl	8002e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	223f      	movs	r2, #63	; 0x3f
 8002b06:	409a      	lsls	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0216 	orr.w	r2, r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e005      	b.n	8002b52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b68:	4b8e      	ldr	r3, [pc, #568]	; (8002da4 <HAL_DMA_IRQHandler+0x248>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a8e      	ldr	r2, [pc, #568]	; (8002da8 <HAL_DMA_IRQHandler+0x24c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d043      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03c      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2210      	movs	r2, #16
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e01f      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808f 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8087 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d136      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	223f      	movs	r2, #63	; 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07e      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
        }
        return;
 8002d72:	e079      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e02c      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
 8002da2:	bf00      	nop
 8002da4:	20000008 	.word	0x20000008
 8002da8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e01e      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0210 	bic.w	r2, r2, #16
 8002dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d032      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2205      	movs	r2, #5
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d307      	bcc.n	8002e44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x2cc>
 8002e42:	e000      	b.n	8002e46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e000      	b.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e68:	bf00      	nop
    }
  }
}
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d108      	bne.n	8002eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eae:	e007      	b.n	8002ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3b10      	subs	r3, #16
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <DMA_CalcBaseAndBitshift+0x64>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d909      	bls.n	8002f0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	1d1a      	adds	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f0c:	e007      	b.n	8002f1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	aaaaaaab 	.word	0xaaaaaaab
 8002f34:	08008430 	.word	0x08008430

08002f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d856      	bhi.n	8003006 <DMA_CheckFifoParam+0xce>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <DMA_CheckFifoParam+0x28>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f83 	.word	0x08002f83
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08003007 	.word	0x08003007
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d046      	beq.n	800300a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e043      	b.n	800300a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f8a:	d140      	bne.n	800300e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e03d      	b.n	800300e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9a:	d121      	bne.n	8002fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d837      	bhi.n	8003012 <DMA_CheckFifoParam+0xda>
 8002fa2:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <DMA_CheckFifoParam+0x70>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fbf 	.word	0x08002fbf
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	08002fd1 	.word	0x08002fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e030      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d025      	beq.n	8003016 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fce:	e022      	b.n	8003016 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fde:	e01c      	b.n	800301a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d903      	bls.n	8002fee <DMA_CheckFifoParam+0xb6>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d003      	beq.n	8002ff4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fec:	e018      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff2:	e015      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e00b      	b.n	800301e <DMA_CheckFifoParam+0xe6>
      break;
 8003006:	bf00      	nop
 8003008:	e00a      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e008      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e006      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;   
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
    }
  } 
  
  return status; 
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e165      	b.n	8003318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	f040 8154 	bne.w	8003312 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d005      	beq.n	8003082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	2b02      	cmp	r3, #2
 8003080:	d130      	bne.n	80030e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d017      	beq.n	8003120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d123      	bne.n	8003174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80ae 	beq.w	8003312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <HAL_GPIO_Init+0x300>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a5c      	ldr	r2, [pc, #368]	; (8003330 <HAL_GPIO_Init+0x300>)
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <HAL_GPIO_Init+0x300>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_GPIO_Init+0x304>)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4f      	ldr	r2, [pc, #316]	; (8003338 <HAL_GPIO_Init+0x308>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d025      	beq.n	800324a <HAL_GPIO_Init+0x21a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4e      	ldr	r2, [pc, #312]	; (800333c <HAL_GPIO_Init+0x30c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01f      	beq.n	8003246 <HAL_GPIO_Init+0x216>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <HAL_GPIO_Init+0x310>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d019      	beq.n	8003242 <HAL_GPIO_Init+0x212>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <HAL_GPIO_Init+0x314>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_GPIO_Init+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4b      	ldr	r2, [pc, #300]	; (8003348 <HAL_GPIO_Init+0x318>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00d      	beq.n	800323a <HAL_GPIO_Init+0x20a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4a      	ldr	r2, [pc, #296]	; (800334c <HAL_GPIO_Init+0x31c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <HAL_GPIO_Init+0x206>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a49      	ldr	r2, [pc, #292]	; (8003350 <HAL_GPIO_Init+0x320>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_GPIO_Init+0x202>
 800322e:	2306      	movs	r3, #6
 8003230:	e00c      	b.n	800324c <HAL_GPIO_Init+0x21c>
 8003232:	2307      	movs	r3, #7
 8003234:	e00a      	b.n	800324c <HAL_GPIO_Init+0x21c>
 8003236:	2305      	movs	r3, #5
 8003238:	e008      	b.n	800324c <HAL_GPIO_Init+0x21c>
 800323a:	2304      	movs	r3, #4
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x21c>
 800323e:	2303      	movs	r3, #3
 8003240:	e004      	b.n	800324c <HAL_GPIO_Init+0x21c>
 8003242:	2302      	movs	r3, #2
 8003244:	e002      	b.n	800324c <HAL_GPIO_Init+0x21c>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_GPIO_Init+0x21c>
 800324a:	2300      	movs	r3, #0
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	f002 0203 	and.w	r2, r2, #3
 8003252:	0092      	lsls	r2, r2, #2
 8003254:	4093      	lsls	r3, r2
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800325c:	4935      	ldr	r1, [pc, #212]	; (8003334 <HAL_GPIO_Init+0x304>)
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326a:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_GPIO_Init+0x324>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328e:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_GPIO_Init+0x324>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003294:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_GPIO_Init+0x324>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <HAL_GPIO_Init+0x324>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_GPIO_Init+0x324>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <HAL_GPIO_Init+0x324>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_GPIO_Init+0x324>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800330c:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_GPIO_Init+0x324>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3301      	adds	r3, #1
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b0f      	cmp	r3, #15
 800331c:	f67f ae96 	bls.w	800304c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	3724      	adds	r7, #36	; 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	40013800 	.word	0x40013800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40021400 	.word	0x40021400
 8003350:	40021800 	.word	0x40021800
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e001      	b.n	800337a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e12b      	b.n	8003626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe fefc 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800341e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003420:	f001 f982 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8003424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a81      	ldr	r2, [pc, #516]	; (8003630 <HAL_I2C_Init+0x274>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d807      	bhi.n	8003440 <HAL_I2C_Init+0x84>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a80      	ldr	r2, [pc, #512]	; (8003634 <HAL_I2C_Init+0x278>)
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e006      	b.n	800344e <HAL_I2C_Init+0x92>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a7d      	ldr	r2, [pc, #500]	; (8003638 <HAL_I2C_Init+0x27c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	bf94      	ite	ls
 8003448:	2301      	movls	r3, #1
 800344a:	2300      	movhi	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0e7      	b.n	8003626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a78      	ldr	r2, [pc, #480]	; (800363c <HAL_I2C_Init+0x280>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0c9b      	lsrs	r3, r3, #18
 8003460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a6a      	ldr	r2, [pc, #424]	; (8003630 <HAL_I2C_Init+0x274>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d802      	bhi.n	8003490 <HAL_I2C_Init+0xd4>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	e009      	b.n	80034a4 <HAL_I2C_Init+0xe8>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	4a69      	ldr	r2, [pc, #420]	; (8003640 <HAL_I2C_Init+0x284>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	3301      	adds	r3, #1
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	495c      	ldr	r1, [pc, #368]	; (8003630 <HAL_I2C_Init+0x274>)
 80034c0:	428b      	cmp	r3, r1
 80034c2:	d819      	bhi.n	80034f8 <HAL_I2C_Init+0x13c>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e59      	subs	r1, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034d8:	400b      	ands	r3, r1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_I2C_Init+0x138>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e59      	subs	r1, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f2:	e051      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 80034f4:	2304      	movs	r3, #4
 80034f6:	e04f      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d111      	bne.n	8003524 <HAL_I2C_Init+0x168>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e012      	b.n	800354a <HAL_I2C_Init+0x18e>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e58      	subs	r0, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	0099      	lsls	r1, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	fbb0 f3f3 	udiv	r3, r0, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Init+0x196>
 800354e:	2301      	movs	r3, #1
 8003550:	e022      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10e      	bne.n	8003578 <HAL_I2C_Init+0x1bc>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1e58      	subs	r0, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	440b      	add	r3, r1
 8003568:	fbb0 f3f3 	udiv	r3, r0, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003576:	e00f      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	6809      	ldr	r1, [r1, #0]
 800359c:	4313      	orrs	r3, r2
 800359e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6911      	ldr	r1, [r2, #16]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	000186a0 	.word	0x000186a0
 8003634:	001e847f 	.word	0x001e847f
 8003638:	003d08ff 	.word	0x003d08ff
 800363c:	431bde83 	.word	0x431bde83
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	460b      	mov	r3, r1
 8003652:	817b      	strh	r3, [r7, #10]
 8003654:	4613      	mov	r3, r2
 8003656:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003658:	f7ff f838 	bl	80026cc <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b20      	cmp	r3, #32
 8003668:	f040 80e0 	bne.w	800382c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2319      	movs	r3, #25
 8003672:	2201      	movs	r2, #1
 8003674:	4970      	ldr	r1, [pc, #448]	; (8003838 <HAL_I2C_Master_Transmit+0x1f4>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fd86 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
 8003684:	e0d3      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_I2C_Master_Transmit+0x50>
 8003690:	2302      	movs	r3, #2
 8003692:	e0cc      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d007      	beq.n	80036ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2221      	movs	r2, #33	; 0x21
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2210      	movs	r2, #16
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	893a      	ldrh	r2, [r7, #8]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a50      	ldr	r2, [pc, #320]	; (800383c <HAL_I2C_Master_Transmit+0x1f8>)
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036fc:	8979      	ldrh	r1, [r7, #10]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fbf0 	bl	8003ee8 <I2C_MasterRequestWrite>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e08d      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003728:	e066      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fe00 	bl	8004334 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06b      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11b      	bne.n	80037cc <HAL_I2C_Master_Transmit+0x188>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	6a39      	ldr	r1, [r7, #32]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fdf0 	bl	80043b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d107      	bne.n	80037f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01a      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d194      	bne.n	800372a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	00100002 	.word	0x00100002
 800383c:	ffff0000 	.word	0xffff0000

08003840 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	461a      	mov	r2, r3
 800384c:	460b      	mov	r3, r1
 800384e:	817b      	strh	r3, [r7, #10]
 8003850:	4613      	mov	r3, r2
 8003852:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7fe ff3a 	bl	80026cc <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	f040 820b 	bne.w	8003c7e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	2319      	movs	r3, #25
 800386e:	2201      	movs	r2, #1
 8003870:	497c      	ldr	r1, [pc, #496]	; (8003a64 <HAL_I2C_Master_Receive+0x224>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fc88 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	e1fe      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_I2C_Master_Receive+0x50>
 800388c:	2302      	movs	r3, #2
 800388e:	e1f7      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d007      	beq.n	80038b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2222      	movs	r2, #34	; 0x22
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2210      	movs	r2, #16
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	893a      	ldrh	r2, [r7, #8]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a5c      	ldr	r2, [pc, #368]	; (8003a68 <HAL_I2C_Master_Receive+0x228>)
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fb74 	bl	8003fec <I2C_MasterRequestRead>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1b8      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d113      	bne.n	800393e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e18c      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	2b01      	cmp	r3, #1
 8003944:	d11b      	bne.n	800397e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e16c      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	2b02      	cmp	r3, #2
 8003984:	d11b      	bne.n	80039be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	e14c      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039e4:	e138      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	f200 80f1 	bhi.w	8003bd2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d123      	bne.n	8003a40 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fd1b 	bl	8004438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e139      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a3e:	e10b      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d14e      	bne.n	8003ae6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4906      	ldr	r1, [pc, #24]	; (8003a6c <HAL_I2C_Master_Receive+0x22c>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fb98 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e10e      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
 8003a62:	bf00      	nop
 8003a64:	00100002 	.word	0x00100002
 8003a68:	ffff0000 	.word	0xffff0000
 8003a6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae4:	e0b8      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	2200      	movs	r2, #0
 8003aee:	4966      	ldr	r1, [pc, #408]	; (8003c88 <HAL_I2C_Master_Receive+0x448>)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fb49 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0bf      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	2200      	movs	r2, #0
 8003b4a:	494f      	ldr	r1, [pc, #316]	; (8003c88 <HAL_I2C_Master_Receive+0x448>)
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fb1b 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e091      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bd0:	e042      	b.n	8003c58 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fc2e 	bl	8004438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e04c      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d118      	bne.n	8003c58 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f aec2 	bne.w	80039e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010004 	.word	0x00010004

08003c8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7fe fd16 	bl	80026cc <HAL_GetTick>
 8003ca0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	f040 8111 	bne.w	8003ed6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2319      	movs	r3, #25
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4988      	ldr	r1, [pc, #544]	; (8003ee0 <HAL_I2C_IsDeviceReady+0x254>)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fa62 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e104      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_I2C_IsDeviceReady+0x50>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e0fd      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d007      	beq.n	8003d02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2224      	movs	r2, #36	; 0x24
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a70      	ldr	r2, [pc, #448]	; (8003ee4 <HAL_I2C_IsDeviceReady+0x258>)
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa20 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5c:	d103      	bne.n	8003d66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0b6      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6a:	897b      	ldrh	r3, [r7, #10]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fca7 	bl	80026cc <HAL_GetTick>
 8003d7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dae:	e025      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003db0:	f7fe fc8c 	bl	80026cc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <HAL_I2C_IsDeviceReady+0x13a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22a0      	movs	r2, #160	; 0xa0
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2ba0      	cmp	r3, #160	; 0xa0
 8003e06:	d005      	beq.n	8003e14 <HAL_I2C_IsDeviceReady+0x188>
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_I2C_IsDeviceReady+0x188>
 8003e0e:	7dbb      	ldrb	r3, [r7, #22]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0cd      	beq.n	8003db0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d129      	bne.n	8003e7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2319      	movs	r3, #25
 8003e56:	2201      	movs	r2, #1
 8003e58:	4921      	ldr	r1, [pc, #132]	; (8003ee0 <HAL_I2C_IsDeviceReady+0x254>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f994 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e036      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e02c      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	490f      	ldr	r1, [pc, #60]	; (8003ee0 <HAL_I2C_IsDeviceReady+0x254>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f970 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e012      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	f4ff af32 	bcc.w	8003d26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	00100002 	.word	0x00100002
 8003ee4:	ffff0000 	.word	0xffff0000

08003ee8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d006      	beq.n	8003f12 <I2C_MasterRequestWrite+0x2a>
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d003      	beq.n	8003f12 <I2C_MasterRequestWrite+0x2a>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f10:	d108      	bne.n	8003f24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e00b      	b.n	8003f3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	2b12      	cmp	r3, #18
 8003f2a:	d107      	bne.n	8003f3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f91d 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	d103      	bne.n	8003f6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e035      	b.n	8003fdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f78:	d108      	bne.n	8003f8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	e01b      	b.n	8003fc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f8c:	897b      	ldrh	r3, [r7, #10]
 8003f8e:	11db      	asrs	r3, r3, #7
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0306 	and.w	r3, r3, #6
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f063 030f 	orn	r3, r3, #15
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <I2C_MasterRequestWrite+0xfc>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f943 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e010      	b.n	8003fdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fba:	897b      	ldrh	r3, [r7, #10]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4907      	ldr	r1, [pc, #28]	; (8003fe8 <I2C_MasterRequestWrite+0x100>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f933 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	00010008 	.word	0x00010008
 8003fe8:	00010002 	.word	0x00010002

08003fec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004010:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d006      	beq.n	8004026 <I2C_MasterRequestRead+0x3a>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d003      	beq.n	8004026 <I2C_MasterRequestRead+0x3a>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004024:	d108      	bne.n	8004038 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e00b      	b.n	8004050 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	2b11      	cmp	r3, #17
 800403e:	d107      	bne.n	8004050 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f893 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d103      	bne.n	8004080 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e079      	b.n	8004178 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d108      	bne.n	80040a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
 800409e:	e05f      	b.n	8004160 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	11db      	asrs	r3, r3, #7
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f063 030f 	orn	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4930      	ldr	r1, [pc, #192]	; (8004180 <I2C_MasterRequestRead+0x194>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f8b9 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e054      	b.n	8004178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4929      	ldr	r1, [pc, #164]	; (8004184 <I2C_MasterRequestRead+0x198>)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f8a9 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e044      	b.n	8004178 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004112:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f831 	bl	8004188 <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d103      	bne.n	8004144 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e017      	b.n	8004178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004148:	897b      	ldrh	r3, [r7, #10]
 800414a:	11db      	asrs	r3, r3, #7
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0306 	and.w	r3, r3, #6
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f063 030e 	orn	r3, r3, #14
 8004158:	b2da      	uxtb	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4907      	ldr	r1, [pc, #28]	; (8004184 <I2C_MasterRequestRead+0x198>)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f865 	bl	8004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	00010008 	.word	0x00010008
 8004184:	00010002 	.word	0x00010002

08004188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004198:	e025      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d021      	beq.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fe fa93 	bl	80026cc <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e023      	b.n	800422e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10d      	bne.n	800420c <I2C_WaitOnFlagUntilTimeout+0x84>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	e00c      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	429a      	cmp	r2, r3
 800422a:	d0b6      	beq.n	800419a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004244:	e051      	b.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d123      	bne.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004264:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800426e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e046      	b.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d021      	beq.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fe fa11 	bl	80026cc <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e020      	b.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10c      	bne.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e00b      	b.n	8004326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d18d      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004340:	e02d      	b.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f8ce 	bl	80044e4 <I2C_IsAcknowledgeFailed>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02d      	b.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d021      	beq.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fe f9b7 	bl	80026cc <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d116      	bne.n	800439e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d1ca      	bne.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c2:	e02d      	b.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f88d 	bl	80044e4 <I2C_IsAcknowledgeFailed>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e02d      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d021      	beq.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe f976 	bl	80026cc <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b04      	cmp	r3, #4
 800442c:	d1ca      	bne.n	80043c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004444:	e042      	b.n	80044cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d119      	bne.n	8004488 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0210 	mvn.w	r2, #16
 800445c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e029      	b.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004488:	f7fe f920 	bl	80026cc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e007      	b.n	80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d1b5      	bne.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d11b      	bne.n	8004534 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004504:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0cc      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004558:	4b68      	ldr	r3, [pc, #416]	; (80046fc <HAL_RCC_ClockConfig+0x1b8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d90c      	bls.n	8004580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b65      	ldr	r3, [pc, #404]	; (80046fc <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0b8      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004598:	4b59      	ldr	r3, [pc, #356]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b0:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a52      	ldr	r2, [pc, #328]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b50      	ldr	r3, [pc, #320]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	494d      	ldr	r1, [pc, #308]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d044      	beq.n	8004664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d119      	bne.n	8004622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e07f      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004602:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e06f      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004612:	4b3b      	ldr	r3, [pc, #236]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e067      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004622:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 0203 	bic.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4934      	ldr	r1, [pc, #208]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004634:	f7fe f84a 	bl	80026cc <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	e00a      	b.n	8004652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463c:	f7fe f846 	bl	80026cc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e04f      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 020c 	and.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	429a      	cmp	r2, r3
 8004662:	d1eb      	bne.n	800463c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_ClockConfig+0x1b8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d20c      	bcs.n	800468c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004672:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e032      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4916      	ldr	r1, [pc, #88]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	490e      	ldr	r1, [pc, #56]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ca:	f000 f855 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	490a      	ldr	r1, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x1c0>)
 80046dc:	5ccb      	ldrb	r3, [r1, r3]
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	4a09      	ldr	r2, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd ffaa 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023c00 	.word	0x40023c00
 8004700:	40023800 	.word	0x40023800
 8004704:	08008418 	.word	0x08008418
 8004708:	20000008 	.word	0x20000008
 800470c:	2000000c 	.word	0x2000000c

08004710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <HAL_RCC_GetHCLKFreq+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000008 	.word	0x20000008

08004728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800472c:	f7ff fff0 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4903      	ldr	r1, [pc, #12]	; (800474c <HAL_RCC_GetPCLK1Freq+0x24>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40023800 	.word	0x40023800
 800474c:	08008428 	.word	0x08008428

08004750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004754:	f7ff ffdc 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0b5b      	lsrs	r3, r3, #13
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	08008428 	.word	0x08008428

08004778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477c:	b0ae      	sub	sp, #184	; 0xb8
 800477e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800479e:	4bcb      	ldr	r3, [pc, #812]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	f200 8204 	bhi.w	8004bb4 <HAL_RCC_GetSysClockFreq+0x43c>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047e9 	.word	0x080047e9
 80047b8:	08004bb5 	.word	0x08004bb5
 80047bc:	08004bb5 	.word	0x08004bb5
 80047c0:	08004bb5 	.word	0x08004bb5
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004bb5 	.word	0x08004bb5
 80047cc:	08004bb5 	.word	0x08004bb5
 80047d0:	08004bb5 	.word	0x08004bb5
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	08004bb5 	.word	0x08004bb5
 80047dc:	08004bb5 	.word	0x08004bb5
 80047e0:	08004bb5 	.word	0x08004bb5
 80047e4:	080049e9 	.word	0x080049e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4bb9      	ldr	r3, [pc, #740]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x358>)
 80047ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80047ee:	e1e5      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047f0:	4bb7      	ldr	r3, [pc, #732]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x358>)
 80047f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047f6:	e1e1      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f8:	4bb4      	ldr	r3, [pc, #720]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004804:	4bb1      	ldr	r3, [pc, #708]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d071      	beq.n	80048f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004810:	4bae      	ldr	r3, [pc, #696]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800481c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	f04f 0000 	mov.w	r0, #0
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	0159      	lsls	r1, r3, #5
 8004844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004848:	0150      	lsls	r0, r2, #5
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4621      	mov	r1, r4
 8004850:	1a51      	subs	r1, r2, r1
 8004852:	6439      	str	r1, [r7, #64]	; 0x40
 8004854:	4629      	mov	r1, r5
 8004856:	eb63 0301 	sbc.w	r3, r3, r1
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004868:	4649      	mov	r1, r9
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	4641      	mov	r1, r8
 800486e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004872:	4641      	mov	r1, r8
 8004874:	018a      	lsls	r2, r1, #6
 8004876:	4641      	mov	r1, r8
 8004878:	1a51      	subs	r1, r2, r1
 800487a:	63b9      	str	r1, [r7, #56]	; 0x38
 800487c:	4649      	mov	r1, r9
 800487e:	eb63 0301 	sbc.w	r3, r3, r1
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004890:	4649      	mov	r1, r9
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4641      	mov	r1, r8
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4641      	mov	r1, r8
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4622      	mov	r2, r4
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
 80048aa:	462b      	mov	r3, r5
 80048ac:	460a      	mov	r2, r1
 80048ae:	eb42 0303 	adc.w	r3, r2, r3
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048c0:	4629      	mov	r1, r5
 80048c2:	028b      	lsls	r3, r1, #10
 80048c4:	4621      	mov	r1, r4
 80048c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ca:	4621      	mov	r1, r4
 80048cc:	028a      	lsls	r2, r1, #10
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048e4:	f7fc f994 	bl	8000c10 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f2:	e067      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f4:	4b75      	ldr	r3, [pc, #468]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004900:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004904:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	67bb      	str	r3, [r7, #120]	; 0x78
 800490e:	2300      	movs	r3, #0
 8004910:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004912:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	0159      	lsls	r1, r3, #5
 8004924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004928:	0150      	lsls	r0, r2, #5
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4621      	mov	r1, r4
 8004930:	1a51      	subs	r1, r2, r1
 8004932:	62b9      	str	r1, [r7, #40]	; 0x28
 8004934:	4629      	mov	r1, r5
 8004936:	eb63 0301 	sbc.w	r3, r3, r1
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004948:	4649      	mov	r1, r9
 800494a:	018b      	lsls	r3, r1, #6
 800494c:	4641      	mov	r1, r8
 800494e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004952:	4641      	mov	r1, r8
 8004954:	018a      	lsls	r2, r1, #6
 8004956:	4641      	mov	r1, r8
 8004958:	ebb2 0a01 	subs.w	sl, r2, r1
 800495c:	4649      	mov	r1, r9
 800495e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800496e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004976:	4692      	mov	sl, r2
 8004978:	469b      	mov	fp, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb1a 0303 	adds.w	r3, sl, r3
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	462b      	mov	r3, r5
 8004984:	eb4b 0303 	adc.w	r3, fp, r3
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004996:	4629      	mov	r1, r5
 8004998:	028b      	lsls	r3, r1, #10
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a0:	4621      	mov	r1, r4
 80049a2:	028a      	lsls	r2, r1, #10
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ac:	2200      	movs	r2, #0
 80049ae:	673b      	str	r3, [r7, #112]	; 0x70
 80049b0:	677a      	str	r2, [r7, #116]	; 0x74
 80049b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049b6:	f7fc f92b 	bl	8000c10 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4613      	mov	r3, r2
 80049c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c4:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	3301      	adds	r3, #1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80049d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049e6:	e0e9      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e8:	4b38      	ldr	r3, [pc, #224]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f4:	4b35      	ldr	r3, [pc, #212]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d069      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a00:	4b32      	ldr	r3, [pc, #200]	; (8004acc <HAL_RCC_GetSysClockFreq+0x354>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	2200      	movs	r2, #0
 8004a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	663b      	str	r3, [r7, #96]	; 0x60
 8004a14:	2300      	movs	r3, #0
 8004a16:	667b      	str	r3, [r7, #100]	; 0x64
 8004a18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	462b      	mov	r3, r5
 8004a20:	f04f 0000 	mov.w	r0, #0
 8004a24:	f04f 0100 	mov.w	r1, #0
 8004a28:	0159      	lsls	r1, r3, #5
 8004a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a2e:	0150      	lsls	r0, r2, #5
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4621      	mov	r1, r4
 8004a36:	1a51      	subs	r1, r2, r1
 8004a38:	61b9      	str	r1, [r7, #24]
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a4e:	4659      	mov	r1, fp
 8004a50:	018b      	lsls	r3, r1, #6
 8004a52:	4651      	mov	r1, sl
 8004a54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a58:	4651      	mov	r1, sl
 8004a5a:	018a      	lsls	r2, r1, #6
 8004a5c:	4651      	mov	r1, sl
 8004a5e:	ebb2 0801 	subs.w	r8, r2, r1
 8004a62:	4659      	mov	r1, fp
 8004a64:	eb63 0901 	sbc.w	r9, r3, r1
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a7c:	4690      	mov	r8, r2
 8004a7e:	4699      	mov	r9, r3
 8004a80:	4623      	mov	r3, r4
 8004a82:	eb18 0303 	adds.w	r3, r8, r3
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	462b      	mov	r3, r5
 8004a8a:	eb49 0303 	adc.w	r3, r9, r3
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	028b      	lsls	r3, r1, #10
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	028a      	lsls	r2, r1, #10
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ab6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ab8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004abc:	f7fc f8a8 	bl	8000c10 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aca:	e063      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x41c>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad4:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x454>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	2200      	movs	r2, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	4611      	mov	r1, r2
 8004ae0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	657b      	str	r3, [r7, #84]	; 0x54
 8004aea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004aee:	4642      	mov	r2, r8
 8004af0:	464b      	mov	r3, r9
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	0159      	lsls	r1, r3, #5
 8004afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b00:	0150      	lsls	r0, r2, #5
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4641      	mov	r1, r8
 8004b08:	1a51      	subs	r1, r2, r1
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b20:	4659      	mov	r1, fp
 8004b22:	018b      	lsls	r3, r1, #6
 8004b24:	4651      	mov	r1, sl
 8004b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	018a      	lsls	r2, r1, #6
 8004b2e:	4651      	mov	r1, sl
 8004b30:	1a54      	subs	r4, r2, r1
 8004b32:	4659      	mov	r1, fp
 8004b34:	eb63 0501 	sbc.w	r5, r3, r1
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	00eb      	lsls	r3, r5, #3
 8004b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b46:	00e2      	lsls	r2, r4, #3
 8004b48:	4614      	mov	r4, r2
 8004b4a:	461d      	mov	r5, r3
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	18e3      	adds	r3, r4, r3
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	464b      	mov	r3, r9
 8004b54:	eb45 0303 	adc.w	r3, r5, r3
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b66:	4629      	mov	r1, r5
 8004b68:	028b      	lsls	r3, r1, #10
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b70:	4621      	mov	r1, r4
 8004b72:	028a      	lsls	r2, r1, #10
 8004b74:	4610      	mov	r0, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b86:	f7fc f843 	bl	8000c10 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4613      	mov	r3, r2
 8004b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x454>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	0f1b      	lsrs	r3, r3, #28
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bb2:	e003      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	37b8      	adds	r7, #184	; 0xb8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e28d      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8083 	beq.w	8004cfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bf4:	4b94      	ldr	r3, [pc, #592]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d019      	beq.n	8004c34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c00:	4b91      	ldr	r3, [pc, #580]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d106      	bne.n	8004c1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c0c:	4b8e      	ldr	r3, [pc, #568]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c18:	d00c      	beq.n	8004c34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1a:	4b8b      	ldr	r3, [pc, #556]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d112      	bne.n	8004c4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c26:	4b88      	ldr	r3, [pc, #544]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	4b84      	ldr	r3, [pc, #528]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d05b      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x124>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d157      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e25a      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d106      	bne.n	8004c64 <HAL_RCC_OscConfig+0x90>
 8004c56:	4b7c      	ldr	r3, [pc, #496]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7b      	ldr	r2, [pc, #492]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e01d      	b.n	8004ca0 <HAL_RCC_OscConfig+0xcc>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0xb4>
 8004c6e:	4b76      	ldr	r3, [pc, #472]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a75      	ldr	r2, [pc, #468]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	4b73      	ldr	r3, [pc, #460]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a72      	ldr	r2, [pc, #456]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e00b      	b.n	8004ca0 <HAL_RCC_OscConfig+0xcc>
 8004c88:	4b6f      	ldr	r3, [pc, #444]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a6e      	ldr	r2, [pc, #440]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4b6c      	ldr	r3, [pc, #432]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6b      	ldr	r2, [pc, #428]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fd10 	bl	80026cc <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fd fd0c 	bl	80026cc <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	; 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e21f      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	4b61      	ldr	r3, [pc, #388]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xdc>
 8004cce:	e014      	b.n	8004cfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fd fcfc 	bl	80026cc <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fd fcf8 	bl	80026cc <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e20b      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x104>
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d06f      	beq.n	8004de6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d06:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d12:	4b4d      	ldr	r3, [pc, #308]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d36:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d116      	bne.n	8004d70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x186>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1d3      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4937      	ldr	r1, [pc, #220]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	e03a      	b.n	8004de6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d78:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_RCC_OscConfig+0x278>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fd fca5 	bl	80026cc <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fd fca1 	bl	80026cc <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1b4      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4925      	ldr	r1, [pc, #148]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_OscConfig+0x278>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fc84 	bl	80026cc <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fc80 	bl	80026cc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e193      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d036      	beq.n	8004e60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd fc64 	bl	80026cc <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fd fc60 	bl	80026cc <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e173      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_OscConfig+0x274>)
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x234>
 8004e26:	e01b      	b.n	8004e60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_RCC_OscConfig+0x27c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fc4d 	bl	80026cc <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	e00e      	b.n	8004e54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fd fc49 	bl	80026cc <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d907      	bls.n	8004e54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e15c      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	42470000 	.word	0x42470000
 8004e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	4b8a      	ldr	r3, [pc, #552]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ea      	bne.n	8004e36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8097 	beq.w	8004f9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e72:	4b83      	ldr	r3, [pc, #524]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	4b7f      	ldr	r3, [pc, #508]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4a7e      	ldr	r2, [pc, #504]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8e:	4b7c      	ldr	r3, [pc, #496]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	4b79      	ldr	r3, [pc, #484]	; (8005084 <HAL_RCC_OscConfig+0x4b0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d118      	bne.n	8004edc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eaa:	4b76      	ldr	r3, [pc, #472]	; (8005084 <HAL_RCC_OscConfig+0x4b0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a75      	ldr	r2, [pc, #468]	; (8005084 <HAL_RCC_OscConfig+0x4b0>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb6:	f7fd fc09 	bl	80026cc <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fd fc05 	bl	80026cc <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e118      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	4b6c      	ldr	r3, [pc, #432]	; (8005084 <HAL_RCC_OscConfig+0x4b0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x31e>
 8004ee4:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	4a65      	ldr	r2, [pc, #404]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef0:	e01c      	b.n	8004f2c <HAL_RCC_OscConfig+0x358>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x340>
 8004efa:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a60      	ldr	r2, [pc, #384]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
 8004f06:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a5d      	ldr	r2, [pc, #372]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0x358>
 8004f14:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	4a59      	ldr	r2, [pc, #356]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f20:	4b57      	ldr	r3, [pc, #348]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a56      	ldr	r2, [pc, #344]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fd fbca 	bl	80026cc <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fbc6 	bl	80026cc <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0d7      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	4b4b      	ldr	r3, [pc, #300]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ee      	beq.n	8004f3c <HAL_RCC_OscConfig+0x368>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fd fbb4 	bl	80026cc <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fd fbb0 	bl	80026cc <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e0c1      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	4b40      	ldr	r3, [pc, #256]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ee      	bne.n	8004f68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f90:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	4a3a      	ldr	r2, [pc, #232]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80ad 	beq.w	8005100 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa6:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d060      	beq.n	8005074 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d145      	bne.n	8005046 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b33      	ldr	r3, [pc, #204]	; (8005088 <HAL_RCC_OscConfig+0x4b4>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fb84 	bl	80026cc <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd fb80 	bl	80026cc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e093      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	3b01      	subs	r3, #1
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	061b      	lsls	r3, r3, #24
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	071b      	lsls	r3, r3, #28
 8005012:	491b      	ldr	r1, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	4313      	orrs	r3, r2
 8005016:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005018:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x4b4>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fd fb55 	bl	80026cc <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005026:	f7fd fb51 	bl	80026cc <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e064      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x452>
 8005044:	e05c      	b.n	8005100 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <HAL_RCC_OscConfig+0x4b4>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd fb3e 	bl	80026cc <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005054:	f7fd fb3a 	bl	80026cc <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e04d      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_OscConfig+0x4ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x480>
 8005072:	e045      	b.n	8005100 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d107      	bne.n	800508c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e040      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
 8005080:	40023800 	.word	0x40023800
 8005084:	40007000 	.word	0x40007000
 8005088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800508c:	4b1f      	ldr	r3, [pc, #124]	; (800510c <HAL_RCC_OscConfig+0x538>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d030      	beq.n	80050fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d129      	bne.n	80050fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d122      	bne.n	80050fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d119      	bne.n	80050fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	3b01      	subs	r3, #1
 80050d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d10f      	bne.n	80050fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40023800 	.word	0x40023800

08005110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e041      	b.n	80051a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fd f89a 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f000 fa96 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d001      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e04e      	b.n	8005266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a23      	ldr	r2, [pc, #140]	; (8005274 <HAL_TIM_Base_Start_IT+0xc4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d022      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d01d      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <HAL_TIM_Base_Start_IT+0xc8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <HAL_TIM_Base_Start_IT+0xcc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_TIM_Base_Start_IT+0xd0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_TIM_Base_Start_IT+0xd4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a19      	ldr	r2, [pc, #100]	; (8005288 <HAL_TIM_Base_Start_IT+0xd8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x80>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_TIM_Base_Start_IT+0xdc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d111      	bne.n	8005254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b06      	cmp	r3, #6
 8005240:	d010      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005252:	e007      	b.n	8005264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40010400 	.word	0x40010400
 8005288:	40014000 	.word	0x40014000
 800528c:	40001800 	.word	0x40001800

08005290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0202 	mvn.w	r2, #2
 80052bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9b5 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9a7 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f9b8 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0204 	mvn.w	r2, #4
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f98b 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f97d 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f98e 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b08      	cmp	r3, #8
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0208 	mvn.w	r2, #8
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2204      	movs	r2, #4
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f961 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f953 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f964 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0210 	mvn.w	r2, #16
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2208      	movs	r2, #8
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f937 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f929 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f93a 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0201 	mvn.w	r2, #1
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc f874 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d10e      	bne.n	8005440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d107      	bne.n	8005440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fae0 	bl	8005a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8ff 	bl	800566a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b20      	cmp	r3, #32
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b20      	cmp	r3, #32
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0220 	mvn.w	r2, #32
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 faaa 	bl	80059ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0x1c>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0b4      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x186>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d03e      	beq.n	8005574 <HAL_TIM_ConfigClockSource+0xd4>
 80054f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fa:	f200 8087 	bhi.w	800560c <HAL_TIM_ConfigClockSource+0x16c>
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005502:	f000 8086 	beq.w	8005612 <HAL_TIM_ConfigClockSource+0x172>
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550a:	d87f      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d01a      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0xa6>
 8005510:	2b70      	cmp	r3, #112	; 0x70
 8005512:	d87b      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d050      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x11a>
 8005518:	2b60      	cmp	r3, #96	; 0x60
 800551a:	d877      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d03c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0xfa>
 8005520:	2b50      	cmp	r3, #80	; 0x50
 8005522:	d873      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d058      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x13a>
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d86f      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d064      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005530:	2b30      	cmp	r3, #48	; 0x30
 8005532:	d86b      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d060      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d867      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d05c      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	2b10      	cmp	r3, #16
 8005542:	d05a      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	e062      	b.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6899      	ldr	r1, [r3, #8]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f000 f9ad 	bl	80058b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	609a      	str	r2, [r3, #8]
      break;
 8005572:	e04f      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6899      	ldr	r1, [r3, #8]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f000 f996 	bl	80058b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005596:	609a      	str	r2, [r3, #8]
      break;
 8005598:	e03c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 f90a 	bl	80057c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2150      	movs	r1, #80	; 0x50
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f963 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055b8:	e02c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 f929 	bl	800581e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2160      	movs	r1, #96	; 0x60
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f953 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055d8:	e01c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f000 f8ea 	bl	80057c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2140      	movs	r1, #64	; 0x40
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f943 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055f8:	e00c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f000 f93a 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 800560a:	e003      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	e000      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <TIM_Base_SetConfig+0x114>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3a      	ldr	r2, [pc, #232]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <TIM_Base_SetConfig+0x114>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d027      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d023      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <TIM_Base_SetConfig+0x128>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <TIM_Base_SetConfig+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_Base_SetConfig+0x134>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <TIM_Base_SetConfig+0x138>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a23      	ldr	r2, [pc, #140]	; (80057bc <TIM_Base_SetConfig+0x13c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40001800 	.word	0x40001800
 80057b8:	40001c00 	.word	0x40001c00
 80057bc:	40002000 	.word	0x40002000

080057c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 030a 	bic.w	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581e:	b480      	push	{r7}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0210 	bic.w	r2, r3, #16
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	f043 0307 	orr.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e05a      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d01d      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e03f      	b.n	8005aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc fc40 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fc47 	bl	80062ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b08a      	sub	sp, #40	; 0x28
 8005ab2:	af02      	add	r7, sp, #8
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d17c      	bne.n	8005bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_Transmit+0x2c>
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e075      	b.n	8005bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Transmit+0x3e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e06e      	b.n	8005bca <HAL_UART_Transmit+0x11c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b02:	f7fc fde3 	bl	80026cc <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1c:	d108      	bne.n	8005b30 <HAL_UART_Transmit+0x82>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e003      	b.n	8005b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b40:	e02a      	b.n	8005b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fa34 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e036      	b.n	8005bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3302      	adds	r3, #2
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e007      	b.n	8005b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1cf      	bne.n	8005b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2140      	movs	r1, #64	; 0x40
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fa04 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e006      	b.n	8005bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b08a      	sub	sp, #40	; 0x28
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 808c 	bne.w	8005d0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Receive+0x2e>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e084      	b.n	8005d0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Receive+0x40>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e07d      	b.n	8005d0e <HAL_UART_Receive+0x13c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2222      	movs	r2, #34	; 0x22
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc fd4d 	bl	80026cc <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Receive+0x8a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c6c:	e043      	b.n	8005cf6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2120      	movs	r1, #32
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f99e 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e042      	b.n	8005d0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	e01f      	b.n	8005ce8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d007      	beq.n	8005cc2 <HAL_UART_Receive+0xf0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_UART_Receive+0xfe>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e008      	b.n	8005ce2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1b6      	bne.n	8005c6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d11d      	bne.n	8005d6c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_UART_Receive_DMA+0x26>
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e016      	b.n	8005d6e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_UART_Receive_DMA+0x38>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e00f      	b.n	8005d6e <HAL_UART_Receive_DMA+0x58>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f998 	bl	8006098 <UART_Start_Receive_DMA>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	e000      	b.n	8005d6e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d6c:	2302      	movs	r3, #2
  }
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b09c      	sub	sp, #112	; 0x70
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d172      	bne.n	8005ecc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	2200      	movs	r2, #0
 8005dea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e0e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	667b      	str	r3, [r7, #100]	; 0x64
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e40:	647a      	str	r2, [r7, #68]	; 0x44
 8005e42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3314      	adds	r3, #20
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	e853 3f00 	ldrex	r3, [r3]
 8005e62:	623b      	str	r3, [r7, #32]
   return(result);
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3314      	adds	r3, #20
 8005e72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e74:	633a      	str	r2, [r7, #48]	; 0x30
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d119      	bne.n	8005ecc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eb8:	61fa      	str	r2, [r7, #28]
 8005eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69b9      	ldr	r1, [r7, #24]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d106      	bne.n	8005ee2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005edc:	f7ff ff69 	bl	8005db2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ee0:	e002      	b.n	8005ee8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ee2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ee4:	f7ff ff47 	bl	8005d76 <HAL_UART_RxCpltCallback>
}
 8005ee8:	bf00      	nop
 8005eea:	3770      	adds	r7, #112	; 0x70
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d108      	bne.n	8005f18 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	4619      	mov	r1, r3
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff ff4e 	bl	8005db2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f16:	e002      	b.n	8005f1e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff ff36 	bl	8005d8a <HAL_UART_RxHalfCpltCallback>
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f42:	2b80      	cmp	r3, #128	; 0x80
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b21      	cmp	r3, #33	; 0x21
 8005f58:	d108      	bne.n	8005f6c <UART_DMAError+0x46>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f66:	68b8      	ldr	r0, [r7, #8]
 8005f68:	f000 f934 	bl	80061d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b22      	cmp	r3, #34	; 0x22
 8005f8c:	d108      	bne.n	8005fa0 <UART_DMAError+0x7a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f9a:	68b8      	ldr	r0, [r7, #8]
 8005f9c:	f000 f942 	bl	8006224 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	f043 0210 	orr.w	r2, r3, #16
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fac:	68b8      	ldr	r0, [r7, #8]
 8005fae:	f7ff fef6 	bl	8005d9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b090      	sub	sp, #64	; 0x40
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fca:	e050      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d04c      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0x30>
 8005fda:	f7fc fb77 	bl	80026cc <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d241      	bcs.n	800606e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800600a:	637a      	str	r2, [r7, #52]	; 0x34
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3314      	adds	r3, #20
 8006024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	63bb      	str	r3, [r7, #56]	; 0x38
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800603e:	623a      	str	r2, [r7, #32]
 8006040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	69f9      	ldr	r1, [r7, #28]
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	61bb      	str	r3, [r7, #24]
   return(result);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e00f      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d09f      	beq.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3740      	adds	r7, #64	; 0x40
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b098      	sub	sp, #96	; 0x60
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2222      	movs	r2, #34	; 0x22
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	4a40      	ldr	r2, [pc, #256]	; (80061c8 <UART_Start_Receive_DMA+0x130>)
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4a3f      	ldr	r2, [pc, #252]	; (80061cc <UART_Start_Receive_DMA+0x134>)
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	4a3e      	ldr	r2, [pc, #248]	; (80061d0 <UART_Start_Receive_DMA+0x138>)
 80060d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	2200      	movs	r2, #0
 80060de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	f7fc fcd8 	bl	8002aac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d019      	beq.n	8006156 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006138:	65bb      	str	r3, [r7, #88]	; 0x58
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006142:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	657b      	str	r3, [r7, #84]	; 0x54
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006176:	63ba      	str	r2, [r7, #56]	; 0x38
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800617c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	617b      	str	r3, [r7, #20]
   return(result);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061aa:	627a      	str	r2, [r7, #36]	; 0x24
 80061ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6a39      	ldr	r1, [r7, #32]
 80061b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e5      	bne.n	800618a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3760      	adds	r7, #96	; 0x60
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	08005dcb 	.word	0x08005dcb
 80061cc:	08005ef1 	.word	0x08005ef1
 80061d0:	08005f27 	.word	0x08005f27

080061d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b089      	sub	sp, #36	; 0x24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	61ba      	str	r2, [r7, #24]
 80061fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6979      	ldr	r1, [r7, #20]
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	613b      	str	r3, [r7, #16]
   return(result);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e5      	bne.n	80061dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006218:	bf00      	nop
 800621a:	3724      	adds	r7, #36	; 0x24
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b095      	sub	sp, #84	; 0x54
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800624c:	643a      	str	r2, [r7, #64]	; 0x40
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	2b01      	cmp	r3, #1
 800629a:	d119      	bne.n	80062d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0310 	bic.w	r3, r3, #16
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062bc:	61ba      	str	r2, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062de:	bf00      	nop
 80062e0:	3754      	adds	r7, #84	; 0x54
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b0c0      	sub	sp, #256	; 0x100
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	68d9      	ldr	r1, [r3, #12]
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	ea40 0301 	orr.w	r3, r0, r1
 8006314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006344:	f021 010c 	bic.w	r1, r1, #12
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006352:	430b      	orrs	r3, r1
 8006354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006366:	6999      	ldr	r1, [r3, #24]
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	ea40 0301 	orr.w	r3, r0, r1
 8006372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b8f      	ldr	r3, [pc, #572]	; (80065b8 <UART_SetConfig+0x2cc>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d005      	beq.n	800638c <UART_SetConfig+0xa0>
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b8d      	ldr	r3, [pc, #564]	; (80065bc <UART_SetConfig+0x2d0>)
 8006388:	429a      	cmp	r2, r3
 800638a:	d104      	bne.n	8006396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800638c:	f7fe f9e0 	bl	8004750 <HAL_RCC_GetPCLK2Freq>
 8006390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006394:	e003      	b.n	800639e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006396:	f7fe f9c7 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 800639a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	f040 810c 	bne.w	80065c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063c6:	415b      	adcs	r3, r3
 80063c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063ce:	4621      	mov	r1, r4
 80063d0:	eb12 0801 	adds.w	r8, r2, r1
 80063d4:	4629      	mov	r1, r5
 80063d6:	eb43 0901 	adc.w	r9, r3, r1
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	4623      	mov	r3, r4
 80063f4:	eb18 0303 	adds.w	r3, r8, r3
 80063f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063fc:	462b      	mov	r3, r5
 80063fe:	eb49 0303 	adc.w	r3, r9, r3
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800641a:	460b      	mov	r3, r1
 800641c:	18db      	adds	r3, r3, r3
 800641e:	653b      	str	r3, [r7, #80]	; 0x50
 8006420:	4613      	mov	r3, r2
 8006422:	eb42 0303 	adc.w	r3, r2, r3
 8006426:	657b      	str	r3, [r7, #84]	; 0x54
 8006428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800642c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006430:	f7fa fbee 	bl	8000c10 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <UART_SetConfig+0x2d4>)
 800643a:	fba3 2302 	umull	r2, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	011c      	lsls	r4, r3, #4
 8006442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006446:	2200      	movs	r2, #0
 8006448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800644c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	64b9      	str	r1, [r7, #72]	; 0x48
 800645c:	415b      	adcs	r3, r3
 800645e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006464:	4641      	mov	r1, r8
 8006466:	eb12 0a01 	adds.w	sl, r2, r1
 800646a:	4649      	mov	r1, r9
 800646c:	eb43 0b01 	adc.w	fp, r3, r1
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800647c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006484:	4692      	mov	sl, r2
 8006486:	469b      	mov	fp, r3
 8006488:	4643      	mov	r3, r8
 800648a:	eb1a 0303 	adds.w	r3, sl, r3
 800648e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006492:	464b      	mov	r3, r9
 8006494:	eb4b 0303 	adc.w	r3, fp, r3
 8006498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064b0:	460b      	mov	r3, r1
 80064b2:	18db      	adds	r3, r3, r3
 80064b4:	643b      	str	r3, [r7, #64]	; 0x40
 80064b6:	4613      	mov	r3, r2
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	647b      	str	r3, [r7, #68]	; 0x44
 80064be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064c6:	f7fa fba3 	bl	8000c10 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <UART_SetConfig+0x2d4>)
 80064d2:	fba3 2301 	umull	r2, r3, r3, r1
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2264      	movs	r2, #100	; 0x64
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	1acb      	subs	r3, r1, r3
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064e6:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <UART_SetConfig+0x2d4>)
 80064e8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f4:	441c      	add	r4, r3
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	1891      	adds	r1, r2, r2
 800650e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006510:	415b      	adcs	r3, r3
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006518:	4641      	mov	r1, r8
 800651a:	1851      	adds	r1, r2, r1
 800651c:	6339      	str	r1, [r7, #48]	; 0x30
 800651e:	4649      	mov	r1, r9
 8006520:	414b      	adcs	r3, r1
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006530:	4659      	mov	r1, fp
 8006532:	00cb      	lsls	r3, r1, #3
 8006534:	4651      	mov	r1, sl
 8006536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653a:	4651      	mov	r1, sl
 800653c:	00ca      	lsls	r2, r1, #3
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	4603      	mov	r3, r0
 8006544:	4642      	mov	r2, r8
 8006546:	189b      	adds	r3, r3, r2
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800654c:	464b      	mov	r3, r9
 800654e:	460a      	mov	r2, r1
 8006550:	eb42 0303 	adc.w	r3, r2, r3
 8006554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800656c:	460b      	mov	r3, r1
 800656e:	18db      	adds	r3, r3, r3
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
 8006572:	4613      	mov	r3, r2
 8006574:	eb42 0303 	adc.w	r3, r2, r3
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800657e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006582:	f7fa fb45 	bl	8000c10 <__aeabi_uldivmod>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <UART_SetConfig+0x2d4>)
 800658c:	fba3 1302 	umull	r1, r3, r3, r2
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	2164      	movs	r1, #100	; 0x64
 8006594:	fb01 f303 	mul.w	r3, r1, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	3332      	adds	r3, #50	; 0x32
 800659e:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <UART_SetConfig+0x2d4>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	f003 0207 	and.w	r2, r3, #7
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4422      	add	r2, r4
 80065b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065b4:	e105      	b.n	80067c2 <UART_SetConfig+0x4d6>
 80065b6:	bf00      	nop
 80065b8:	40011000 	.word	0x40011000
 80065bc:	40011400 	.word	0x40011400
 80065c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6239      	str	r1, [r7, #32]
 80065de:	415b      	adcs	r3, r3
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
 80065e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065e6:	4641      	mov	r1, r8
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	4649      	mov	r1, r9
 80065ec:	eb43 0501 	adc.w	r5, r3, r1
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	00eb      	lsls	r3, r5, #3
 80065fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065fe:	00e2      	lsls	r2, r4, #3
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	4643      	mov	r3, r8
 8006606:	18e3      	adds	r3, r4, r3
 8006608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800660c:	464b      	mov	r3, r9
 800660e:	eb45 0303 	adc.w	r3, r5, r3
 8006612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006632:	4629      	mov	r1, r5
 8006634:	008b      	lsls	r3, r1, #2
 8006636:	4621      	mov	r1, r4
 8006638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663c:	4621      	mov	r1, r4
 800663e:	008a      	lsls	r2, r1, #2
 8006640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006644:	f7fa fae4 	bl	8000c10 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4b60      	ldr	r3, [pc, #384]	; (80067d0 <UART_SetConfig+0x4e4>)
 800664e:	fba3 2302 	umull	r2, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	011c      	lsls	r4, r3, #4
 8006656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665a:	2200      	movs	r2, #0
 800665c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	1891      	adds	r1, r2, r2
 800666e:	61b9      	str	r1, [r7, #24]
 8006670:	415b      	adcs	r3, r3
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006678:	4641      	mov	r1, r8
 800667a:	1851      	adds	r1, r2, r1
 800667c:	6139      	str	r1, [r7, #16]
 800667e:	4649      	mov	r1, r9
 8006680:	414b      	adcs	r3, r1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006690:	4659      	mov	r1, fp
 8006692:	00cb      	lsls	r3, r1, #3
 8006694:	4651      	mov	r1, sl
 8006696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669a:	4651      	mov	r1, sl
 800669c:	00ca      	lsls	r2, r1, #3
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	4642      	mov	r2, r8
 80066a6:	189b      	adds	r3, r3, r2
 80066a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066ac:	464b      	mov	r3, r9
 80066ae:	460a      	mov	r2, r1
 80066b0:	eb42 0303 	adc.w	r3, r2, r3
 80066b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066d0:	4649      	mov	r1, r9
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	4641      	mov	r1, r8
 80066d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066da:	4641      	mov	r1, r8
 80066dc:	008a      	lsls	r2, r1, #2
 80066de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066e2:	f7fa fa95 	bl	8000c10 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4b39      	ldr	r3, [pc, #228]	; (80067d0 <UART_SetConfig+0x4e4>)
 80066ec:	fba3 1302 	umull	r1, r3, r3, r2
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	2164      	movs	r1, #100	; 0x64
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	3332      	adds	r3, #50	; 0x32
 80066fe:	4a34      	ldr	r2, [pc, #208]	; (80067d0 <UART_SetConfig+0x4e4>)
 8006700:	fba2 2303 	umull	r2, r3, r2, r3
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800670a:	441c      	add	r4, r3
 800670c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006710:	2200      	movs	r2, #0
 8006712:	673b      	str	r3, [r7, #112]	; 0x70
 8006714:	677a      	str	r2, [r7, #116]	; 0x74
 8006716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800671a:	4642      	mov	r2, r8
 800671c:	464b      	mov	r3, r9
 800671e:	1891      	adds	r1, r2, r2
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	415b      	adcs	r3, r3
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800672a:	4641      	mov	r1, r8
 800672c:	1851      	adds	r1, r2, r1
 800672e:	6039      	str	r1, [r7, #0]
 8006730:	4649      	mov	r1, r9
 8006732:	414b      	adcs	r3, r1
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006742:	4659      	mov	r1, fp
 8006744:	00cb      	lsls	r3, r1, #3
 8006746:	4651      	mov	r1, sl
 8006748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800674c:	4651      	mov	r1, sl
 800674e:	00ca      	lsls	r2, r1, #3
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	4603      	mov	r3, r0
 8006756:	4642      	mov	r2, r8
 8006758:	189b      	adds	r3, r3, r2
 800675a:	66bb      	str	r3, [r7, #104]	; 0x68
 800675c:	464b      	mov	r3, r9
 800675e:	460a      	mov	r2, r1
 8006760:	eb42 0303 	adc.w	r3, r2, r3
 8006764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	663b      	str	r3, [r7, #96]	; 0x60
 8006770:	667a      	str	r2, [r7, #100]	; 0x64
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800677e:	4649      	mov	r1, r9
 8006780:	008b      	lsls	r3, r1, #2
 8006782:	4641      	mov	r1, r8
 8006784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006788:	4641      	mov	r1, r8
 800678a:	008a      	lsls	r2, r1, #2
 800678c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006790:	f7fa fa3e 	bl	8000c10 <__aeabi_uldivmod>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <UART_SetConfig+0x4e4>)
 800679a:	fba3 1302 	umull	r1, r3, r3, r2
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	2164      	movs	r1, #100	; 0x64
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	3332      	adds	r3, #50	; 0x32
 80067ac:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <UART_SetConfig+0x4e4>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4422      	add	r2, r4
 80067c0:	609a      	str	r2, [r3, #8]
}
 80067c2:	bf00      	nop
 80067c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067c8:	46bd      	mov	sp, r7
 80067ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ce:	bf00      	nop
 80067d0:	51eb851f 	.word	0x51eb851f

080067d4 <copysign>:
 80067d4:	b082      	sub	sp, #8
 80067d6:	ec51 0b10 	vmov	r0, r1, d0
 80067da:	ed8d 1b00 	vstr	d1, [sp]
 80067de:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80067e2:	9901      	ldr	r1, [sp, #4]
 80067e4:	ee10 2a10 	vmov	r2, s0
 80067e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80067ec:	ea40 0301 	orr.w	r3, r0, r1
 80067f0:	ec43 2b10 	vmov	d0, r2, r3
 80067f4:	b002      	add	sp, #8
 80067f6:	4770      	bx	lr

080067f8 <sin>:
 80067f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067fa:	ec53 2b10 	vmov	r2, r3, d0
 80067fe:	4828      	ldr	r0, [pc, #160]	; (80068a0 <sin+0xa8>)
 8006800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006804:	4281      	cmp	r1, r0
 8006806:	dc07      	bgt.n	8006818 <sin+0x20>
 8006808:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006898 <sin+0xa0>
 800680c:	2000      	movs	r0, #0
 800680e:	b005      	add	sp, #20
 8006810:	f85d eb04 	ldr.w	lr, [sp], #4
 8006814:	f001 ba38 	b.w	8007c88 <__kernel_sin>
 8006818:	4822      	ldr	r0, [pc, #136]	; (80068a4 <sin+0xac>)
 800681a:	4281      	cmp	r1, r0
 800681c:	dd09      	ble.n	8006832 <sin+0x3a>
 800681e:	ee10 0a10 	vmov	r0, s0
 8006822:	4619      	mov	r1, r3
 8006824:	f7f9 fcf4 	bl	8000210 <__aeabi_dsub>
 8006828:	ec41 0b10 	vmov	d0, r0, r1
 800682c:	b005      	add	sp, #20
 800682e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006832:	4668      	mov	r0, sp
 8006834:	f000 fb50 	bl	8006ed8 <__ieee754_rem_pio2>
 8006838:	f000 0003 	and.w	r0, r0, #3
 800683c:	2801      	cmp	r0, #1
 800683e:	d00c      	beq.n	800685a <sin+0x62>
 8006840:	2802      	cmp	r0, #2
 8006842:	d011      	beq.n	8006868 <sin+0x70>
 8006844:	b9f0      	cbnz	r0, 8006884 <sin+0x8c>
 8006846:	ed9d 1b02 	vldr	d1, [sp, #8]
 800684a:	ed9d 0b00 	vldr	d0, [sp]
 800684e:	2001      	movs	r0, #1
 8006850:	f001 fa1a 	bl	8007c88 <__kernel_sin>
 8006854:	ec51 0b10 	vmov	r0, r1, d0
 8006858:	e7e6      	b.n	8006828 <sin+0x30>
 800685a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800685e:	ed9d 0b00 	vldr	d0, [sp]
 8006862:	f000 fdf9 	bl	8007458 <__kernel_cos>
 8006866:	e7f5      	b.n	8006854 <sin+0x5c>
 8006868:	ed9d 1b02 	vldr	d1, [sp, #8]
 800686c:	ed9d 0b00 	vldr	d0, [sp]
 8006870:	2001      	movs	r0, #1
 8006872:	f001 fa09 	bl	8007c88 <__kernel_sin>
 8006876:	ec53 2b10 	vmov	r2, r3, d0
 800687a:	ee10 0a10 	vmov	r0, s0
 800687e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006882:	e7d1      	b.n	8006828 <sin+0x30>
 8006884:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006888:	ed9d 0b00 	vldr	d0, [sp]
 800688c:	f000 fde4 	bl	8007458 <__kernel_cos>
 8006890:	e7f1      	b.n	8006876 <sin+0x7e>
 8006892:	bf00      	nop
 8006894:	f3af 8000 	nop.w
	...
 80068a0:	3fe921fb 	.word	0x3fe921fb
 80068a4:	7fefffff 	.word	0x7fefffff

080068a8 <asin>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	ed2d 8b02 	vpush	{d8}
 80068ae:	ec55 4b10 	vmov	r4, r5, d0
 80068b2:	f000 f831 	bl	8006918 <__ieee754_asin>
 80068b6:	4622      	mov	r2, r4
 80068b8:	462b      	mov	r3, r5
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	eeb0 8a40 	vmov.f32	s16, s0
 80068c2:	eef0 8a60 	vmov.f32	s17, s1
 80068c6:	f7fa f8f5 	bl	8000ab4 <__aeabi_dcmpun>
 80068ca:	b9a8      	cbnz	r0, 80068f8 <asin+0x50>
 80068cc:	ec45 4b10 	vmov	d0, r4, r5
 80068d0:	f001 fc3a 	bl	8008148 <fabs>
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <asin+0x60>)
 80068d6:	ec51 0b10 	vmov	r0, r1, d0
 80068da:	2200      	movs	r2, #0
 80068dc:	f7fa f8e0 	bl	8000aa0 <__aeabi_dcmpgt>
 80068e0:	b150      	cbz	r0, 80068f8 <asin+0x50>
 80068e2:	f001 fd4b 	bl	800837c <__errno>
 80068e6:	ecbd 8b02 	vpop	{d8}
 80068ea:	2321      	movs	r3, #33	; 0x21
 80068ec:	6003      	str	r3, [r0, #0]
 80068ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f2:	4806      	ldr	r0, [pc, #24]	; (800690c <asin+0x64>)
 80068f4:	f001 bcb4 	b.w	8008260 <nan>
 80068f8:	eeb0 0a48 	vmov.f32	s0, s16
 80068fc:	eef0 0a68 	vmov.f32	s1, s17
 8006900:	ecbd 8b02 	vpop	{d8}
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	bf00      	nop
 8006908:	3ff00000 	.word	0x3ff00000
 800690c:	08008438 	.word	0x08008438

08006910 <atan2>:
 8006910:	f000 ba16 	b.w	8006d40 <__ieee754_atan2>
 8006914:	0000      	movs	r0, r0
	...

08006918 <__ieee754_asin>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	ed2d 8b04 	vpush	{d8-d9}
 8006920:	ec55 4b10 	vmov	r4, r5, d0
 8006924:	4bcc      	ldr	r3, [pc, #816]	; (8006c58 <__ieee754_asin+0x340>)
 8006926:	b083      	sub	sp, #12
 8006928:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800692c:	4598      	cmp	r8, r3
 800692e:	9501      	str	r5, [sp, #4]
 8006930:	dd35      	ble.n	800699e <__ieee754_asin+0x86>
 8006932:	ee10 3a10 	vmov	r3, s0
 8006936:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800693a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800693e:	ea58 0303 	orrs.w	r3, r8, r3
 8006942:	d117      	bne.n	8006974 <__ieee754_asin+0x5c>
 8006944:	a3aa      	add	r3, pc, #680	; (adr r3, 8006bf0 <__ieee754_asin+0x2d8>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	ee10 0a10 	vmov	r0, s0
 800694e:	4629      	mov	r1, r5
 8006950:	f7f9 fe16 	bl	8000580 <__aeabi_dmul>
 8006954:	a3a8      	add	r3, pc, #672	; (adr r3, 8006bf8 <__ieee754_asin+0x2e0>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	4620      	mov	r0, r4
 8006960:	4629      	mov	r1, r5
 8006962:	f7f9 fe0d 	bl	8000580 <__aeabi_dmul>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4630      	mov	r0, r6
 800696c:	4639      	mov	r1, r7
 800696e:	f7f9 fc51 	bl	8000214 <__adddf3>
 8006972:	e00b      	b.n	800698c <__ieee754_asin+0x74>
 8006974:	ee10 2a10 	vmov	r2, s0
 8006978:	462b      	mov	r3, r5
 800697a:	ee10 0a10 	vmov	r0, s0
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fc46 	bl	8000210 <__aeabi_dsub>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	f7f9 ff24 	bl	80007d4 <__aeabi_ddiv>
 800698c:	4604      	mov	r4, r0
 800698e:	460d      	mov	r5, r1
 8006990:	ec45 4b10 	vmov	d0, r4, r5
 8006994:	b003      	add	sp, #12
 8006996:	ecbd 8b04 	vpop	{d8-d9}
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	4baf      	ldr	r3, [pc, #700]	; (8006c5c <__ieee754_asin+0x344>)
 80069a0:	4598      	cmp	r8, r3
 80069a2:	dc11      	bgt.n	80069c8 <__ieee754_asin+0xb0>
 80069a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80069a8:	f280 80ae 	bge.w	8006b08 <__ieee754_asin+0x1f0>
 80069ac:	a394      	add	r3, pc, #592	; (adr r3, 8006c00 <__ieee754_asin+0x2e8>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	ee10 0a10 	vmov	r0, s0
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 fc2c 	bl	8000214 <__adddf3>
 80069bc:	4ba8      	ldr	r3, [pc, #672]	; (8006c60 <__ieee754_asin+0x348>)
 80069be:	2200      	movs	r2, #0
 80069c0:	f7fa f86e 	bl	8000aa0 <__aeabi_dcmpgt>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d1e3      	bne.n	8006990 <__ieee754_asin+0x78>
 80069c8:	ec45 4b10 	vmov	d0, r4, r5
 80069cc:	f001 fbbc 	bl	8008148 <fabs>
 80069d0:	49a3      	ldr	r1, [pc, #652]	; (8006c60 <__ieee754_asin+0x348>)
 80069d2:	ec53 2b10 	vmov	r2, r3, d0
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7f9 fc1a 	bl	8000210 <__aeabi_dsub>
 80069dc:	4ba1      	ldr	r3, [pc, #644]	; (8006c64 <__ieee754_asin+0x34c>)
 80069de:	2200      	movs	r2, #0
 80069e0:	f7f9 fdce 	bl	8000580 <__aeabi_dmul>
 80069e4:	a388      	add	r3, pc, #544	; (adr r3, 8006c08 <__ieee754_asin+0x2f0>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	4604      	mov	r4, r0
 80069ec:	460d      	mov	r5, r1
 80069ee:	f7f9 fdc7 	bl	8000580 <__aeabi_dmul>
 80069f2:	a387      	add	r3, pc, #540	; (adr r3, 8006c10 <__ieee754_asin+0x2f8>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fc0c 	bl	8000214 <__adddf3>
 80069fc:	4622      	mov	r2, r4
 80069fe:	462b      	mov	r3, r5
 8006a00:	f7f9 fdbe 	bl	8000580 <__aeabi_dmul>
 8006a04:	a384      	add	r3, pc, #528	; (adr r3, 8006c18 <__ieee754_asin+0x300>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f7f9 fc01 	bl	8000210 <__aeabi_dsub>
 8006a0e:	4622      	mov	r2, r4
 8006a10:	462b      	mov	r3, r5
 8006a12:	f7f9 fdb5 	bl	8000580 <__aeabi_dmul>
 8006a16:	a382      	add	r3, pc, #520	; (adr r3, 8006c20 <__ieee754_asin+0x308>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f7f9 fbfa 	bl	8000214 <__adddf3>
 8006a20:	4622      	mov	r2, r4
 8006a22:	462b      	mov	r3, r5
 8006a24:	f7f9 fdac 	bl	8000580 <__aeabi_dmul>
 8006a28:	a37f      	add	r3, pc, #508	; (adr r3, 8006c28 <__ieee754_asin+0x310>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fbef 	bl	8000210 <__aeabi_dsub>
 8006a32:	4622      	mov	r2, r4
 8006a34:	462b      	mov	r3, r5
 8006a36:	f7f9 fda3 	bl	8000580 <__aeabi_dmul>
 8006a3a:	a37d      	add	r3, pc, #500	; (adr r3, 8006c30 <__ieee754_asin+0x318>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fbe8 	bl	8000214 <__adddf3>
 8006a44:	4622      	mov	r2, r4
 8006a46:	462b      	mov	r3, r5
 8006a48:	f7f9 fd9a 	bl	8000580 <__aeabi_dmul>
 8006a4c:	a37a      	add	r3, pc, #488	; (adr r3, 8006c38 <__ieee754_asin+0x320>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	ec41 0b18 	vmov	d8, r0, r1
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7f9 fd91 	bl	8000580 <__aeabi_dmul>
 8006a5e:	a378      	add	r3, pc, #480	; (adr r3, 8006c40 <__ieee754_asin+0x328>)
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f7f9 fbd4 	bl	8000210 <__aeabi_dsub>
 8006a68:	4622      	mov	r2, r4
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	f7f9 fd88 	bl	8000580 <__aeabi_dmul>
 8006a70:	a375      	add	r3, pc, #468	; (adr r3, 8006c48 <__ieee754_asin+0x330>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fbcd 	bl	8000214 <__adddf3>
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	f7f9 fd7f 	bl	8000580 <__aeabi_dmul>
 8006a82:	a373      	add	r3, pc, #460	; (adr r3, 8006c50 <__ieee754_asin+0x338>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fbc2 	bl	8000210 <__aeabi_dsub>
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	462b      	mov	r3, r5
 8006a90:	f7f9 fd76 	bl	8000580 <__aeabi_dmul>
 8006a94:	4b72      	ldr	r3, [pc, #456]	; (8006c60 <__ieee754_asin+0x348>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	f7f9 fbbc 	bl	8000214 <__adddf3>
 8006a9c:	ec45 4b10 	vmov	d0, r4, r5
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	f000 fc24 	bl	80072f0 <__ieee754_sqrt>
 8006aa8:	4b6f      	ldr	r3, [pc, #444]	; (8006c68 <__ieee754_asin+0x350>)
 8006aaa:	4598      	cmp	r8, r3
 8006aac:	ec5b ab10 	vmov	sl, fp, d0
 8006ab0:	f340 80dc 	ble.w	8006c6c <__ieee754_asin+0x354>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	ec51 0b18 	vmov	r0, r1, d8
 8006abc:	f7f9 fe8a 	bl	80007d4 <__aeabi_ddiv>
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	f7f9 fd5c 	bl	8000580 <__aeabi_dmul>
 8006ac8:	4652      	mov	r2, sl
 8006aca:	465b      	mov	r3, fp
 8006acc:	f7f9 fba2 	bl	8000214 <__adddf3>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	f7f9 fb9e 	bl	8000214 <__adddf3>
 8006ad8:	a347      	add	r3, pc, #284	; (adr r3, 8006bf8 <__ieee754_asin+0x2e0>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fb97 	bl	8000210 <__aeabi_dsub>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	a142      	add	r1, pc, #264	; (adr r1, 8006bf0 <__ieee754_asin+0x2d8>)
 8006ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aec:	f7f9 fb90 	bl	8000210 <__aeabi_dsub>
 8006af0:	9b01      	ldr	r3, [sp, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bfdc      	itt	le
 8006af6:	4602      	movle	r2, r0
 8006af8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	bfdc      	itt	le
 8006b02:	4614      	movle	r4, r2
 8006b04:	461d      	movle	r5, r3
 8006b06:	e743      	b.n	8006990 <__ieee754_asin+0x78>
 8006b08:	ee10 2a10 	vmov	r2, s0
 8006b0c:	ee10 0a10 	vmov	r0, s0
 8006b10:	462b      	mov	r3, r5
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fd34 	bl	8000580 <__aeabi_dmul>
 8006b18:	a33b      	add	r3, pc, #236	; (adr r3, 8006c08 <__ieee754_asin+0x2f0>)
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	f7f9 fd2d 	bl	8000580 <__aeabi_dmul>
 8006b26:	a33a      	add	r3, pc, #232	; (adr r3, 8006c10 <__ieee754_asin+0x2f8>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 fb72 	bl	8000214 <__adddf3>
 8006b30:	4632      	mov	r2, r6
 8006b32:	463b      	mov	r3, r7
 8006b34:	f7f9 fd24 	bl	8000580 <__aeabi_dmul>
 8006b38:	a337      	add	r3, pc, #220	; (adr r3, 8006c18 <__ieee754_asin+0x300>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fb67 	bl	8000210 <__aeabi_dsub>
 8006b42:	4632      	mov	r2, r6
 8006b44:	463b      	mov	r3, r7
 8006b46:	f7f9 fd1b 	bl	8000580 <__aeabi_dmul>
 8006b4a:	a335      	add	r3, pc, #212	; (adr r3, 8006c20 <__ieee754_asin+0x308>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fb60 	bl	8000214 <__adddf3>
 8006b54:	4632      	mov	r2, r6
 8006b56:	463b      	mov	r3, r7
 8006b58:	f7f9 fd12 	bl	8000580 <__aeabi_dmul>
 8006b5c:	a332      	add	r3, pc, #200	; (adr r3, 8006c28 <__ieee754_asin+0x310>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f7f9 fb55 	bl	8000210 <__aeabi_dsub>
 8006b66:	4632      	mov	r2, r6
 8006b68:	463b      	mov	r3, r7
 8006b6a:	f7f9 fd09 	bl	8000580 <__aeabi_dmul>
 8006b6e:	a330      	add	r3, pc, #192	; (adr r3, 8006c30 <__ieee754_asin+0x318>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f7f9 fb4e 	bl	8000214 <__adddf3>
 8006b78:	4632      	mov	r2, r6
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	f7f9 fd00 	bl	8000580 <__aeabi_dmul>
 8006b80:	a32d      	add	r3, pc, #180	; (adr r3, 8006c38 <__ieee754_asin+0x320>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	4680      	mov	r8, r0
 8006b88:	4689      	mov	r9, r1
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 fcf7 	bl	8000580 <__aeabi_dmul>
 8006b92:	a32b      	add	r3, pc, #172	; (adr r3, 8006c40 <__ieee754_asin+0x328>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fb3a 	bl	8000210 <__aeabi_dsub>
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	f7f9 fcee 	bl	8000580 <__aeabi_dmul>
 8006ba4:	a328      	add	r3, pc, #160	; (adr r3, 8006c48 <__ieee754_asin+0x330>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fb33 	bl	8000214 <__adddf3>
 8006bae:	4632      	mov	r2, r6
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	f7f9 fce5 	bl	8000580 <__aeabi_dmul>
 8006bb6:	a326      	add	r3, pc, #152	; (adr r3, 8006c50 <__ieee754_asin+0x338>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fb28 	bl	8000210 <__aeabi_dsub>
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	f7f9 fcdc 	bl	8000580 <__aeabi_dmul>
 8006bc8:	4b25      	ldr	r3, [pc, #148]	; (8006c60 <__ieee754_asin+0x348>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f7f9 fb22 	bl	8000214 <__adddf3>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 fdfc 	bl	80007d4 <__aeabi_ddiv>
 8006bdc:	4622      	mov	r2, r4
 8006bde:	462b      	mov	r3, r5
 8006be0:	f7f9 fcce 	bl	8000580 <__aeabi_dmul>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	e6bf      	b.n	800696e <__ieee754_asin+0x56>
 8006bee:	bf00      	nop
 8006bf0:	54442d18 	.word	0x54442d18
 8006bf4:	3ff921fb 	.word	0x3ff921fb
 8006bf8:	33145c07 	.word	0x33145c07
 8006bfc:	3c91a626 	.word	0x3c91a626
 8006c00:	8800759c 	.word	0x8800759c
 8006c04:	7e37e43c 	.word	0x7e37e43c
 8006c08:	0dfdf709 	.word	0x0dfdf709
 8006c0c:	3f023de1 	.word	0x3f023de1
 8006c10:	7501b288 	.word	0x7501b288
 8006c14:	3f49efe0 	.word	0x3f49efe0
 8006c18:	b5688f3b 	.word	0xb5688f3b
 8006c1c:	3fa48228 	.word	0x3fa48228
 8006c20:	0e884455 	.word	0x0e884455
 8006c24:	3fc9c155 	.word	0x3fc9c155
 8006c28:	03eb6f7d 	.word	0x03eb6f7d
 8006c2c:	3fd4d612 	.word	0x3fd4d612
 8006c30:	55555555 	.word	0x55555555
 8006c34:	3fc55555 	.word	0x3fc55555
 8006c38:	b12e9282 	.word	0xb12e9282
 8006c3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006c40:	1b8d0159 	.word	0x1b8d0159
 8006c44:	3fe6066c 	.word	0x3fe6066c
 8006c48:	9c598ac8 	.word	0x9c598ac8
 8006c4c:	40002ae5 	.word	0x40002ae5
 8006c50:	1c8a2d4b 	.word	0x1c8a2d4b
 8006c54:	40033a27 	.word	0x40033a27
 8006c58:	3fefffff 	.word	0x3fefffff
 8006c5c:	3fdfffff 	.word	0x3fdfffff
 8006c60:	3ff00000 	.word	0x3ff00000
 8006c64:	3fe00000 	.word	0x3fe00000
 8006c68:	3fef3332 	.word	0x3fef3332
 8006c6c:	ee10 2a10 	vmov	r2, s0
 8006c70:	ee10 0a10 	vmov	r0, s0
 8006c74:	465b      	mov	r3, fp
 8006c76:	4659      	mov	r1, fp
 8006c78:	f7f9 facc 	bl	8000214 <__adddf3>
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	463b      	mov	r3, r7
 8006c80:	ec41 0b19 	vmov	d9, r0, r1
 8006c84:	ec51 0b18 	vmov	r0, r1, d8
 8006c88:	f7f9 fda4 	bl	80007d4 <__aeabi_ddiv>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	ec51 0b19 	vmov	r0, r1, d9
 8006c94:	f7f9 fc74 	bl	8000580 <__aeabi_dmul>
 8006c98:	f04f 0800 	mov.w	r8, #0
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	465b      	mov	r3, fp
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	f7f9 fc6a 	bl	8000580 <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 faac 	bl	8000210 <__aeabi_dsub>
 8006cb8:	4642      	mov	r2, r8
 8006cba:	4604      	mov	r4, r0
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	465b      	mov	r3, fp
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	4659      	mov	r1, fp
 8006cc4:	f7f9 faa6 	bl	8000214 <__adddf3>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 fd80 	bl	80007d4 <__aeabi_ddiv>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	f7f9 fa9c 	bl	8000214 <__adddf3>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	a113      	add	r1, pc, #76	; (adr r1, 8006d30 <__ieee754_asin+0x418>)
 8006ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce6:	f7f9 fa93 	bl	8000210 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4630      	mov	r0, r6
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	f7f9 fa8d 	bl	8000210 <__aeabi_dsub>
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4659      	mov	r1, fp
 8006d02:	f7f9 fa87 	bl	8000214 <__adddf3>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	a10b      	add	r1, pc, #44	; (adr r1, 8006d38 <__ieee754_asin+0x420>)
 8006d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d10:	f7f9 fa7e 	bl	8000210 <__aeabi_dsub>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4620      	mov	r0, r4
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	f7f9 fa78 	bl	8000210 <__aeabi_dsub>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	a104      	add	r1, pc, #16	; (adr r1, 8006d38 <__ieee754_asin+0x420>)
 8006d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d2a:	e6df      	b.n	8006aec <__ieee754_asin+0x1d4>
 8006d2c:	f3af 8000 	nop.w
 8006d30:	33145c07 	.word	0x33145c07
 8006d34:	3c91a626 	.word	0x3c91a626
 8006d38:	54442d18 	.word	0x54442d18
 8006d3c:	3fe921fb 	.word	0x3fe921fb

08006d40 <__ieee754_atan2>:
 8006d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	ec57 6b11 	vmov	r6, r7, d1
 8006d48:	4273      	negs	r3, r6
 8006d4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006ed0 <__ieee754_atan2+0x190>
 8006d4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006d52:	4333      	orrs	r3, r6
 8006d54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006d58:	4573      	cmp	r3, lr
 8006d5a:	ec51 0b10 	vmov	r0, r1, d0
 8006d5e:	ee11 8a10 	vmov	r8, s2
 8006d62:	d80a      	bhi.n	8006d7a <__ieee754_atan2+0x3a>
 8006d64:	4244      	negs	r4, r0
 8006d66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d6a:	4304      	orrs	r4, r0
 8006d6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006d70:	4574      	cmp	r4, lr
 8006d72:	ee10 9a10 	vmov	r9, s0
 8006d76:	468c      	mov	ip, r1
 8006d78:	d907      	bls.n	8006d8a <__ieee754_atan2+0x4a>
 8006d7a:	4632      	mov	r2, r6
 8006d7c:	463b      	mov	r3, r7
 8006d7e:	f7f9 fa49 	bl	8000214 <__adddf3>
 8006d82:	ec41 0b10 	vmov	d0, r0, r1
 8006d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006d8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d92:	4334      	orrs	r4, r6
 8006d94:	d103      	bne.n	8006d9e <__ieee754_atan2+0x5e>
 8006d96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d9a:	f001 b835 	b.w	8007e08 <atan>
 8006d9e:	17bc      	asrs	r4, r7, #30
 8006da0:	f004 0402 	and.w	r4, r4, #2
 8006da4:	ea53 0909 	orrs.w	r9, r3, r9
 8006da8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006dac:	d107      	bne.n	8006dbe <__ieee754_atan2+0x7e>
 8006dae:	2c02      	cmp	r4, #2
 8006db0:	d060      	beq.n	8006e74 <__ieee754_atan2+0x134>
 8006db2:	2c03      	cmp	r4, #3
 8006db4:	d1e5      	bne.n	8006d82 <__ieee754_atan2+0x42>
 8006db6:	a142      	add	r1, pc, #264	; (adr r1, 8006ec0 <__ieee754_atan2+0x180>)
 8006db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dbc:	e7e1      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006dbe:	ea52 0808 	orrs.w	r8, r2, r8
 8006dc2:	d106      	bne.n	8006dd2 <__ieee754_atan2+0x92>
 8006dc4:	f1bc 0f00 	cmp.w	ip, #0
 8006dc8:	da5f      	bge.n	8006e8a <__ieee754_atan2+0x14a>
 8006dca:	a13f      	add	r1, pc, #252	; (adr r1, 8006ec8 <__ieee754_atan2+0x188>)
 8006dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dd0:	e7d7      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006dd2:	4572      	cmp	r2, lr
 8006dd4:	d10f      	bne.n	8006df6 <__ieee754_atan2+0xb6>
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ddc:	d107      	bne.n	8006dee <__ieee754_atan2+0xae>
 8006dde:	2c02      	cmp	r4, #2
 8006de0:	d84c      	bhi.n	8006e7c <__ieee754_atan2+0x13c>
 8006de2:	4b35      	ldr	r3, [pc, #212]	; (8006eb8 <__ieee754_atan2+0x178>)
 8006de4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006de8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006dec:	e7c9      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006dee:	2c02      	cmp	r4, #2
 8006df0:	d848      	bhi.n	8006e84 <__ieee754_atan2+0x144>
 8006df2:	4b32      	ldr	r3, [pc, #200]	; (8006ebc <__ieee754_atan2+0x17c>)
 8006df4:	e7f6      	b.n	8006de4 <__ieee754_atan2+0xa4>
 8006df6:	4573      	cmp	r3, lr
 8006df8:	d0e4      	beq.n	8006dc4 <__ieee754_atan2+0x84>
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006e00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e04:	da1e      	bge.n	8006e44 <__ieee754_atan2+0x104>
 8006e06:	2f00      	cmp	r7, #0
 8006e08:	da01      	bge.n	8006e0e <__ieee754_atan2+0xce>
 8006e0a:	323c      	adds	r2, #60	; 0x3c
 8006e0c:	db1e      	blt.n	8006e4c <__ieee754_atan2+0x10c>
 8006e0e:	4632      	mov	r2, r6
 8006e10:	463b      	mov	r3, r7
 8006e12:	f7f9 fcdf 	bl	80007d4 <__aeabi_ddiv>
 8006e16:	ec41 0b10 	vmov	d0, r0, r1
 8006e1a:	f001 f995 	bl	8008148 <fabs>
 8006e1e:	f000 fff3 	bl	8007e08 <atan>
 8006e22:	ec51 0b10 	vmov	r0, r1, d0
 8006e26:	2c01      	cmp	r4, #1
 8006e28:	d013      	beq.n	8006e52 <__ieee754_atan2+0x112>
 8006e2a:	2c02      	cmp	r4, #2
 8006e2c:	d015      	beq.n	8006e5a <__ieee754_atan2+0x11a>
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	d0a7      	beq.n	8006d82 <__ieee754_atan2+0x42>
 8006e32:	a319      	add	r3, pc, #100	; (adr r3, 8006e98 <__ieee754_atan2+0x158>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 f9ea 	bl	8000210 <__aeabi_dsub>
 8006e3c:	a318      	add	r3, pc, #96	; (adr r3, 8006ea0 <__ieee754_atan2+0x160>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	e014      	b.n	8006e6e <__ieee754_atan2+0x12e>
 8006e44:	a118      	add	r1, pc, #96	; (adr r1, 8006ea8 <__ieee754_atan2+0x168>)
 8006e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e4a:	e7ec      	b.n	8006e26 <__ieee754_atan2+0xe6>
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	e7e9      	b.n	8006e26 <__ieee754_atan2+0xe6>
 8006e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e56:	4619      	mov	r1, r3
 8006e58:	e793      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006e5a:	a30f      	add	r3, pc, #60	; (adr r3, 8006e98 <__ieee754_atan2+0x158>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f9d6 	bl	8000210 <__aeabi_dsub>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	a10d      	add	r1, pc, #52	; (adr r1, 8006ea0 <__ieee754_atan2+0x160>)
 8006e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e6e:	f7f9 f9cf 	bl	8000210 <__aeabi_dsub>
 8006e72:	e786      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006e74:	a10a      	add	r1, pc, #40	; (adr r1, 8006ea0 <__ieee754_atan2+0x160>)
 8006e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7a:	e782      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006e7c:	a10c      	add	r1, pc, #48	; (adr r1, 8006eb0 <__ieee754_atan2+0x170>)
 8006e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e82:	e77e      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006e84:	2000      	movs	r0, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	e77b      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006e8a:	a107      	add	r1, pc, #28	; (adr r1, 8006ea8 <__ieee754_atan2+0x168>)
 8006e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e90:	e777      	b.n	8006d82 <__ieee754_atan2+0x42>
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	33145c07 	.word	0x33145c07
 8006e9c:	3ca1a626 	.word	0x3ca1a626
 8006ea0:	54442d18 	.word	0x54442d18
 8006ea4:	400921fb 	.word	0x400921fb
 8006ea8:	54442d18 	.word	0x54442d18
 8006eac:	3ff921fb 	.word	0x3ff921fb
 8006eb0:	54442d18 	.word	0x54442d18
 8006eb4:	3fe921fb 	.word	0x3fe921fb
 8006eb8:	08008440 	.word	0x08008440
 8006ebc:	08008458 	.word	0x08008458
 8006ec0:	54442d18 	.word	0x54442d18
 8006ec4:	c00921fb 	.word	0xc00921fb
 8006ec8:	54442d18 	.word	0x54442d18
 8006ecc:	bff921fb 	.word	0xbff921fb
 8006ed0:	7ff00000 	.word	0x7ff00000
 8006ed4:	00000000 	.word	0x00000000

08006ed8 <__ieee754_rem_pio2>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	ed2d 8b02 	vpush	{d8}
 8006ee0:	ec55 4b10 	vmov	r4, r5, d0
 8006ee4:	4bca      	ldr	r3, [pc, #808]	; (8007210 <__ieee754_rem_pio2+0x338>)
 8006ee6:	b08b      	sub	sp, #44	; 0x2c
 8006ee8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006eec:	4598      	cmp	r8, r3
 8006eee:	4682      	mov	sl, r0
 8006ef0:	9502      	str	r5, [sp, #8]
 8006ef2:	dc08      	bgt.n	8006f06 <__ieee754_rem_pio2+0x2e>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	ed80 0b00 	vstr	d0, [r0]
 8006efc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f00:	f04f 0b00 	mov.w	fp, #0
 8006f04:	e028      	b.n	8006f58 <__ieee754_rem_pio2+0x80>
 8006f06:	4bc3      	ldr	r3, [pc, #780]	; (8007214 <__ieee754_rem_pio2+0x33c>)
 8006f08:	4598      	cmp	r8, r3
 8006f0a:	dc78      	bgt.n	8006ffe <__ieee754_rem_pio2+0x126>
 8006f0c:	9b02      	ldr	r3, [sp, #8]
 8006f0e:	4ec2      	ldr	r6, [pc, #776]	; (8007218 <__ieee754_rem_pio2+0x340>)
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	ee10 0a10 	vmov	r0, s0
 8006f16:	a3b0      	add	r3, pc, #704	; (adr r3, 80071d8 <__ieee754_rem_pio2+0x300>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	dd39      	ble.n	8006f94 <__ieee754_rem_pio2+0xbc>
 8006f20:	f7f9 f976 	bl	8000210 <__aeabi_dsub>
 8006f24:	45b0      	cmp	r8, r6
 8006f26:	4604      	mov	r4, r0
 8006f28:	460d      	mov	r5, r1
 8006f2a:	d01b      	beq.n	8006f64 <__ieee754_rem_pio2+0x8c>
 8006f2c:	a3ac      	add	r3, pc, #688	; (adr r3, 80071e0 <__ieee754_rem_pio2+0x308>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f7f9 f96d 	bl	8000210 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	e9ca 2300 	strd	r2, r3, [sl]
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 f965 	bl	8000210 <__aeabi_dsub>
 8006f46:	a3a6      	add	r3, pc, #664	; (adr r3, 80071e0 <__ieee754_rem_pio2+0x308>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 f960 	bl	8000210 <__aeabi_dsub>
 8006f50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f54:	f04f 0b01 	mov.w	fp, #1
 8006f58:	4658      	mov	r0, fp
 8006f5a:	b00b      	add	sp, #44	; 0x2c
 8006f5c:	ecbd 8b02 	vpop	{d8}
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	a3a0      	add	r3, pc, #640	; (adr r3, 80071e8 <__ieee754_rem_pio2+0x310>)
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	f7f9 f951 	bl	8000210 <__aeabi_dsub>
 8006f6e:	a3a0      	add	r3, pc, #640	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x318>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	f7f9 f94a 	bl	8000210 <__aeabi_dsub>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	e9ca 2300 	strd	r2, r3, [sl]
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7f9 f942 	bl	8000210 <__aeabi_dsub>
 8006f8c:	a398      	add	r3, pc, #608	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x318>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	e7db      	b.n	8006f4c <__ieee754_rem_pio2+0x74>
 8006f94:	f7f9 f93e 	bl	8000214 <__adddf3>
 8006f98:	45b0      	cmp	r8, r6
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	d016      	beq.n	8006fce <__ieee754_rem_pio2+0xf6>
 8006fa0:	a38f      	add	r3, pc, #572	; (adr r3, 80071e0 <__ieee754_rem_pio2+0x308>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 f935 	bl	8000214 <__adddf3>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	e9ca 2300 	strd	r2, r3, [sl]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 f92b 	bl	8000210 <__aeabi_dsub>
 8006fba:	a389      	add	r3, pc, #548	; (adr r3, 80071e0 <__ieee754_rem_pio2+0x308>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	f7f9 f928 	bl	8000214 <__adddf3>
 8006fc4:	f04f 3bff 	mov.w	fp, #4294967295
 8006fc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fcc:	e7c4      	b.n	8006f58 <__ieee754_rem_pio2+0x80>
 8006fce:	a386      	add	r3, pc, #536	; (adr r3, 80071e8 <__ieee754_rem_pio2+0x310>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 f91e 	bl	8000214 <__adddf3>
 8006fd8:	a385      	add	r3, pc, #532	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x318>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	f7f9 f917 	bl	8000214 <__adddf3>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	e9ca 2300 	strd	r2, r3, [sl]
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 f90d 	bl	8000210 <__aeabi_dsub>
 8006ff6:	a37e      	add	r3, pc, #504	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x318>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	e7e0      	b.n	8006fc0 <__ieee754_rem_pio2+0xe8>
 8006ffe:	4b87      	ldr	r3, [pc, #540]	; (800721c <__ieee754_rem_pio2+0x344>)
 8007000:	4598      	cmp	r8, r3
 8007002:	f300 80d9 	bgt.w	80071b8 <__ieee754_rem_pio2+0x2e0>
 8007006:	f001 f89f 	bl	8008148 <fabs>
 800700a:	ec55 4b10 	vmov	r4, r5, d0
 800700e:	ee10 0a10 	vmov	r0, s0
 8007012:	a379      	add	r3, pc, #484	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x320>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 fab1 	bl	8000580 <__aeabi_dmul>
 800701e:	4b80      	ldr	r3, [pc, #512]	; (8007220 <__ieee754_rem_pio2+0x348>)
 8007020:	2200      	movs	r2, #0
 8007022:	f7f9 f8f7 	bl	8000214 <__adddf3>
 8007026:	f7f9 fd5b 	bl	8000ae0 <__aeabi_d2iz>
 800702a:	4683      	mov	fp, r0
 800702c:	f7f9 fa3e 	bl	80004ac <__aeabi_i2d>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	ec43 2b18 	vmov	d8, r2, r3
 8007038:	a367      	add	r3, pc, #412	; (adr r3, 80071d8 <__ieee754_rem_pio2+0x300>)
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	f7f9 fa9f 	bl	8000580 <__aeabi_dmul>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4620      	mov	r0, r4
 8007048:	4629      	mov	r1, r5
 800704a:	f7f9 f8e1 	bl	8000210 <__aeabi_dsub>
 800704e:	a364      	add	r3, pc, #400	; (adr r3, 80071e0 <__ieee754_rem_pio2+0x308>)
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	4606      	mov	r6, r0
 8007056:	460f      	mov	r7, r1
 8007058:	ec51 0b18 	vmov	r0, r1, d8
 800705c:	f7f9 fa90 	bl	8000580 <__aeabi_dmul>
 8007060:	f1bb 0f1f 	cmp.w	fp, #31
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	dc0d      	bgt.n	8007086 <__ieee754_rem_pio2+0x1ae>
 800706a:	4b6e      	ldr	r3, [pc, #440]	; (8007224 <__ieee754_rem_pio2+0x34c>)
 800706c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007074:	4543      	cmp	r3, r8
 8007076:	d006      	beq.n	8007086 <__ieee754_rem_pio2+0x1ae>
 8007078:	4622      	mov	r2, r4
 800707a:	462b      	mov	r3, r5
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 f8c6 	bl	8000210 <__aeabi_dsub>
 8007084:	e00f      	b.n	80070a6 <__ieee754_rem_pio2+0x1ce>
 8007086:	462b      	mov	r3, r5
 8007088:	4622      	mov	r2, r4
 800708a:	4630      	mov	r0, r6
 800708c:	4639      	mov	r1, r7
 800708e:	f7f9 f8bf 	bl	8000210 <__aeabi_dsub>
 8007092:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800709c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80070a0:	f1b8 0f10 	cmp.w	r8, #16
 80070a4:	dc02      	bgt.n	80070ac <__ieee754_rem_pio2+0x1d4>
 80070a6:	e9ca 0100 	strd	r0, r1, [sl]
 80070aa:	e039      	b.n	8007120 <__ieee754_rem_pio2+0x248>
 80070ac:	a34e      	add	r3, pc, #312	; (adr r3, 80071e8 <__ieee754_rem_pio2+0x310>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	ec51 0b18 	vmov	r0, r1, d8
 80070b6:	f7f9 fa63 	bl	8000580 <__aeabi_dmul>
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 f8a3 	bl	8000210 <__aeabi_dsub>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4680      	mov	r8, r0
 80070d0:	4689      	mov	r9, r1
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 f89b 	bl	8000210 <__aeabi_dsub>
 80070da:	4622      	mov	r2, r4
 80070dc:	462b      	mov	r3, r5
 80070de:	f7f9 f897 	bl	8000210 <__aeabi_dsub>
 80070e2:	a343      	add	r3, pc, #268	; (adr r3, 80071f0 <__ieee754_rem_pio2+0x318>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	ec51 0b18 	vmov	r0, r1, d8
 80070f0:	f7f9 fa46 	bl	8000580 <__aeabi_dmul>
 80070f4:	4622      	mov	r2, r4
 80070f6:	462b      	mov	r3, r5
 80070f8:	f7f9 f88a 	bl	8000210 <__aeabi_dsub>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	4640      	mov	r0, r8
 8007106:	4649      	mov	r1, r9
 8007108:	f7f9 f882 	bl	8000210 <__aeabi_dsub>
 800710c:	9a03      	ldr	r2, [sp, #12]
 800710e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b31      	cmp	r3, #49	; 0x31
 8007116:	dc24      	bgt.n	8007162 <__ieee754_rem_pio2+0x28a>
 8007118:	e9ca 0100 	strd	r0, r1, [sl]
 800711c:	4646      	mov	r6, r8
 800711e:	464f      	mov	r7, r9
 8007120:	e9da 8900 	ldrd	r8, r9, [sl]
 8007124:	4630      	mov	r0, r6
 8007126:	4642      	mov	r2, r8
 8007128:	464b      	mov	r3, r9
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 f870 	bl	8000210 <__aeabi_dsub>
 8007130:	462b      	mov	r3, r5
 8007132:	4622      	mov	r2, r4
 8007134:	f7f9 f86c 	bl	8000210 <__aeabi_dsub>
 8007138:	9b02      	ldr	r3, [sp, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007140:	f6bf af0a 	bge.w	8006f58 <__ieee754_rem_pio2+0x80>
 8007144:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007148:	f8ca 3004 	str.w	r3, [sl, #4]
 800714c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007150:	f8ca 8000 	str.w	r8, [sl]
 8007154:	f8ca 0008 	str.w	r0, [sl, #8]
 8007158:	f8ca 300c 	str.w	r3, [sl, #12]
 800715c:	f1cb 0b00 	rsb	fp, fp, #0
 8007160:	e6fa      	b.n	8006f58 <__ieee754_rem_pio2+0x80>
 8007162:	a327      	add	r3, pc, #156	; (adr r3, 8007200 <__ieee754_rem_pio2+0x328>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	ec51 0b18 	vmov	r0, r1, d8
 800716c:	f7f9 fa08 	bl	8000580 <__aeabi_dmul>
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 f848 	bl	8000210 <__aeabi_dsub>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4606      	mov	r6, r0
 8007186:	460f      	mov	r7, r1
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 f840 	bl	8000210 <__aeabi_dsub>
 8007190:	4622      	mov	r2, r4
 8007192:	462b      	mov	r3, r5
 8007194:	f7f9 f83c 	bl	8000210 <__aeabi_dsub>
 8007198:	a31b      	add	r3, pc, #108	; (adr r3, 8007208 <__ieee754_rem_pio2+0x330>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	4604      	mov	r4, r0
 80071a0:	460d      	mov	r5, r1
 80071a2:	ec51 0b18 	vmov	r0, r1, d8
 80071a6:	f7f9 f9eb 	bl	8000580 <__aeabi_dmul>
 80071aa:	4622      	mov	r2, r4
 80071ac:	462b      	mov	r3, r5
 80071ae:	f7f9 f82f 	bl	8000210 <__aeabi_dsub>
 80071b2:	4604      	mov	r4, r0
 80071b4:	460d      	mov	r5, r1
 80071b6:	e75f      	b.n	8007078 <__ieee754_rem_pio2+0x1a0>
 80071b8:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <__ieee754_rem_pio2+0x350>)
 80071ba:	4598      	cmp	r8, r3
 80071bc:	dd36      	ble.n	800722c <__ieee754_rem_pio2+0x354>
 80071be:	ee10 2a10 	vmov	r2, s0
 80071c2:	462b      	mov	r3, r5
 80071c4:	4620      	mov	r0, r4
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7f9 f822 	bl	8000210 <__aeabi_dsub>
 80071cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071d0:	e9ca 0100 	strd	r0, r1, [sl]
 80071d4:	e694      	b.n	8006f00 <__ieee754_rem_pio2+0x28>
 80071d6:	bf00      	nop
 80071d8:	54400000 	.word	0x54400000
 80071dc:	3ff921fb 	.word	0x3ff921fb
 80071e0:	1a626331 	.word	0x1a626331
 80071e4:	3dd0b461 	.word	0x3dd0b461
 80071e8:	1a600000 	.word	0x1a600000
 80071ec:	3dd0b461 	.word	0x3dd0b461
 80071f0:	2e037073 	.word	0x2e037073
 80071f4:	3ba3198a 	.word	0x3ba3198a
 80071f8:	6dc9c883 	.word	0x6dc9c883
 80071fc:	3fe45f30 	.word	0x3fe45f30
 8007200:	2e000000 	.word	0x2e000000
 8007204:	3ba3198a 	.word	0x3ba3198a
 8007208:	252049c1 	.word	0x252049c1
 800720c:	397b839a 	.word	0x397b839a
 8007210:	3fe921fb 	.word	0x3fe921fb
 8007214:	4002d97b 	.word	0x4002d97b
 8007218:	3ff921fb 	.word	0x3ff921fb
 800721c:	413921fb 	.word	0x413921fb
 8007220:	3fe00000 	.word	0x3fe00000
 8007224:	08008470 	.word	0x08008470
 8007228:	7fefffff 	.word	0x7fefffff
 800722c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007230:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007234:	ee10 0a10 	vmov	r0, s0
 8007238:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800723c:	ee10 6a10 	vmov	r6, s0
 8007240:	460f      	mov	r7, r1
 8007242:	f7f9 fc4d 	bl	8000ae0 <__aeabi_d2iz>
 8007246:	f7f9 f931 	bl	80004ac <__aeabi_i2d>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4630      	mov	r0, r6
 8007250:	4639      	mov	r1, r7
 8007252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007256:	f7f8 ffdb 	bl	8000210 <__aeabi_dsub>
 800725a:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <__ieee754_rem_pio2+0x410>)
 800725c:	2200      	movs	r2, #0
 800725e:	f7f9 f98f 	bl	8000580 <__aeabi_dmul>
 8007262:	460f      	mov	r7, r1
 8007264:	4606      	mov	r6, r0
 8007266:	f7f9 fc3b 	bl	8000ae0 <__aeabi_d2iz>
 800726a:	f7f9 f91f 	bl	80004ac <__aeabi_i2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4630      	mov	r0, r6
 8007274:	4639      	mov	r1, r7
 8007276:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800727a:	f7f8 ffc9 	bl	8000210 <__aeabi_dsub>
 800727e:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <__ieee754_rem_pio2+0x410>)
 8007280:	2200      	movs	r2, #0
 8007282:	f7f9 f97d 	bl	8000580 <__aeabi_dmul>
 8007286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800728a:	ad04      	add	r5, sp, #16
 800728c:	f04f 0803 	mov.w	r8, #3
 8007290:	46a9      	mov	r9, r5
 8007292:	2600      	movs	r6, #0
 8007294:	2700      	movs	r7, #0
 8007296:	4632      	mov	r2, r6
 8007298:	463b      	mov	r3, r7
 800729a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800729e:	46c3      	mov	fp, r8
 80072a0:	3d08      	subs	r5, #8
 80072a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80072a6:	f7f9 fbd3 	bl	8000a50 <__aeabi_dcmpeq>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d1f3      	bne.n	8007296 <__ieee754_rem_pio2+0x3be>
 80072ae:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <__ieee754_rem_pio2+0x414>)
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	2302      	movs	r3, #2
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4622      	mov	r2, r4
 80072b8:	465b      	mov	r3, fp
 80072ba:	4651      	mov	r1, sl
 80072bc:	4648      	mov	r0, r9
 80072be:	f000 f993 	bl	80075e8 <__kernel_rem_pio2>
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	4683      	mov	fp, r0
 80072c8:	f6bf ae46 	bge.w	8006f58 <__ieee754_rem_pio2+0x80>
 80072cc:	e9da 2100 	ldrd	r2, r1, [sl]
 80072d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072d4:	e9ca 2300 	strd	r2, r3, [sl]
 80072d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80072dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80072e4:	e73a      	b.n	800715c <__ieee754_rem_pio2+0x284>
 80072e6:	bf00      	nop
 80072e8:	41700000 	.word	0x41700000
 80072ec:	080084f0 	.word	0x080084f0

080072f0 <__ieee754_sqrt>:
 80072f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f4:	ec55 4b10 	vmov	r4, r5, d0
 80072f8:	4e55      	ldr	r6, [pc, #340]	; (8007450 <__ieee754_sqrt+0x160>)
 80072fa:	43ae      	bics	r6, r5
 80072fc:	ee10 0a10 	vmov	r0, s0
 8007300:	ee10 3a10 	vmov	r3, s0
 8007304:	462a      	mov	r2, r5
 8007306:	4629      	mov	r1, r5
 8007308:	d110      	bne.n	800732c <__ieee754_sqrt+0x3c>
 800730a:	ee10 2a10 	vmov	r2, s0
 800730e:	462b      	mov	r3, r5
 8007310:	f7f9 f936 	bl	8000580 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4620      	mov	r0, r4
 800731a:	4629      	mov	r1, r5
 800731c:	f7f8 ff7a 	bl	8000214 <__adddf3>
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	ec45 4b10 	vmov	d0, r4, r5
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	2d00      	cmp	r5, #0
 800732e:	dc10      	bgt.n	8007352 <__ieee754_sqrt+0x62>
 8007330:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007334:	4330      	orrs	r0, r6
 8007336:	d0f5      	beq.n	8007324 <__ieee754_sqrt+0x34>
 8007338:	b15d      	cbz	r5, 8007352 <__ieee754_sqrt+0x62>
 800733a:	ee10 2a10 	vmov	r2, s0
 800733e:	462b      	mov	r3, r5
 8007340:	ee10 0a10 	vmov	r0, s0
 8007344:	f7f8 ff64 	bl	8000210 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	f7f9 fa42 	bl	80007d4 <__aeabi_ddiv>
 8007350:	e7e6      	b.n	8007320 <__ieee754_sqrt+0x30>
 8007352:	1512      	asrs	r2, r2, #20
 8007354:	d074      	beq.n	8007440 <__ieee754_sqrt+0x150>
 8007356:	07d4      	lsls	r4, r2, #31
 8007358:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800735c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007360:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007364:	bf5e      	ittt	pl
 8007366:	0fda      	lsrpl	r2, r3, #31
 8007368:	005b      	lslpl	r3, r3, #1
 800736a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800736e:	2400      	movs	r4, #0
 8007370:	0fda      	lsrs	r2, r3, #31
 8007372:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007376:	107f      	asrs	r7, r7, #1
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	2516      	movs	r5, #22
 800737c:	4620      	mov	r0, r4
 800737e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007382:	1886      	adds	r6, r0, r2
 8007384:	428e      	cmp	r6, r1
 8007386:	bfde      	ittt	le
 8007388:	1b89      	suble	r1, r1, r6
 800738a:	18b0      	addle	r0, r6, r2
 800738c:	18a4      	addle	r4, r4, r2
 800738e:	0049      	lsls	r1, r1, #1
 8007390:	3d01      	subs	r5, #1
 8007392:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007396:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800739a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800739e:	d1f0      	bne.n	8007382 <__ieee754_sqrt+0x92>
 80073a0:	462a      	mov	r2, r5
 80073a2:	f04f 0e20 	mov.w	lr, #32
 80073a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80073aa:	4281      	cmp	r1, r0
 80073ac:	eb06 0c05 	add.w	ip, r6, r5
 80073b0:	dc02      	bgt.n	80073b8 <__ieee754_sqrt+0xc8>
 80073b2:	d113      	bne.n	80073dc <__ieee754_sqrt+0xec>
 80073b4:	459c      	cmp	ip, r3
 80073b6:	d811      	bhi.n	80073dc <__ieee754_sqrt+0xec>
 80073b8:	f1bc 0f00 	cmp.w	ip, #0
 80073bc:	eb0c 0506 	add.w	r5, ip, r6
 80073c0:	da43      	bge.n	800744a <__ieee754_sqrt+0x15a>
 80073c2:	2d00      	cmp	r5, #0
 80073c4:	db41      	blt.n	800744a <__ieee754_sqrt+0x15a>
 80073c6:	f100 0801 	add.w	r8, r0, #1
 80073ca:	1a09      	subs	r1, r1, r0
 80073cc:	459c      	cmp	ip, r3
 80073ce:	bf88      	it	hi
 80073d0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80073d4:	eba3 030c 	sub.w	r3, r3, ip
 80073d8:	4432      	add	r2, r6
 80073da:	4640      	mov	r0, r8
 80073dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80073e0:	f1be 0e01 	subs.w	lr, lr, #1
 80073e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80073e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80073f0:	d1db      	bne.n	80073aa <__ieee754_sqrt+0xba>
 80073f2:	430b      	orrs	r3, r1
 80073f4:	d006      	beq.n	8007404 <__ieee754_sqrt+0x114>
 80073f6:	1c50      	adds	r0, r2, #1
 80073f8:	bf13      	iteet	ne
 80073fa:	3201      	addne	r2, #1
 80073fc:	3401      	addeq	r4, #1
 80073fe:	4672      	moveq	r2, lr
 8007400:	f022 0201 	bicne.w	r2, r2, #1
 8007404:	1063      	asrs	r3, r4, #1
 8007406:	0852      	lsrs	r2, r2, #1
 8007408:	07e1      	lsls	r1, r4, #31
 800740a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800740e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007412:	bf48      	it	mi
 8007414:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007418:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800741c:	4614      	mov	r4, r2
 800741e:	e781      	b.n	8007324 <__ieee754_sqrt+0x34>
 8007420:	0ad9      	lsrs	r1, r3, #11
 8007422:	3815      	subs	r0, #21
 8007424:	055b      	lsls	r3, r3, #21
 8007426:	2900      	cmp	r1, #0
 8007428:	d0fa      	beq.n	8007420 <__ieee754_sqrt+0x130>
 800742a:	02cd      	lsls	r5, r1, #11
 800742c:	d50a      	bpl.n	8007444 <__ieee754_sqrt+0x154>
 800742e:	f1c2 0420 	rsb	r4, r2, #32
 8007432:	fa23 f404 	lsr.w	r4, r3, r4
 8007436:	1e55      	subs	r5, r2, #1
 8007438:	4093      	lsls	r3, r2
 800743a:	4321      	orrs	r1, r4
 800743c:	1b42      	subs	r2, r0, r5
 800743e:	e78a      	b.n	8007356 <__ieee754_sqrt+0x66>
 8007440:	4610      	mov	r0, r2
 8007442:	e7f0      	b.n	8007426 <__ieee754_sqrt+0x136>
 8007444:	0049      	lsls	r1, r1, #1
 8007446:	3201      	adds	r2, #1
 8007448:	e7ef      	b.n	800742a <__ieee754_sqrt+0x13a>
 800744a:	4680      	mov	r8, r0
 800744c:	e7bd      	b.n	80073ca <__ieee754_sqrt+0xda>
 800744e:	bf00      	nop
 8007450:	7ff00000 	.word	0x7ff00000
 8007454:	00000000 	.word	0x00000000

08007458 <__kernel_cos>:
 8007458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	ec57 6b10 	vmov	r6, r7, d0
 8007460:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007464:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007468:	ed8d 1b00 	vstr	d1, [sp]
 800746c:	da07      	bge.n	800747e <__kernel_cos+0x26>
 800746e:	ee10 0a10 	vmov	r0, s0
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 fb34 	bl	8000ae0 <__aeabi_d2iz>
 8007478:	2800      	cmp	r0, #0
 800747a:	f000 8088 	beq.w	800758e <__kernel_cos+0x136>
 800747e:	4632      	mov	r2, r6
 8007480:	463b      	mov	r3, r7
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	f7f9 f87b 	bl	8000580 <__aeabi_dmul>
 800748a:	4b51      	ldr	r3, [pc, #324]	; (80075d0 <__kernel_cos+0x178>)
 800748c:	2200      	movs	r2, #0
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	f7f9 f875 	bl	8000580 <__aeabi_dmul>
 8007496:	a340      	add	r3, pc, #256	; (adr r3, 8007598 <__kernel_cos+0x140>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	4682      	mov	sl, r0
 800749e:	468b      	mov	fp, r1
 80074a0:	4620      	mov	r0, r4
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7f9 f86c 	bl	8000580 <__aeabi_dmul>
 80074a8:	a33d      	add	r3, pc, #244	; (adr r3, 80075a0 <__kernel_cos+0x148>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 feb1 	bl	8000214 <__adddf3>
 80074b2:	4622      	mov	r2, r4
 80074b4:	462b      	mov	r3, r5
 80074b6:	f7f9 f863 	bl	8000580 <__aeabi_dmul>
 80074ba:	a33b      	add	r3, pc, #236	; (adr r3, 80075a8 <__kernel_cos+0x150>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 fea6 	bl	8000210 <__aeabi_dsub>
 80074c4:	4622      	mov	r2, r4
 80074c6:	462b      	mov	r3, r5
 80074c8:	f7f9 f85a 	bl	8000580 <__aeabi_dmul>
 80074cc:	a338      	add	r3, pc, #224	; (adr r3, 80075b0 <__kernel_cos+0x158>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f8 fe9f 	bl	8000214 <__adddf3>
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	f7f9 f851 	bl	8000580 <__aeabi_dmul>
 80074de:	a336      	add	r3, pc, #216	; (adr r3, 80075b8 <__kernel_cos+0x160>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f8 fe94 	bl	8000210 <__aeabi_dsub>
 80074e8:	4622      	mov	r2, r4
 80074ea:	462b      	mov	r3, r5
 80074ec:	f7f9 f848 	bl	8000580 <__aeabi_dmul>
 80074f0:	a333      	add	r3, pc, #204	; (adr r3, 80075c0 <__kernel_cos+0x168>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f8 fe8d 	bl	8000214 <__adddf3>
 80074fa:	4622      	mov	r2, r4
 80074fc:	462b      	mov	r3, r5
 80074fe:	f7f9 f83f 	bl	8000580 <__aeabi_dmul>
 8007502:	4622      	mov	r2, r4
 8007504:	462b      	mov	r3, r5
 8007506:	f7f9 f83b 	bl	8000580 <__aeabi_dmul>
 800750a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f9 f833 	bl	8000580 <__aeabi_dmul>
 800751a:	460b      	mov	r3, r1
 800751c:	4602      	mov	r2, r0
 800751e:	4629      	mov	r1, r5
 8007520:	4620      	mov	r0, r4
 8007522:	f7f8 fe75 	bl	8000210 <__aeabi_dsub>
 8007526:	4b2b      	ldr	r3, [pc, #172]	; (80075d4 <__kernel_cos+0x17c>)
 8007528:	4598      	cmp	r8, r3
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	dc10      	bgt.n	8007552 <__kernel_cos+0xfa>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4650      	mov	r0, sl
 8007536:	4659      	mov	r1, fp
 8007538:	f7f8 fe6a 	bl	8000210 <__aeabi_dsub>
 800753c:	460b      	mov	r3, r1
 800753e:	4926      	ldr	r1, [pc, #152]	; (80075d8 <__kernel_cos+0x180>)
 8007540:	4602      	mov	r2, r0
 8007542:	2000      	movs	r0, #0
 8007544:	f7f8 fe64 	bl	8000210 <__aeabi_dsub>
 8007548:	ec41 0b10 	vmov	d0, r0, r1
 800754c:	b003      	add	sp, #12
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	4b22      	ldr	r3, [pc, #136]	; (80075dc <__kernel_cos+0x184>)
 8007554:	4920      	ldr	r1, [pc, #128]	; (80075d8 <__kernel_cos+0x180>)
 8007556:	4598      	cmp	r8, r3
 8007558:	bfcc      	ite	gt
 800755a:	4d21      	ldrgt	r5, [pc, #132]	; (80075e0 <__kernel_cos+0x188>)
 800755c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007560:	2400      	movs	r4, #0
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	2000      	movs	r0, #0
 8007568:	f7f8 fe52 	bl	8000210 <__aeabi_dsub>
 800756c:	4622      	mov	r2, r4
 800756e:	4680      	mov	r8, r0
 8007570:	4689      	mov	r9, r1
 8007572:	462b      	mov	r3, r5
 8007574:	4650      	mov	r0, sl
 8007576:	4659      	mov	r1, fp
 8007578:	f7f8 fe4a 	bl	8000210 <__aeabi_dsub>
 800757c:	4632      	mov	r2, r6
 800757e:	463b      	mov	r3, r7
 8007580:	f7f8 fe46 	bl	8000210 <__aeabi_dsub>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4640      	mov	r0, r8
 800758a:	4649      	mov	r1, r9
 800758c:	e7da      	b.n	8007544 <__kernel_cos+0xec>
 800758e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80075c8 <__kernel_cos+0x170>
 8007592:	e7db      	b.n	800754c <__kernel_cos+0xf4>
 8007594:	f3af 8000 	nop.w
 8007598:	be8838d4 	.word	0xbe8838d4
 800759c:	bda8fae9 	.word	0xbda8fae9
 80075a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80075a4:	3e21ee9e 	.word	0x3e21ee9e
 80075a8:	809c52ad 	.word	0x809c52ad
 80075ac:	3e927e4f 	.word	0x3e927e4f
 80075b0:	19cb1590 	.word	0x19cb1590
 80075b4:	3efa01a0 	.word	0x3efa01a0
 80075b8:	16c15177 	.word	0x16c15177
 80075bc:	3f56c16c 	.word	0x3f56c16c
 80075c0:	5555554c 	.word	0x5555554c
 80075c4:	3fa55555 	.word	0x3fa55555
 80075c8:	00000000 	.word	0x00000000
 80075cc:	3ff00000 	.word	0x3ff00000
 80075d0:	3fe00000 	.word	0x3fe00000
 80075d4:	3fd33332 	.word	0x3fd33332
 80075d8:	3ff00000 	.word	0x3ff00000
 80075dc:	3fe90000 	.word	0x3fe90000
 80075e0:	3fd20000 	.word	0x3fd20000
 80075e4:	00000000 	.word	0x00000000

080075e8 <__kernel_rem_pio2>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	ed2d 8b02 	vpush	{d8}
 80075f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80075f4:	f112 0f14 	cmn.w	r2, #20
 80075f8:	9308      	str	r3, [sp, #32]
 80075fa:	9101      	str	r1, [sp, #4]
 80075fc:	4bc4      	ldr	r3, [pc, #784]	; (8007910 <__kernel_rem_pio2+0x328>)
 80075fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007600:	900b      	str	r0, [sp, #44]	; 0x2c
 8007602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007606:	9302      	str	r3, [sp, #8]
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	f103 33ff 	add.w	r3, r3, #4294967295
 800760e:	bfa8      	it	ge
 8007610:	1ed4      	subge	r4, r2, #3
 8007612:	9306      	str	r3, [sp, #24]
 8007614:	bfb2      	itee	lt
 8007616:	2400      	movlt	r4, #0
 8007618:	2318      	movge	r3, #24
 800761a:	fb94 f4f3 	sdivge	r4, r4, r3
 800761e:	f06f 0317 	mvn.w	r3, #23
 8007622:	fb04 3303 	mla	r3, r4, r3, r3
 8007626:	eb03 0a02 	add.w	sl, r3, r2
 800762a:	9b02      	ldr	r3, [sp, #8]
 800762c:	9a06      	ldr	r2, [sp, #24]
 800762e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007900 <__kernel_rem_pio2+0x318>
 8007632:	eb03 0802 	add.w	r8, r3, r2
 8007636:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007638:	1aa7      	subs	r7, r4, r2
 800763a:	ae22      	add	r6, sp, #136	; 0x88
 800763c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007640:	2500      	movs	r5, #0
 8007642:	4545      	cmp	r5, r8
 8007644:	dd13      	ble.n	800766e <__kernel_rem_pio2+0x86>
 8007646:	9b08      	ldr	r3, [sp, #32]
 8007648:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007900 <__kernel_rem_pio2+0x318>
 800764c:	aa22      	add	r2, sp, #136	; 0x88
 800764e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007652:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	9b02      	ldr	r3, [sp, #8]
 800765c:	4598      	cmp	r8, r3
 800765e:	dc2f      	bgt.n	80076c0 <__kernel_rem_pio2+0xd8>
 8007660:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007664:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007668:	462f      	mov	r7, r5
 800766a:	2600      	movs	r6, #0
 800766c:	e01b      	b.n	80076a6 <__kernel_rem_pio2+0xbe>
 800766e:	42ef      	cmn	r7, r5
 8007670:	d407      	bmi.n	8007682 <__kernel_rem_pio2+0x9a>
 8007672:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007676:	f7f8 ff19 	bl	80004ac <__aeabi_i2d>
 800767a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800767e:	3501      	adds	r5, #1
 8007680:	e7df      	b.n	8007642 <__kernel_rem_pio2+0x5a>
 8007682:	ec51 0b18 	vmov	r0, r1, d8
 8007686:	e7f8      	b.n	800767a <__kernel_rem_pio2+0x92>
 8007688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007690:	f7f8 ff76 	bl	8000580 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800769c:	f7f8 fdba 	bl	8000214 <__adddf3>
 80076a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a4:	3601      	adds	r6, #1
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	429e      	cmp	r6, r3
 80076aa:	f1a7 0708 	sub.w	r7, r7, #8
 80076ae:	ddeb      	ble.n	8007688 <__kernel_rem_pio2+0xa0>
 80076b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80076b4:	f108 0801 	add.w	r8, r8, #1
 80076b8:	ecab 7b02 	vstmia	fp!, {d7}
 80076bc:	3508      	adds	r5, #8
 80076be:	e7cc      	b.n	800765a <__kernel_rem_pio2+0x72>
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	aa0e      	add	r2, sp, #56	; 0x38
 80076c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076c8:	930d      	str	r3, [sp, #52]	; 0x34
 80076ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80076cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80076d0:	9c02      	ldr	r4, [sp, #8]
 80076d2:	930c      	str	r3, [sp, #48]	; 0x30
 80076d4:	00e3      	lsls	r3, r4, #3
 80076d6:	930a      	str	r3, [sp, #40]	; 0x28
 80076d8:	ab9a      	add	r3, sp, #616	; 0x268
 80076da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80076e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80076e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80076e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80076ec:	46c3      	mov	fp, r8
 80076ee:	46a1      	mov	r9, r4
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	f1a5 0508 	sub.w	r5, r5, #8
 80076f8:	dc77      	bgt.n	80077ea <__kernel_rem_pio2+0x202>
 80076fa:	ec47 6b10 	vmov	d0, r6, r7
 80076fe:	4650      	mov	r0, sl
 8007700:	f000 fdb6 	bl	8008270 <scalbn>
 8007704:	ec57 6b10 	vmov	r6, r7, d0
 8007708:	2200      	movs	r2, #0
 800770a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800770e:	ee10 0a10 	vmov	r0, s0
 8007712:	4639      	mov	r1, r7
 8007714:	f7f8 ff34 	bl	8000580 <__aeabi_dmul>
 8007718:	ec41 0b10 	vmov	d0, r0, r1
 800771c:	f000 fd20 	bl	8008160 <floor>
 8007720:	4b7c      	ldr	r3, [pc, #496]	; (8007914 <__kernel_rem_pio2+0x32c>)
 8007722:	ec51 0b10 	vmov	r0, r1, d0
 8007726:	2200      	movs	r2, #0
 8007728:	f7f8 ff2a 	bl	8000580 <__aeabi_dmul>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	f7f8 fd6c 	bl	8000210 <__aeabi_dsub>
 8007738:	460f      	mov	r7, r1
 800773a:	4606      	mov	r6, r0
 800773c:	f7f9 f9d0 	bl	8000ae0 <__aeabi_d2iz>
 8007740:	9004      	str	r0, [sp, #16]
 8007742:	f7f8 feb3 	bl	80004ac <__aeabi_i2d>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f8 fd5f 	bl	8000210 <__aeabi_dsub>
 8007752:	f1ba 0f00 	cmp.w	sl, #0
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	dd6d      	ble.n	8007838 <__kernel_rem_pio2+0x250>
 800775c:	1e62      	subs	r2, r4, #1
 800775e:	ab0e      	add	r3, sp, #56	; 0x38
 8007760:	9d04      	ldr	r5, [sp, #16]
 8007762:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007766:	f1ca 0118 	rsb	r1, sl, #24
 800776a:	fa40 f301 	asr.w	r3, r0, r1
 800776e:	441d      	add	r5, r3
 8007770:	408b      	lsls	r3, r1
 8007772:	1ac0      	subs	r0, r0, r3
 8007774:	ab0e      	add	r3, sp, #56	; 0x38
 8007776:	9504      	str	r5, [sp, #16]
 8007778:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800777c:	f1ca 0317 	rsb	r3, sl, #23
 8007780:	fa40 fb03 	asr.w	fp, r0, r3
 8007784:	f1bb 0f00 	cmp.w	fp, #0
 8007788:	dd65      	ble.n	8007856 <__kernel_rem_pio2+0x26e>
 800778a:	9b04      	ldr	r3, [sp, #16]
 800778c:	2200      	movs	r2, #0
 800778e:	3301      	adds	r3, #1
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	4615      	mov	r5, r2
 8007794:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007798:	4294      	cmp	r4, r2
 800779a:	f300 809c 	bgt.w	80078d6 <__kernel_rem_pio2+0x2ee>
 800779e:	f1ba 0f00 	cmp.w	sl, #0
 80077a2:	dd07      	ble.n	80077b4 <__kernel_rem_pio2+0x1cc>
 80077a4:	f1ba 0f01 	cmp.w	sl, #1
 80077a8:	f000 80c0 	beq.w	800792c <__kernel_rem_pio2+0x344>
 80077ac:	f1ba 0f02 	cmp.w	sl, #2
 80077b0:	f000 80c6 	beq.w	8007940 <__kernel_rem_pio2+0x358>
 80077b4:	f1bb 0f02 	cmp.w	fp, #2
 80077b8:	d14d      	bne.n	8007856 <__kernel_rem_pio2+0x26e>
 80077ba:	4632      	mov	r2, r6
 80077bc:	463b      	mov	r3, r7
 80077be:	4956      	ldr	r1, [pc, #344]	; (8007918 <__kernel_rem_pio2+0x330>)
 80077c0:	2000      	movs	r0, #0
 80077c2:	f7f8 fd25 	bl	8000210 <__aeabi_dsub>
 80077c6:	4606      	mov	r6, r0
 80077c8:	460f      	mov	r7, r1
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	d043      	beq.n	8007856 <__kernel_rem_pio2+0x26e>
 80077ce:	4650      	mov	r0, sl
 80077d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007908 <__kernel_rem_pio2+0x320>
 80077d4:	f000 fd4c 	bl	8008270 <scalbn>
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	ec53 2b10 	vmov	r2, r3, d0
 80077e0:	f7f8 fd16 	bl	8000210 <__aeabi_dsub>
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	e035      	b.n	8007856 <__kernel_rem_pio2+0x26e>
 80077ea:	4b4c      	ldr	r3, [pc, #304]	; (800791c <__kernel_rem_pio2+0x334>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	4630      	mov	r0, r6
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f8 fec5 	bl	8000580 <__aeabi_dmul>
 80077f6:	f7f9 f973 	bl	8000ae0 <__aeabi_d2iz>
 80077fa:	f7f8 fe57 	bl	80004ac <__aeabi_i2d>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	ec43 2b18 	vmov	d8, r2, r3
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <__kernel_rem_pio2+0x338>)
 8007808:	2200      	movs	r2, #0
 800780a:	f7f8 feb9 	bl	8000580 <__aeabi_dmul>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4630      	mov	r0, r6
 8007814:	4639      	mov	r1, r7
 8007816:	f7f8 fcfb 	bl	8000210 <__aeabi_dsub>
 800781a:	f7f9 f961 	bl	8000ae0 <__aeabi_d2iz>
 800781e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007822:	f84b 0b04 	str.w	r0, [fp], #4
 8007826:	ec51 0b18 	vmov	r0, r1, d8
 800782a:	f7f8 fcf3 	bl	8000214 <__adddf3>
 800782e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	e75b      	b.n	80076f0 <__kernel_rem_pio2+0x108>
 8007838:	d106      	bne.n	8007848 <__kernel_rem_pio2+0x260>
 800783a:	1e63      	subs	r3, r4, #1
 800783c:	aa0e      	add	r2, sp, #56	; 0x38
 800783e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007842:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007846:	e79d      	b.n	8007784 <__kernel_rem_pio2+0x19c>
 8007848:	4b36      	ldr	r3, [pc, #216]	; (8007924 <__kernel_rem_pio2+0x33c>)
 800784a:	2200      	movs	r2, #0
 800784c:	f7f9 f91e 	bl	8000a8c <__aeabi_dcmpge>
 8007850:	2800      	cmp	r0, #0
 8007852:	d13d      	bne.n	80078d0 <__kernel_rem_pio2+0x2e8>
 8007854:	4683      	mov	fp, r0
 8007856:	2200      	movs	r2, #0
 8007858:	2300      	movs	r3, #0
 800785a:	4630      	mov	r0, r6
 800785c:	4639      	mov	r1, r7
 800785e:	f7f9 f8f7 	bl	8000a50 <__aeabi_dcmpeq>
 8007862:	2800      	cmp	r0, #0
 8007864:	f000 80c0 	beq.w	80079e8 <__kernel_rem_pio2+0x400>
 8007868:	1e65      	subs	r5, r4, #1
 800786a:	462b      	mov	r3, r5
 800786c:	2200      	movs	r2, #0
 800786e:	9902      	ldr	r1, [sp, #8]
 8007870:	428b      	cmp	r3, r1
 8007872:	da6c      	bge.n	800794e <__kernel_rem_pio2+0x366>
 8007874:	2a00      	cmp	r2, #0
 8007876:	f000 8089 	beq.w	800798c <__kernel_rem_pio2+0x3a4>
 800787a:	ab0e      	add	r3, sp, #56	; 0x38
 800787c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007880:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80ad 	beq.w	80079e4 <__kernel_rem_pio2+0x3fc>
 800788a:	4650      	mov	r0, sl
 800788c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007908 <__kernel_rem_pio2+0x320>
 8007890:	f000 fcee 	bl	8008270 <scalbn>
 8007894:	ab9a      	add	r3, sp, #616	; 0x268
 8007896:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800789a:	ec57 6b10 	vmov	r6, r7, d0
 800789e:	00ec      	lsls	r4, r5, #3
 80078a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80078a4:	46aa      	mov	sl, r5
 80078a6:	f1ba 0f00 	cmp.w	sl, #0
 80078aa:	f280 80d6 	bge.w	8007a5a <__kernel_rem_pio2+0x472>
 80078ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007900 <__kernel_rem_pio2+0x318>
 80078b2:	462e      	mov	r6, r5
 80078b4:	2e00      	cmp	r6, #0
 80078b6:	f2c0 8104 	blt.w	8007ac2 <__kernel_rem_pio2+0x4da>
 80078ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80078bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80078c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007928 <__kernel_rem_pio2+0x340>
 80078c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80078c8:	f04f 0800 	mov.w	r8, #0
 80078cc:	1baf      	subs	r7, r5, r6
 80078ce:	e0ea      	b.n	8007aa6 <__kernel_rem_pio2+0x4be>
 80078d0:	f04f 0b02 	mov.w	fp, #2
 80078d4:	e759      	b.n	800778a <__kernel_rem_pio2+0x1a2>
 80078d6:	f8d8 3000 	ldr.w	r3, [r8]
 80078da:	b955      	cbnz	r5, 80078f2 <__kernel_rem_pio2+0x30a>
 80078dc:	b123      	cbz	r3, 80078e8 <__kernel_rem_pio2+0x300>
 80078de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80078e2:	f8c8 3000 	str.w	r3, [r8]
 80078e6:	2301      	movs	r3, #1
 80078e8:	3201      	adds	r2, #1
 80078ea:	f108 0804 	add.w	r8, r8, #4
 80078ee:	461d      	mov	r5, r3
 80078f0:	e752      	b.n	8007798 <__kernel_rem_pio2+0x1b0>
 80078f2:	1acb      	subs	r3, r1, r3
 80078f4:	f8c8 3000 	str.w	r3, [r8]
 80078f8:	462b      	mov	r3, r5
 80078fa:	e7f5      	b.n	80078e8 <__kernel_rem_pio2+0x300>
 80078fc:	f3af 8000 	nop.w
	...
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	08008638 	.word	0x08008638
 8007914:	40200000 	.word	0x40200000
 8007918:	3ff00000 	.word	0x3ff00000
 800791c:	3e700000 	.word	0x3e700000
 8007920:	41700000 	.word	0x41700000
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	080085f8 	.word	0x080085f8
 800792c:	1e62      	subs	r2, r4, #1
 800792e:	ab0e      	add	r3, sp, #56	; 0x38
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007938:	a90e      	add	r1, sp, #56	; 0x38
 800793a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800793e:	e739      	b.n	80077b4 <__kernel_rem_pio2+0x1cc>
 8007940:	1e62      	subs	r2, r4, #1
 8007942:	ab0e      	add	r3, sp, #56	; 0x38
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800794c:	e7f4      	b.n	8007938 <__kernel_rem_pio2+0x350>
 800794e:	a90e      	add	r1, sp, #56	; 0x38
 8007950:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007954:	3b01      	subs	r3, #1
 8007956:	430a      	orrs	r2, r1
 8007958:	e789      	b.n	800786e <__kernel_rem_pio2+0x286>
 800795a:	3301      	adds	r3, #1
 800795c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007960:	2900      	cmp	r1, #0
 8007962:	d0fa      	beq.n	800795a <__kernel_rem_pio2+0x372>
 8007964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007966:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800796a:	446a      	add	r2, sp
 800796c:	3a98      	subs	r2, #152	; 0x98
 800796e:	920a      	str	r2, [sp, #40]	; 0x28
 8007970:	9a08      	ldr	r2, [sp, #32]
 8007972:	18e3      	adds	r3, r4, r3
 8007974:	18a5      	adds	r5, r4, r2
 8007976:	aa22      	add	r2, sp, #136	; 0x88
 8007978:	f104 0801 	add.w	r8, r4, #1
 800797c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	9b04      	ldr	r3, [sp, #16]
 8007984:	4543      	cmp	r3, r8
 8007986:	da04      	bge.n	8007992 <__kernel_rem_pio2+0x3aa>
 8007988:	461c      	mov	r4, r3
 800798a:	e6a3      	b.n	80076d4 <__kernel_rem_pio2+0xec>
 800798c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800798e:	2301      	movs	r3, #1
 8007990:	e7e4      	b.n	800795c <__kernel_rem_pio2+0x374>
 8007992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007994:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007998:	f7f8 fd88 	bl	80004ac <__aeabi_i2d>
 800799c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80079a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a2:	46ab      	mov	fp, r5
 80079a4:	461c      	mov	r4, r3
 80079a6:	f04f 0900 	mov.w	r9, #0
 80079aa:	2600      	movs	r6, #0
 80079ac:	2700      	movs	r7, #0
 80079ae:	9b06      	ldr	r3, [sp, #24]
 80079b0:	4599      	cmp	r9, r3
 80079b2:	dd06      	ble.n	80079c2 <__kernel_rem_pio2+0x3da>
 80079b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80079ba:	f108 0801 	add.w	r8, r8, #1
 80079be:	930a      	str	r3, [sp, #40]	; 0x28
 80079c0:	e7df      	b.n	8007982 <__kernel_rem_pio2+0x39a>
 80079c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80079c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80079ca:	f7f8 fdd9 	bl	8000580 <__aeabi_dmul>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	f7f8 fc1d 	bl	8000214 <__adddf3>
 80079da:	f109 0901 	add.w	r9, r9, #1
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	e7e4      	b.n	80079ae <__kernel_rem_pio2+0x3c6>
 80079e4:	3d01      	subs	r5, #1
 80079e6:	e748      	b.n	800787a <__kernel_rem_pio2+0x292>
 80079e8:	ec47 6b10 	vmov	d0, r6, r7
 80079ec:	f1ca 0000 	rsb	r0, sl, #0
 80079f0:	f000 fc3e 	bl	8008270 <scalbn>
 80079f4:	ec57 6b10 	vmov	r6, r7, d0
 80079f8:	4ba0      	ldr	r3, [pc, #640]	; (8007c7c <__kernel_rem_pio2+0x694>)
 80079fa:	ee10 0a10 	vmov	r0, s0
 80079fe:	2200      	movs	r2, #0
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f9 f843 	bl	8000a8c <__aeabi_dcmpge>
 8007a06:	b1f8      	cbz	r0, 8007a48 <__kernel_rem_pio2+0x460>
 8007a08:	4b9d      	ldr	r3, [pc, #628]	; (8007c80 <__kernel_rem_pio2+0x698>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fdb6 	bl	8000580 <__aeabi_dmul>
 8007a14:	f7f9 f864 	bl	8000ae0 <__aeabi_d2iz>
 8007a18:	4680      	mov	r8, r0
 8007a1a:	f7f8 fd47 	bl	80004ac <__aeabi_i2d>
 8007a1e:	4b97      	ldr	r3, [pc, #604]	; (8007c7c <__kernel_rem_pio2+0x694>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	f7f8 fdad 	bl	8000580 <__aeabi_dmul>
 8007a26:	460b      	mov	r3, r1
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f7f8 fbef 	bl	8000210 <__aeabi_dsub>
 8007a32:	f7f9 f855 	bl	8000ae0 <__aeabi_d2iz>
 8007a36:	1c65      	adds	r5, r4, #1
 8007a38:	ab0e      	add	r3, sp, #56	; 0x38
 8007a3a:	f10a 0a18 	add.w	sl, sl, #24
 8007a3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007a46:	e720      	b.n	800788a <__kernel_rem_pio2+0x2a2>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f9 f848 	bl	8000ae0 <__aeabi_d2iz>
 8007a50:	ab0e      	add	r3, sp, #56	; 0x38
 8007a52:	4625      	mov	r5, r4
 8007a54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a58:	e717      	b.n	800788a <__kernel_rem_pio2+0x2a2>
 8007a5a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007a60:	f7f8 fd24 	bl	80004ac <__aeabi_i2d>
 8007a64:	4632      	mov	r2, r6
 8007a66:	463b      	mov	r3, r7
 8007a68:	f7f8 fd8a 	bl	8000580 <__aeabi_dmul>
 8007a6c:	4b84      	ldr	r3, [pc, #528]	; (8007c80 <__kernel_rem_pio2+0x698>)
 8007a6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007a72:	2200      	movs	r2, #0
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f8 fd82 	bl	8000580 <__aeabi_dmul>
 8007a7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a80:	4606      	mov	r6, r0
 8007a82:	460f      	mov	r7, r1
 8007a84:	e70f      	b.n	80078a6 <__kernel_rem_pio2+0x2be>
 8007a86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007a8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007a8e:	f7f8 fd77 	bl	8000580 <__aeabi_dmul>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a9a:	f7f8 fbbb 	bl	8000214 <__adddf3>
 8007a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aa2:	f108 0801 	add.w	r8, r8, #1
 8007aa6:	9b02      	ldr	r3, [sp, #8]
 8007aa8:	4598      	cmp	r8, r3
 8007aaa:	dc01      	bgt.n	8007ab0 <__kernel_rem_pio2+0x4c8>
 8007aac:	45b8      	cmp	r8, r7
 8007aae:	ddea      	ble.n	8007a86 <__kernel_rem_pio2+0x49e>
 8007ab0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007ab4:	ab4a      	add	r3, sp, #296	; 0x128
 8007ab6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007aba:	ed87 7b00 	vstr	d7, [r7]
 8007abe:	3e01      	subs	r6, #1
 8007ac0:	e6f8      	b.n	80078b4 <__kernel_rem_pio2+0x2cc>
 8007ac2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	dc0b      	bgt.n	8007ae0 <__kernel_rem_pio2+0x4f8>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dc35      	bgt.n	8007b38 <__kernel_rem_pio2+0x550>
 8007acc:	d059      	beq.n	8007b82 <__kernel_rem_pio2+0x59a>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	f003 0007 	and.w	r0, r3, #7
 8007ad4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007ad8:	ecbd 8b02 	vpop	{d8}
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d1f3      	bne.n	8007ace <__kernel_rem_pio2+0x4e6>
 8007ae6:	ab4a      	add	r3, sp, #296	; 0x128
 8007ae8:	4423      	add	r3, r4
 8007aea:	9306      	str	r3, [sp, #24]
 8007aec:	461c      	mov	r4, r3
 8007aee:	469a      	mov	sl, r3
 8007af0:	9502      	str	r5, [sp, #8]
 8007af2:	9b02      	ldr	r3, [sp, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f1aa 0a08 	sub.w	sl, sl, #8
 8007afa:	dc6b      	bgt.n	8007bd4 <__kernel_rem_pio2+0x5ec>
 8007afc:	46aa      	mov	sl, r5
 8007afe:	f1ba 0f01 	cmp.w	sl, #1
 8007b02:	f1a4 0408 	sub.w	r4, r4, #8
 8007b06:	f300 8085 	bgt.w	8007c14 <__kernel_rem_pio2+0x62c>
 8007b0a:	9c06      	ldr	r4, [sp, #24]
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	3408      	adds	r4, #8
 8007b10:	2100      	movs	r1, #0
 8007b12:	2d01      	cmp	r5, #1
 8007b14:	f300 809d 	bgt.w	8007c52 <__kernel_rem_pio2+0x66a>
 8007b18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007b1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007b20:	f1bb 0f00 	cmp.w	fp, #0
 8007b24:	f040 809b 	bne.w	8007c5e <__kernel_rem_pio2+0x676>
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	e9c3 5600 	strd	r5, r6, [r3]
 8007b2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007b32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007b36:	e7ca      	b.n	8007ace <__kernel_rem_pio2+0x4e6>
 8007b38:	3408      	adds	r4, #8
 8007b3a:	ab4a      	add	r3, sp, #296	; 0x128
 8007b3c:	441c      	add	r4, r3
 8007b3e:	462e      	mov	r6, r5
 8007b40:	2000      	movs	r0, #0
 8007b42:	2100      	movs	r1, #0
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	da36      	bge.n	8007bb6 <__kernel_rem_pio2+0x5ce>
 8007b48:	f1bb 0f00 	cmp.w	fp, #0
 8007b4c:	d039      	beq.n	8007bc2 <__kernel_rem_pio2+0x5da>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b54:	9c01      	ldr	r4, [sp, #4]
 8007b56:	e9c4 2300 	strd	r2, r3, [r4]
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007b62:	f7f8 fb55 	bl	8000210 <__aeabi_dsub>
 8007b66:	ae4c      	add	r6, sp, #304	; 0x130
 8007b68:	2401      	movs	r4, #1
 8007b6a:	42a5      	cmp	r5, r4
 8007b6c:	da2c      	bge.n	8007bc8 <__kernel_rem_pio2+0x5e0>
 8007b6e:	f1bb 0f00 	cmp.w	fp, #0
 8007b72:	d002      	beq.n	8007b7a <__kernel_rem_pio2+0x592>
 8007b74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b78:	4619      	mov	r1, r3
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007b80:	e7a5      	b.n	8007ace <__kernel_rem_pio2+0x4e6>
 8007b82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007b86:	eb0d 0403 	add.w	r4, sp, r3
 8007b8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007b8e:	2000      	movs	r0, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	2d00      	cmp	r5, #0
 8007b94:	da09      	bge.n	8007baa <__kernel_rem_pio2+0x5c2>
 8007b96:	f1bb 0f00 	cmp.w	fp, #0
 8007b9a:	d002      	beq.n	8007ba2 <__kernel_rem_pio2+0x5ba>
 8007b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	e9c3 0100 	strd	r0, r1, [r3]
 8007ba8:	e791      	b.n	8007ace <__kernel_rem_pio2+0x4e6>
 8007baa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007bae:	f7f8 fb31 	bl	8000214 <__adddf3>
 8007bb2:	3d01      	subs	r5, #1
 8007bb4:	e7ed      	b.n	8007b92 <__kernel_rem_pio2+0x5aa>
 8007bb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007bba:	f7f8 fb2b 	bl	8000214 <__adddf3>
 8007bbe:	3e01      	subs	r6, #1
 8007bc0:	e7c0      	b.n	8007b44 <__kernel_rem_pio2+0x55c>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e7c5      	b.n	8007b54 <__kernel_rem_pio2+0x56c>
 8007bc8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007bcc:	f7f8 fb22 	bl	8000214 <__adddf3>
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	e7ca      	b.n	8007b6a <__kernel_rem_pio2+0x582>
 8007bd4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bd8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007bdc:	9b02      	ldr	r3, [sp, #8]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	4632      	mov	r2, r6
 8007be4:	463b      	mov	r3, r7
 8007be6:	4640      	mov	r0, r8
 8007be8:	4649      	mov	r1, r9
 8007bea:	f7f8 fb13 	bl	8000214 <__adddf3>
 8007bee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	f7f8 fb09 	bl	8000210 <__aeabi_dsub>
 8007bfe:	4632      	mov	r2, r6
 8007c00:	463b      	mov	r3, r7
 8007c02:	f7f8 fb07 	bl	8000214 <__adddf3>
 8007c06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007c0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c0e:	ed8a 7b00 	vstr	d7, [sl]
 8007c12:	e76e      	b.n	8007af2 <__kernel_rem_pio2+0x50a>
 8007c14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007c18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	4632      	mov	r2, r6
 8007c20:	463b      	mov	r3, r7
 8007c22:	4649      	mov	r1, r9
 8007c24:	f7f8 faf6 	bl	8000214 <__adddf3>
 8007c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4640      	mov	r0, r8
 8007c32:	4649      	mov	r1, r9
 8007c34:	f7f8 faec 	bl	8000210 <__aeabi_dsub>
 8007c38:	4632      	mov	r2, r6
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	f7f8 faea 	bl	8000214 <__adddf3>
 8007c40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c48:	ed84 7b00 	vstr	d7, [r4]
 8007c4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c50:	e755      	b.n	8007afe <__kernel_rem_pio2+0x516>
 8007c52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c56:	f7f8 fadd 	bl	8000214 <__adddf3>
 8007c5a:	3d01      	subs	r5, #1
 8007c5c:	e759      	b.n	8007b12 <__kernel_rem_pio2+0x52a>
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	9a01      	ldr	r2, [sp, #4]
 8007c62:	601d      	str	r5, [r3, #0]
 8007c64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007c68:	605c      	str	r4, [r3, #4]
 8007c6a:	609f      	str	r7, [r3, #8]
 8007c6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007c70:	60d3      	str	r3, [r2, #12]
 8007c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c76:	6110      	str	r0, [r2, #16]
 8007c78:	6153      	str	r3, [r2, #20]
 8007c7a:	e728      	b.n	8007ace <__kernel_rem_pio2+0x4e6>
 8007c7c:	41700000 	.word	0x41700000
 8007c80:	3e700000 	.word	0x3e700000
 8007c84:	00000000 	.word	0x00000000

08007c88 <__kernel_sin>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	ed2d 8b04 	vpush	{d8-d9}
 8007c90:	eeb0 8a41 	vmov.f32	s16, s2
 8007c94:	eef0 8a61 	vmov.f32	s17, s3
 8007c98:	ec55 4b10 	vmov	r4, r5, d0
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ca2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007ca6:	9001      	str	r0, [sp, #4]
 8007ca8:	da06      	bge.n	8007cb8 <__kernel_sin+0x30>
 8007caa:	ee10 0a10 	vmov	r0, s0
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 ff16 	bl	8000ae0 <__aeabi_d2iz>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d051      	beq.n	8007d5c <__kernel_sin+0xd4>
 8007cb8:	4622      	mov	r2, r4
 8007cba:	462b      	mov	r3, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 fc5e 	bl	8000580 <__aeabi_dmul>
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	468b      	mov	fp, r1
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4620      	mov	r0, r4
 8007cce:	4629      	mov	r1, r5
 8007cd0:	f7f8 fc56 	bl	8000580 <__aeabi_dmul>
 8007cd4:	a341      	add	r3, pc, #260	; (adr r3, 8007ddc <__kernel_sin+0x154>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	4680      	mov	r8, r0
 8007cdc:	4689      	mov	r9, r1
 8007cde:	4650      	mov	r0, sl
 8007ce0:	4659      	mov	r1, fp
 8007ce2:	f7f8 fc4d 	bl	8000580 <__aeabi_dmul>
 8007ce6:	a33f      	add	r3, pc, #252	; (adr r3, 8007de4 <__kernel_sin+0x15c>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f7f8 fa90 	bl	8000210 <__aeabi_dsub>
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	465b      	mov	r3, fp
 8007cf4:	f7f8 fc44 	bl	8000580 <__aeabi_dmul>
 8007cf8:	a33c      	add	r3, pc, #240	; (adr r3, 8007dec <__kernel_sin+0x164>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fa89 	bl	8000214 <__adddf3>
 8007d02:	4652      	mov	r2, sl
 8007d04:	465b      	mov	r3, fp
 8007d06:	f7f8 fc3b 	bl	8000580 <__aeabi_dmul>
 8007d0a:	a33a      	add	r3, pc, #232	; (adr r3, 8007df4 <__kernel_sin+0x16c>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fa7e 	bl	8000210 <__aeabi_dsub>
 8007d14:	4652      	mov	r2, sl
 8007d16:	465b      	mov	r3, fp
 8007d18:	f7f8 fc32 	bl	8000580 <__aeabi_dmul>
 8007d1c:	a337      	add	r3, pc, #220	; (adr r3, 8007dfc <__kernel_sin+0x174>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f8 fa77 	bl	8000214 <__adddf3>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	b9eb      	cbnz	r3, 8007d6a <__kernel_sin+0xe2>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4650      	mov	r0, sl
 8007d34:	4659      	mov	r1, fp
 8007d36:	f7f8 fc23 	bl	8000580 <__aeabi_dmul>
 8007d3a:	a325      	add	r3, pc, #148	; (adr r3, 8007dd0 <__kernel_sin+0x148>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fa66 	bl	8000210 <__aeabi_dsub>
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	f7f8 fc1a 	bl	8000580 <__aeabi_dmul>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4620      	mov	r0, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	f7f8 fa5e 	bl	8000214 <__adddf3>
 8007d58:	4604      	mov	r4, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	ec45 4b10 	vmov	d0, r4, r5
 8007d60:	b003      	add	sp, #12
 8007d62:	ecbd 8b04 	vpop	{d8-d9}
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <__kernel_sin+0x150>)
 8007d6c:	ec51 0b18 	vmov	r0, r1, d8
 8007d70:	2200      	movs	r2, #0
 8007d72:	f7f8 fc05 	bl	8000580 <__aeabi_dmul>
 8007d76:	4632      	mov	r2, r6
 8007d78:	ec41 0b19 	vmov	d9, r0, r1
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	f7f8 fbfd 	bl	8000580 <__aeabi_dmul>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	ec51 0b19 	vmov	r0, r1, d9
 8007d8e:	f7f8 fa3f 	bl	8000210 <__aeabi_dsub>
 8007d92:	4652      	mov	r2, sl
 8007d94:	465b      	mov	r3, fp
 8007d96:	f7f8 fbf3 	bl	8000580 <__aeabi_dmul>
 8007d9a:	ec53 2b18 	vmov	r2, r3, d8
 8007d9e:	f7f8 fa37 	bl	8000210 <__aeabi_dsub>
 8007da2:	a30b      	add	r3, pc, #44	; (adr r3, 8007dd0 <__kernel_sin+0x148>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	4606      	mov	r6, r0
 8007daa:	460f      	mov	r7, r1
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 fbe6 	bl	8000580 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f8 fa2a 	bl	8000214 <__adddf3>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa22 	bl	8000210 <__aeabi_dsub>
 8007dcc:	e7c4      	b.n	8007d58 <__kernel_sin+0xd0>
 8007dce:	bf00      	nop
 8007dd0:	55555549 	.word	0x55555549
 8007dd4:	3fc55555 	.word	0x3fc55555
 8007dd8:	3fe00000 	.word	0x3fe00000
 8007ddc:	5acfd57c 	.word	0x5acfd57c
 8007de0:	3de5d93a 	.word	0x3de5d93a
 8007de4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007de8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007dec:	57b1fe7d 	.word	0x57b1fe7d
 8007df0:	3ec71de3 	.word	0x3ec71de3
 8007df4:	19c161d5 	.word	0x19c161d5
 8007df8:	3f2a01a0 	.word	0x3f2a01a0
 8007dfc:	1110f8a6 	.word	0x1110f8a6
 8007e00:	3f811111 	.word	0x3f811111
 8007e04:	00000000 	.word	0x00000000

08007e08 <atan>:
 8007e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	ec55 4b10 	vmov	r4, r5, d0
 8007e10:	4bc3      	ldr	r3, [pc, #780]	; (8008120 <atan+0x318>)
 8007e12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e16:	429e      	cmp	r6, r3
 8007e18:	46ab      	mov	fp, r5
 8007e1a:	dd18      	ble.n	8007e4e <atan+0x46>
 8007e1c:	4bc1      	ldr	r3, [pc, #772]	; (8008124 <atan+0x31c>)
 8007e1e:	429e      	cmp	r6, r3
 8007e20:	dc01      	bgt.n	8007e26 <atan+0x1e>
 8007e22:	d109      	bne.n	8007e38 <atan+0x30>
 8007e24:	b144      	cbz	r4, 8007e38 <atan+0x30>
 8007e26:	4622      	mov	r2, r4
 8007e28:	462b      	mov	r3, r5
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7f8 f9f1 	bl	8000214 <__adddf3>
 8007e32:	4604      	mov	r4, r0
 8007e34:	460d      	mov	r5, r1
 8007e36:	e006      	b.n	8007e46 <atan+0x3e>
 8007e38:	f1bb 0f00 	cmp.w	fp, #0
 8007e3c:	f300 8131 	bgt.w	80080a2 <atan+0x29a>
 8007e40:	a59b      	add	r5, pc, #620	; (adr r5, 80080b0 <atan+0x2a8>)
 8007e42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e46:	ec45 4b10 	vmov	d0, r4, r5
 8007e4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	4bb6      	ldr	r3, [pc, #728]	; (8008128 <atan+0x320>)
 8007e50:	429e      	cmp	r6, r3
 8007e52:	dc14      	bgt.n	8007e7e <atan+0x76>
 8007e54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007e58:	429e      	cmp	r6, r3
 8007e5a:	dc0d      	bgt.n	8007e78 <atan+0x70>
 8007e5c:	a396      	add	r3, pc, #600	; (adr r3, 80080b8 <atan+0x2b0>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	ee10 0a10 	vmov	r0, s0
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 f9d4 	bl	8000214 <__adddf3>
 8007e6c:	4baf      	ldr	r3, [pc, #700]	; (800812c <atan+0x324>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f7f8 fe16 	bl	8000aa0 <__aeabi_dcmpgt>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d1e6      	bne.n	8007e46 <atan+0x3e>
 8007e78:	f04f 3aff 	mov.w	sl, #4294967295
 8007e7c:	e02b      	b.n	8007ed6 <atan+0xce>
 8007e7e:	f000 f963 	bl	8008148 <fabs>
 8007e82:	4bab      	ldr	r3, [pc, #684]	; (8008130 <atan+0x328>)
 8007e84:	429e      	cmp	r6, r3
 8007e86:	ec55 4b10 	vmov	r4, r5, d0
 8007e8a:	f300 80bf 	bgt.w	800800c <atan+0x204>
 8007e8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007e92:	429e      	cmp	r6, r3
 8007e94:	f300 80a0 	bgt.w	8007fd8 <atan+0x1d0>
 8007e98:	ee10 2a10 	vmov	r2, s0
 8007e9c:	ee10 0a10 	vmov	r0, s0
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7f8 f9b6 	bl	8000214 <__adddf3>
 8007ea8:	4ba0      	ldr	r3, [pc, #640]	; (800812c <atan+0x324>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 f9b0 	bl	8000210 <__aeabi_dsub>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f7f8 f9a9 	bl	8000214 <__adddf3>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 fc83 	bl	80007d4 <__aeabi_ddiv>
 8007ece:	f04f 0a00 	mov.w	sl, #0
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	462b      	mov	r3, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	4629      	mov	r1, r5
 8007ede:	f7f8 fb4f 	bl	8000580 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4689      	mov	r9, r1
 8007eea:	f7f8 fb49 	bl	8000580 <__aeabi_dmul>
 8007eee:	a374      	add	r3, pc, #464	; (adr r3, 80080c0 <atan+0x2b8>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	f7f8 fb42 	bl	8000580 <__aeabi_dmul>
 8007efc:	a372      	add	r3, pc, #456	; (adr r3, 80080c8 <atan+0x2c0>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f987 	bl	8000214 <__adddf3>
 8007f06:	4632      	mov	r2, r6
 8007f08:	463b      	mov	r3, r7
 8007f0a:	f7f8 fb39 	bl	8000580 <__aeabi_dmul>
 8007f0e:	a370      	add	r3, pc, #448	; (adr r3, 80080d0 <atan+0x2c8>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f7f8 f97e 	bl	8000214 <__adddf3>
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	f7f8 fb30 	bl	8000580 <__aeabi_dmul>
 8007f20:	a36d      	add	r3, pc, #436	; (adr r3, 80080d8 <atan+0x2d0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 f975 	bl	8000214 <__adddf3>
 8007f2a:	4632      	mov	r2, r6
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	f7f8 fb27 	bl	8000580 <__aeabi_dmul>
 8007f32:	a36b      	add	r3, pc, #428	; (adr r3, 80080e0 <atan+0x2d8>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 f96c 	bl	8000214 <__adddf3>
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	463b      	mov	r3, r7
 8007f40:	f7f8 fb1e 	bl	8000580 <__aeabi_dmul>
 8007f44:	a368      	add	r3, pc, #416	; (adr r3, 80080e8 <atan+0x2e0>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 f963 	bl	8000214 <__adddf3>
 8007f4e:	4642      	mov	r2, r8
 8007f50:	464b      	mov	r3, r9
 8007f52:	f7f8 fb15 	bl	8000580 <__aeabi_dmul>
 8007f56:	a366      	add	r3, pc, #408	; (adr r3, 80080f0 <atan+0x2e8>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	4689      	mov	r9, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 fb0c 	bl	8000580 <__aeabi_dmul>
 8007f68:	a363      	add	r3, pc, #396	; (adr r3, 80080f8 <atan+0x2f0>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 f94f 	bl	8000210 <__aeabi_dsub>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	f7f8 fb03 	bl	8000580 <__aeabi_dmul>
 8007f7a:	a361      	add	r3, pc, #388	; (adr r3, 8008100 <atan+0x2f8>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 f946 	bl	8000210 <__aeabi_dsub>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	f7f8 fafa 	bl	8000580 <__aeabi_dmul>
 8007f8c:	a35e      	add	r3, pc, #376	; (adr r3, 8008108 <atan+0x300>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 f93d 	bl	8000210 <__aeabi_dsub>
 8007f96:	4632      	mov	r2, r6
 8007f98:	463b      	mov	r3, r7
 8007f9a:	f7f8 faf1 	bl	8000580 <__aeabi_dmul>
 8007f9e:	a35c      	add	r3, pc, #368	; (adr r3, 8008110 <atan+0x308>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 f934 	bl	8000210 <__aeabi_dsub>
 8007fa8:	4632      	mov	r2, r6
 8007faa:	463b      	mov	r3, r7
 8007fac:	f7f8 fae8 	bl	8000580 <__aeabi_dmul>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 f92c 	bl	8000214 <__adddf3>
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	462b      	mov	r3, r5
 8007fc0:	f7f8 fade 	bl	8000580 <__aeabi_dmul>
 8007fc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	d14b      	bne.n	8008066 <atan+0x25e>
 8007fce:	4620      	mov	r0, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	f7f8 f91d 	bl	8000210 <__aeabi_dsub>
 8007fd6:	e72c      	b.n	8007e32 <atan+0x2a>
 8007fd8:	ee10 0a10 	vmov	r0, s0
 8007fdc:	4b53      	ldr	r3, [pc, #332]	; (800812c <atan+0x324>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 f915 	bl	8000210 <__aeabi_dsub>
 8007fe6:	4b51      	ldr	r3, [pc, #324]	; (800812c <atan+0x324>)
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	2200      	movs	r2, #0
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 f90f 	bl	8000214 <__adddf3>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	f7f8 fbe9 	bl	80007d4 <__aeabi_ddiv>
 8008002:	f04f 0a01 	mov.w	sl, #1
 8008006:	4604      	mov	r4, r0
 8008008:	460d      	mov	r5, r1
 800800a:	e764      	b.n	8007ed6 <atan+0xce>
 800800c:	4b49      	ldr	r3, [pc, #292]	; (8008134 <atan+0x32c>)
 800800e:	429e      	cmp	r6, r3
 8008010:	da1d      	bge.n	800804e <atan+0x246>
 8008012:	ee10 0a10 	vmov	r0, s0
 8008016:	4b48      	ldr	r3, [pc, #288]	; (8008138 <atan+0x330>)
 8008018:	2200      	movs	r2, #0
 800801a:	4629      	mov	r1, r5
 800801c:	f7f8 f8f8 	bl	8000210 <__aeabi_dsub>
 8008020:	4b45      	ldr	r3, [pc, #276]	; (8008138 <atan+0x330>)
 8008022:	4606      	mov	r6, r0
 8008024:	460f      	mov	r7, r1
 8008026:	2200      	movs	r2, #0
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	f7f8 faa8 	bl	8000580 <__aeabi_dmul>
 8008030:	4b3e      	ldr	r3, [pc, #248]	; (800812c <atan+0x324>)
 8008032:	2200      	movs	r2, #0
 8008034:	f7f8 f8ee 	bl	8000214 <__adddf3>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4630      	mov	r0, r6
 800803e:	4639      	mov	r1, r7
 8008040:	f7f8 fbc8 	bl	80007d4 <__aeabi_ddiv>
 8008044:	f04f 0a02 	mov.w	sl, #2
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	e743      	b.n	8007ed6 <atan+0xce>
 800804e:	462b      	mov	r3, r5
 8008050:	ee10 2a10 	vmov	r2, s0
 8008054:	4939      	ldr	r1, [pc, #228]	; (800813c <atan+0x334>)
 8008056:	2000      	movs	r0, #0
 8008058:	f7f8 fbbc 	bl	80007d4 <__aeabi_ddiv>
 800805c:	f04f 0a03 	mov.w	sl, #3
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	e737      	b.n	8007ed6 <atan+0xce>
 8008066:	4b36      	ldr	r3, [pc, #216]	; (8008140 <atan+0x338>)
 8008068:	4e36      	ldr	r6, [pc, #216]	; (8008144 <atan+0x33c>)
 800806a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800806e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008072:	e9da 2300 	ldrd	r2, r3, [sl]
 8008076:	f7f8 f8cb 	bl	8000210 <__aeabi_dsub>
 800807a:	4622      	mov	r2, r4
 800807c:	462b      	mov	r3, r5
 800807e:	f7f8 f8c7 	bl	8000210 <__aeabi_dsub>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	e9d6 0100 	ldrd	r0, r1, [r6]
 800808a:	f7f8 f8c1 	bl	8000210 <__aeabi_dsub>
 800808e:	f1bb 0f00 	cmp.w	fp, #0
 8008092:	4604      	mov	r4, r0
 8008094:	460d      	mov	r5, r1
 8008096:	f6bf aed6 	bge.w	8007e46 <atan+0x3e>
 800809a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800809e:	461d      	mov	r5, r3
 80080a0:	e6d1      	b.n	8007e46 <atan+0x3e>
 80080a2:	a51d      	add	r5, pc, #116	; (adr r5, 8008118 <atan+0x310>)
 80080a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080a8:	e6cd      	b.n	8007e46 <atan+0x3e>
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w
 80080b0:	54442d18 	.word	0x54442d18
 80080b4:	bff921fb 	.word	0xbff921fb
 80080b8:	8800759c 	.word	0x8800759c
 80080bc:	7e37e43c 	.word	0x7e37e43c
 80080c0:	e322da11 	.word	0xe322da11
 80080c4:	3f90ad3a 	.word	0x3f90ad3a
 80080c8:	24760deb 	.word	0x24760deb
 80080cc:	3fa97b4b 	.word	0x3fa97b4b
 80080d0:	a0d03d51 	.word	0xa0d03d51
 80080d4:	3fb10d66 	.word	0x3fb10d66
 80080d8:	c54c206e 	.word	0xc54c206e
 80080dc:	3fb745cd 	.word	0x3fb745cd
 80080e0:	920083ff 	.word	0x920083ff
 80080e4:	3fc24924 	.word	0x3fc24924
 80080e8:	5555550d 	.word	0x5555550d
 80080ec:	3fd55555 	.word	0x3fd55555
 80080f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80080f4:	bfa2b444 	.word	0xbfa2b444
 80080f8:	52defd9a 	.word	0x52defd9a
 80080fc:	3fadde2d 	.word	0x3fadde2d
 8008100:	af749a6d 	.word	0xaf749a6d
 8008104:	3fb3b0f2 	.word	0x3fb3b0f2
 8008108:	fe231671 	.word	0xfe231671
 800810c:	3fbc71c6 	.word	0x3fbc71c6
 8008110:	9998ebc4 	.word	0x9998ebc4
 8008114:	3fc99999 	.word	0x3fc99999
 8008118:	54442d18 	.word	0x54442d18
 800811c:	3ff921fb 	.word	0x3ff921fb
 8008120:	440fffff 	.word	0x440fffff
 8008124:	7ff00000 	.word	0x7ff00000
 8008128:	3fdbffff 	.word	0x3fdbffff
 800812c:	3ff00000 	.word	0x3ff00000
 8008130:	3ff2ffff 	.word	0x3ff2ffff
 8008134:	40038000 	.word	0x40038000
 8008138:	3ff80000 	.word	0x3ff80000
 800813c:	bff00000 	.word	0xbff00000
 8008140:	08008668 	.word	0x08008668
 8008144:	08008648 	.word	0x08008648

08008148 <fabs>:
 8008148:	ec51 0b10 	vmov	r0, r1, d0
 800814c:	ee10 2a10 	vmov	r2, s0
 8008150:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008154:	ec43 2b10 	vmov	d0, r2, r3
 8008158:	4770      	bx	lr
 800815a:	0000      	movs	r0, r0
 800815c:	0000      	movs	r0, r0
	...

08008160 <floor>:
 8008160:	ec51 0b10 	vmov	r0, r1, d0
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800816c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008170:	2e13      	cmp	r6, #19
 8008172:	ee10 5a10 	vmov	r5, s0
 8008176:	ee10 8a10 	vmov	r8, s0
 800817a:	460c      	mov	r4, r1
 800817c:	dc32      	bgt.n	80081e4 <floor+0x84>
 800817e:	2e00      	cmp	r6, #0
 8008180:	da14      	bge.n	80081ac <floor+0x4c>
 8008182:	a333      	add	r3, pc, #204	; (adr r3, 8008250 <floor+0xf0>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 f844 	bl	8000214 <__adddf3>
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	f7f8 fc86 	bl	8000aa0 <__aeabi_dcmpgt>
 8008194:	b138      	cbz	r0, 80081a6 <floor+0x46>
 8008196:	2c00      	cmp	r4, #0
 8008198:	da57      	bge.n	800824a <floor+0xea>
 800819a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800819e:	431d      	orrs	r5, r3
 80081a0:	d001      	beq.n	80081a6 <floor+0x46>
 80081a2:	4c2d      	ldr	r4, [pc, #180]	; (8008258 <floor+0xf8>)
 80081a4:	2500      	movs	r5, #0
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	e025      	b.n	80081f8 <floor+0x98>
 80081ac:	4f2b      	ldr	r7, [pc, #172]	; (800825c <floor+0xfc>)
 80081ae:	4137      	asrs	r7, r6
 80081b0:	ea01 0307 	and.w	r3, r1, r7
 80081b4:	4303      	orrs	r3, r0
 80081b6:	d01f      	beq.n	80081f8 <floor+0x98>
 80081b8:	a325      	add	r3, pc, #148	; (adr r3, 8008250 <floor+0xf0>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f829 	bl	8000214 <__adddf3>
 80081c2:	2200      	movs	r2, #0
 80081c4:	2300      	movs	r3, #0
 80081c6:	f7f8 fc6b 	bl	8000aa0 <__aeabi_dcmpgt>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0eb      	beq.n	80081a6 <floor+0x46>
 80081ce:	2c00      	cmp	r4, #0
 80081d0:	bfbe      	ittt	lt
 80081d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80081d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80081da:	19a4      	addlt	r4, r4, r6
 80081dc:	ea24 0407 	bic.w	r4, r4, r7
 80081e0:	2500      	movs	r5, #0
 80081e2:	e7e0      	b.n	80081a6 <floor+0x46>
 80081e4:	2e33      	cmp	r6, #51	; 0x33
 80081e6:	dd0b      	ble.n	8008200 <floor+0xa0>
 80081e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081ec:	d104      	bne.n	80081f8 <floor+0x98>
 80081ee:	ee10 2a10 	vmov	r2, s0
 80081f2:	460b      	mov	r3, r1
 80081f4:	f7f8 f80e 	bl	8000214 <__adddf3>
 80081f8:	ec41 0b10 	vmov	d0, r0, r1
 80081fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008200:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	fa23 f707 	lsr.w	r7, r3, r7
 800820c:	4207      	tst	r7, r0
 800820e:	d0f3      	beq.n	80081f8 <floor+0x98>
 8008210:	a30f      	add	r3, pc, #60	; (adr r3, 8008250 <floor+0xf0>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f7 fffd 	bl	8000214 <__adddf3>
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	f7f8 fc3f 	bl	8000aa0 <__aeabi_dcmpgt>
 8008222:	2800      	cmp	r0, #0
 8008224:	d0bf      	beq.n	80081a6 <floor+0x46>
 8008226:	2c00      	cmp	r4, #0
 8008228:	da02      	bge.n	8008230 <floor+0xd0>
 800822a:	2e14      	cmp	r6, #20
 800822c:	d103      	bne.n	8008236 <floor+0xd6>
 800822e:	3401      	adds	r4, #1
 8008230:	ea25 0507 	bic.w	r5, r5, r7
 8008234:	e7b7      	b.n	80081a6 <floor+0x46>
 8008236:	2301      	movs	r3, #1
 8008238:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800823c:	fa03 f606 	lsl.w	r6, r3, r6
 8008240:	4435      	add	r5, r6
 8008242:	4545      	cmp	r5, r8
 8008244:	bf38      	it	cc
 8008246:	18e4      	addcc	r4, r4, r3
 8008248:	e7f2      	b.n	8008230 <floor+0xd0>
 800824a:	2500      	movs	r5, #0
 800824c:	462c      	mov	r4, r5
 800824e:	e7aa      	b.n	80081a6 <floor+0x46>
 8008250:	8800759c 	.word	0x8800759c
 8008254:	7e37e43c 	.word	0x7e37e43c
 8008258:	bff00000 	.word	0xbff00000
 800825c:	000fffff 	.word	0x000fffff

08008260 <nan>:
 8008260:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008268 <nan+0x8>
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	00000000 	.word	0x00000000
 800826c:	7ff80000 	.word	0x7ff80000

08008270 <scalbn>:
 8008270:	b570      	push	{r4, r5, r6, lr}
 8008272:	ec55 4b10 	vmov	r4, r5, d0
 8008276:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800827a:	4606      	mov	r6, r0
 800827c:	462b      	mov	r3, r5
 800827e:	b99a      	cbnz	r2, 80082a8 <scalbn+0x38>
 8008280:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008284:	4323      	orrs	r3, r4
 8008286:	d036      	beq.n	80082f6 <scalbn+0x86>
 8008288:	4b39      	ldr	r3, [pc, #228]	; (8008370 <scalbn+0x100>)
 800828a:	4629      	mov	r1, r5
 800828c:	ee10 0a10 	vmov	r0, s0
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f975 	bl	8000580 <__aeabi_dmul>
 8008296:	4b37      	ldr	r3, [pc, #220]	; (8008374 <scalbn+0x104>)
 8008298:	429e      	cmp	r6, r3
 800829a:	4604      	mov	r4, r0
 800829c:	460d      	mov	r5, r1
 800829e:	da10      	bge.n	80082c2 <scalbn+0x52>
 80082a0:	a32b      	add	r3, pc, #172	; (adr r3, 8008350 <scalbn+0xe0>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e03a      	b.n	800831e <scalbn+0xae>
 80082a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80082ac:	428a      	cmp	r2, r1
 80082ae:	d10c      	bne.n	80082ca <scalbn+0x5a>
 80082b0:	ee10 2a10 	vmov	r2, s0
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f7 ffac 	bl	8000214 <__adddf3>
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	e019      	b.n	80082f6 <scalbn+0x86>
 80082c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082c6:	460b      	mov	r3, r1
 80082c8:	3a36      	subs	r2, #54	; 0x36
 80082ca:	4432      	add	r2, r6
 80082cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80082d0:	428a      	cmp	r2, r1
 80082d2:	dd08      	ble.n	80082e6 <scalbn+0x76>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	a120      	add	r1, pc, #128	; (adr r1, 8008358 <scalbn+0xe8>)
 80082d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082dc:	da1c      	bge.n	8008318 <scalbn+0xa8>
 80082de:	a120      	add	r1, pc, #128	; (adr r1, 8008360 <scalbn+0xf0>)
 80082e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e4:	e018      	b.n	8008318 <scalbn+0xa8>
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	dd08      	ble.n	80082fc <scalbn+0x8c>
 80082ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082f6:	ec45 4b10 	vmov	d0, r4, r5
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008300:	da19      	bge.n	8008336 <scalbn+0xc6>
 8008302:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008306:	429e      	cmp	r6, r3
 8008308:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800830c:	dd0a      	ble.n	8008324 <scalbn+0xb4>
 800830e:	a112      	add	r1, pc, #72	; (adr r1, 8008358 <scalbn+0xe8>)
 8008310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e2      	bne.n	80082de <scalbn+0x6e>
 8008318:	a30f      	add	r3, pc, #60	; (adr r3, 8008358 <scalbn+0xe8>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 f92f 	bl	8000580 <__aeabi_dmul>
 8008322:	e7cb      	b.n	80082bc <scalbn+0x4c>
 8008324:	a10a      	add	r1, pc, #40	; (adr r1, 8008350 <scalbn+0xe0>)
 8008326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0b8      	beq.n	80082a0 <scalbn+0x30>
 800832e:	a10e      	add	r1, pc, #56	; (adr r1, 8008368 <scalbn+0xf8>)
 8008330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008334:	e7b4      	b.n	80082a0 <scalbn+0x30>
 8008336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800833a:	3236      	adds	r2, #54	; 0x36
 800833c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008340:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008344:	4620      	mov	r0, r4
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <scalbn+0x108>)
 8008348:	2200      	movs	r2, #0
 800834a:	e7e8      	b.n	800831e <scalbn+0xae>
 800834c:	f3af 8000 	nop.w
 8008350:	c2f8f359 	.word	0xc2f8f359
 8008354:	01a56e1f 	.word	0x01a56e1f
 8008358:	8800759c 	.word	0x8800759c
 800835c:	7e37e43c 	.word	0x7e37e43c
 8008360:	8800759c 	.word	0x8800759c
 8008364:	fe37e43c 	.word	0xfe37e43c
 8008368:	c2f8f359 	.word	0xc2f8f359
 800836c:	81a56e1f 	.word	0x81a56e1f
 8008370:	43500000 	.word	0x43500000
 8008374:	ffff3cb0 	.word	0xffff3cb0
 8008378:	3c900000 	.word	0x3c900000

0800837c <__errno>:
 800837c:	4b01      	ldr	r3, [pc, #4]	; (8008384 <__errno+0x8>)
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000014 	.word	0x20000014

08008388 <__libc_init_array>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	4d0d      	ldr	r5, [pc, #52]	; (80083c0 <__libc_init_array+0x38>)
 800838c:	4c0d      	ldr	r4, [pc, #52]	; (80083c4 <__libc_init_array+0x3c>)
 800838e:	1b64      	subs	r4, r4, r5
 8008390:	10a4      	asrs	r4, r4, #2
 8008392:	2600      	movs	r6, #0
 8008394:	42a6      	cmp	r6, r4
 8008396:	d109      	bne.n	80083ac <__libc_init_array+0x24>
 8008398:	4d0b      	ldr	r5, [pc, #44]	; (80083c8 <__libc_init_array+0x40>)
 800839a:	4c0c      	ldr	r4, [pc, #48]	; (80083cc <__libc_init_array+0x44>)
 800839c:	f000 f82e 	bl	80083fc <_init>
 80083a0:	1b64      	subs	r4, r4, r5
 80083a2:	10a4      	asrs	r4, r4, #2
 80083a4:	2600      	movs	r6, #0
 80083a6:	42a6      	cmp	r6, r4
 80083a8:	d105      	bne.n	80083b6 <__libc_init_array+0x2e>
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b0:	4798      	blx	r3
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7ee      	b.n	8008394 <__libc_init_array+0xc>
 80083b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ba:	4798      	blx	r3
 80083bc:	3601      	adds	r6, #1
 80083be:	e7f2      	b.n	80083a6 <__libc_init_array+0x1e>
 80083c0:	08008690 	.word	0x08008690
 80083c4:	08008690 	.word	0x08008690
 80083c8:	08008690 	.word	0x08008690
 80083cc:	08008698 	.word	0x08008698

080083d0 <memcpy>:
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d8:	d100      	bne.n	80083dc <memcpy+0xc>
 80083da:	4770      	bx	lr
 80083dc:	b510      	push	{r4, lr}
 80083de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d1f9      	bne.n	80083de <memcpy+0xe>
 80083ea:	bd10      	pop	{r4, pc}

080083ec <memset>:
 80083ec:	4402      	add	r2, r0
 80083ee:	4603      	mov	r3, r0
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d100      	bne.n	80083f6 <memset+0xa>
 80083f4:	4770      	bx	lr
 80083f6:	f803 1b01 	strb.w	r1, [r3], #1
 80083fa:	e7f9      	b.n	80083f0 <memset+0x4>

080083fc <_init>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	bf00      	nop
 8008400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008402:	bc08      	pop	{r3}
 8008404:	469e      	mov	lr, r3
 8008406:	4770      	bx	lr

08008408 <_fini>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr

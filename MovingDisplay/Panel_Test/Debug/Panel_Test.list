
Panel_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003564  08003564  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003564  08003564  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000000c  08003578  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08003578  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e6b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a04  00000000  00000000  00029e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002c370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013eec  00000000  00000000  0002cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcc9  00000000  00000000  00040c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000808c4  00000000  00000000  0004c925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002690  00000000  00000000  000cd23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080034b8 	.word	0x080034b8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080034b8 	.word	0x080034b8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <set_color>:
/* USER CODE BEGIN 0 */
//void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
//	   Neopixel.execute();
//}

void set_color(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	0005      	movs	r5, r0
 8000220:	000c      	movs	r4, r1
 8000222:	0010      	movs	r0, r2
 8000224:	0019      	movs	r1, r3
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	1c2a      	adds	r2, r5, #0
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	1c22      	adds	r2, r4, #0
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	1d7b      	adds	r3, r7, #5
 8000234:	1c02      	adds	r2, r0, #0
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	1c0a      	adds	r2, r1, #0
 800023c:	701a      	strb	r2, [r3, #0]
  rgb_buf[id][0]=r;
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	781a      	ldrb	r2, [r3, #0]
 8000242:	4910      	ldr	r1, [pc, #64]	; (8000284 <set_color+0x6c>)
 8000244:	0013      	movs	r3, r2
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	189b      	adds	r3, r3, r2
 800024a:	1dba      	adds	r2, r7, #6
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	545a      	strb	r2, [r3, r1]
  rgb_buf[id][1]=g;
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	490b      	ldr	r1, [pc, #44]	; (8000284 <set_color+0x6c>)
 8000256:	0013      	movs	r3, r2
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	189b      	adds	r3, r3, r2
 800025c:	18cb      	adds	r3, r1, r3
 800025e:	3301      	adds	r3, #1
 8000260:	1d7a      	adds	r2, r7, #5
 8000262:	7812      	ldrb	r2, [r2, #0]
 8000264:	701a      	strb	r2, [r3, #0]
  rgb_buf[id][2]=b;
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	4906      	ldr	r1, [pc, #24]	; (8000284 <set_color+0x6c>)
 800026c:	0013      	movs	r3, r2
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	189b      	adds	r3, r3, r2
 8000272:	18cb      	adds	r3, r1, r3
 8000274:	3302      	adds	r3, #2
 8000276:	1d3a      	adds	r2, r7, #4
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	701a      	strb	r2, [r3, #0]
}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	b002      	add	sp, #8
 8000282:	bdb0      	pop	{r4, r5, r7, pc}
 8000284:	200000d0 	.word	0x200000d0

08000288 <clear>:

void clear(){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
  for(int i=0; i<NUM_PIXELS; i++){
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	e01b      	b.n	80002cc <clear+0x44>
    rgb_buf[i][0]=0;
 8000294:	4911      	ldr	r1, [pc, #68]	; (80002dc <clear+0x54>)
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	0013      	movs	r3, r2
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	189b      	adds	r3, r3, r2
 800029e:	2200      	movs	r2, #0
 80002a0:	545a      	strb	r2, [r3, r1]
    rgb_buf[i][1]=0;
 80002a2:	490e      	ldr	r1, [pc, #56]	; (80002dc <clear+0x54>)
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	0013      	movs	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	189b      	adds	r3, r3, r2
 80002ac:	18cb      	adds	r3, r1, r3
 80002ae:	3301      	adds	r3, #1
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
    rgb_buf[i][2]=0;
 80002b4:	4909      	ldr	r1, [pc, #36]	; (80002dc <clear+0x54>)
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	0013      	movs	r3, r2
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	189b      	adds	r3, r3, r2
 80002be:	18cb      	adds	r3, r1, r3
 80002c0:	3302      	adds	r3, #2
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<NUM_PIXELS; i++){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2bff      	cmp	r3, #255	; 0xff
 80002d0:	dde0      	ble.n	8000294 <clear+0xc>
  }
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b002      	add	sp, #8
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000d0 	.word	0x200000d0

080002e0 <show>:


void show(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
    if(wr_buf_p != 0 || hdma_tim3_ch2.State != HAL_DMA_STATE_READY){
 80002e6:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <show+0xb0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <show+0x1a>
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <show+0xb4>)
 80002f0:	2225      	movs	r2, #37	; 0x25
 80002f2:	5c9b      	ldrb	r3, [r3, r2]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d01a      	beq.n	8000330 <show+0x50>
        HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <show+0xb8>)
 80002fc:	2104      	movs	r1, #4
 80002fe:	0018      	movs	r0, r3
 8000300:	f002 f8da 	bl	80024b8 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 8000304:	4b22      	ldr	r3, [pc, #136]	; (8000390 <show+0xb0>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e009      	b.n	8000326 <show+0x46>
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4a21      	ldr	r2, [pc, #132]	; (800039c <show+0xbc>)
 8000318:	2100      	movs	r1, #0
 800031a:	54d1      	strb	r1, [r2, r3]
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	3201      	adds	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	1dfb      	adds	r3, r7, #7
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b2f      	cmp	r3, #47	; 0x2f
 800032c:	d9f1      	bls.n	8000312 <show+0x32>
        return;
 800032e:	e02c      	b.n	800038a <show+0xaa>
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 8000330:	2300      	movs	r3, #0
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	e020      	b.n	8000378 <show+0x98>
        wr_buf[i  ] = 0;
 8000336:	4a19      	ldr	r2, [pc, #100]	; (800039c <show+0xbc>)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	18d3      	adds	r3, r2, r3
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+8] = 0;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	3308      	adds	r3, #8
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <show+0xbc>)
 8000346:	2100      	movs	r1, #0
 8000348:	54d1      	strb	r1, [r2, r3]
        wr_buf[i+16] = 0;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	3310      	adds	r3, #16
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <show+0xbc>)
 8000350:	2100      	movs	r1, #0
 8000352:	54d1      	strb	r1, [r2, r3]

        wr_buf[i+24] = 0;
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	3318      	adds	r3, #24
 8000358:	4a10      	ldr	r2, [pc, #64]	; (800039c <show+0xbc>)
 800035a:	2100      	movs	r1, #0
 800035c:	54d1      	strb	r1, [r2, r3]
        wr_buf[i+32] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3320      	adds	r3, #32
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <show+0xbc>)
 8000364:	2100      	movs	r1, #0
 8000366:	54d1      	strb	r1, [r2, r3]
        wr_buf[i+40] = 0;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3328      	adds	r3, #40	; 0x28
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <show+0xbc>)
 800036e:	2100      	movs	r1, #0
 8000370:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; i++){
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2b07      	cmp	r3, #7
 800037c:	d9db      	bls.n	8000336 <show+0x56>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)wr_buf, 48);
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <show+0xbc>)
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <show+0xb8>)
 8000382:	2330      	movs	r3, #48	; 0x30
 8000384:	2104      	movs	r1, #4
 8000386:	f001 fea9 	bl	80020dc <HAL_TIM_PWM_Start_DMA>
}
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000400 	.word	0x20000400
 8000394:	20000074 	.word	0x20000074
 8000398:	20000028 	.word	0x20000028
 800039c:	200003d0 	.word	0x200003d0

080003a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80003a8:	4b40      	ldr	r3, [pc, #256]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2bff      	cmp	r3, #255	; 0xff
 80003ae:	d858      	bhi.n	8000462 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc2>
    for(uint_fast8_t i = 0; i < 8; i++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e04c      	b.n	8000450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb0>
      wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80003b6:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	493d      	ldr	r1, [pc, #244]	; (80004b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80003bc:	0013      	movs	r3, r2
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	189b      	adds	r3, r3, r2
 80003c2:	18cb      	adds	r3, r1, r3
 80003c4:	3301      	adds	r3, #1
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	0019      	movs	r1, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2207      	movs	r2, #7
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	4119      	asrs	r1, r3
 80003d2:	000b      	movs	r3, r1
 80003d4:	2201      	movs	r2, #1
 80003d6:	4013      	ands	r3, r2
 80003d8:	d001      	beq.n	80003de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3e>
 80003da:	210a      	movs	r1, #10
 80003dc:	e000      	b.n	80003e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x40>
 80003de:	2105      	movs	r1, #5
 80003e0:	4a34      	ldr	r2, [pc, #208]	; (80004b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	18d3      	adds	r3, r2, r3
 80003e6:	1c0a      	adds	r2, r1, #0
 80003e8:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 80003ea:	4b30      	ldr	r3, [pc, #192]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	4930      	ldr	r1, [pc, #192]	; (80004b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 80003f0:	0013      	movs	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	189b      	adds	r3, r3, r2
 80003f6:	5c5b      	ldrb	r3, [r3, r1]
 80003f8:	0019      	movs	r1, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2207      	movs	r2, #7
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	4119      	asrs	r1, r3
 8000402:	000b      	movs	r3, r1
 8000404:	2201      	movs	r2, #1
 8000406:	4013      	ands	r3, r2
 8000408:	d001      	beq.n	800040e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6e>
 800040a:	210a      	movs	r1, #10
 800040c:	e000      	b.n	8000410 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x70>
 800040e:	2105      	movs	r1, #5
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3308      	adds	r3, #8
 8000414:	4a27      	ldr	r2, [pc, #156]	; (80004b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 8000416:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8000418:	4b24      	ldr	r3, [pc, #144]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4924      	ldr	r1, [pc, #144]	; (80004b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x110>)
 800041e:	0013      	movs	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	189b      	adds	r3, r3, r2
 8000424:	18cb      	adds	r3, r1, r3
 8000426:	3302      	adds	r3, #2
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	0019      	movs	r1, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	2207      	movs	r2, #7
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	4119      	asrs	r1, r3
 8000434:	000b      	movs	r3, r1
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	d001      	beq.n	8000440 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa0>
 800043c:	210a      	movs	r1, #10
 800043e:	e000      	b.n	8000442 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa2>
 8000440:	2105      	movs	r1, #5
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3310      	adds	r3, #16
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 8000448:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; i++) {
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2b07      	cmp	r3, #7
 8000454:	d9af      	bls.n	80003b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
    wr_buf_p++;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 800045e:	601a      	str	r2, [r3, #0]
  } else if (wr_buf_p < NUM_PIXELS + 2) {
    for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;};
    wr_buf_p++;
  }
}
 8000460:	e01f      	b.n	80004a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x102>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	2381      	movs	r3, #129	; 0x81
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	429a      	cmp	r2, r3
 800046c:	d219      	bcs.n	80004a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x102>
    for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;};
 800046e:	230b      	movs	r3, #11
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e00a      	b.n	800048e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xee>
 8000478:	200b      	movs	r0, #11
 800047a:	183b      	adds	r3, r7, r0
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>)
 8000480:	2100      	movs	r1, #0
 8000482:	54d1      	strb	r1, [r2, r3]
 8000484:	183b      	adds	r3, r7, r0
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	183b      	adds	r3, r7, r0
 800048a:	3201      	adds	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	230b      	movs	r3, #11
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b17      	cmp	r3, #23
 8000496:	d9ef      	bls.n	8000478 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>
    wr_buf_p++;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	1c5a      	adds	r2, r3, #1
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x10c>)
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b004      	add	sp, #16
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000400 	.word	0x20000400
 80004b0:	200000d0 	.word	0x200000d0
 80004b4:	200003d0 	.word	0x200003d0

080004b8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if(wr_buf_p < NUM_PIXELS) {
 80004c0:	4b44      	ldr	r3, [pc, #272]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2bff      	cmp	r3, #255	; 0xff
 80004c6:	d857      	bhi.n	8000578 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	e04b      	b.n	8000566 <HAL_TIM_PWM_PulseFinishedCallback+0xae>
      wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80004ce:	4b41      	ldr	r3, [pc, #260]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4941      	ldr	r1, [pc, #260]	; (80005d8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 80004d4:	0013      	movs	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	18cb      	adds	r3, r1, r3
 80004dc:	3301      	adds	r3, #1
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	0019      	movs	r1, r3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2207      	movs	r2, #7
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	4119      	asrs	r1, r3
 80004ea:	000b      	movs	r3, r1
 80004ec:	2201      	movs	r2, #1
 80004ee:	4013      	ands	r3, r2
 80004f0:	d001      	beq.n	80004f6 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 80004f2:	210a      	movs	r1, #10
 80004f4:	e000      	b.n	80004f8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
 80004f6:	2105      	movs	r1, #5
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3318      	adds	r3, #24
 80004fc:	4a37      	ldr	r2, [pc, #220]	; (80005dc <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 80004fe:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4934      	ldr	r1, [pc, #208]	; (80005d8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000506:	0013      	movs	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	189b      	adds	r3, r3, r2
 800050c:	5c5b      	ldrb	r3, [r3, r1]
 800050e:	0019      	movs	r1, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2207      	movs	r2, #7
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	4119      	asrs	r1, r3
 8000518:	000b      	movs	r3, r1
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	d001      	beq.n	8000524 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>
 8000520:	210a      	movs	r1, #10
 8000522:	e000      	b.n	8000526 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
 8000524:	2105      	movs	r1, #5
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	3320      	adds	r3, #32
 800052a:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 800052c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 800052e:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4929      	ldr	r1, [pc, #164]	; (80005d8 <HAL_TIM_PWM_PulseFinishedCallback+0x120>)
 8000534:	0013      	movs	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	189b      	adds	r3, r3, r2
 800053a:	18cb      	adds	r3, r1, r3
 800053c:	3302      	adds	r3, #2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	0019      	movs	r1, r3
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2207      	movs	r2, #7
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	4119      	asrs	r1, r3
 800054a:	000b      	movs	r3, r1
 800054c:	2201      	movs	r2, #1
 800054e:	4013      	ands	r3, r2
 8000550:	d001      	beq.n	8000556 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
 8000552:	210a      	movs	r1, #10
 8000554:	e000      	b.n	8000558 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>
 8000556:	2105      	movs	r1, #5
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3328      	adds	r3, #40	; 0x28
 800055c:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 800055e:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2b07      	cmp	r3, #7
 800056a:	d9b0      	bls.n	80004ce <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
    wr_buf_p++;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 8000574:	601a      	str	r2, [r3, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
  }
}
 8000576:	e028      	b.n	80005ca <HAL_TIM_PWM_PulseFinishedCallback+0x112>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	2381      	movs	r3, #129	; 0x81
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	429a      	cmp	r2, r3
 8000582:	d21a      	bcs.n	80005ba <HAL_TIM_PWM_PulseFinishedCallback+0x102>
    for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 8000584:	230b      	movs	r3, #11
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2218      	movs	r2, #24
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	e00a      	b.n	80005a4 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
 800058e:	200b      	movs	r0, #11
 8000590:	183b      	adds	r3, r7, r0
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4a11      	ldr	r2, [pc, #68]	; (80005dc <HAL_TIM_PWM_PulseFinishedCallback+0x124>)
 8000596:	2100      	movs	r1, #0
 8000598:	54d1      	strb	r1, [r2, r3]
 800059a:	183b      	adds	r3, r7, r0
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	183b      	adds	r3, r7, r0
 80005a0:	3201      	adds	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	230b      	movs	r3, #11
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b2f      	cmp	r3, #47	; 0x2f
 80005ac:	d9ef      	bls.n	800058e <HAL_TIM_PWM_PulseFinishedCallback+0xd6>
    wr_buf_p++;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	e007      	b.n	80005ca <HAL_TIM_PWM_PulseFinishedCallback+0x112>
    wr_buf_p = 0;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_TIM_PWM_PulseFinishedCallback+0x128>)
 80005c2:	2104      	movs	r1, #4
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 ff77 	bl	80024b8 <HAL_TIM_PWM_Stop_DMA>
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b004      	add	sp, #16
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000400 	.word	0x20000400
 80005d8:	200000d0 	.word	0x200000d0
 80005dc:	200003d0 	.word	0x200003d0
 80005e0:	20000028 	.word	0x20000028

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fa40 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f826 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f914 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f4:	f000 f8f4 	bl	80007e0 <MX_DMA_Init>
  MX_TIM3_Init();
 80005f8:	f000 f874 	bl	80006e4 <MX_TIM3_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	   Neopixel.set_color(8, 3, 0, 0);
//	       Neopixel.show();
  set_color(k,3,0,0);
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <main+0x54>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	b2d8      	uxtb	r0, r3
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	2103      	movs	r1, #3
 8000608:	f7ff fe06 	bl	8000218 <set_color>
  show();
 800060c:	f7ff fe68 	bl	80002e0 <show>
  HAL_Delay(20);
 8000610:	2014      	movs	r0, #20
 8000612:	f000 fab1 	bl	8000b78 <HAL_Delay>
  k++;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x54>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <main+0x54>)
 800061e:	601a      	str	r2, [r3, #0]
  if(k>NUM_PIXELS){
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <main+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	429a      	cmp	r2, r3
 800062a:	dde7      	ble.n	80005fc <main+0x18>
      k=0;
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <main+0x54>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
      clear();
 8000632:	f7ff fe29 	bl	8000288 <clear>
  set_color(k,3,0,0);
 8000636:	e7e1      	b.n	80005fc <main+0x18>
 8000638:	20000404 	.word	0x20000404

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b093      	sub	sp, #76	; 0x4c
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2414      	movs	r4, #20
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2334      	movs	r3, #52	; 0x34
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 ff2b 	bl	80034a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	0018      	movs	r0, r3
 8000656:	2310      	movs	r3, #16
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 ff24 	bl	80034a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 ffa9 	bl	80015bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	22a0      	movs	r2, #160	; 0xa0
 8000674:	02d2      	lsls	r2, r2, #11
 8000676:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	0021      	movs	r1, r4
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2203      	movs	r2, #3
 8000684:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2209      	movs	r2, #9
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	0292      	lsls	r2, r2, #10
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	05d2      	lsls	r2, r2, #23
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 ffc9 	bl	800163c <HAL_RCC_OscConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006ae:	f000 f8d7 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2202      	movs	r2, #2
 80006bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2101      	movs	r1, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fac4 	bl	8001c5c <HAL_RCC_ClockConfig>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006d8:	f000 f8c2 	bl	8000860 <Error_Handler>
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b013      	add	sp, #76	; 0x4c
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	2328      	movs	r3, #40	; 0x28
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	2310      	movs	r3, #16
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f002 fed7 	bl	80034a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	231c      	movs	r3, #28
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	0018      	movs	r0, r3
 8000700:	230c      	movs	r3, #12
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f002 fecf 	bl	80034a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	003b      	movs	r3, r7
 800070c:	0018      	movs	r0, r3
 800070e:	231c      	movs	r3, #28
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f002 fec8 	bl	80034a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_TIM3_Init+0xf4>)
 800071a:	4a30      	ldr	r2, [pc, #192]	; (80007dc <MX_TIM3_Init+0xf8>)
 800071c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_TIM3_Init+0xf4>)
 8000720:	2203      	movs	r2, #3
 8000722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_TIM3_Init+0xf4>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_TIM3_Init+0xf4>)
 800072c:	220e      	movs	r2, #14
 800072e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_TIM3_Init+0xf4>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_TIM3_Init+0xf4>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_TIM3_Init+0xf4>)
 800073e:	0018      	movs	r0, r3
 8000740:	f001 fc14 	bl	8001f6c <HAL_TIM_Base_Init>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000748:	f000 f88a 	bl	8000860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	2128      	movs	r1, #40	; 0x28
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0152      	lsls	r2, r2, #5
 8000754:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000756:	187a      	adds	r2, r7, r1
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_TIM3_Init+0xf4>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f002 f895 	bl	800288c <HAL_TIM_ConfigClockSource>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f87b 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM3_Init+0xf4>)
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fc55 	bl	800201c <HAL_TIM_PWM_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000776:	f000 f873 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	211c      	movs	r1, #28
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000788:	187a      	adds	r2, r7, r1
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_TIM3_Init+0xf4>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f002 fe04 	bl	800339c <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000798:	f000 f862 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079c:	003b      	movs	r3, r7
 800079e:	2260      	movs	r2, #96	; 0x60
 80007a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2204      	movs	r2, #4
 80007b2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b4:	0039      	movs	r1, r7
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_TIM3_Init+0xf4>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 ff66 	bl	800268c <HAL_TIM_PWM_ConfigChannel>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007c4:	f000 f84c 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <MX_TIM3_Init+0xf4>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 f8be 	bl	800094c <HAL_TIM_MspPostInit>

}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b00e      	add	sp, #56	; 0x38
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000028 	.word	0x20000028
 80007dc:	40000400 	.word	0x40000400

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DMA_Init+0x38>)
 80007e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_DMA_Init+0x38>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x38>)
 80007f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2009      	movs	r0, #9
 8000804:	f000 fa88 	bl	8000d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000808:	2009      	movs	r0, #9
 800080a:	f000 fa9a 	bl	8000d42 <HAL_NVIC_EnableIRQ>

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0x40>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_GPIO_Init+0x40>)
 8000828:	2104      	movs	r1, #4
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_GPIO_Init+0x40>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2204      	movs	r2, #4
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_GPIO_Init+0x40>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_GPIO_Init+0x40>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_GPIO_Init+0x40>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40021000 	.word	0x40021000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x44>)
 8000874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_MspInit+0x44>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	641a      	str	r2, [r3, #64]	; 0x40
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x44>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x44>)
 800088c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_MspInit+0x44>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0549      	lsls	r1, r1, #21
 8000894:	430a      	orrs	r2, r1
 8000896:	63da      	str	r2, [r3, #60]	; 0x3c
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_MspInit+0x44>)
 800089a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	055b      	lsls	r3, r3, #21
 80008a0:	4013      	ands	r3, r2
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1e      	ldr	r2, [pc, #120]	; (800093c <HAL_TIM_Base_MspInit+0x88>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d136      	bne.n	8000934 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_TIM_Base_MspInit+0x8c>)
 80008d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_TIM_Base_MspInit+0x94>)
 80008e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008e6:	2221      	movs	r2, #33	; 0x21
 80008e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008ec:	2210      	movs	r2, #16
 80008ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 800090c:	2220      	movs	r2, #32
 800090e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 8000912:	22c0      	movs	r2, #192	; 0xc0
 8000914:	0192      	lsls	r2, r2, #6
 8000916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fa2e 	bl	8000d7c <HAL_DMA_Init>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000924:	f7ff ff9c 	bl	8000860 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_TIM_Base_MspInit+0x90>)
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40000400 	.word	0x40000400
 8000940:	40021000 	.word	0x40021000
 8000944:	20000074 	.word	0x20000074
 8000948:	40020008 	.word	0x40020008

0800094c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	240c      	movs	r4, #12
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 fda2 	bl	80034a8 <memset>
  if(htim->Instance==TIM3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_TIM_MspPostInit+0x70>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d122      	bne.n	80009b4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_TIM_MspPostInit+0x74>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_TIM_MspPostInit+0x74>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_TIM_MspPostInit+0x74>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000986:	0021      	movs	r1, r4
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2202      	movs	r2, #2
 8000992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2203      	movs	r2, #3
 800099e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2201      	movs	r2, #1
 80009a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	187a      	adds	r2, r7, r1
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fca0 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b009      	add	sp, #36	; 0x24
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	40000400 	.word	0x40000400
 80009c0:	40021000 	.word	0x40021000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f8aa 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <DMA1_Channel1_IRQHandler+0x14>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fb38 	bl	8001070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000074 	.word	0x20000074

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a1c:	f7ff fff6 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a46:	f002 fd0b 	bl	8003460 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a4a:	f7ff fdcb 	bl	80005e4 <main>

08000a4e <LoopForever>:

LoopForever:
  b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   r0, =_estack
 8000a50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a5c:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a64:	2000040c 	.word	0x2000040c

08000a68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x3c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Init+0x3c>)
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	0049      	lsls	r1, r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 f810 	bl	8000aac <HAL_InitTick>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e001      	b.n	8000a9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fee8 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	781b      	ldrb	r3, [r3, #0]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_InitTick+0x88>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d02b      	beq.n	8000b1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_InitTick+0x8c>)
 8000ac6:	681c      	ldr	r4, [r3, #0]
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_InitTick+0x88>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	0019      	movs	r1, r3
 8000ace:	23fa      	movs	r3, #250	; 0xfa
 8000ad0:	0098      	lsls	r0, r3, #2
 8000ad2:	f7ff fb15 	bl	8000100 <__udivsi3>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0020      	movs	r0, r4
 8000adc:	f7ff fb10 	bl	8000100 <__udivsi3>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f93d 	bl	8000d62 <HAL_SYSTICK_Config>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d112      	bne.n	8000b12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d80a      	bhi.n	8000b08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2301      	movs	r3, #1
 8000af6:	425b      	negs	r3, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f90c 	bl	8000d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_InitTick+0x90>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e00d      	b.n	8000b24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e008      	b.n	8000b24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b12:	230f      	movs	r3, #15
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e003      	b.n	8000b24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	781b      	ldrb	r3, [r3, #0]
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b005      	add	sp, #20
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	001a      	movs	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	18d2      	adds	r2, r2, r3
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000408 	.word	0x20000408

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000408 	.word	0x20000408

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	0003      	movs	r3, r0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001a      	movs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd2:	d809      	bhi.n	8000be8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	231f      	movs	r3, #31
 8000bdc:	401a      	ands	r2, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_EnableIRQ+0x30>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	4091      	lsls	r1, r2
 8000be4:	000a      	movs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b7f      	cmp	r3, #127	; 0x7f
 8000c08:	d828      	bhi.n	8000c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	589b      	ldr	r3, [r3, r2]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	430a      	orrs	r2, r1
 8000c54:	33c0      	adds	r3, #192	; 0xc0
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c5a:	e031      	b.n	8000cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0019      	movs	r1, r3
 8000c64:	230f      	movs	r3, #15
 8000c66:	400b      	ands	r3, r1
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	3304      	adds	r3, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	400a      	ands	r2, r1
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	21ff      	movs	r1, #255	; 0xff
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	401a      	ands	r2, r3
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	4003      	ands	r3, r0
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	001c      	movs	r4, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	4023      	ands	r3, r4
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	3306      	adds	r3, #6
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	18c3      	adds	r3, r0, r3
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	045b      	lsls	r3, r3, #17
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d301      	bcc.n	8000ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e010      	b.n	8000d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <SysTick_Config+0x44>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	3a01      	subs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff7c 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x44>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x44>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	210f      	movs	r1, #15
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	1c02      	adds	r2, r0, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	0002      	movs	r2, r0
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffaf 	bl	8000cd0 <SysTick_Config>
 8000d72:	0003      	movs	r3, r0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e077      	b.n	8000e7e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <HAL_DMA_Init+0x10c>)
 8000d94:	4694      	mov	ip, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	2114      	movs	r1, #20
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff f9b0 	bl	8000100 <__udivsi3>
 8000da0:	0003      	movs	r3, r0
 8000da2:	009a      	lsls	r2, r3, #2
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2225      	movs	r2, #37	; 0x25
 8000dac:	2102      	movs	r1, #2
 8000dae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4934      	ldr	r1, [pc, #208]	; (8000e8c <HAL_DMA_Init+0x110>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6819      	ldr	r1, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 fa2b 	bl	8001254 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	01db      	lsls	r3, r3, #7
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d102      	bne.n	8000e10 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	213f      	movs	r1, #63	; 0x3f
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d011      	beq.n	8000e54 <HAL_DMA_Init+0xd8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d80d      	bhi.n	8000e54 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fa36 	bl	80012ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	e008      	b.n	8000e66 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2225      	movs	r2, #37	; 0x25
 8000e70:	2101      	movs	r1, #1
 8000e72:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	2100      	movs	r1, #0
 8000e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	bffdfff8 	.word	0xbffdfff8
 8000e8c:	ffff800f 	.word	0xffff800f

08000e90 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2317      	movs	r3, #23
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2224      	movs	r2, #36	; 0x24
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_DMA_Start_IT+0x24>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e06f      	b.n	8000f94 <HAL_DMA_Start_IT+0x104>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2224      	movs	r2, #36	; 0x24
 8000eb8:	2101      	movs	r1, #1
 8000eba:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2225      	movs	r2, #37	; 0x25
 8000ec0:	5c9b      	ldrb	r3, [r3, r2]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d157      	bne.n	8000f78 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2225      	movs	r2, #37	; 0x25
 8000ecc:	2102      	movs	r1, #2
 8000ece:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f971 	bl	80011d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d008      	beq.n	8000f0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	210e      	movs	r1, #14
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e00f      	b.n	8000f2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2104      	movs	r1, #4
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	210a      	movs	r1, #10
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	4013      	ands	r3, r2
 8000f38:	d008      	beq.n	8000f4c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	0049      	lsls	r1, r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0049      	lsls	r1, r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e00a      	b.n	8000f8e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2224      	movs	r2, #36	; 0x24
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000f86:	2317      	movs	r3, #23
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f8e:	2317      	movs	r3, #23
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	781b      	ldrb	r3, [r3, #0]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2225      	movs	r2, #37	; 0x25
 8000fb0:	5c9b      	ldrb	r3, [r3, r2]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d006      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2204      	movs	r2, #4
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e049      	b.n	800105a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	210e      	movs	r1, #14
 8000fd2:	438a      	bics	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	438a      	bics	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	491d      	ldr	r1, [pc, #116]	; (8001068 <HAL_DMA_Abort_IT+0xcc>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_DMA_Abort_IT+0xd0>)
 8000ff8:	6859      	ldr	r1, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	221c      	movs	r2, #28
 8001000:	4013      	ands	r3, r2
 8001002:	2201      	movs	r2, #1
 8001004:	409a      	lsls	r2, r3
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_DMA_Abort_IT+0xd0>)
 8001008:	430a      	orrs	r2, r1
 800100a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001014:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00c      	beq.n	8001038 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001028:	490f      	ldr	r1, [pc, #60]	; (8001068 <HAL_DMA_Abort_IT+0xcc>)
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001036:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2225      	movs	r2, #37	; 0x25
 800103c:	2101      	movs	r1, #1
 800103e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2224      	movs	r2, #36	; 0x24
 8001044:	2100      	movs	r1, #0
 8001046:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	0010      	movs	r0, r2
 8001058:	4798      	blx	r3
    }
  }
  return status;
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	781b      	ldrb	r3, [r3, #0]
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b004      	add	sp, #16
 8001066:	bd80      	pop	{r7, pc}
 8001068:	fffffeff 	.word	0xfffffeff
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	221c      	movs	r2, #28
 800108c:	4013      	ands	r3, r2
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	d027      	beq.n	80010ea <HAL_DMA_IRQHandler+0x7a>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2204      	movs	r2, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	d023      	beq.n	80010ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2220      	movs	r2, #32
 80010aa:	4013      	ands	r3, r2
 80010ac:	d107      	bne.n	80010be <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2104      	movs	r1, #4
 80010ba:	438a      	bics	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80010be:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 80010c0:	6859      	ldr	r1, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	221c      	movs	r2, #28
 80010c8:	4013      	ands	r3, r2
 80010ca:	2204      	movs	r2, #4
 80010cc:	409a      	lsls	r2, r3
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 80010d0:	430a      	orrs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d100      	bne.n	80010de <HAL_DMA_IRQHandler+0x6e>
 80010dc:	e073      	b.n	80011c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	0010      	movs	r0, r2
 80010e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80010e8:	e06d      	b.n	80011c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	221c      	movs	r2, #28
 80010f0:	4013      	ands	r3, r2
 80010f2:	2202      	movs	r2, #2
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	d02e      	beq.n	800115c <HAL_DMA_IRQHandler+0xec>
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d02a      	beq.n	800115c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2220      	movs	r2, #32
 800110e:	4013      	ands	r3, r2
 8001110:	d10b      	bne.n	800112a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	210a      	movs	r1, #10
 800111e:	438a      	bics	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2225      	movs	r2, #37	; 0x25
 8001126:	2101      	movs	r1, #1
 8001128:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 800112c:	6859      	ldr	r1, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	221c      	movs	r2, #28
 8001134:	4013      	ands	r3, r2
 8001136:	2202      	movs	r2, #2
 8001138:	409a      	lsls	r2, r3
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2224      	movs	r2, #36	; 0x24
 8001144:	2100      	movs	r1, #0
 8001146:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d03a      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	0010      	movs	r0, r2
 8001158:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800115a:	e034      	b.n	80011c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	221c      	movs	r2, #28
 8001162:	4013      	ands	r3, r2
 8001164:	2208      	movs	r2, #8
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	d02b      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x158>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2208      	movs	r2, #8
 8001174:	4013      	ands	r3, r2
 8001176:	d027      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	210e      	movs	r1, #14
 8001184:	438a      	bics	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 800118a:	6859      	ldr	r1, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	221c      	movs	r2, #28
 8001192:	4013      	ands	r3, r2
 8001194:	2201      	movs	r2, #1
 8001196:	409a      	lsls	r2, r3
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_DMA_IRQHandler+0x160>)
 800119a:	430a      	orrs	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2225      	movs	r2, #37	; 0x25
 80011a8:	2101      	movs	r1, #1
 80011aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	0010      	movs	r0, r2
 80011c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46c0      	nop			; (mov r8, r8)
}
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020000 	.word	0x40020000

080011d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011fc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <DMA_SetConfig+0x7c>)
 8001200:	6859      	ldr	r1, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	221c      	movs	r2, #28
 8001208:	4013      	ands	r3, r2
 800120a:	2201      	movs	r2, #1
 800120c:	409a      	lsls	r2, r3
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <DMA_SetConfig+0x7c>)
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b10      	cmp	r3, #16
 8001222:	d108      	bne.n	8001236 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001234:	e007      	b.n	8001246 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	60da      	str	r2, [r3, #12]
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	40020000 	.word	0x40020000

08001254 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001264:	4694      	mov	ip, r2
 8001266:	4463      	add	r3, ip
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	001a      	movs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	001a      	movs	r2, r3
 8001276:	23ff      	movs	r3, #255	; 0xff
 8001278:	4013      	ands	r3, r2
 800127a:	3b08      	subs	r3, #8
 800127c:	2114      	movs	r1, #20
 800127e:	0018      	movs	r0, r3
 8001280:	f7fe ff3e 	bl	8000100 <__udivsi3>
 8001284:	0003      	movs	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800128c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	221f      	movs	r2, #31
 8001292:	4013      	ands	r3, r2
 8001294:	2201      	movs	r2, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	10008200 	.word	0x10008200
 80012a8:	40020880 	.word	0x40020880

080012ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	223f      	movs	r2, #63	; 0x3f
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80012c2:	4694      	mov	ip, r2
 80012c4:	4463      	add	r3, ip
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	001a      	movs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	4013      	ands	r3, r2
 80012dc:	2201      	movs	r2, #1
 80012de:	409a      	lsls	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	1000823f 	.word	0x1000823f
 80012f0:	40020940 	.word	0x40020940

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e147      	b.n	8001594 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <HAL_GPIO_Init+0x28>
 800131a:	e138      	b.n	800158e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4013      	ands	r3, r2
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x40>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	4013      	ands	r3, r2
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	2201      	movs	r2, #1
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	4013      	ands	r3, r2
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d017      	beq.n	80013d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	58d3      	ldr	r3, [r2, r3]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2207      	movs	r2, #7
 80013f0:	4013      	ands	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2107      	movs	r1, #7
 800140a:	400b      	ands	r3, r1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d100      	bne.n	8001468 <HAL_GPIO_Init+0x174>
 8001466:	e092      	b.n	800158e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3318      	adds	r3, #24
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	589b      	ldr	r3, [r3, r2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2203      	movs	r2, #3
 800147a:	4013      	ands	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	220f      	movs	r2, #15
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	429a      	cmp	r2, r3
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1ca>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a45      	ldr	r2, [pc, #276]	; (80015b0 <HAL_GPIO_Init+0x2bc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1c6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a44      	ldr	r2, [pc, #272]	; (80015b4 <HAL_GPIO_Init+0x2c0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1c2>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <HAL_GPIO_Init+0x2c4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1be>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x1cc>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e004      	b.n	80014c0 <HAL_GPIO_Init+0x1cc>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x1cc>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_GPIO_Init+0x1cc>
 80014be:	2300      	movs	r3, #0
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	2103      	movs	r1, #3
 80014c4:	400a      	ands	r2, r1
 80014c6:	00d2      	lsls	r2, r2, #3
 80014c8:	4093      	lsls	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014d0:	4936      	ldr	r1, [pc, #216]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3318      	adds	r3, #24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	035b      	lsls	r3, r3, #13
 80014f6:	4013      	ands	r3, r2
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	039b      	lsls	r3, r3, #14
 8001520:	4013      	ands	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 8001534:	2384      	movs	r3, #132	; 0x84
 8001536:	58d3      	ldr	r3, [r2, r3]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	4013      	ands	r3, r2
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001558:	4914      	ldr	r1, [pc, #80]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 800155a:	2284      	movs	r2, #132	; 0x84
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	58d3      	ldr	r3, [r2, r3]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	025b      	lsls	r3, r3, #9
 800157a:	4013      	ands	r3, r2
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001586:	4909      	ldr	r1, [pc, #36]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	40da      	lsrs	r2, r3
 800159c:	1e13      	subs	r3, r2, #0
 800159e:	d000      	beq.n	80015a2 <HAL_GPIO_Init+0x2ae>
 80015a0:	e6b0      	b.n	8001304 <HAL_GPIO_Init+0x10>
  }
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b006      	add	sp, #24
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021800 	.word	0x40021800
 80015b0:	50000400 	.word	0x50000400
 80015b4:	50000800 	.word	0x50000800
 80015b8:	50000c00 	.word	0x50000c00

080015bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	429a      	cmp	r2, r3
 80015de:	d11f      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	0013      	movs	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	189b      	adds	r3, r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4912      	ldr	r1, [pc, #72]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7fe fd86 	bl	8000100 <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	3301      	adds	r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015fa:	e008      	b.n	800160e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b01      	subs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e001      	b.n	800160e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e009      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	401a      	ands	r2, r3
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	429a      	cmp	r2, r3
 800161e:	d0ed      	beq.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b004      	add	sp, #16
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40007000 	.word	0x40007000
 8001630:	fffff9ff 	.word	0xfffff9ff
 8001634:	20000000 	.word	0x20000000
 8001638:	000f4240 	.word	0x000f4240

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e2f3      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x1e>
 8001658:	e07c      	b.n	8001754 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165a:	4bc3      	ldr	r3, [pc, #780]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2238      	movs	r2, #56	; 0x38
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001664:	4bc0      	ldr	r3, [pc, #768]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b10      	cmp	r3, #16
 8001672:	d102      	bne.n	800167a <HAL_RCC_OscConfig+0x3e>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d002      	beq.n	8001680 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d10b      	bne.n	8001698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	4bb9      	ldr	r3, [pc, #740]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d062      	beq.n	8001752 <HAL_RCC_OscConfig+0x116>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d15e      	bne.n	8001752 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2ce      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x78>
 80016a4:	4bb0      	ldr	r3, [pc, #704]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4baf      	ldr	r3, [pc, #700]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0249      	lsls	r1, r1, #9
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e020      	b.n	80016f6 <HAL_RCC_OscConfig+0xba>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	23a0      	movs	r3, #160	; 0xa0
 80016ba:	02db      	lsls	r3, r3, #11
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10e      	bne.n	80016de <HAL_RCC_OscConfig+0xa2>
 80016c0:	4ba9      	ldr	r3, [pc, #676]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	02c9      	lsls	r1, r1, #11
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4ba6      	ldr	r3, [pc, #664]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4ba5      	ldr	r3, [pc, #660]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0249      	lsls	r1, r1, #9
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0xba>
 80016de:	4ba2      	ldr	r3, [pc, #648]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4ba1      	ldr	r3, [pc, #644]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	49a1      	ldr	r1, [pc, #644]	; (800196c <HAL_RCC_OscConfig+0x330>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b9f      	ldr	r3, [pc, #636]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b9e      	ldr	r3, [pc, #632]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	499f      	ldr	r1, [pc, #636]	; (8001970 <HAL_RCC_OscConfig+0x334>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d014      	beq.n	8001728 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa31 	bl	8000b64 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fa2c 	bl	8000b64 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e28d      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	4b93      	ldr	r3, [pc, #588]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	029b      	lsls	r3, r3, #10
 8001722:	4013      	ands	r3, r2
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xcc>
 8001726:	e015      	b.n	8001754 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fa1c 	bl	8000b64 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001732:	f7ff fa17 	bl	8000b64 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e278      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001744:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0xf6>
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001752:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d100      	bne.n	8001760 <HAL_RCC_OscConfig+0x124>
 800175e:	e099      	b.n	8001894 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2238      	movs	r2, #56	; 0x38
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b10      	cmp	r3, #16
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x144>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d002      	beq.n	8001786 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d135      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4013      	ands	r3, r2
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x162>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e24b      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a74      	ldr	r2, [pc, #464]	; (8001974 <HAL_RCC_OscConfig+0x338>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	021a      	lsls	r2, r3, #8
 80017ae:	4b6e      	ldr	r3, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d112      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ba:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6e      	ldr	r2, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x33c>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0adb      	lsrs	r3, r3, #11
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a68      	ldr	r2, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x340>)
 80017da:	40da      	lsrs	r2, r3
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x344>)
 80017de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e0:	4b68      	ldr	r3, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x348>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff f961 	bl	8000aac <HAL_InitTick>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d051      	beq.n	8001892 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e221      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d030      	beq.n	800185c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_RCC_OscConfig+0x33c>)
 8001800:	4013      	ands	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b55      	ldr	r3, [pc, #340]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0049      	lsls	r1, r1, #1
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f9a2 	bl	8000b64 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff f99d 	bl	8000b64 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1fe      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b48      	ldr	r3, [pc, #288]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <HAL_RCC_OscConfig+0x338>)
 800184a:	4013      	ands	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	021a      	lsls	r2, r3, #8
 8001854:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	e01b      	b.n	8001894 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001862:	4949      	ldr	r1, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x34c>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f97c 	bl	8000b64 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff f977 	bl	8000b64 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1d8      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x236>
 8001890:	e000      	b.n	8001894 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001892:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2208      	movs	r2, #8
 800189a:	4013      	ands	r3, r2
 800189c:	d047      	beq.n	800192e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2238      	movs	r2, #56	; 0x38
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b18      	cmp	r3, #24
 80018a8:	d10a      	bne.n	80018c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d03c      	beq.n	800192e <HAL_RCC_OscConfig+0x2f2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d138      	bne.n	800192e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e1ba      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d019      	beq.n	80018fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f946 	bl	8000b64 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff f941 	bl	8000b64 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1a2      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d0f1      	beq.n	80018de <HAL_RCC_OscConfig+0x2a2>
 80018fa:	e018      	b.n	800192e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f92c 	bl	8000b64 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff f927 	bl	8000b64 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e188      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2204      	movs	r2, #4
 8001934:	4013      	ands	r3, r2
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x2fe>
 8001938:	e0c6      	b.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	231f      	movs	r3, #31
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	4013      	ands	r3, r2
 800194a:	2b20      	cmp	r3, #32
 800194c:	d11e      	bne.n	800198c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d100      	bne.n	800195a <HAL_RCC_OscConfig+0x31e>
 8001958:	e0b6      	b.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d000      	beq.n	8001964 <HAL_RCC_OscConfig+0x328>
 8001962:	e0b1      	b.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e166      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
 8001968:	40021000 	.word	0x40021000
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	fffbffff 	.word	0xfffbffff
 8001974:	ffff80ff 	.word	0xffff80ff
 8001978:	ffffc7ff 	.word	0xffffc7ff
 800197c:	00f42400 	.word	0x00f42400
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004
 8001988:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800198c:	4bac      	ldr	r3, [pc, #688]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 800198e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x360>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x362>
 800199c:	2300      	movs	r3, #0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d011      	beq.n	80019c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4ba7      	ldr	r3, [pc, #668]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 80019a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a6:	4ba6      	ldr	r3, [pc, #664]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	0549      	lsls	r1, r1, #21
 80019ac:	430a      	orrs	r2, r1
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80019b0:	4ba3      	ldr	r3, [pc, #652]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 80019b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	055b      	lsls	r3, r3, #21
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019be:	231f      	movs	r3, #31
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	4b9f      	ldr	r3, [pc, #636]	; (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d2:	4b9c      	ldr	r3, [pc, #624]	; (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b9b      	ldr	r3, [pc, #620]	; (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0049      	lsls	r1, r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f8c0 	bl	8000b64 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff f8bb 	bl	8000b64 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e11c      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	4b91      	ldr	r3, [pc, #580]	; (8001c44 <HAL_RCC_OscConfig+0x608>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3e2>
 8001a10:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a14:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x41c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x404>
 8001a26:	4b86      	ldr	r3, [pc, #536]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a32:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0x41c>
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a44:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a50:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a52:	2104      	movs	r1, #4
 8001a54:	438a      	bics	r2, r1
 8001a56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d014      	beq.n	8001a8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f880 	bl	8000b64 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a68:	e009      	b.n	8001a7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f87b 	bl	8000b64 <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4a74      	ldr	r2, [pc, #464]	; (8001c48 <HAL_RCC_OscConfig+0x60c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0db      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x42e>
 8001a88:	e013      	b.n	8001ab2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f86b 	bl	8000b64 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a92:	e009      	b.n	8001aa8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff f866 	bl	8000b64 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4a6a      	ldr	r2, [pc, #424]	; (8001c48 <HAL_RCC_OscConfig+0x60c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0c6      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ab2:	231f      	movs	r3, #31
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac0:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001ac2:	4962      	ldr	r1, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x610>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x496>
 8001ad0:	e0b0      	b.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4a4>
 8001ade:	e078      	b.n	8001bd2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d153      	bne.n	8001b90 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001aee:	4958      	ldr	r1, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x614>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f836 	bl	8000b64 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f831 	bl	8000b64 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e092      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	049b      	lsls	r3, r3, #18
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x618>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	431a      	orrs	r2, r3
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0449      	lsls	r1, r1, #17
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	0549      	lsls	r1, r1, #21
 8001b62:	430a      	orrs	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7fe fffd 	bl	8000b64 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe fff8 	bl	8000b64 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e059      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	049b      	lsls	r3, r3, #18
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x534>
 8001b8e:	e051      	b.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001b96:	492e      	ldr	r1, [pc, #184]	; (8001c50 <HAL_RCC_OscConfig+0x614>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ffe2 	bl	8000b64 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7fe ffdd 	bl	8000b64 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e03e      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	049b      	lsls	r3, r3, #18
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001bca:	4923      	ldr	r1, [pc, #140]	; (8001c58 <HAL_RCC_OscConfig+0x61c>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	e030      	b.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e02b      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_RCC_OscConfig+0x604>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2203      	movs	r2, #3
 8001be8:	401a      	ands	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2270      	movs	r2, #112	; 0x70
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d117      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	23fe      	movs	r3, #254	; 0xfe
 8001c04:	01db      	lsls	r3, r3, #7
 8001c06:	401a      	ands	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	23f8      	movs	r3, #248	; 0xf8
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	0f5b      	lsrs	r3, r3, #29
 8001c26:	075a      	lsls	r2, r3, #29
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b008      	add	sp, #32
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	00001388 	.word	0x00001388
 8001c4c:	efffffff 	.word	0xefffffff
 8001c50:	feffffff 	.word	0xfeffffff
 8001c54:	1fc1808c 	.word	0x1fc1808c
 8001c58:	effefffc 	.word	0xeffefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e9      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d91e      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2207      	movs	r2, #7
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c90:	f7fe ff68 	bl	8000b64 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7fe ff63 	bl	8000b64 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0ca      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1ee      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d006      	beq.n	8001cde <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cd0:	4b60      	ldr	r3, [pc, #384]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	21e0      	movs	r1, #224	; 0xe0
 8001cd8:	01c9      	lsls	r1, r1, #7
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a5d      	ldr	r2, [pc, #372]	; (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d057      	beq.n	8001dac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d12b      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e097      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	049b      	lsls	r3, r3, #18
 8001d24:	4013      	ands	r3, r2
 8001d26:	d11f      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e08b      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07f      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e074      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e06d      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7c:	f7fe fef2 	bl	8000b64 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7fe feed 	bl	8000b64 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e054      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2238      	movs	r2, #56	; 0x38
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1ec      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d21e      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dcc:	f7fe feca 	bl	8000b64 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd6:	f7fe fec5 	bl	8000b64 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e02c      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_RCC_ClockConfig+0x200>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e16:	f000 f829 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e1a:	0001      	movs	r1, r0
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	220f      	movs	r2, #15
 8001e24:	401a      	ands	r2, r3
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x204>)
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	58d3      	ldr	r3, [r2, r3]
 8001e2c:	221f      	movs	r2, #31
 8001e2e:	4013      	ands	r3, r2
 8001e30:	000a      	movs	r2, r1
 8001e32:	40da      	lsrs	r2, r3
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x208>)
 8001e36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x20c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7fe fe35 	bl	8000aac <HAL_InitTick>
 8001e42:	0003      	movs	r3, r0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	00001388 	.word	0x00001388
 8001e54:	40021000 	.word	0x40021000
 8001e58:	fffff0ff 	.word	0xfffff0ff
 8001e5c:	ffff8fff 	.word	0xffff8fff
 8001e60:	080034d0 	.word	0x080034d0
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2238      	movs	r2, #56	; 0x38
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d10f      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0adb      	lsrs	r3, r3, #11
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	4835      	ldr	r0, [pc, #212]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e92:	f7fe f935 	bl	8000100 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e05d      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e054      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2238      	movs	r2, #56	; 0x38
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d138      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	2207      	movs	r2, #7
 8001ecc:	4013      	ands	r3, r2
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	4823      	ldr	r0, [pc, #140]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001edc:	f7fe f910 	bl	8000100 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	4013      	ands	r3, r2
 8001eee:	434b      	muls	r3, r1
 8001ef0:	617b      	str	r3, [r7, #20]
        break;
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	481c      	ldr	r0, [pc, #112]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ef8:	f7fe f902 	bl	8000100 <__udivsi3>
 8001efc:	0003      	movs	r3, r0
 8001efe:	0019      	movs	r1, r3
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	227f      	movs	r2, #127	; 0x7f
 8001f08:	4013      	ands	r3, r2
 8001f0a:	434b      	muls	r3, r1
 8001f0c:	617b      	str	r3, [r7, #20]
        break;
 8001f0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0f5b      	lsrs	r3, r3, #29
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	f7fe f8ed 	bl	8000100 <__udivsi3>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2238      	movs	r2, #56	; 0x38
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d103      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2238      	movs	r2, #56	; 0x38
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b18      	cmp	r3, #24
 8001f4a:	d103      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f4c:	23fa      	movs	r3, #250	; 0xfa
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e001      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f58:	693b      	ldr	r3, [r7, #16]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00f42400 	.word	0x00f42400

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e04a      	b.n	8002014 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223d      	movs	r2, #61	; 0x3d
 8001f82:	5c9b      	ldrb	r3, [r3, r2]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223c      	movs	r2, #60	; 0x3c
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7fe fc8d 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	223d      	movs	r2, #61	; 0x3d
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f000 fe1f 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2248      	movs	r2, #72	; 0x48
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223e      	movs	r2, #62	; 0x3e
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2241      	movs	r2, #65	; 0x41
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2242      	movs	r2, #66	; 0x42
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2243      	movs	r2, #67	; 0x43
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2244      	movs	r2, #68	; 0x44
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2245      	movs	r2, #69	; 0x45
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2246      	movs	r2, #70	; 0x46
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2247      	movs	r2, #71	; 0x47
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223d      	movs	r2, #61	; 0x3d
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e04a      	b.n	80020c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	223d      	movs	r2, #61	; 0x3d
 8002032:	5c9b      	ldrb	r3, [r3, r2]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d107      	bne.n	800204a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223c      	movs	r2, #60	; 0x3c
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f841 	bl	80020cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	223d      	movs	r2, #61	; 0x3d
 800204e:	2102      	movs	r1, #2
 8002050:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	0019      	movs	r1, r3
 800205c:	0010      	movs	r0, r2
 800205e:	f000 fdc7 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2248      	movs	r2, #72	; 0x48
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	223e      	movs	r2, #62	; 0x3e
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223f      	movs	r2, #63	; 0x3f
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2241      	movs	r2, #65	; 0x41
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2242      	movs	r2, #66	; 0x42
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2243      	movs	r2, #67	; 0x43
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2244      	movs	r2, #68	; 0x44
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2245      	movs	r2, #69	; 0x45
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2246      	movs	r2, #70	; 0x46
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2247      	movs	r2, #71	; 0x47
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223d      	movs	r2, #61	; 0x3d
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	001a      	movs	r2, r3
 80020ea:	1cbb      	adds	r3, r7, #2
 80020ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2317      	movs	r3, #23
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_TIM_PWM_Start_DMA+0x32>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	223e      	movs	r2, #62	; 0x3e
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3b02      	subs	r3, #2
 8002106:	425a      	negs	r2, r3
 8002108:	4153      	adcs	r3, r2
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e037      	b.n	800217e <HAL_TIM_PWM_Start_DMA+0xa2>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d108      	bne.n	8002126 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	223f      	movs	r2, #63	; 0x3f
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3b02      	subs	r3, #2
 800211e:	425a      	negs	r2, r3
 8002120:	4153      	adcs	r3, r2
 8002122:	b2db      	uxtb	r3, r3
 8002124:	e02b      	b.n	800217e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d108      	bne.n	800213e <HAL_TIM_PWM_Start_DMA+0x62>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3b02      	subs	r3, #2
 8002136:	425a      	negs	r2, r3
 8002138:	4153      	adcs	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	e01f      	b.n	800217e <HAL_TIM_PWM_Start_DMA+0xa2>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d108      	bne.n	8002156 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2241      	movs	r2, #65	; 0x41
 8002148:	5c9b      	ldrb	r3, [r3, r2]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3b02      	subs	r3, #2
 800214e:	425a      	negs	r2, r3
 8002150:	4153      	adcs	r3, r2
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e013      	b.n	800217e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d108      	bne.n	800216e <HAL_TIM_PWM_Start_DMA+0x92>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2242      	movs	r2, #66	; 0x42
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3b02      	subs	r3, #2
 8002166:	425a      	negs	r2, r3
 8002168:	4153      	adcs	r3, r2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e007      	b.n	800217e <HAL_TIM_PWM_Start_DMA+0xa2>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2243      	movs	r2, #67	; 0x43
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b02      	subs	r3, #2
 8002178:	425a      	negs	r2, r3
 800217a:	4153      	adcs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	e183      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <HAL_TIM_PWM_Start_DMA+0xc2>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	223e      	movs	r2, #62	; 0x3e
 8002190:	5c9b      	ldrb	r3, [r3, r2]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	425a      	negs	r2, r3
 8002198:	4153      	adcs	r3, r2
 800219a:	b2db      	uxtb	r3, r3
 800219c:	e037      	b.n	800220e <HAL_TIM_PWM_Start_DMA+0x132>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d108      	bne.n	80021b6 <HAL_TIM_PWM_Start_DMA+0xda>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	223f      	movs	r2, #63	; 0x3f
 80021a8:	5c9b      	ldrb	r3, [r3, r2]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	425a      	negs	r2, r3
 80021b0:	4153      	adcs	r3, r2
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e02b      	b.n	800220e <HAL_TIM_PWM_Start_DMA+0x132>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d108      	bne.n	80021ce <HAL_TIM_PWM_Start_DMA+0xf2>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	5c9b      	ldrb	r3, [r3, r2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	425a      	negs	r2, r3
 80021c8:	4153      	adcs	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e01f      	b.n	800220e <HAL_TIM_PWM_Start_DMA+0x132>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d108      	bne.n	80021e6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2241      	movs	r2, #65	; 0x41
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	425a      	negs	r2, r3
 80021e0:	4153      	adcs	r3, r2
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e013      	b.n	800220e <HAL_TIM_PWM_Start_DMA+0x132>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d108      	bne.n	80021fe <HAL_TIM_PWM_Start_DMA+0x122>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2242      	movs	r2, #66	; 0x42
 80021f0:	5c9b      	ldrb	r3, [r3, r2]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	425a      	negs	r2, r3
 80021f8:	4153      	adcs	r3, r2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	e007      	b.n	800220e <HAL_TIM_PWM_Start_DMA+0x132>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2243      	movs	r2, #67	; 0x43
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	425a      	negs	r2, r3
 800220a:	4153      	adcs	r3, r2
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d035      	beq.n	800227e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_TIM_PWM_Start_DMA+0x144>
 8002218:	1cbb      	adds	r3, r7, #2
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e134      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d104      	bne.n	8002234 <HAL_TIM_PWM_Start_DMA+0x158>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	223e      	movs	r2, #62	; 0x3e
 800222e:	2102      	movs	r1, #2
 8002230:	5499      	strb	r1, [r3, r2]
 8002232:	e026      	b.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d104      	bne.n	8002244 <HAL_TIM_PWM_Start_DMA+0x168>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	223f      	movs	r2, #63	; 0x3f
 800223e:	2102      	movs	r1, #2
 8002240:	5499      	strb	r1, [r3, r2]
 8002242:	e01e      	b.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b08      	cmp	r3, #8
 8002248:	d104      	bne.n	8002254 <HAL_TIM_PWM_Start_DMA+0x178>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2240      	movs	r2, #64	; 0x40
 800224e:	2102      	movs	r1, #2
 8002250:	5499      	strb	r1, [r3, r2]
 8002252:	e016      	b.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d104      	bne.n	8002264 <HAL_TIM_PWM_Start_DMA+0x188>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2241      	movs	r2, #65	; 0x41
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]
 8002262:	e00e      	b.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d104      	bne.n	8002274 <HAL_TIM_PWM_Start_DMA+0x198>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2242      	movs	r2, #66	; 0x42
 800226e:	2102      	movs	r1, #2
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	e006      	b.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2243      	movs	r2, #67	; 0x43
 8002278:	2102      	movs	r1, #2
 800227a:	5499      	strb	r1, [r3, r2]
 800227c:	e001      	b.n	8002282 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e105      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d100      	bne.n	800228a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002288:	e080      	b.n	800238c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d900      	bls.n	8002292 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002290:	e0a1      	b.n	80023d6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d054      	beq.n	8002342 <HAL_TIM_PWM_Start_DMA+0x266>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d900      	bls.n	80022a0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800229e:	e09a      	b.n	80023d6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_PWM_Start_DMA+0x1d2>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d025      	beq.n	80022f8 <HAL_TIM_PWM_Start_DMA+0x21c>
 80022ac:	e093      	b.n	80023d6 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	4a79      	ldr	r2, [pc, #484]	; (8002498 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	4a78      	ldr	r2, [pc, #480]	; (800249c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3334      	adds	r3, #52	; 0x34
 80022d2:	001a      	movs	r2, r3
 80022d4:	1cbb      	adds	r3, r7, #2
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f7fe fdda 	bl	8000e90 <HAL_DMA_Start_IT>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d4      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0089      	lsls	r1, r1, #2
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
      break;
 80022f6:	e073      	b.n	80023e0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3338      	adds	r3, #56	; 0x38
 800231c:	001a      	movs	r2, r3
 800231e:	1cbb      	adds	r3, r7, #2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f7fe fdb5 	bl	8000e90 <HAL_DMA_Start_IT>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0af      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	00c9      	lsls	r1, r1, #3
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
      break;
 8002340:	e04e      	b.n	80023e0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	4a53      	ldr	r2, [pc, #332]	; (800249c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002350:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	333c      	adds	r3, #60	; 0x3c
 8002366:	001a      	movs	r2, r3
 8002368:	1cbb      	adds	r3, r7, #2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	f7fe fd90 	bl	8000e90 <HAL_DMA_Start_IT>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e08a      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0109      	lsls	r1, r1, #4
 8002386:	430a      	orrs	r2, r1
 8002388:	60da      	str	r2, [r3, #12]
      break;
 800238a:	e029      	b.n	80023e0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a40      	ldr	r2, [pc, #256]	; (800249c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800239a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3340      	adds	r3, #64	; 0x40
 80023b0:	001a      	movs	r2, r3
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f7fe fd6b 	bl	8000e90 <HAL_DMA_Start_IT>
 80023ba:	1e03      	subs	r3, r0, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e065      	b.n	800248e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0149      	lsls	r1, r1, #5
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]
      break;
 80023d4:	e004      	b.n	80023e0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80023d6:	2317      	movs	r3, #23
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80023e0:	2317      	movs	r3, #23
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d14e      	bne.n	8002488 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	2201      	movs	r2, #1
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 ffae 	bl	8003354 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_TIM_PWM_Start_DMA+0x33a>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_TIM_PWM_Start_DMA+0x33e>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_TIM_PWM_Start_DMA+0x340>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	0209      	lsls	r1, r1, #8
 800242e:	430a      	orrs	r2, r1
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_TIM_PWM_Start_DMA+0x36a>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d116      	bne.n	8002474 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d016      	beq.n	8002486 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	025b      	lsls	r3, r3, #9
 800245e:	429a      	cmp	r2, r3
 8002460:	d011      	beq.n	8002486 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	e008      	b.n	8002486 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2101      	movs	r1, #1
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e000      	b.n	8002488 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002488:	2317      	movs	r3, #23
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b006      	add	sp, #24
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	08002add 	.word	0x08002add
 800249c:	08002b87 	.word	0x08002b87
 80024a0:	08002a49 	.word	0x08002a49
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	40000400 	.word	0x40000400
 80024b4:	00010007 	.word	0x00010007

080024b8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	230f      	movs	r3, #15
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d039      	beq.n	8002544 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d844      	bhi.n	8002560 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d025      	beq.n	8002528 <HAL_TIM_PWM_Stop_DMA+0x70>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d83e      	bhi.n	8002560 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_TIM_PWM_Stop_DMA+0x38>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d00e      	beq.n	800250c <HAL_TIM_PWM_Stop_DMA+0x54>
 80024ee:	e037      	b.n	8002560 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	495a      	ldr	r1, [pc, #360]	; (8002664 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe fd49 	bl	8000f9c <HAL_DMA_Abort_IT>
      break;
 800250a:	e02e      	b.n	800256a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4954      	ldr	r1, [pc, #336]	; (8002668 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8002518:	400a      	ands	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	0018      	movs	r0, r3
 8002522:	f7fe fd3b 	bl	8000f9c <HAL_DMA_Abort_IT>
      break;
 8002526:	e020      	b.n	800256a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	494e      	ldr	r1, [pc, #312]	; (800266c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002534:	400a      	ands	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	0018      	movs	r0, r3
 800253e:	f7fe fd2d 	bl	8000f9c <HAL_DMA_Abort_IT>
      break;
 8002542:	e012      	b.n	800256a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4948      	ldr	r1, [pc, #288]	; (8002670 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002550:	400a      	ands	r2, r1
 8002552:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	0018      	movs	r0, r3
 800255a:	f7fe fd1f 	bl	8000f9c <HAL_DMA_Abort_IT>
      break;
 800255e:	e004      	b.n	800256a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002560:	230f      	movs	r3, #15
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
      break;
 8002568:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800256a:	230f      	movs	r3, #15
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d000      	beq.n	8002576 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002574:	e06e      	b.n	8002654 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fee8 	bl	8003354 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_TIM_PWM_Stop_DMA+0xea>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a39      	ldr	r2, [pc, #228]	; (8002678 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a37      	ldr	r2, [pc, #220]	; (800267c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_PWM_Stop_DMA+0xee>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_TIM_PWM_Stop_DMA+0xf0>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a33      	ldr	r2, [pc, #204]	; (8002680 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	d10d      	bne.n	80025d4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a31      	ldr	r2, [pc, #196]	; (8002684 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	492e      	ldr	r1, [pc, #184]	; (8002688 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a29      	ldr	r2, [pc, #164]	; (8002680 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80025dc:	4013      	ands	r3, r2
 80025de:	d10d      	bne.n	80025fc <HAL_TIM_PWM_Stop_DMA+0x144>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a27      	ldr	r2, [pc, #156]	; (8002684 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	d107      	bne.n	80025fc <HAL_TIM_PWM_Stop_DMA+0x144>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <HAL_TIM_PWM_Stop_DMA+0x154>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223e      	movs	r2, #62	; 0x3e
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	e023      	b.n	8002654 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d104      	bne.n	800261c <HAL_TIM_PWM_Stop_DMA+0x164>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223f      	movs	r2, #63	; 0x3f
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	e01b      	b.n	8002654 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d104      	bne.n	800262c <HAL_TIM_PWM_Stop_DMA+0x174>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2240      	movs	r2, #64	; 0x40
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	e013      	b.n	8002654 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d104      	bne.n	800263c <HAL_TIM_PWM_Stop_DMA+0x184>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2241      	movs	r2, #65	; 0x41
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]
 800263a:	e00b      	b.n	8002654 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d104      	bne.n	800264c <HAL_TIM_PWM_Stop_DMA+0x194>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2242      	movs	r2, #66	; 0x42
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	e003      	b.n	8002654 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2243      	movs	r2, #67	; 0x43
 8002650:	2101      	movs	r1, #1
 8002652:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002654:	230f      	movs	r3, #15
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	fffffdff 	.word	0xfffffdff
 8002668:	fffffbff 	.word	0xfffffbff
 800266c:	fffff7ff 	.word	0xfffff7ff
 8002670:	ffffefff 	.word	0xffffefff
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800
 8002680:	00001111 	.word	0x00001111
 8002684:	00000444 	.word	0x00000444
 8002688:	ffff7fff 	.word	0xffff7fff

0800268c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2317      	movs	r3, #23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	223c      	movs	r2, #60	; 0x3c
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0e5      	b.n	800287a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	223c      	movs	r2, #60	; 0x3c
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b14      	cmp	r3, #20
 80026ba:	d900      	bls.n	80026be <HAL_TIM_PWM_ConfigChannel+0x32>
 80026bc:	e0d1      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fb06 	bl	8002ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2108      	movs	r1, #8
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2104      	movs	r1, #4
 80026f4:	438a      	bics	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
      break;
 800270a:	e0af      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fb65 	bl	8002de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0109      	lsls	r1, r1, #4
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4954      	ldr	r1, [pc, #336]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002738:	400a      	ands	r2, r1
 800273a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	021a      	lsls	r2, r3, #8
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	619a      	str	r2, [r3, #24]
      break;
 8002750:	e08c      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fbc0 	bl	8002ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2108      	movs	r1, #8
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2104      	movs	r1, #4
 800277c:	438a      	bics	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69d9      	ldr	r1, [r3, #28]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	61da      	str	r2, [r3, #28]
      break;
 8002792:	e06b      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fc21 	bl	8002fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0109      	lsls	r1, r1, #4
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4932      	ldr	r1, [pc, #200]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69d9      	ldr	r1, [r3, #28]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	021a      	lsls	r2, r3, #8
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
      break;
 80027d8:	e048      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	0011      	movs	r1, r2
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 fc62 	bl	80030ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2108      	movs	r1, #8
 80027f4:	430a      	orrs	r2, r1
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2104      	movs	r1, #4
 8002804:	438a      	bics	r2, r1
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800281a:	e027      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	0011      	movs	r1, r2
 8002824:	0018      	movs	r0, r3
 8002826:	f000 fc9b 	bl	8003160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	0109      	lsls	r1, r1, #4
 8002838:	430a      	orrs	r2, r1
 800283a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4910      	ldr	r1, [pc, #64]	; (8002888 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002848:	400a      	ands	r2, r1
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	021a      	lsls	r2, r3, #8
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002860:	e004      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002862:	2317      	movs	r3, #23
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
      break;
 800286a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	223c      	movs	r2, #60	; 0x3c
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]

  return status;
 8002874:	2317      	movs	r3, #23
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	781b      	ldrb	r3, [r3, #0]
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b006      	add	sp, #24
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	08003510 	.word	0x08003510
 8002888:	fffffbff 	.word	0xfffffbff

0800288c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	230f      	movs	r3, #15
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	223c      	movs	r2, #60	; 0x3c
 80028a2:	5c9b      	ldrb	r3, [r3, r2]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_ConfigClockSource+0x20>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0bc      	b.n	8002a26 <HAL_TIM_ConfigClockSource+0x19a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	223c      	movs	r2, #60	; 0x3c
 80028b0:	2101      	movs	r1, #1
 80028b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	223d      	movs	r2, #61	; 0x3d
 80028b8:	2102      	movs	r1, #2
 80028ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4a5a      	ldr	r2, [pc, #360]	; (8002a30 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4a59      	ldr	r2, [pc, #356]	; (8002a34 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	0192      	lsls	r2, r2, #6
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d040      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xde>
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0192      	lsls	r2, r2, #6
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d900      	bls.n	80028f2 <HAL_TIM_ConfigClockSource+0x66>
 80028f0:	e088      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0152      	lsls	r2, r2, #5
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d100      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x70>
 80028fa:	e088      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x182>
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	0152      	lsls	r2, r2, #5
 8002900:	4293      	cmp	r3, r2
 8002902:	d900      	bls.n	8002906 <HAL_TIM_ConfigClockSource+0x7a>
 8002904:	e07e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 8002906:	2b70      	cmp	r3, #112	; 0x70
 8002908:	d018      	beq.n	800293c <HAL_TIM_ConfigClockSource+0xb0>
 800290a:	d900      	bls.n	800290e <HAL_TIM_ConfigClockSource+0x82>
 800290c:	e07a      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 800290e:	2b60      	cmp	r3, #96	; 0x60
 8002910:	d04f      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x126>
 8002912:	d900      	bls.n	8002916 <HAL_TIM_ConfigClockSource+0x8a>
 8002914:	e076      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 8002916:	2b50      	cmp	r3, #80	; 0x50
 8002918:	d03b      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x106>
 800291a:	d900      	bls.n	800291e <HAL_TIM_ConfigClockSource+0x92>
 800291c:	e072      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d057      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x146>
 8002922:	d900      	bls.n	8002926 <HAL_TIM_ConfigClockSource+0x9a>
 8002924:	e06e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 8002926:	2b30      	cmp	r3, #48	; 0x30
 8002928:	d063      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x166>
 800292a:	d86b      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d060      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x166>
 8002930:	d868      	bhi.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d05d      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x166>
 8002936:	2b10      	cmp	r3, #16
 8002938:	d05b      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x166>
 800293a:	e063      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f000 fce2 	bl	8003314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2277      	movs	r2, #119	; 0x77
 800295c:	4313      	orrs	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e052      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 fccb 	bl	8003314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	01c9      	lsls	r1, r1, #7
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
      break;
 8002990:	e03e      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	001a      	movs	r2, r3
 80029a0:	f000 fc3c 	bl	800321c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2150      	movs	r1, #80	; 0x50
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 fc96 	bl	80032dc <TIM_ITRx_SetConfig>
      break;
 80029b0:	e02e      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	001a      	movs	r2, r3
 80029c0:	f000 fc5a 	bl	8003278 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2160      	movs	r1, #96	; 0x60
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fc86 	bl	80032dc <TIM_ITRx_SetConfig>
      break;
 80029d0:	e01e      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	001a      	movs	r2, r3
 80029e0:	f000 fc1c 	bl	800321c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fc76 	bl	80032dc <TIM_ITRx_SetConfig>
      break;
 80029f0:	e00e      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f000 fc6d 	bl	80032dc <TIM_ITRx_SetConfig>
      break;
 8002a02:	e005      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a04:	230f      	movs	r3, #15
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
      break;
 8002a0c:	e000      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a0e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	223d      	movs	r2, #61	; 0x3d
 8002a14:	2101      	movs	r1, #1
 8002a16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	223c      	movs	r2, #60	; 0x3c
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781b      	ldrb	r3, [r3, #0]
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	ffceff88 	.word	0xffceff88
 8002a34:	ffff00ff 	.word	0xffff00ff

08002a38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d107      	bne.n	8002a70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	223e      	movs	r2, #62	; 0x3e
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	e02a      	b.n	8002ac6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d107      	bne.n	8002a8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	223f      	movs	r2, #63	; 0x3f
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]
 8002a88:	e01d      	b.n	8002ac6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2204      	movs	r2, #4
 8002a98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	e010      	b.n	8002ac6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d107      	bne.n	8002abe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2241      	movs	r2, #65	; 0x41
 8002ab8:	2101      	movs	r1, #1
 8002aba:	5499      	strb	r1, [r3, r2]
 8002abc:	e003      	b.n	8002ac6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	223d      	movs	r2, #61	; 0x3d
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff ffb5 	bl	8002a38 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bd80      	pop	{r7, pc}

08002adc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d136      	bne.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	223e      	movs	r2, #62	; 0x3e
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	e031      	b.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d10b      	bne.n	8002b2e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d125      	bne.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	223f      	movs	r2, #63	; 0x3f
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]
 8002b2c:	e020      	b.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d10b      	bne.n	8002b50 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d114      	bne.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]
 8002b4e:	e00f      	b.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10a      	bne.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2241      	movs	r2, #65	; 0x41
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7fd fca0 	bl	80004b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d103      	bne.n	8002ba6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	771a      	strb	r2, [r3, #28]
 8002ba4:	e019      	b.n	8002bda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d103      	bne.n	8002bb8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	771a      	strb	r2, [r3, #28]
 8002bb6:	e010      	b.n	8002bda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d103      	bne.n	8002bca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	771a      	strb	r2, [r3, #28]
 8002bc8:	e007      	b.n	8002bda <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d102      	bne.n	8002bda <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fd fbdf 	bl	80003a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <TIM_Base_SetConfig+0xdc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0x20>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a31      	ldr	r2, [pc, #196]	; (8002cd0 <TIM_Base_SetConfig+0xe0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2270      	movs	r2, #112	; 0x70
 8002c14:	4393      	bics	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <TIM_Base_SetConfig+0xdc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00f      	beq.n	8002c4a <TIM_Base_SetConfig+0x5a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <TIM_Base_SetConfig+0xe0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <TIM_Base_SetConfig+0x5a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <TIM_Base_SetConfig+0xe4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_Base_SetConfig+0x5a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <TIM_Base_SetConfig+0xe8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x5a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <TIM_Base_SetConfig+0xec>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <TIM_Base_SetConfig+0xf0>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	4393      	bics	r3, r2
 8002c62:	001a      	movs	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <TIM_Base_SetConfig+0xdc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <TIM_Base_SetConfig+0xe8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <TIM_Base_SetConfig+0xec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d103      	bne.n	8002ca2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4393      	bics	r3, r2
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]
  }
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40002000 	.word	0x40002000
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014800 	.word	0x40014800
 8002ce0:	fffffcff 	.word	0xfffffcff

08002ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <TIM_OC1_SetConfig+0xe8>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <TIM_OC1_SetConfig+0xec>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <TIM_OC1_SetConfig+0x6e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <TIM_OC1_SetConfig+0xf0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_OC1_SetConfig+0x6e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <TIM_OC1_SetConfig+0xf4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2208      	movs	r2, #8
 8002d56:	4393      	bics	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2204      	movs	r2, #4
 8002d68:	4393      	bics	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <TIM_OC1_SetConfig+0xec>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_OC1_SetConfig+0xa0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <TIM_OC1_SetConfig+0xf0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_OC1_SetConfig+0xa0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <TIM_OC1_SetConfig+0xf4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d111      	bne.n	8002da8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <TIM_OC1_SetConfig+0xf8>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <TIM_OC1_SetConfig+0xfc>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	fffeff8f 	.word	0xfffeff8f
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	fffffeff 	.word	0xfffffeff
 8002de0:	fffffdff 	.word	0xfffffdff

08002de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	2210      	movs	r2, #16
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <TIM_OC2_SetConfig+0xe0>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a2b      	ldr	r2, [pc, #172]	; (8002ec8 <TIM_OC2_SetConfig+0xe4>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	4393      	bics	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <TIM_OC2_SetConfig+0xe8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10d      	bne.n	8002e62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	4393      	bics	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <TIM_OC2_SetConfig+0xe8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_OC2_SetConfig+0x96>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <TIM_OC2_SetConfig+0xec>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_OC2_SetConfig+0x96>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <TIM_OC2_SetConfig+0xf0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <TIM_OC2_SetConfig+0xf4>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <TIM_OC2_SetConfig+0xf8>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b006      	add	sp, #24
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	feff8fff 	.word	0xfeff8fff
 8002ec8:	fffffcff 	.word	0xfffffcff
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800
 8002ed8:	fffffbff 	.word	0xfffffbff
 8002edc:	fffff7ff 	.word	0xfffff7ff

08002ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <TIM_OC3_SetConfig+0xdc>)
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <TIM_OC3_SetConfig+0xe0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2203      	movs	r2, #3
 8002f14:	4393      	bics	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <TIM_OC3_SetConfig+0xe4>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <TIM_OC3_SetConfig+0xe8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10d      	bne.n	8002f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <TIM_OC3_SetConfig+0xec>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <TIM_OC3_SetConfig+0xf0>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <TIM_OC3_SetConfig+0xe8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <TIM_OC3_SetConfig+0x92>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <TIM_OC3_SetConfig+0xf4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_OC3_SetConfig+0x92>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <TIM_OC3_SetConfig+0xf8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d113      	bne.n	8002f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <TIM_OC3_SetConfig+0xfc>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <TIM_OC3_SetConfig+0x100>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	621a      	str	r2, [r3, #32]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b006      	add	sp, #24
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	fffffeff 	.word	0xfffffeff
 8002fc0:	fffeff8f 	.word	0xfffeff8f
 8002fc4:	fffffdff 	.word	0xfffffdff
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	fffff7ff 	.word	0xfffff7ff
 8002fd0:	fffffbff 	.word	0xfffffbff
 8002fd4:	40014400 	.word	0x40014400
 8002fd8:	40014800 	.word	0x40014800
 8002fdc:	ffffefff 	.word	0xffffefff
 8002fe0:	ffffdfff 	.word	0xffffdfff

08002fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <TIM_OC4_SetConfig+0xa8>)
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a20      	ldr	r2, [pc, #128]	; (8003090 <TIM_OC4_SetConfig+0xac>)
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <TIM_OC4_SetConfig+0xb0>)
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <TIM_OC4_SetConfig+0xb4>)
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	031b      	lsls	r3, r3, #12
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <TIM_OC4_SetConfig+0xb8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_OC4_SetConfig+0x70>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <TIM_OC4_SetConfig+0xbc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC4_SetConfig+0x70>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <TIM_OC4_SetConfig+0xc0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d109      	bne.n	8003068 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <TIM_OC4_SetConfig+0xc4>)
 8003058:	4013      	ands	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b006      	add	sp, #24
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	ffffefff 	.word	0xffffefff
 8003090:	feff8fff 	.word	0xfeff8fff
 8003094:	fffffcff 	.word	0xfffffcff
 8003098:	ffffdfff 	.word	0xffffdfff
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800
 80030a8:	ffffbfff 	.word	0xffffbfff

080030ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a21      	ldr	r2, [pc, #132]	; (8003148 <TIM_OC5_SetConfig+0x9c>)
 80030c2:	401a      	ands	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_OC5_SetConfig+0xa0>)
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4a19      	ldr	r2, [pc, #100]	; (8003150 <TIM_OC5_SetConfig+0xa4>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <TIM_OC5_SetConfig+0xa8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_OC5_SetConfig+0x66>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a14      	ldr	r2, [pc, #80]	; (8003158 <TIM_OC5_SetConfig+0xac>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_OC5_SetConfig+0x66>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <TIM_OC5_SetConfig+0xb0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d109      	bne.n	8003126 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <TIM_OC5_SetConfig+0x9c>)
 8003116:	4013      	ands	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fffeffff 	.word	0xfffeffff
 800314c:	fffeff8f 	.word	0xfffeff8f
 8003150:	fffdffff 	.word	0xfffdffff
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800

08003160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <TIM_OC6_SetConfig+0xa0>)
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <TIM_OC6_SetConfig+0xa4>)
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <TIM_OC6_SetConfig+0xa8>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	051b      	lsls	r3, r3, #20
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <TIM_OC6_SetConfig+0xac>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_OC6_SetConfig+0x68>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <TIM_OC6_SetConfig+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_OC6_SetConfig+0x68>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a14      	ldr	r2, [pc, #80]	; (8003214 <TIM_OC6_SetConfig+0xb4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d109      	bne.n	80031dc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4a13      	ldr	r2, [pc, #76]	; (8003218 <TIM_OC6_SetConfig+0xb8>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b006      	add	sp, #24
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	ffefffff 	.word	0xffefffff
 8003204:	feff8fff 	.word	0xfeff8fff
 8003208:	ffdfffff 	.word	0xffdfffff
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	fffbffff 	.word	0xfffbffff

0800321c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	2201      	movs	r2, #1
 8003234:	4393      	bics	r3, r2
 8003236:	001a      	movs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	22f0      	movs	r2, #240	; 0xf0
 8003246:	4393      	bics	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	220a      	movs	r2, #10
 8003258:	4393      	bics	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b006      	add	sp, #24
 8003276:	bd80      	pop	{r7, pc}

08003278 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2210      	movs	r2, #16
 8003290:	4393      	bics	r3, r2
 8003292:	001a      	movs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <TIM_TI2_ConfigInputStage+0x60>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	22a0      	movs	r2, #160	; 0xa0
 80032b4:	4393      	bics	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b006      	add	sp, #24
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	ffff0fff 	.word	0xffff0fff

080032dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <TIM_ITRx_SetConfig+0x34>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	2207      	movs	r2, #7
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	609a      	str	r2, [r3, #8]
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b004      	add	sp, #16
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	ffcfff8f 	.word	0xffcfff8f

08003314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <TIM_ETR_SetConfig+0x3c>)
 800332c:	4013      	ands	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	021a      	lsls	r2, r3, #8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	431a      	orrs	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}
 8003350:	ffff00ff 	.word	0xffff00ff

08003354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	221f      	movs	r2, #31
 8003364:	4013      	ands	r3, r2
 8003366:	2201      	movs	r2, #1
 8003368:	409a      	lsls	r2, r3
 800336a:	0013      	movs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	43d2      	mvns	r2, r2
 8003376:	401a      	ands	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	211f      	movs	r1, #31
 8003384:	400b      	ands	r3, r1
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4099      	lsls	r1, r3
 800338a:	000b      	movs	r3, r1
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b006      	add	sp, #24
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223c      	movs	r2, #60	; 0x3c
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e04a      	b.n	800344a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	223c      	movs	r2, #60	; 0x3c
 80033b8:	2101      	movs	r1, #1
 80033ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223d      	movs	r2, #61	; 0x3d
 80033c0:	2102      	movs	r1, #2
 80033c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2270      	movs	r2, #112	; 0x70
 80033f4:	4393      	bics	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10c      	bne.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	4393      	bics	r3, r2
 8003424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	223d      	movs	r2, #61	; 0x3d
 800343c:	2101      	movs	r1, #1
 800343e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223c      	movs	r2, #60	; 0x3c
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	40012c00 	.word	0x40012c00
 8003458:	ff0fffff 	.word	0xff0fffff
 800345c:	40000400 	.word	0x40000400

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	2600      	movs	r6, #0
 8003464:	4d0c      	ldr	r5, [pc, #48]	; (8003498 <__libc_init_array+0x38>)
 8003466:	4c0d      	ldr	r4, [pc, #52]	; (800349c <__libc_init_array+0x3c>)
 8003468:	1b64      	subs	r4, r4, r5
 800346a:	10a4      	asrs	r4, r4, #2
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	2600      	movs	r6, #0
 8003472:	f000 f821 	bl	80034b8 <_init>
 8003476:	4d0a      	ldr	r5, [pc, #40]	; (80034a0 <__libc_init_array+0x40>)
 8003478:	4c0a      	ldr	r4, [pc, #40]	; (80034a4 <__libc_init_array+0x44>)
 800347a:	1b64      	subs	r4, r4, r5
 800347c:	10a4      	asrs	r4, r4, #2
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	00b3      	lsls	r3, r6, #2
 8003486:	58eb      	ldr	r3, [r5, r3]
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	00b3      	lsls	r3, r6, #2
 8003490:	58eb      	ldr	r3, [r5, r3]
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	08003564 	.word	0x08003564
 800349c:	08003564 	.word	0x08003564
 80034a0:	08003564 	.word	0x08003564
 80034a4:	08003568 	.word	0x08003568

080034a8 <memset>:
 80034a8:	0003      	movs	r3, r0
 80034aa:	1882      	adds	r2, r0, r2
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <memset+0xa>
 80034b0:	4770      	bx	lr
 80034b2:	7019      	strb	r1, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	e7f9      	b.n	80034ac <memset+0x4>

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
